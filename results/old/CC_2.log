[05-02-2021_14-00-48] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Abstraction Planner for Robots                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
         This program comes with ABSOLUTELY NO WARRANTY; for details type `--warranty'. This is free software,          
           and you are welcome to redistribute it under certain conditions; type `--conditions' for details.            
                                     For help and usage instructions type `--help'.                                     
                                                                                                                        
  ####################################################################################################################  

[05-02-2021_14-00-48] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[05-02-2021_14-00-48] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Abstraction Planner for Robots                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[05-02-2021_14-00-48] DEBUG :: __main__ >> Parsing command line arguments: ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp', '-sc', '-pm=classical', '-xf', '-df', '-ir', '1', '-er', '20', '-op=False'].

[05-02-2021_14-00-48] DEBUG :: __main__ >> Parsing complete:
('domain_files', ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'])
('log_file', None)
('excel_file', './results/ASH_Excel_05-02-2021_14-00-48.xlsx')
('data_file', './results/ASH_Data_05-02-2021_14-00-48.dat')
('data_sep', ' ')
('data_end', '\n')
('silence_ash', False)
('silence_clingo', True)
('logging', 'INFO')
('threads', 8)
('time_limit', [3600])
('planning_mode', 'classical')
('enforce_conformance', True)
('optimise_plan', False)
('step_max', [0])
('step_inc', [1])
('step_inc_init', [2])
('partial_planning_length', [])
('experimental_runs', 20)
('initial_runs', 1)
('warranty', False)
('conditions', False)

[05-02-2021_14-00-48] DEBUG :: planner.ASH >> Instantiating new planning domain: Name = None, Domain files = ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'].

[05-02-2021_14-00-48] DEBUG :: planner.ASH >> The domain files ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'] were loaded successfully, contain all required program parts, and contain optional program parts: {'entities': True, 'static_state': True, 'initial_state': True, 'goal_state': True}.

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Anon #1 >> Instantiated.

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Anon #1 >> Entering standard solve call:
Solver options = --outf=3, --warn=none, -t, 1, -c, plan_at=0
Program parts = #program instance_module()., #program domain_sorts().

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Anon #1 >> Program building started.

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Anon #1 >> Program building completed.

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Anon #1 >> Grounding started.

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Anon #1 >> Grounding completed in 0.006035s.

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Anon #1 >> Solving started.

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Anon #1 >> Model found:
Model :: Total atoms = 69, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Anon #1 >> Solving completed in 0.000203s.

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Anon #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.006035s, Solving time = 0.000203s, Total time = 0.006238s
Final Model :: Total atoms = 69, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[05-02-2021_14-00-48] DEBUG :: planner.ASH >> Planning Domain Anon #1 : Abstraction range = [1-3] instantiated successfully

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program ASH #1 >> Instantiated.

[05-02-2021_14-00-48] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program instance_module.
al((1..abstraction_max)).
#const plan_at = 1.
pl(AL) :- AL=plan_at; al(AL).
sl(AL) :- AL>=plan_at; AL<=(plan_at+1); al(AL).
sl(AL) :- plan_at<1; al(AL).
(boolean(true);boolean(false)).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1>=AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1!=DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step).
#show is/2.
#show holds/4.
{ holds(AL,F,V,step) :  } :- fluent(AL,inertial,F,V); AL>=plan_at; sl(AL); step=0.
#false :- not 1 = { holds(AL,F,V,step) : fluent(AL,_,F,V) }; fluent(AL,_,F,_); AL>=plan_at; sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); AL>=plan_at; sl(AL); step>0.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); AL>=plan_at; sl(AL).
#program plan_module(step,start).
#show occurs/4.
#show sub_goal/6.
{ occurs(AL,ROBOT,A,step) : action(AL,ROBOT,A) } :- incomplete_plan((step-1)); AL=plan_at; step>start.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1!=A_2; action(AL,ROBOT,A_1); action(AL,ROBOT,A_2); AL=plan_at; step>start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; step>start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; step>start.
:~ occurs(AL,step); incomplete_plan((step-1)); AL=plan_at; step>start. [1@3,step]
:~ occurs(AL,ROBOT,A,step); action(AL,ROBOT,A); incomplete_plan((step-1)); AL=plan_at; step>start. [1@2,ROBOT,A,step]
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,ROBOT,A); AL=plan_at; step>start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); AL=plan_at; step>start.
goal_satisfied(AL,F,V,true,step) :- goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); AL=plan_at.
goal_satisfied(AL,F,V,false,step) :- goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); AL=plan_at.
incomplete_plan(step) :- goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); AL=plan_at; boolean(B).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; AL!=1; step>start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; AL!=1; step>start.
#program check(step).
#external query(step). [false]
#false :- incomplete_plan(step); query(step).
#program conformance_module(step).
#show current_sub_goal/7.
current_sub_goal((AL+1),ROBOT,A,F,V,1,0) :- sub_goal((AL+1),ROBOT,A,F,V,1); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); holds((AL+1),F,V,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
incomplete_sub_goals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,(step-1)); sub_goal((AL+1),ROBOT,A,F,V,I_SG); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); incomplete_sub_goals((AL+1),I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); AL=plan_at.
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
#program goal_abstraction_module.
#show holds/4.
#show goal/4.
holds(AL,F,V,0) :- goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
not holds(AL,F,V,0) :- goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) :  } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); AL>=plan_at; al(AL).
#false :- not 1 = { holds(AL,F,V,0) : fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); AL>=plan_at; al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); AL>=plan_at; al(AL).
#program domain_sorts.
#const abstraction_max = 3.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
class(3,robot).
class(3,armed_robot).
class(3,location).
class(3,room).
class(3,object).
class(3,grounded).
class(3,graspable).
class(3,placeable).
class(3,block).
class(3,surface).
class(3,table).
class(3,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL<reduc; al(AL).
state(AL,extensible,retracted) :- AL<reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL,manipulator_end); AL<reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL<reduc; al(AL).
state(AL,door,open) :- AL<reduc; al(AL).
state(AL,door,closed) :- AL<reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL<reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL<reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ!=nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ!=SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); AL_1<redef; AL_2<redef; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1<reduc; AL_2<reduc; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1<reduc; AL_2<reduc; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL,defined,tower_base(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,complete(COLOUR),B) :- insta_of(AL,colour,COLOUR); sl(AL); boolean(B).
action(AL,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; sl(AL).
action(AL,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; sl(AL).
action(AL,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL<reduc; sl(AL).
action(AL,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ!=SURFACE; SURFACE!=nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); sl(AL).
action(AL,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); sl(AL).
action(AL,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL<reduc; sl(AL).
#program domain_rules(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL<reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL<reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL<reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ!=SURFACE; SURFACE!=nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1!=STATE_2; AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L_2),t) :- holds(AL,in(ROBO),L_1,(t-1)); not is(AL,connected(L_1,L_2)); L_1!=L_2; action(AL,ROBO,move(L_2)); fluent(AL,inertial,in(ROBO),L_1); static(AL,connected(L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L_2),t) :- holds(AL,configuration(D),closed,(t-1)); holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1!=L_2; action(AL,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL<reduc; pl(AL).
not occurs(AL,ROBO,actuate(DESC,D),t) :- not 1 = { holds(AL,grasping(DESC),H,(t-1)) : desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,ROBO,actuate(DESC,D)), fluent(AL,inertial,grasping(DESC),H) }; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,in(ROBO),L,(t-1)); is(AL,in(OBJ,L)); action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L),t) :- holds(AL,configuration(DESC),extended,(t-1)); action(AL,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,in(ROBO),L,(t-1)); holds(AL,in(OBJ),L,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,grasping(DESC),nothing,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ_1),t) :- holds(AL,on(OBJ_2),OBJ_1,(t-1)); OBJ_1!=OBJ_2; OBJ_1!=nothing; action(AL,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- holds(AL,configuration(DESC),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC_1,OBJ),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(END,OBJ),t) :- not holds(AL,configuration(END),aligned_with(OBJ),(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL<reduc; pl(AL).
not occurs(AL,ROBO,release(DESC,OBJ),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,release(DESC,OBJ),t) :- holds(AL,configuration(DESC),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t>0.
not occurs(AL,ROBO,release(DESC_1,OBJ),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,configure(DESC_1,STATE),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); action(AL,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL<reduc; pl(AL).
not occurs(AL,ROBO,configure(DESC,aligned_with(OBJ)),t) :- not holds(AL,grasping(DESC),nothing,(t-1)); action(AL,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; state_of(AL,DESC,aligned_with(OBJ)); AL<reduc; pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- not holds(AL,in(ROBO),L,(t-1)); holds(AL,in(SURFACE),L,(t-1)); action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ_1,BLOCK),t) :- holds(AL,on(OBJ_2),BLOCK,(t-1)); OBJ_1!=OBJ_2; action(AL,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=SURFACE; OBJ!=nothing; SURFACE!=nothing; action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
not occurs(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),t) :- holds(AL,grasping(DESC_2),OBJ_2,(t-1)); OBJ_1!=OBJ_2; DESC_1!=DESC_2; action(AL,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- holds(AL,configuration(DESC),retracted,(t-1)); action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL<reduc; pl(AL).
not occurs(AL,ROBO,put(DESC_1,OBJ,SURFACE),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); action(AL,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL<reduc; pl(AL).
not occurs(AL,ROBO,lift(DESC,OBJ_1),t) :- holds(AL,on(OBJ_2),OBJ_1,(t-1)); OBJ_1!=OBJ_2; action(AL,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
not occurs(AL,ROBO,lift(DESC,OBJ),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=SURFACE; action(AL,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,surface,SURFACE); pl(AL).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t) : not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)) : insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t) : not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)) : insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ!=nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1!=nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1!=BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,surface,SURFACE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE),true); insta_of(AL,block,BASE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1!=BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1=(block,N_1); number(N_1); BLOCK_2=(block,N_2); number(N_2); BLOCK_1!=BLOCK_2; N_1>N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); sl(AL).
holds(AL,complete(COLOUR),true,t) :- N = #count { BLOCK : holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; N = #count { BLOCK : is(AL,colour_of(BLOCK,COLOUR)), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; holds(AL,unordered_tower(BASE),false,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,tower_base(BASE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); sl(AL).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1!=L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1!=L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1!=L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1>=AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_2; sl(AL_4); AL_4>=AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ!=nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_3; sl(AL_5); AL_5>=AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_2; sl(AL_5); AL_5>=AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1>=AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,connected_by_door(store_room_door,(store_room,1),(hallway,0))).
is(1,connected_by_door(puzzle_room_door,(hallway,2),(puzzle_room,0))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N<=3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N>3; N<=6; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2=(X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); sl(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,on((block,4)),(block,2),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
#program goal_state.
goal_fluent(AL,complete(COLOUR)) :- insta_of(AL,colour,COLOUR); al(AL).
goal_fluent(AL,on((block,3))) :- al(AL).
goal_fluent(AL,on((block,6))) :- al(AL).
goal(AL,complete(COLOUR),true,true) :- insta_of(AL,colour,COLOUR); al(AL).
goal(1,on((block,3)),puzzle_room_table_left,true).
goal(1,on((block,6)),puzzle_room_table_right,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
number((1..6)).
entity(block,(block,N)) :- number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X<MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., ASH #1)

[05-02-2021_14-00-48] INFO :: ASH Planner Main #1 >> Generating initial state.

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Instantiated.

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Entering standard solve call:
Solver options = -c, plan_at=0, --models=2, --parallel-mode=8,compete, --outf=3, --warn=none
Program parts = ('entities', []), ('static_state', []), ('initial_state', []), ('instance_module', []), ('state_module', [0]), ('domain_sorts', []), ('domain_rules', [0])

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Program building started.

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Program building completed.

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Grounding started.

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Grounding completed in 0.095936s.

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Solving started.

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Model found:
Model :: Total atoms = 2730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Solving completed in 0.014838s.

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED : Total models = 1
Statistics :: Grounding time = 0.095936s, Solving time = 0.014838s, Total time = 0.110774s
Final Model :: Total atoms = 2730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_14-00-48] INFO :: ASH Planner Main #1 >> Initial state generated successfully:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED
Statistics :: Grounding time = 0.095936s, Solving time = 0.014838s, Total time = 0.110774s
Model :: Total atoms = 2730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_14-00-48] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 3            
          ========================================          

holds(3,complete(blue),false,0)
holds(3,complete(red),false,0)
holds(3,grasping(manipulator_arm_1),nothing,0)
holds(3,grasping(manipulator_arm_2),nothing,0)
holds(3,in(manipulator_arm_1),starting_room,0)
holds(3,in(manipulator_arm_2),starting_room,0)
holds(3,in(puzzle_room_table),puzzle_room,0)
holds(3,in(talos),starting_room,0)
holds(3,in((block,1)),puzzle_room,0)
holds(3,in((block,2)),puzzle_room,0)
holds(3,in((block,3)),puzzle_room,0)
holds(3,in((block,4)),puzzle_room,0)
holds(3,in((block,5)),store_room,0)
holds(3,in((block,6)),store_room,0)
holds(3,on((block,1)),puzzle_room_table,0)
holds(3,on((block,2)),puzzle_room_table,0)
holds(3,on((block,3)),(block,1),0)
holds(3,on((block,4)),(block,2),0)
holds(3,on((block,5)),nothing,0)
holds(3,on((block,6)),nothing,0)
holds(3,tower_base((block,1)),true,0)
holds(3,tower_base((block,2)),true,0)
holds(3,tower_base((block,3)),false,0)
holds(3,tower_base((block,4)),false,0)
holds(3,tower_base((block,5)),false,0)
holds(3,tower_base((block,6)),false,0)
holds(3,unordered_tower((block,1)),true,0)
holds(3,unordered_tower((block,2)),true,0)
holds(3,unordered_tower((block,3)),false,0)
holds(3,unordered_tower((block,4)),false,0)
holds(3,unordered_tower((block,5)),false,0)
holds(3,unordered_tower((block,6)),false,0)
holds(3,in_tower((block,1),(block,1)),true,0)
holds(3,in_tower((block,1),(block,2)),false,0)
holds(3,in_tower((block,1),(block,3)),true,0)
holds(3,in_tower((block,1),(block,4)),false,0)
holds(3,in_tower((block,1),(block,5)),false,0)
holds(3,in_tower((block,1),(block,6)),false,0)
holds(3,in_tower((block,2),(block,1)),false,0)
holds(3,in_tower((block,2),(block,2)),true,0)
holds(3,in_tower((block,2),(block,3)),false,0)
holds(3,in_tower((block,2),(block,4)),true,0)
holds(3,in_tower((block,2),(block,5)),false,0)
holds(3,in_tower((block,2),(block,6)),false,0)
holds(3,in_tower((block,3),(block,1)),false,0)
holds(3,in_tower((block,3),(block,2)),false,0)
holds(3,in_tower((block,3),(block,3)),false,0)
holds(3,in_tower((block,3),(block,4)),false,0)
holds(3,in_tower((block,3),(block,5)),false,0)
holds(3,in_tower((block,3),(block,6)),false,0)
holds(3,in_tower((block,4),(block,1)),false,0)
holds(3,in_tower((block,4),(block,2)),false,0)
holds(3,in_tower((block,4),(block,3)),false,0)
holds(3,in_tower((block,4),(block,4)),false,0)
holds(3,in_tower((block,4),(block,5)),false,0)
holds(3,in_tower((block,4),(block,6)),false,0)
holds(3,in_tower((block,5),(block,1)),false,0)
holds(3,in_tower((block,5),(block,2)),false,0)
holds(3,in_tower((block,5),(block,3)),false,0)
holds(3,in_tower((block,5),(block,4)),false,0)
holds(3,in_tower((block,5),(block,5)),false,0)
holds(3,in_tower((block,5),(block,6)),false,0)
holds(3,in_tower((block,6),(block,1)),false,0)
holds(3,in_tower((block,6),(block,2)),false,0)
holds(3,in_tower((block,6),(block,3)),false,0)
holds(3,in_tower((block,6),(block,4)),false,0)
holds(3,in_tower((block,6),(block,5)),false,0)
holds(3,in_tower((block,6),(block,6)),false,0)

[05-02-2021_14-00-48] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 2            
          ========================================          

holds(2,complete(blue),false,0)
holds(2,complete(red),false,0)
holds(2,configuration(manipulator_arm_1),retracted,0)
holds(2,configuration(manipulator_arm_2),retracted,0)
holds(2,configuration(puzzle_room_door),closed,0)
holds(2,configuration(starting_room_door),closed,0)
holds(2,configuration(store_room_door),closed,0)
holds(2,grasping(manipulator_arm_1),nothing,0)
holds(2,grasping(manipulator_arm_2),nothing,0)
holds(2,in(manipulator_arm_1),starting_room,0)
holds(2,in(manipulator_arm_2),starting_room,0)
holds(2,in(puzzle_room_table),puzzle_room,0)
holds(2,in(talos),starting_room,0)
holds(2,in((block,1)),puzzle_room,0)
holds(2,in((block,2)),puzzle_room,0)
holds(2,in((block,3)),puzzle_room,0)
holds(2,in((block,4)),puzzle_room,0)
holds(2,in((block,5)),store_room,0)
holds(2,in((block,6)),store_room,0)
holds(2,on((block,1)),puzzle_room_table,0)
holds(2,on((block,2)),puzzle_room_table,0)
holds(2,on((block,3)),(block,1),0)
holds(2,on((block,4)),(block,2),0)
holds(2,on((block,5)),nothing,0)
holds(2,on((block,6)),nothing,0)
holds(2,tower_base((block,1)),true,0)
holds(2,tower_base((block,2)),true,0)
holds(2,tower_base((block,3)),false,0)
holds(2,tower_base((block,4)),false,0)
holds(2,tower_base((block,5)),false,0)
holds(2,tower_base((block,6)),false,0)
holds(2,unordered_tower((block,1)),true,0)
holds(2,unordered_tower((block,2)),true,0)
holds(2,unordered_tower((block,3)),false,0)
holds(2,unordered_tower((block,4)),false,0)
holds(2,unordered_tower((block,5)),false,0)
holds(2,unordered_tower((block,6)),false,0)
holds(2,in_tower((block,1),(block,1)),true,0)
holds(2,in_tower((block,1),(block,2)),false,0)
holds(2,in_tower((block,1),(block,3)),true,0)
holds(2,in_tower((block,1),(block,4)),false,0)
holds(2,in_tower((block,1),(block,5)),false,0)
holds(2,in_tower((block,1),(block,6)),false,0)
holds(2,in_tower((block,2),(block,1)),false,0)
holds(2,in_tower((block,2),(block,2)),true,0)
holds(2,in_tower((block,2),(block,3)),false,0)
holds(2,in_tower((block,2),(block,4)),true,0)
holds(2,in_tower((block,2),(block,5)),false,0)
holds(2,in_tower((block,2),(block,6)),false,0)
holds(2,in_tower((block,3),(block,1)),false,0)
holds(2,in_tower((block,3),(block,2)),false,0)
holds(2,in_tower((block,3),(block,3)),false,0)
holds(2,in_tower((block,3),(block,4)),false,0)
holds(2,in_tower((block,3),(block,5)),false,0)
holds(2,in_tower((block,3),(block,6)),false,0)
holds(2,in_tower((block,4),(block,1)),false,0)
holds(2,in_tower((block,4),(block,2)),false,0)
holds(2,in_tower((block,4),(block,3)),false,0)
holds(2,in_tower((block,4),(block,4)),false,0)
holds(2,in_tower((block,4),(block,5)),false,0)
holds(2,in_tower((block,4),(block,6)),false,0)
holds(2,in_tower((block,5),(block,1)),false,0)
holds(2,in_tower((block,5),(block,2)),false,0)
holds(2,in_tower((block,5),(block,3)),false,0)
holds(2,in_tower((block,5),(block,4)),false,0)
holds(2,in_tower((block,5),(block,5)),false,0)
holds(2,in_tower((block,5),(block,6)),false,0)
holds(2,in_tower((block,6),(block,1)),false,0)
holds(2,in_tower((block,6),(block,2)),false,0)
holds(2,in_tower((block,6),(block,3)),false,0)
holds(2,in_tower((block,6),(block,4)),false,0)
holds(2,in_tower((block,6),(block,5)),false,0)
holds(2,in_tower((block,6),(block,6)),false,0)

[05-02-2021_14-00-48] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 1            
          ========================================          

holds(1,complete(blue),false,0)
holds(1,complete(red),false,0)
holds(1,configuration(manipulator_end_1),aligned_with(nothing),0)
holds(1,configuration(manipulator_end_2),aligned_with(nothing),0)
holds(1,configuration(manipulator_limb_1),retracted,0)
holds(1,configuration(manipulator_limb_2),retracted,0)
holds(1,configuration(puzzle_room_door),closed,0)
holds(1,configuration(starting_room_door),closed,0)
holds(1,configuration(store_room_door),closed,0)
holds(1,grasping(manipulator_arm_1),nothing,0)
holds(1,grasping(manipulator_arm_2),nothing,0)
holds(1,grasping(manipulator_end_1),nothing,0)
holds(1,grasping(manipulator_end_2),nothing,0)
holds(1,in(manipulator_arm_1),(starting_room,0),0)
holds(1,in(manipulator_arm_2),(starting_room,0),0)
holds(1,in(manipulator_end_1),(starting_room,0),0)
holds(1,in(manipulator_end_2),(starting_room,0),0)
holds(1,in(manipulator_limb_1),(starting_room,0),0)
holds(1,in(manipulator_limb_2),(starting_room,0),0)
holds(1,in(puzzle_room_table),(puzzle_room,1),0)
holds(1,in(puzzle_room_table_left),(puzzle_room,1),0)
holds(1,in(puzzle_room_table_right),(puzzle_room,1),0)
holds(1,in(talos),(starting_room,0),0)
holds(1,in((block,1)),(puzzle_room,1),0)
holds(1,in((block,2)),(puzzle_room,1),0)
holds(1,in((block,3)),(puzzle_room,1),0)
holds(1,in((block,4)),(puzzle_room,1),0)
holds(1,in((block,5)),(store_room,0),0)
holds(1,in((block,6)),(store_room,0),0)
holds(1,on((block,1)),puzzle_room_table_left,0)
holds(1,on((block,2)),puzzle_room_table_right,0)
holds(1,on((block,3)),(block,1),0)
holds(1,on((block,4)),(block,2),0)
holds(1,on((block,5)),nothing,0)
holds(1,on((block,6)),nothing,0)
holds(1,tower_base((block,1)),true,0)
holds(1,tower_base((block,2)),true,0)
holds(1,tower_base((block,3)),false,0)
holds(1,tower_base((block,4)),false,0)
holds(1,tower_base((block,5)),false,0)
holds(1,tower_base((block,6)),false,0)
holds(1,unordered_tower((block,1)),true,0)
holds(1,unordered_tower((block,2)),true,0)
holds(1,unordered_tower((block,3)),false,0)
holds(1,unordered_tower((block,4)),false,0)
holds(1,unordered_tower((block,5)),false,0)
holds(1,unordered_tower((block,6)),false,0)
holds(1,in_tower((block,1),(block,1)),true,0)
holds(1,in_tower((block,1),(block,2)),false,0)
holds(1,in_tower((block,1),(block,3)),true,0)
holds(1,in_tower((block,1),(block,4)),false,0)
holds(1,in_tower((block,1),(block,5)),false,0)
holds(1,in_tower((block,1),(block,6)),false,0)
holds(1,in_tower((block,2),(block,1)),false,0)
holds(1,in_tower((block,2),(block,2)),true,0)
holds(1,in_tower((block,2),(block,3)),false,0)
holds(1,in_tower((block,2),(block,4)),true,0)
holds(1,in_tower((block,2),(block,5)),false,0)
holds(1,in_tower((block,2),(block,6)),false,0)
holds(1,in_tower((block,3),(block,1)),false,0)
holds(1,in_tower((block,3),(block,2)),false,0)
holds(1,in_tower((block,3),(block,3)),false,0)
holds(1,in_tower((block,3),(block,4)),false,0)
holds(1,in_tower((block,3),(block,5)),false,0)
holds(1,in_tower((block,3),(block,6)),false,0)
holds(1,in_tower((block,4),(block,1)),false,0)
holds(1,in_tower((block,4),(block,2)),false,0)
holds(1,in_tower((block,4),(block,3)),false,0)
holds(1,in_tower((block,4),(block,4)),false,0)
holds(1,in_tower((block,4),(block,5)),false,0)
holds(1,in_tower((block,4),(block,6)),false,0)
holds(1,in_tower((block,5),(block,1)),false,0)
holds(1,in_tower((block,5),(block,2)),false,0)
holds(1,in_tower((block,5),(block,3)),false,0)
holds(1,in_tower((block,5),(block,4)),false,0)
holds(1,in_tower((block,5),(block,5)),false,0)
holds(1,in_tower((block,5),(block,6)),false,0)
holds(1,in_tower((block,6),(block,1)),false,0)
holds(1,in_tower((block,6),(block,2)),false,0)
holds(1,in_tower((block,6),(block,3)),false,0)
holds(1,in_tower((block,6),(block,4)),false,0)
holds(1,in_tower((block,6),(block,5)),false,0)
holds(1,in_tower((block,6),(block,6)),false,0)

[05-02-2021_14-00-48] INFO :: ASH Planner Main #1 >> Generating goal state.

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Instantiated.

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Entering standard solve call:
Solver options = -c, plan_at=0, --models=2, --parallel-mode=8,compete, --outf=3, --warn=none
Program parts = ('entities', []), ('static_state', []), ('goal_state', []), ('instance_module', []), ('goal_abstraction_module', []), ('domain_sorts', []), ('domain_rules', [0])

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Program building started.

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Program building completed.

[05-02-2021_14-00-48] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Grounding started.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Grounding completed in 0.035286s.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Solving started.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Model found:
Model :: Total atoms = 2598, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Solving completed in 0.004565s.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED : Total models = 1
Statistics :: Grounding time = 0.035286s, Solving time = 0.004565s, Total time = 0.039852s
Final Model :: Total atoms = 2598, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_14-00-49] INFO :: ASH Planner Main #1 >> Goal state generated successfully:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED
Statistics :: Grounding time = 0.035286s, Solving time = 0.004565s, Total time = 0.039852s
Model :: Total atoms = 2598, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_14-00-49] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 3              
          ========================================          

goal(3,complete(blue),false,false)
goal(3,complete(blue),true,true)
goal(3,complete(red),false,false)
goal(3,complete(red),true,true)
goal(3,on((block,3)),nothing,false)
goal(3,on((block,3)),puzzle_room_table,true)
goal(3,on((block,3)),(block,1),false)
goal(3,on((block,3)),(block,2),false)
goal(3,on((block,3)),(block,4),false)
goal(3,on((block,3)),(block,5),false)
goal(3,on((block,3)),(block,6),false)
goal(3,on((block,6)),nothing,false)
goal(3,on((block,6)),puzzle_room_table,true)
goal(3,on((block,6)),(block,1),false)
goal(3,on((block,6)),(block,2),false)
goal(3,on((block,6)),(block,3),false)
goal(3,on((block,6)),(block,4),false)
goal(3,on((block,6)),(block,5),false)

[05-02-2021_14-00-49] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 2              
          ========================================          

goal(2,complete(blue),false,false)
goal(2,complete(blue),true,true)
goal(2,complete(red),false,false)
goal(2,complete(red),true,true)
goal(2,on((block,3)),nothing,false)
goal(2,on((block,3)),puzzle_room_table,true)
goal(2,on((block,3)),(block,1),false)
goal(2,on((block,3)),(block,2),false)
goal(2,on((block,3)),(block,4),false)
goal(2,on((block,3)),(block,5),false)
goal(2,on((block,3)),(block,6),false)
goal(2,on((block,6)),nothing,false)
goal(2,on((block,6)),puzzle_room_table,true)
goal(2,on((block,6)),(block,1),false)
goal(2,on((block,6)),(block,2),false)
goal(2,on((block,6)),(block,3),false)
goal(2,on((block,6)),(block,4),false)
goal(2,on((block,6)),(block,5),false)

[05-02-2021_14-00-49] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 1              
          ========================================          

goal(1,complete(blue),false,false)
goal(1,complete(blue),true,true)
goal(1,complete(red),false,false)
goal(1,complete(red),true,true)
goal(1,on((block,3)),nothing,false)
goal(1,on((block,3)),puzzle_room_table_left,true)
goal(1,on((block,3)),puzzle_room_table_right,false)
goal(1,on((block,3)),(block,1),false)
goal(1,on((block,3)),(block,2),false)
goal(1,on((block,3)),(block,4),false)
goal(1,on((block,3)),(block,5),false)
goal(1,on((block,3)),(block,6),false)
goal(1,on((block,6)),nothing,false)
goal(1,on((block,6)),puzzle_room_table_left,false)
goal(1,on((block,6)),puzzle_room_table_right,true)
goal(1,on((block,6)),(block,1),false)
goal(1,on((block,6)),(block,2),false)
goal(1,on((block,6)),(block,3),false)
goal(1,on((block,6)),(block,4),false)
goal(1,on((block,6)),(block,5),false)

[05-02-2021_14-00-49] INFO :: Experiment >> 

  ################################################################################################  
                  Running experiments : Initial runs = 1 : Experimental runs = 20                   
  ################################################################################################  

[05-02-2021_14-00-49] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-00-49] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Instantiated.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Program building started.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Program building completed.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding base program parts.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.015528s.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving base program parts.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.002952s.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental solving started.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.190515s.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.008838s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.062574s.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.005971s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.067365s.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.007470s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.069482s.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.011608s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.086327s.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.017403s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.094028s.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.020825s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.086275s.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.015372s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-00-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.079903s.

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.017254s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.087193s.

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.017849s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.109788s.

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.023930s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.083138s.

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.021276s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.082767s.

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.026410s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.082060s.

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.023922s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.089758s.

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.027555s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.090513s.

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.069835s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-00-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.127238s.

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.051111s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.089894s.

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.060781s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.099053s.

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.085108s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.094039s.

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.076946s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.089415s.

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.109646s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.087815s.

[05-02-2021_14-00-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.132830s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-00-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-00-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.089054s.

[05-02-2021_14-00-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.206067s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-00-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-00-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.130586s.

[05-02-2021_14-00-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.354905s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-00-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-00-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.105618s.

[05-02-2021_14-00-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.354579s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-00-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-00-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.099430s.

[05-02-2021_14-00-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.475466s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-00-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-00-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.106496s.

[05-02-2021_14-00-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.221059s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-00-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-00-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.112822s.

[05-02-2021_14-00-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.282119s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-00-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-00-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.115342s.

[05-02-2021_14-00-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.434425s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-00-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-00-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.122935s.

[05-02-2021_14-00-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.608270s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-00-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-00-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.156347s.

[05-02-2021_14-00-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.913503s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-00-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-00-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.133342s.

[05-02-2021_14-00-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.882826s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-00-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-00-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.127220s.

[05-02-2021_14-00-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-00-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 1.066699s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-00-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-00-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-00-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.120439s.

[05-02-2021_14-00-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-01-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 1.378554s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-01-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-01-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-01-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.117003s.

[05-02-2021_14-01-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-01-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 1.274460s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-01-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-01-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-01-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.112626s.

[05-02-2021_14-01-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 1.599619s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.115774s.

[05-02-2021_14-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-01-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 2.854581s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-01-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-01-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-01-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.119993s.

[05-02-2021_14-01-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-01-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 3.621354s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-01-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-01-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-01-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.117022s.

[05-02-2021_14-01-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-01-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 3.807226s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-01-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-01-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-01-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.121071s.

[05-02-2021_14-01-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-01-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 5.582694s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-01-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-01-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-01-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.121388s.

[05-02-2021_14-01-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-01-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 5.628898s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-01-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-01-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-01-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.406748s.

[05-02-2021_14-01-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-01-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 5.979486s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-01-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-01-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-01-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.453117s.

[05-02-2021_14-01-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-01-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 5.785047s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-01-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-01-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-01-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.480327s.

[05-02-2021_14-01-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-01-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 4.237628s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-01-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-01-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-01-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.572425s.

[05-02-2021_14-01-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-01-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 5.206307s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-01-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-01-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-01-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.639017s.

[05-02-2021_14-01-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-01-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 4.949634s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-01-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-01-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-01-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.510577s.

[05-02-2021_14-01-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-02-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 6.998816s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-02-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-02-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-02-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.463369s.

[05-02-2021_14-02-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-02-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 5.185973s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-02-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-02-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-02-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.442173s.

[05-02-2021_14-02-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-02-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 5.155089s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-02-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-02-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-02-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.408368s.

[05-02-2021_14-02-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-02-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 7.446664s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-02-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-02-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-02-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.503748s.

[05-02-2021_14-02-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-02-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 10.067284s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-02-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-02-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-02-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.449219s.

[05-02-2021_14-02-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-02-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 9.512391s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-02-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-02-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-02-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.542600s.

[05-02-2021_14-02-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-02-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 12.624736s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-02-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-02-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-02-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.459751s.

[05-02-2021_14-02-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_14-03-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Model found:
Model :: Total atoms = 12260, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[05-02-2021_14-03-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 11.429618s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-03-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental solving completed in 138.758652s because STOP_CON_REACHED.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 10.540614s, Solving time = 126.960866s, Total time = 138.758652s
Final Model :: Total atoms = 12260, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.190515s, Solving time = 0.008838s, Total time = 0.199353s
2 : Statistics :: Grounding time = 0.062574s, Solving time = 0.005971s, Total time = 0.068545s
3 : Statistics :: Grounding time = 0.067365s, Solving time = 0.007470s, Total time = 0.074835s
4 : Statistics :: Grounding time = 0.069482s, Solving time = 0.011608s, Total time = 0.081090s
5 : Statistics :: Grounding time = 0.086327s, Solving time = 0.017403s, Total time = 0.103730s
6 : Statistics :: Grounding time = 0.094028s, Solving time = 0.020825s, Total time = 0.114853s
7 : Statistics :: Grounding time = 0.086275s, Solving time = 0.015372s, Total time = 0.101647s
8 : Statistics :: Grounding time = 0.079903s, Solving time = 0.017254s, Total time = 0.097157s
9 : Statistics :: Grounding time = 0.087193s, Solving time = 0.017849s, Total time = 0.105041s
10 : Statistics :: Grounding time = 0.109788s, Solving time = 0.023930s, Total time = 0.133718s
11 : Statistics :: Grounding time = 0.083138s, Solving time = 0.021276s, Total time = 0.104414s
12 : Statistics :: Grounding time = 0.082767s, Solving time = 0.026410s, Total time = 0.109177s
13 : Statistics :: Grounding time = 0.082060s, Solving time = 0.023922s, Total time = 0.105981s
14 : Statistics :: Grounding time = 0.089758s, Solving time = 0.027555s, Total time = 0.117313s
15 : Statistics :: Grounding time = 0.090513s, Solving time = 0.069835s, Total time = 0.160349s
16 : Statistics :: Grounding time = 0.127238s, Solving time = 0.051111s, Total time = 0.178349s
17 : Statistics :: Grounding time = 0.089894s, Solving time = 0.060781s, Total time = 0.150675s
18 : Statistics :: Grounding time = 0.099053s, Solving time = 0.085108s, Total time = 0.184161s
19 : Statistics :: Grounding time = 0.094039s, Solving time = 0.076946s, Total time = 0.170985s
20 : Statistics :: Grounding time = 0.089415s, Solving time = 0.109646s, Total time = 0.199061s
21 : Statistics :: Grounding time = 0.087815s, Solving time = 0.132830s, Total time = 0.220645s
22 : Statistics :: Grounding time = 0.089054s, Solving time = 0.206067s, Total time = 0.295121s
23 : Statistics :: Grounding time = 0.130586s, Solving time = 0.354905s, Total time = 0.485491s
24 : Statistics :: Grounding time = 0.105618s, Solving time = 0.354579s, Total time = 0.460197s
25 : Statistics :: Grounding time = 0.099430s, Solving time = 0.475466s, Total time = 0.574895s
26 : Statistics :: Grounding time = 0.106496s, Solving time = 0.221059s, Total time = 0.327556s
27 : Statistics :: Grounding time = 0.112822s, Solving time = 0.282119s, Total time = 0.394941s
28 : Statistics :: Grounding time = 0.115342s, Solving time = 0.434425s, Total time = 0.549767s
29 : Statistics :: Grounding time = 0.122935s, Solving time = 0.608270s, Total time = 0.731205s
30 : Statistics :: Grounding time = 0.156347s, Solving time = 0.913503s, Total time = 1.069850s
31 : Statistics :: Grounding time = 0.133342s, Solving time = 0.882826s, Total time = 1.016168s
32 : Statistics :: Grounding time = 0.127220s, Solving time = 1.066699s, Total time = 1.193919s
33 : Statistics :: Grounding time = 0.120439s, Solving time = 1.378554s, Total time = 1.498993s
34 : Statistics :: Grounding time = 0.117003s, Solving time = 1.274460s, Total time = 1.391463s
35 : Statistics :: Grounding time = 0.112626s, Solving time = 1.599619s, Total time = 1.712245s
36 : Statistics :: Grounding time = 0.115774s, Solving time = 2.854581s, Total time = 2.970355s
37 : Statistics :: Grounding time = 0.119993s, Solving time = 3.621354s, Total time = 3.741347s
38 : Statistics :: Grounding time = 0.117022s, Solving time = 3.807226s, Total time = 3.924248s
39 : Statistics :: Grounding time = 0.121071s, Solving time = 5.582694s, Total time = 5.703765s
40 : Statistics :: Grounding time = 0.121388s, Solving time = 5.628898s, Total time = 5.750286s
41 : Statistics :: Grounding time = 0.406748s, Solving time = 5.979486s, Total time = 6.386234s
42 : Statistics :: Grounding time = 0.453117s, Solving time = 5.785047s, Total time = 6.238163s
43 : Statistics :: Grounding time = 0.480327s, Solving time = 4.237628s, Total time = 4.717955s
44 : Statistics :: Grounding time = 0.572425s, Solving time = 5.206307s, Total time = 5.778731s
45 : Statistics :: Grounding time = 0.639017s, Solving time = 4.949634s, Total time = 5.588651s
46 : Statistics :: Grounding time = 0.510577s, Solving time = 6.998816s, Total time = 7.509393s
47 : Statistics :: Grounding time = 0.463369s, Solving time = 5.185973s, Total time = 5.649342s
48 : Statistics :: Grounding time = 0.442173s, Solving time = 5.155089s, Total time = 5.597262s
49 : Statistics :: Grounding time = 0.408368s, Solving time = 7.446664s, Total time = 7.855032s
50 : Statistics :: Grounding time = 0.503748s, Solving time = 10.067284s, Total time = 10.571031s
51 : Statistics :: Grounding time = 0.449219s, Solving time = 9.512391s, Total time = 9.961610s
52 : Statistics :: Grounding time = 0.542600s, Solving time = 12.624736s, Total time = 13.167336s
53 : Statistics :: Grounding time = 0.459751s, Solving time = 11.429618s, Total time = 11.889369s

[05-02-2021_14-03-08] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 10.540614s, Solving time = 126.960866s, Total time = 138.758652s
Model :: Total atoms = 12260, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[05-02-2021_14-03-08] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_2,retracted),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,configure(manipulator_limb_2,extended),35)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),38)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),39)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),40)
occurs(1,talos,release(manipulator_end_2,(block,5)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),43)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),44)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),45)
occurs(1,talos,release(manipulator_end_2,(block,3)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[05-02-2021_14-03-08] INFO :: Experiment >> 

      ================================================      
              Initial run 1 : Time 139.085012s              
      ================================================      

[05-02-2021_14-03-08] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-03-08] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Instantiated.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Program building started.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Program building completed.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding base program parts.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.018758s.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving base program parts.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.002927s.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental solving started.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.213931s.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.011921s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.071134s.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.005978s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.071116s.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.008079s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.071028s.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.011099s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.099406s.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.020711s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.106764s.

[05-02-2021_14-03-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.027472s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.080765s.

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.016985s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.082737s.

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.022976s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.078619s.

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.017977s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.080976s.

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.020209s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.078525s.

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.021804s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.082081s.

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.026092s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.081107s.

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.037243s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.083105s.

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.043201s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-03-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.145353s.

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.053163s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.098720s.

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.069224s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.107266s.

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.076253s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.102610s.

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.080811s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.151687s.

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.097309s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-03-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-03-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.107506s.

[05-02-2021_14-03-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.115536s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-03-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-03-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.094292s.

[05-02-2021_14-03-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.121613s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-03-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-03-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.100466s.

[05-02-2021_14-03-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.183200s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-03-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-03-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.095810s.

[05-02-2021_14-03-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.229799s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-03-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-03-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.092554s.

[05-02-2021_14-03-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.303229s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-03-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-03-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.097037s.

[05-02-2021_14-03-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.405540s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-03-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-03-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.100801s.

[05-02-2021_14-03-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.612004s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-03-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-03-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.102995s.

[05-02-2021_14-03-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.797853s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-03-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-03-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.105196s.

[05-02-2021_14-03-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.972569s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-03-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-03-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.108196s.

[05-02-2021_14-03-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.766723s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-03-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-03-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.129061s.

[05-02-2021_14-03-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.467223s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-03-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-03-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.126894s.

[05-02-2021_14-03-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.753503s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-03-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-03-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.102936s.

[05-02-2021_14-03-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.943290s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-03-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-03-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.111331s.

[05-02-2021_14-03-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 1.123549s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-03-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-03-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.115777s.

[05-02-2021_14-03-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 1.416851s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-03-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-03-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.131916s.

[05-02-2021_14-03-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 2.060863s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-03-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-03-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.109391s.

[05-02-2021_14-03-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 3.009349s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-03-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-03-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.135594s.

[05-02-2021_14-03-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 3.576594s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-03-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-03-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.110525s.

[05-02-2021_14-03-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 4.404631s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-03-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-03-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.114081s.

[05-02-2021_14-03-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 7.772060s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.115733s.

[05-02-2021_14-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 5.458368s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-03-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-03-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.359205s.

[05-02-2021_14-03-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-03-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 6.273028s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-03-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-03-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-03-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.359811s.

[05-02-2021_14-03-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-04-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 7.373546s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-04-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-04-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-04-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.376647s.

[05-02-2021_14-04-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-04-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 8.106511s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-04-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-04-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-04-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.383514s.

[05-02-2021_14-04-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-04-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 6.497646s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-04-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-04-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-04-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.421711s.

[05-02-2021_14-04-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-04-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 9.194707s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-04-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-04-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.388503s.

[05-02-2021_14-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-04-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 9.377312s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-04-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-04-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-04-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.413030s.

[05-02-2021_14-04-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-04-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 7.233478s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-04-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-04-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-04-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.473890s.

[05-02-2021_14-04-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-04-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 7.470775s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-04-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-04-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-04-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.427059s.

[05-02-2021_14-04-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-05-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 9.602927s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-05-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-05-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.442509s.

[05-02-2021_14-05-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 11.035207s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.451759s.

[05-02-2021_14-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-05-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 11.213614s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-05-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-05-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.458405s.

[05-02-2021_14-05-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-05-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 11.506945s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-05-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-05-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.473771s.

[05-02-2021_14-05-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_14-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Model found:
Model :: Total atoms = 12270, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_14-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 13.304373s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental solving completed in 165.146554s because STOP_CON_REACHED.

[05-02-2021_14-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 9.643593s, Solving time = 154.355848s, Total time = 165.146554s
Final Model :: Total atoms = 12270, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_14-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.213931s, Solving time = 0.011921s, Total time = 0.225852s
2 : Statistics :: Grounding time = 0.071134s, Solving time = 0.005978s, Total time = 0.077111s
3 : Statistics :: Grounding time = 0.071116s, Solving time = 0.008079s, Total time = 0.079195s
4 : Statistics :: Grounding time = 0.071028s, Solving time = 0.011099s, Total time = 0.082127s
5 : Statistics :: Grounding time = 0.099406s, Solving time = 0.020711s, Total time = 0.120117s
6 : Statistics :: Grounding time = 0.106764s, Solving time = 0.027472s, Total time = 0.134236s
7 : Statistics :: Grounding time = 0.080765s, Solving time = 0.016985s, Total time = 0.097750s
8 : Statistics :: Grounding time = 0.082737s, Solving time = 0.022976s, Total time = 0.105713s
9 : Statistics :: Grounding time = 0.078619s, Solving time = 0.017977s, Total time = 0.096596s
10 : Statistics :: Grounding time = 0.080976s, Solving time = 0.020209s, Total time = 0.101185s
11 : Statistics :: Grounding time = 0.078525s, Solving time = 0.021804s, Total time = 0.100328s
12 : Statistics :: Grounding time = 0.082081s, Solving time = 0.026092s, Total time = 0.108172s
13 : Statistics :: Grounding time = 0.081107s, Solving time = 0.037243s, Total time = 0.118349s
14 : Statistics :: Grounding time = 0.083105s, Solving time = 0.043201s, Total time = 0.126306s
15 : Statistics :: Grounding time = 0.145353s, Solving time = 0.053163s, Total time = 0.198516s
16 : Statistics :: Grounding time = 0.098720s, Solving time = 0.069224s, Total time = 0.167944s
17 : Statistics :: Grounding time = 0.107266s, Solving time = 0.076253s, Total time = 0.183520s
18 : Statistics :: Grounding time = 0.102610s, Solving time = 0.080811s, Total time = 0.183421s
19 : Statistics :: Grounding time = 0.151687s, Solving time = 0.097309s, Total time = 0.248996s
20 : Statistics :: Grounding time = 0.107506s, Solving time = 0.115536s, Total time = 0.223042s
21 : Statistics :: Grounding time = 0.094292s, Solving time = 0.121613s, Total time = 0.215906s
22 : Statistics :: Grounding time = 0.100466s, Solving time = 0.183200s, Total time = 0.283666s
23 : Statistics :: Grounding time = 0.095810s, Solving time = 0.229799s, Total time = 0.325608s
24 : Statistics :: Grounding time = 0.092554s, Solving time = 0.303229s, Total time = 0.395782s
25 : Statistics :: Grounding time = 0.097037s, Solving time = 0.405540s, Total time = 0.502578s
26 : Statistics :: Grounding time = 0.100801s, Solving time = 0.612004s, Total time = 0.712805s
27 : Statistics :: Grounding time = 0.102995s, Solving time = 0.797853s, Total time = 0.900847s
28 : Statistics :: Grounding time = 0.105196s, Solving time = 0.972569s, Total time = 1.077765s
29 : Statistics :: Grounding time = 0.108196s, Solving time = 0.766723s, Total time = 0.874919s
30 : Statistics :: Grounding time = 0.129061s, Solving time = 0.467223s, Total time = 0.596284s
31 : Statistics :: Grounding time = 0.126894s, Solving time = 0.753503s, Total time = 0.880397s
32 : Statistics :: Grounding time = 0.102936s, Solving time = 0.943290s, Total time = 1.046226s
33 : Statistics :: Grounding time = 0.111331s, Solving time = 1.123549s, Total time = 1.234880s
34 : Statistics :: Grounding time = 0.115777s, Solving time = 1.416851s, Total time = 1.532628s
35 : Statistics :: Grounding time = 0.131916s, Solving time = 2.060863s, Total time = 2.192779s
36 : Statistics :: Grounding time = 0.109391s, Solving time = 3.009349s, Total time = 3.118740s
37 : Statistics :: Grounding time = 0.135594s, Solving time = 3.576594s, Total time = 3.712188s
38 : Statistics :: Grounding time = 0.110525s, Solving time = 4.404631s, Total time = 4.515157s
39 : Statistics :: Grounding time = 0.114081s, Solving time = 7.772060s, Total time = 7.886141s
40 : Statistics :: Grounding time = 0.115733s, Solving time = 5.458368s, Total time = 5.574100s
41 : Statistics :: Grounding time = 0.359205s, Solving time = 6.273028s, Total time = 6.632233s
42 : Statistics :: Grounding time = 0.359811s, Solving time = 7.373546s, Total time = 7.733357s
43 : Statistics :: Grounding time = 0.376647s, Solving time = 8.106511s, Total time = 8.483157s
44 : Statistics :: Grounding time = 0.383514s, Solving time = 6.497646s, Total time = 6.881161s
45 : Statistics :: Grounding time = 0.421711s, Solving time = 9.194707s, Total time = 9.616419s
46 : Statistics :: Grounding time = 0.388503s, Solving time = 9.377312s, Total time = 9.765815s
47 : Statistics :: Grounding time = 0.413030s, Solving time = 7.233478s, Total time = 7.646508s
48 : Statistics :: Grounding time = 0.473890s, Solving time = 7.470775s, Total time = 7.944665s
49 : Statistics :: Grounding time = 0.427059s, Solving time = 9.602927s, Total time = 10.029986s
50 : Statistics :: Grounding time = 0.442509s, Solving time = 11.035207s, Total time = 11.477715s
51 : Statistics :: Grounding time = 0.451759s, Solving time = 11.213614s, Total time = 11.665373s
52 : Statistics :: Grounding time = 0.458405s, Solving time = 11.506945s, Total time = 11.965350s
53 : Statistics :: Grounding time = 0.473771s, Solving time = 13.304373s, Total time = 13.778144s

[05-02-2021_14-05-53] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 9.643593s, Solving time = 154.355848s, Total time = 165.146554s
Model :: Total atoms = 12270, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_14-05-53] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_1,retracted),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),35)
occurs(1,talos,release(manipulator_end_2,(block,6)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),38)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),39)
occurs(1,talos,configure(manipulator_limb_1,extended),40)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),41)
occurs(1,talos,release(manipulator_end_1,(block,5)),42)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),43)
occurs(1,talos,release(manipulator_end_2,(block,3)),44)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),45)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),46)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[05-02-2021_14-05-53] INFO :: Experiment >> 

      ================================================      
           Experimental run 1 : Time 165.501489s            
      ================================================      

[05-02-2021_14-05-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-05-53] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Instantiated.

[05-02-2021_14-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Program building started.

[05-02-2021_14-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Program building completed.

[05-02-2021_14-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding base program parts.

[05-02-2021_14-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.031445s.

[05-02-2021_14-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving base program parts.

[05-02-2021_14-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.002921s.

[05-02-2021_14-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental solving started.

[05-02-2021_14-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.225124s.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.008930s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.064546s.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.005601s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.065336s.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.007267s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.075025s.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.010529s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.072042s.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.015145s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.073008s.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.014718s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.081241s.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.017240s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.079535s.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.018050s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.078371s.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.018920s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.077907s.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.019799s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.077148s.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.020743s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.078438s.

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.029217s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.082990s.

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.031495s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.081837s.

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.034028s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.082551s.

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.046854s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.087508s.

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.056822s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.083662s.

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.050627s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.083896s.

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.062942s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.085220s.

[05-02-2021_14-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.049590s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.086675s.

[05-02-2021_14-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.067930s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.092329s.

[05-02-2021_14-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.103284s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.090035s.

[05-02-2021_14-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.178692s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.102574s.

[05-02-2021_14-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.239358s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-05-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-05-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.092088s.

[05-02-2021_14-05-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.420181s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-05-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-05-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.096427s.

[05-02-2021_14-05-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.516575s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-05-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-05-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.101432s.

[05-02-2021_14-05-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-05-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.668440s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-05-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-05-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-05-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.095580s.

[05-02-2021_14-05-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-06-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 1.028214s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-06-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-06-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-06-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.099926s.

[05-02-2021_14-06-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-06-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 1.209850s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-06-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-06-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-06-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.097098s.

[05-02-2021_14-06-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-06-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.924205s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-06-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-06-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-06-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.099934s.

[05-02-2021_14-06-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-06-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 1.047407s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-06-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-06-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-06-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.101721s.

[05-02-2021_14-06-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-06-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.738073s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-06-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-06-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-06-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.102213s.

[05-02-2021_14-06-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-06-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.618350s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-06-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-06-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-06-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.104377s.

[05-02-2021_14-06-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-06-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.681362s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-06-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-06-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-06-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.106353s.

[05-02-2021_14-06-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-06-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 1.143454s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-06-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-06-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-06-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.107617s.

[05-02-2021_14-06-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-06-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 1.617121s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-06-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-06-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-06-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.109544s.

[05-02-2021_14-06-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-06-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 1.891640s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-06-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-06-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-06-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.122190s.

[05-02-2021_14-06-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-06-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 3.496891s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-06-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-06-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-06-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.123169s.

[05-02-2021_14-06-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-06-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 4.525360s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-06-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-06-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-06-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.120937s.

[05-02-2021_14-06-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-06-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 4.473975s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-06-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-06-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-06-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.115234s.

[05-02-2021_14-06-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-06-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 5.086989s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-06-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-06-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-06-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.354345s.

[05-02-2021_14-06-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-06-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 5.511993s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-06-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-06-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-06-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.376646s.

[05-02-2021_14-06-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-06-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 8.123961s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-06-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-06-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-06-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.380690s.

[05-02-2021_14-06-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-06-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 7.891428s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-06-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-06-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-06-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.385706s.

[05-02-2021_14-06-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-07-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 9.487409s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-07-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-07-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-07-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.388741s.

[05-02-2021_14-07-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-07-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 7.463397s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-07-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-07-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-07-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.405544s.

[05-02-2021_14-07-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-07-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 6.497484s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-07-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-07-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-07-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.438239s.

[05-02-2021_14-07-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-07-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 8.259879s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-07-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-07-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-07-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.477491s.

[05-02-2021_14-07-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 10.113950s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.414922s.

[05-02-2021_14-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 8.442368s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.569757s.

[05-02-2021_14-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 10.480908s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.489591s.

[05-02-2021_14-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 9.072317s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-08-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.465741s.

[05-02-2021_14-08-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 10.518286s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-08-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.458552s.

[05-02-2021_14-08-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_14-08-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Model found:
Model :: Total atoms = 12274, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-08-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 2.671981s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental solving completed in 146.233538s because STOP_CON_REACHED.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 9.440248s, Solving time = 135.734154s, Total time = 146.233538s
Final Model :: Total atoms = 12274, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.225124s, Solving time = 0.008930s, Total time = 0.234054s
2 : Statistics :: Grounding time = 0.064546s, Solving time = 0.005601s, Total time = 0.070147s
3 : Statistics :: Grounding time = 0.065336s, Solving time = 0.007267s, Total time = 0.072604s
4 : Statistics :: Grounding time = 0.075025s, Solving time = 0.010529s, Total time = 0.085554s
5 : Statistics :: Grounding time = 0.072042s, Solving time = 0.015145s, Total time = 0.087187s
6 : Statistics :: Grounding time = 0.073008s, Solving time = 0.014718s, Total time = 0.087726s
7 : Statistics :: Grounding time = 0.081241s, Solving time = 0.017240s, Total time = 0.098481s
8 : Statistics :: Grounding time = 0.079535s, Solving time = 0.018050s, Total time = 0.097584s
9 : Statistics :: Grounding time = 0.078371s, Solving time = 0.018920s, Total time = 0.097291s
10 : Statistics :: Grounding time = 0.077907s, Solving time = 0.019799s, Total time = 0.097706s
11 : Statistics :: Grounding time = 0.077148s, Solving time = 0.020743s, Total time = 0.097891s
12 : Statistics :: Grounding time = 0.078438s, Solving time = 0.029217s, Total time = 0.107655s
13 : Statistics :: Grounding time = 0.082990s, Solving time = 0.031495s, Total time = 0.114486s
14 : Statistics :: Grounding time = 0.081837s, Solving time = 0.034028s, Total time = 0.115865s
15 : Statistics :: Grounding time = 0.082551s, Solving time = 0.046854s, Total time = 0.129405s
16 : Statistics :: Grounding time = 0.087508s, Solving time = 0.056822s, Total time = 0.144330s
17 : Statistics :: Grounding time = 0.083662s, Solving time = 0.050627s, Total time = 0.134289s
18 : Statistics :: Grounding time = 0.083896s, Solving time = 0.062942s, Total time = 0.146838s
19 : Statistics :: Grounding time = 0.085220s, Solving time = 0.049590s, Total time = 0.134810s
20 : Statistics :: Grounding time = 0.086675s, Solving time = 0.067930s, Total time = 0.154605s
21 : Statistics :: Grounding time = 0.092329s, Solving time = 0.103284s, Total time = 0.195613s
22 : Statistics :: Grounding time = 0.090035s, Solving time = 0.178692s, Total time = 0.268727s
23 : Statistics :: Grounding time = 0.102574s, Solving time = 0.239358s, Total time = 0.341931s
24 : Statistics :: Grounding time = 0.092088s, Solving time = 0.420181s, Total time = 0.512268s
25 : Statistics :: Grounding time = 0.096427s, Solving time = 0.516575s, Total time = 0.613002s
26 : Statistics :: Grounding time = 0.101432s, Solving time = 0.668440s, Total time = 0.769872s
27 : Statistics :: Grounding time = 0.095580s, Solving time = 1.028214s, Total time = 1.123795s
28 : Statistics :: Grounding time = 0.099926s, Solving time = 1.209850s, Total time = 1.309776s
29 : Statistics :: Grounding time = 0.097098s, Solving time = 0.924205s, Total time = 1.021304s
30 : Statistics :: Grounding time = 0.099934s, Solving time = 1.047407s, Total time = 1.147340s
31 : Statistics :: Grounding time = 0.101721s, Solving time = 0.738073s, Total time = 0.839795s
32 : Statistics :: Grounding time = 0.102213s, Solving time = 0.618350s, Total time = 0.720563s
33 : Statistics :: Grounding time = 0.104377s, Solving time = 0.681362s, Total time = 0.785740s
34 : Statistics :: Grounding time = 0.106353s, Solving time = 1.143454s, Total time = 1.249807s
35 : Statistics :: Grounding time = 0.107617s, Solving time = 1.617121s, Total time = 1.724738s
36 : Statistics :: Grounding time = 0.109544s, Solving time = 1.891640s, Total time = 2.001184s
37 : Statistics :: Grounding time = 0.122190s, Solving time = 3.496891s, Total time = 3.619081s
38 : Statistics :: Grounding time = 0.123169s, Solving time = 4.525360s, Total time = 4.648528s
39 : Statistics :: Grounding time = 0.120937s, Solving time = 4.473975s, Total time = 4.594912s
40 : Statistics :: Grounding time = 0.115234s, Solving time = 5.086989s, Total time = 5.202224s
41 : Statistics :: Grounding time = 0.354345s, Solving time = 5.511993s, Total time = 5.866338s
42 : Statistics :: Grounding time = 0.376646s, Solving time = 8.123961s, Total time = 8.500608s
43 : Statistics :: Grounding time = 0.380690s, Solving time = 7.891428s, Total time = 8.272118s
44 : Statistics :: Grounding time = 0.385706s, Solving time = 9.487409s, Total time = 9.873115s
45 : Statistics :: Grounding time = 0.388741s, Solving time = 7.463397s, Total time = 7.852138s
46 : Statistics :: Grounding time = 0.405544s, Solving time = 6.497484s, Total time = 6.903029s
47 : Statistics :: Grounding time = 0.438239s, Solving time = 8.259879s, Total time = 8.698117s
48 : Statistics :: Grounding time = 0.477491s, Solving time = 10.113950s, Total time = 10.591441s
49 : Statistics :: Grounding time = 0.414922s, Solving time = 8.442368s, Total time = 8.857291s
50 : Statistics :: Grounding time = 0.569757s, Solving time = 10.480908s, Total time = 11.050665s
51 : Statistics :: Grounding time = 0.489591s, Solving time = 9.072317s, Total time = 9.561908s
52 : Statistics :: Grounding time = 0.465741s, Solving time = 10.518286s, Total time = 10.984027s
53 : Statistics :: Grounding time = 0.458552s, Solving time = 2.671981s, Total time = 3.130533s

[05-02-2021_14-08-20] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 9.440248s, Solving time = 135.734154s, Total time = 146.233538s
Model :: Total atoms = 12274, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-08-20] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),24)
occurs(1,talos,configure(manipulator_limb_2,retracted),25)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),35)
occurs(1,talos,release(manipulator_end_2,(block,6)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),37)
occurs(1,talos,configure(manipulator_limb_1,extended),38)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),39)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),40)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),41)
occurs(1,talos,release(manipulator_end_1,(block,5)),42)
occurs(1,talos,release(manipulator_end_2,(block,3)),43)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),44)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),45)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),46)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[05-02-2021_14-08-20] INFO :: Experiment >> 

      ================================================      
           Experimental run 2 : Time 146.523387s            
      ================================================      

[05-02-2021_14-08-20] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-08-20] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Instantiated.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Program building started.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Program building completed.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding base program parts.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.017003s.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving base program parts.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.003578s.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental solving started.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.182102s.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.008917s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.065916s.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.005925s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.062455s.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.007705s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.067719s.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.009865s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.068443s.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.014332s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.070537s.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.014267s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.074282s.

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.015932s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.076125s.

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.016292s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.076816s.

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.017890s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.078122s.

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.020191s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.080226s.

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.021056s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.078580s.

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.029238s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.090186s.

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.036705s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.082577s.

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.045453s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.081806s.

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.039644s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.081570s.

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.057227s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.082931s.

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.048744s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.085146s.

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.052801s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.084871s.

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.059104s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.089537s.

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.079214s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.089031s.

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.111985s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.090229s.

[05-02-2021_14-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.122815s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.090109s.

[05-02-2021_14-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.196489s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.093944s.

[05-02-2021_14-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.258634s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.099046s.

[05-02-2021_14-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.355926s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-08-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-08-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.093827s.

[05-02-2021_14-08-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.488713s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-08-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-08-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.096538s.

[05-02-2021_14-08-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.890524s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-08-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-08-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.095405s.

[05-02-2021_14-08-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.919078s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.099656s.

[05-02-2021_14-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.446641s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.101759s.

[05-02-2021_14-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.517115s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.106536s.

[05-02-2021_14-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.603138s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.104932s.

[05-02-2021_14-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.791456s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.107844s.

[05-02-2021_14-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 1.191516s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.104277s.

[05-02-2021_14-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 1.393471s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-08-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-08-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.107712s.

[05-02-2021_14-08-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 1.193896s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-08-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-08-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.111475s.

[05-02-2021_14-08-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 1.966634s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-08-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-08-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.109828s.

[05-02-2021_14-08-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 2.614850s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.110895s.

[05-02-2021_14-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 2.182652s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-08-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-08-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.111000s.

[05-02-2021_14-08-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 3.518355s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-08-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-08-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.113057s.

[05-02-2021_14-08-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 6.554830s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-08-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-08-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.423994s.

[05-02-2021_14-08-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 4.191082s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.414742s.

[05-02-2021_14-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-09-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 5.176547s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-09-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-09-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-09-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.384231s.

[05-02-2021_14-09-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-09-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 8.097003s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-09-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-09-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-09-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.430646s.

[05-02-2021_14-09-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-09-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 6.779490s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-09-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-09-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-09-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.402697s.

[05-02-2021_14-09-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 5.560473s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.395585s.

[05-02-2021_14-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-09-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 4.047697s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-09-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-09-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-09-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.417811s.

[05-02-2021_14-09-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-09-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 4.893036s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-09-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-09-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-09-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.404369s.

[05-02-2021_14-09-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 5.794904s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.415737s.

[05-02-2021_14-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-09-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 8.892937s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-09-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-09-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-09-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.428924s.

[05-02-2021_14-09-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 7.199480s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.433058s.

[05-02-2021_14-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-10-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 12.548375s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-10-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-10-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.461416s.

[05-02-2021_14-10-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 13.946457s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.463016s.

[05-02-2021_14-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Model found:
Model :: Total atoms = 12263, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 17.663182s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental solving completed in 141.948763s because STOP_CON_REACHED.

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 9.190277s, Solving time = 131.713461s, Total time = 141.948763s
Final Model :: Total atoms = 12263, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.182102s, Solving time = 0.008917s, Total time = 0.191020s
2 : Statistics :: Grounding time = 0.065916s, Solving time = 0.005925s, Total time = 0.071842s
3 : Statistics :: Grounding time = 0.062455s, Solving time = 0.007705s, Total time = 0.070160s
4 : Statistics :: Grounding time = 0.067719s, Solving time = 0.009865s, Total time = 0.077583s
5 : Statistics :: Grounding time = 0.068443s, Solving time = 0.014332s, Total time = 0.082775s
6 : Statistics :: Grounding time = 0.070537s, Solving time = 0.014267s, Total time = 0.084804s
7 : Statistics :: Grounding time = 0.074282s, Solving time = 0.015932s, Total time = 0.090214s
8 : Statistics :: Grounding time = 0.076125s, Solving time = 0.016292s, Total time = 0.092417s
9 : Statistics :: Grounding time = 0.076816s, Solving time = 0.017890s, Total time = 0.094706s
10 : Statistics :: Grounding time = 0.078122s, Solving time = 0.020191s, Total time = 0.098313s
11 : Statistics :: Grounding time = 0.080226s, Solving time = 0.021056s, Total time = 0.101282s
12 : Statistics :: Grounding time = 0.078580s, Solving time = 0.029238s, Total time = 0.107818s
13 : Statistics :: Grounding time = 0.090186s, Solving time = 0.036705s, Total time = 0.126891s
14 : Statistics :: Grounding time = 0.082577s, Solving time = 0.045453s, Total time = 0.128030s
15 : Statistics :: Grounding time = 0.081806s, Solving time = 0.039644s, Total time = 0.121449s
16 : Statistics :: Grounding time = 0.081570s, Solving time = 0.057227s, Total time = 0.138797s
17 : Statistics :: Grounding time = 0.082931s, Solving time = 0.048744s, Total time = 0.131675s
18 : Statistics :: Grounding time = 0.085146s, Solving time = 0.052801s, Total time = 0.137947s
19 : Statistics :: Grounding time = 0.084871s, Solving time = 0.059104s, Total time = 0.143975s
20 : Statistics :: Grounding time = 0.089537s, Solving time = 0.079214s, Total time = 0.168750s
21 : Statistics :: Grounding time = 0.089031s, Solving time = 0.111985s, Total time = 0.201015s
22 : Statistics :: Grounding time = 0.090229s, Solving time = 0.122815s, Total time = 0.213044s
23 : Statistics :: Grounding time = 0.090109s, Solving time = 0.196489s, Total time = 0.286598s
24 : Statistics :: Grounding time = 0.093944s, Solving time = 0.258634s, Total time = 0.352578s
25 : Statistics :: Grounding time = 0.099046s, Solving time = 0.355926s, Total time = 0.454972s
26 : Statistics :: Grounding time = 0.093827s, Solving time = 0.488713s, Total time = 0.582541s
27 : Statistics :: Grounding time = 0.096538s, Solving time = 0.890524s, Total time = 0.987062s
28 : Statistics :: Grounding time = 0.095405s, Solving time = 0.919078s, Total time = 1.014483s
29 : Statistics :: Grounding time = 0.099656s, Solving time = 0.446641s, Total time = 0.546296s
30 : Statistics :: Grounding time = 0.101759s, Solving time = 0.517115s, Total time = 0.618875s
31 : Statistics :: Grounding time = 0.106536s, Solving time = 0.603138s, Total time = 0.709673s
32 : Statistics :: Grounding time = 0.104932s, Solving time = 0.791456s, Total time = 0.896389s
33 : Statistics :: Grounding time = 0.107844s, Solving time = 1.191516s, Total time = 1.299360s
34 : Statistics :: Grounding time = 0.104277s, Solving time = 1.393471s, Total time = 1.497748s
35 : Statistics :: Grounding time = 0.107712s, Solving time = 1.193896s, Total time = 1.301608s
36 : Statistics :: Grounding time = 0.111475s, Solving time = 1.966634s, Total time = 2.078109s
37 : Statistics :: Grounding time = 0.109828s, Solving time = 2.614850s, Total time = 2.724678s
38 : Statistics :: Grounding time = 0.110895s, Solving time = 2.182652s, Total time = 2.293547s
39 : Statistics :: Grounding time = 0.111000s, Solving time = 3.518355s, Total time = 3.629355s
40 : Statistics :: Grounding time = 0.113057s, Solving time = 6.554830s, Total time = 6.667887s
41 : Statistics :: Grounding time = 0.423994s, Solving time = 4.191082s, Total time = 4.615076s
42 : Statistics :: Grounding time = 0.414742s, Solving time = 5.176547s, Total time = 5.591289s
43 : Statistics :: Grounding time = 0.384231s, Solving time = 8.097003s, Total time = 8.481234s
44 : Statistics :: Grounding time = 0.430646s, Solving time = 6.779490s, Total time = 7.210136s
45 : Statistics :: Grounding time = 0.402697s, Solving time = 5.560473s, Total time = 5.963169s
46 : Statistics :: Grounding time = 0.395585s, Solving time = 4.047697s, Total time = 4.443282s
47 : Statistics :: Grounding time = 0.417811s, Solving time = 4.893036s, Total time = 5.310847s
48 : Statistics :: Grounding time = 0.404369s, Solving time = 5.794904s, Total time = 6.199274s
49 : Statistics :: Grounding time = 0.415737s, Solving time = 8.892937s, Total time = 9.308674s
50 : Statistics :: Grounding time = 0.428924s, Solving time = 7.199480s, Total time = 7.628404s
51 : Statistics :: Grounding time = 0.433058s, Solving time = 12.548375s, Total time = 12.981433s
52 : Statistics :: Grounding time = 0.461416s, Solving time = 13.946457s, Total time = 14.407872s
53 : Statistics :: Grounding time = 0.463016s, Solving time = 17.663182s, Total time = 18.126198s

[05-02-2021_14-10-42] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 9.190277s, Solving time = 131.713461s, Total time = 141.948763s
Model :: Total atoms = 12263, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[05-02-2021_14-10-42] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_2,retracted),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),38)
occurs(1,talos,release(manipulator_end_2,(block,5)),39)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),40)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),41)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),42)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),43)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),44)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),45)
occurs(1,talos,release(manipulator_end_2,(block,3)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[05-02-2021_14-10-42] INFO :: Experiment >> 

      ================================================      
           Experimental run 3 : Time 142.240902s            
      ================================================      

[05-02-2021_14-10-42] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-10-42] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Instantiated.

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Program building started.

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Program building completed.

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding base program parts.

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.016627s.

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving base program parts.

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.003013s.

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental solving started.

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.188643s.

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.010462s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.063670s.

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.005796s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.066858s.

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.007605s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.067624s.

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.010402s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.067806s.

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.014531s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.072409s.

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.013707s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.078972s.

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.015698s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.082137s.

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.016196s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.078445s.

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.019163s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.078372s.

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.021565s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.081021s.

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.021092s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.082377s.

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.022777s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.079136s.

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.024807s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.084541s.

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.031978s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.082410s.

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.029732s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.085980s.

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.037867s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.084402s.

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.056795s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.084627s.

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.068210s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.090497s.

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.087192s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.087945s.

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.098657s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.088159s.

[05-02-2021_14-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.147310s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.094821s.

[05-02-2021_14-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.209174s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.094336s.

[05-02-2021_14-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.310258s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.093913s.

[05-02-2021_14-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.293486s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.093691s.

[05-02-2021_14-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.434513s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.094477s.

[05-02-2021_14-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.602605s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-10-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-10-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.099486s.

[05-02-2021_14-10-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.777409s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-10-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-10-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.102333s.

[05-02-2021_14-10-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.604951s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-10-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-10-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.100616s.

[05-02-2021_14-10-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.838823s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-10-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-10-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.101325s.

[05-02-2021_14-10-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.762809s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-10-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-10-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.100745s.

[05-02-2021_14-10-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.673673s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-10-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-10-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.106426s.

[05-02-2021_14-10-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 1.034153s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.104823s.

[05-02-2021_14-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 1.346565s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.109667s.

[05-02-2021_14-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 1.817042s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.105165s.

[05-02-2021_14-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 1.807805s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.110893s.

[05-02-2021_14-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-11-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 4.299679s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-11-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-11-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-11-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.115688s.

[05-02-2021_14-11-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-11-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 3.566378s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-11-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-11-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-11-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.128802s.

[05-02-2021_14-11-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-11-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 7.369511s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-11-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-11-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-11-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.134754s.

[05-02-2021_14-11-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 7.102456s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.134235s.

[05-02-2021_14-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-11-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 4.404776s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-11-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-11-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-11-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.396246s.

[05-02-2021_14-11-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 5.588787s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.420585s.

[05-02-2021_14-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-11-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 8.214395s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-11-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-11-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-11-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.454683s.

[05-02-2021_14-11-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-11-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 8.344220s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-11-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-11-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-11-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.415592s.

[05-02-2021_14-11-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-11-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 8.241926s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-11-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-11-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-11-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.444829s.

[05-02-2021_14-11-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-12-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 11.626699s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-12-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-12-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-12-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.430930s.

[05-02-2021_14-12-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-12-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 12.533961s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-12-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-12-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-12-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.484307s.

[05-02-2021_14-12-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-12-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 10.078479s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-12-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-12-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-12-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.459476s.

[05-02-2021_14-12-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 9.997986s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.510924s.

[05-02-2021_14-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-12-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 11.491456s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-12-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-12-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-12-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.478108s.

[05-02-2021_14-12-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-13-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 9.925506s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-13-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-13-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.462363s.

[05-02-2021_14-13-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 11.353346s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.544820s.

[05-02-2021_14-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-13-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 13.580376s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.602266s.

[05-02-2021_14-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Model found:
Model :: Total atoms = 12267, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 11.698371s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental solving completed in 182.800487s because STOP_CON_REACHED.

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 9.923981s, Solving time = 171.696129s, Total time = 182.800487s
Final Model :: Total atoms = 12267, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.188643s, Solving time = 0.010462s, Total time = 0.199105s
2 : Statistics :: Grounding time = 0.063670s, Solving time = 0.005796s, Total time = 0.069466s
3 : Statistics :: Grounding time = 0.066858s, Solving time = 0.007605s, Total time = 0.074463s
4 : Statistics :: Grounding time = 0.067624s, Solving time = 0.010402s, Total time = 0.078025s
5 : Statistics :: Grounding time = 0.067806s, Solving time = 0.014531s, Total time = 0.082337s
6 : Statistics :: Grounding time = 0.072409s, Solving time = 0.013707s, Total time = 0.086116s
7 : Statistics :: Grounding time = 0.078972s, Solving time = 0.015698s, Total time = 0.094670s
8 : Statistics :: Grounding time = 0.082137s, Solving time = 0.016196s, Total time = 0.098333s
9 : Statistics :: Grounding time = 0.078445s, Solving time = 0.019163s, Total time = 0.097608s
10 : Statistics :: Grounding time = 0.078372s, Solving time = 0.021565s, Total time = 0.099937s
11 : Statistics :: Grounding time = 0.081021s, Solving time = 0.021092s, Total time = 0.102113s
12 : Statistics :: Grounding time = 0.082377s, Solving time = 0.022777s, Total time = 0.105154s
13 : Statistics :: Grounding time = 0.079136s, Solving time = 0.024807s, Total time = 0.103943s
14 : Statistics :: Grounding time = 0.084541s, Solving time = 0.031978s, Total time = 0.116520s
15 : Statistics :: Grounding time = 0.082410s, Solving time = 0.029732s, Total time = 0.112142s
16 : Statistics :: Grounding time = 0.085980s, Solving time = 0.037867s, Total time = 0.123847s
17 : Statistics :: Grounding time = 0.084402s, Solving time = 0.056795s, Total time = 0.141198s
18 : Statistics :: Grounding time = 0.084627s, Solving time = 0.068210s, Total time = 0.152838s
19 : Statistics :: Grounding time = 0.090497s, Solving time = 0.087192s, Total time = 0.177689s
20 : Statistics :: Grounding time = 0.087945s, Solving time = 0.098657s, Total time = 0.186602s
21 : Statistics :: Grounding time = 0.088159s, Solving time = 0.147310s, Total time = 0.235469s
22 : Statistics :: Grounding time = 0.094821s, Solving time = 0.209174s, Total time = 0.303995s
23 : Statistics :: Grounding time = 0.094336s, Solving time = 0.310258s, Total time = 0.404593s
24 : Statistics :: Grounding time = 0.093913s, Solving time = 0.293486s, Total time = 0.387399s
25 : Statistics :: Grounding time = 0.093691s, Solving time = 0.434513s, Total time = 0.528204s
26 : Statistics :: Grounding time = 0.094477s, Solving time = 0.602605s, Total time = 0.697082s
27 : Statistics :: Grounding time = 0.099486s, Solving time = 0.777409s, Total time = 0.876895s
28 : Statistics :: Grounding time = 0.102333s, Solving time = 0.604951s, Total time = 0.707284s
29 : Statistics :: Grounding time = 0.100616s, Solving time = 0.838823s, Total time = 0.939438s
30 : Statistics :: Grounding time = 0.101325s, Solving time = 0.762809s, Total time = 0.864134s
31 : Statistics :: Grounding time = 0.100745s, Solving time = 0.673673s, Total time = 0.774418s
32 : Statistics :: Grounding time = 0.106426s, Solving time = 1.034153s, Total time = 1.140579s
33 : Statistics :: Grounding time = 0.104823s, Solving time = 1.346565s, Total time = 1.451388s
34 : Statistics :: Grounding time = 0.109667s, Solving time = 1.817042s, Total time = 1.926709s
35 : Statistics :: Grounding time = 0.105165s, Solving time = 1.807805s, Total time = 1.912970s
36 : Statistics :: Grounding time = 0.110893s, Solving time = 4.299679s, Total time = 4.410571s
37 : Statistics :: Grounding time = 0.115688s, Solving time = 3.566378s, Total time = 3.682066s
38 : Statistics :: Grounding time = 0.128802s, Solving time = 7.369511s, Total time = 7.498313s
39 : Statistics :: Grounding time = 0.134754s, Solving time = 7.102456s, Total time = 7.237210s
40 : Statistics :: Grounding time = 0.134235s, Solving time = 4.404776s, Total time = 4.539011s
41 : Statistics :: Grounding time = 0.396246s, Solving time = 5.588787s, Total time = 5.985033s
42 : Statistics :: Grounding time = 0.420585s, Solving time = 8.214395s, Total time = 8.634980s
43 : Statistics :: Grounding time = 0.454683s, Solving time = 8.344220s, Total time = 8.798903s
44 : Statistics :: Grounding time = 0.415592s, Solving time = 8.241926s, Total time = 8.657518s
45 : Statistics :: Grounding time = 0.444829s, Solving time = 11.626699s, Total time = 12.071528s
46 : Statistics :: Grounding time = 0.430930s, Solving time = 12.533961s, Total time = 12.964890s
47 : Statistics :: Grounding time = 0.484307s, Solving time = 10.078479s, Total time = 10.562785s
48 : Statistics :: Grounding time = 0.459476s, Solving time = 9.997986s, Total time = 10.457462s
49 : Statistics :: Grounding time = 0.510924s, Solving time = 11.491456s, Total time = 12.002380s
50 : Statistics :: Grounding time = 0.478108s, Solving time = 9.925506s, Total time = 10.403615s
51 : Statistics :: Grounding time = 0.462363s, Solving time = 11.353346s, Total time = 11.815709s
52 : Statistics :: Grounding time = 0.544820s, Solving time = 13.580376s, Total time = 14.125196s
53 : Statistics :: Grounding time = 0.602266s, Solving time = 11.698371s, Total time = 12.300637s

[05-02-2021_14-13-45] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 9.923981s, Solving time = 171.696129s, Total time = 182.800487s
Model :: Total atoms = 12267, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_14-13-45] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_2,retracted),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),35)
occurs(1,talos,release(manipulator_end_2,(block,6)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),38)
occurs(1,talos,configure(manipulator_limb_1,extended),39)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),40)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),41)
occurs(1,talos,release(manipulator_end_1,(block,5)),42)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),43)
occurs(1,talos,release(manipulator_end_2,(block,3)),44)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),45)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),46)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),47)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),48)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_1,(block,2)),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),52)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),53)

[05-02-2021_14-13-45] INFO :: Experiment >> 

      ================================================      
           Experimental run 4 : Time 183.105645s            
      ================================================      

[05-02-2021_14-13-45] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-13-45] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Instantiated.

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Program building started.

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Program building completed.

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding base program parts.

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.017966s.

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving base program parts.

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.003770s.

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental solving started.

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.190036s.

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.009114s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.064224s.

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.006055s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-13-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.063368s.

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.007693s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.070435s.

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.010390s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.077763s.

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.015486s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.072588s.

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.014225s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.076628s.

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.016623s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.077931s.

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.017246s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.077934s.

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.018505s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.079325s.

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.020523s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.083866s.

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.021792s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.085941s.

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.027251s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.081876s.

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.030428s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.088149s.

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.044373s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.095340s.

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.050033s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.085930s.

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.063914s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.085884s.

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.056661s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.094472s.

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.056054s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.089343s.

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.057850s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.089269s.

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.085425s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.092653s.

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.085553s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.090768s.

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.116543s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.093710s.

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.222162s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.101509s.

[05-02-2021_14-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.310481s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.107182s.

[05-02-2021_14-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.282473s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.105482s.

[05-02-2021_14-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.375479s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.110272s.

[05-02-2021_14-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.474812s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.112837s.

[05-02-2021_14-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.463348s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.107543s.

[05-02-2021_14-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.776839s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-13-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-13-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.115719s.

[05-02-2021_14-13-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 1.008852s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-13-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-13-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.120932s.

[05-02-2021_14-13-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 1.570666s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-13-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-13-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.123072s.

[05-02-2021_14-13-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 2.271261s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.113696s.

[05-02-2021_14-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 3.581862s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.125144s.

[05-02-2021_14-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 2.817589s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.116353s.

[05-02-2021_14-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-14-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 3.352284s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-14-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-14-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-14-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.123261s.

[05-02-2021_14-14-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-14-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 3.617206s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-14-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-14-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-14-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.119582s.

[05-02-2021_14-14-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 3.993547s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.124455s.

[05-02-2021_14-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 4.047722s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.143058s.

[05-02-2021_14-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-14-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 4.762775s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-14-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-14-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-14-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.117373s.

[05-02-2021_14-14-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-14-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 7.080960s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-14-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-14-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-14-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.389030s.

[05-02-2021_14-14-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-14-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 7.564225s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-14-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-14-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-14-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.373973s.

[05-02-2021_14-14-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 6.763652s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.393700s.

[05-02-2021_14-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-14-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 4.783802s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-14-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-14-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-14-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.387769s.

[05-02-2021_14-14-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-14-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 3.199833s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-14-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-14-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-14-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.405373s.

[05-02-2021_14-14-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-15-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 7.819762s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-15-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-15-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-15-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.469394s.

[05-02-2021_14-15-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 7.078476s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.416093s.

[05-02-2021_14-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-15-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 8.400524s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-15-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-15-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-15-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.442005s.

[05-02-2021_14-15-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-15-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 7.077539s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-15-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-15-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-15-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.445850s.

[05-02-2021_14-15-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 11.352993s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.431696s.

[05-02-2021_14-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 14.360274s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-15-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-15-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.479038s.

[05-02-2021_14-15-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-16-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 11.781124s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-16-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-16-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.454596s.

[05-02-2021_14-16-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-16-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 18.573716s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-16-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-16-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.509247s.

[05-02-2021_14-16-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Model found:
Model :: Total atoms = 12271, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 12.327673s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental solving completed in 173.590868s because STOP_CON_REACHED.

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 9.610636s, Solving time = 162.929418s, Total time = 173.590868s
Final Model :: Total atoms = 12271, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.190036s, Solving time = 0.009114s, Total time = 0.199150s
2 : Statistics :: Grounding time = 0.064224s, Solving time = 0.006055s, Total time = 0.070279s
3 : Statistics :: Grounding time = 0.063368s, Solving time = 0.007693s, Total time = 0.071061s
4 : Statistics :: Grounding time = 0.070435s, Solving time = 0.010390s, Total time = 0.080825s
5 : Statistics :: Grounding time = 0.077763s, Solving time = 0.015486s, Total time = 0.093249s
6 : Statistics :: Grounding time = 0.072588s, Solving time = 0.014225s, Total time = 0.086813s
7 : Statistics :: Grounding time = 0.076628s, Solving time = 0.016623s, Total time = 0.093251s
8 : Statistics :: Grounding time = 0.077931s, Solving time = 0.017246s, Total time = 0.095177s
9 : Statistics :: Grounding time = 0.077934s, Solving time = 0.018505s, Total time = 0.096439s
10 : Statistics :: Grounding time = 0.079325s, Solving time = 0.020523s, Total time = 0.099847s
11 : Statistics :: Grounding time = 0.083866s, Solving time = 0.021792s, Total time = 0.105658s
12 : Statistics :: Grounding time = 0.085941s, Solving time = 0.027251s, Total time = 0.113192s
13 : Statistics :: Grounding time = 0.081876s, Solving time = 0.030428s, Total time = 0.112304s
14 : Statistics :: Grounding time = 0.088149s, Solving time = 0.044373s, Total time = 0.132522s
15 : Statistics :: Grounding time = 0.095340s, Solving time = 0.050033s, Total time = 0.145373s
16 : Statistics :: Grounding time = 0.085930s, Solving time = 0.063914s, Total time = 0.149844s
17 : Statistics :: Grounding time = 0.085884s, Solving time = 0.056661s, Total time = 0.142545s
18 : Statistics :: Grounding time = 0.094472s, Solving time = 0.056054s, Total time = 0.150525s
19 : Statistics :: Grounding time = 0.089343s, Solving time = 0.057850s, Total time = 0.147194s
20 : Statistics :: Grounding time = 0.089269s, Solving time = 0.085425s, Total time = 0.174694s
21 : Statistics :: Grounding time = 0.092653s, Solving time = 0.085553s, Total time = 0.178206s
22 : Statistics :: Grounding time = 0.090768s, Solving time = 0.116543s, Total time = 0.207311s
23 : Statistics :: Grounding time = 0.093710s, Solving time = 0.222162s, Total time = 0.315872s
24 : Statistics :: Grounding time = 0.101509s, Solving time = 0.310481s, Total time = 0.411991s
25 : Statistics :: Grounding time = 0.107182s, Solving time = 0.282473s, Total time = 0.389655s
26 : Statistics :: Grounding time = 0.105482s, Solving time = 0.375479s, Total time = 0.480961s
27 : Statistics :: Grounding time = 0.110272s, Solving time = 0.474812s, Total time = 0.585084s
28 : Statistics :: Grounding time = 0.112837s, Solving time = 0.463348s, Total time = 0.576185s
29 : Statistics :: Grounding time = 0.107543s, Solving time = 0.776839s, Total time = 0.884383s
30 : Statistics :: Grounding time = 0.115719s, Solving time = 1.008852s, Total time = 1.124571s
31 : Statistics :: Grounding time = 0.120932s, Solving time = 1.570666s, Total time = 1.691598s
32 : Statistics :: Grounding time = 0.123072s, Solving time = 2.271261s, Total time = 2.394333s
33 : Statistics :: Grounding time = 0.113696s, Solving time = 3.581862s, Total time = 3.695559s
34 : Statistics :: Grounding time = 0.125144s, Solving time = 2.817589s, Total time = 2.942733s
35 : Statistics :: Grounding time = 0.116353s, Solving time = 3.352284s, Total time = 3.468638s
36 : Statistics :: Grounding time = 0.123261s, Solving time = 3.617206s, Total time = 3.740467s
37 : Statistics :: Grounding time = 0.119582s, Solving time = 3.993547s, Total time = 4.113129s
38 : Statistics :: Grounding time = 0.124455s, Solving time = 4.047722s, Total time = 4.172177s
39 : Statistics :: Grounding time = 0.143058s, Solving time = 4.762775s, Total time = 4.905833s
40 : Statistics :: Grounding time = 0.117373s, Solving time = 7.080960s, Total time = 7.198333s
41 : Statistics :: Grounding time = 0.389030s, Solving time = 7.564225s, Total time = 7.953256s
42 : Statistics :: Grounding time = 0.373973s, Solving time = 6.763652s, Total time = 7.137626s
43 : Statistics :: Grounding time = 0.393700s, Solving time = 4.783802s, Total time = 5.177502s
44 : Statistics :: Grounding time = 0.387769s, Solving time = 3.199833s, Total time = 3.587602s
45 : Statistics :: Grounding time = 0.405373s, Solving time = 7.819762s, Total time = 8.225135s
46 : Statistics :: Grounding time = 0.469394s, Solving time = 7.078476s, Total time = 7.547870s
47 : Statistics :: Grounding time = 0.416093s, Solving time = 8.400524s, Total time = 8.816616s
48 : Statistics :: Grounding time = 0.442005s, Solving time = 7.077539s, Total time = 7.519544s
49 : Statistics :: Grounding time = 0.445850s, Solving time = 11.352993s, Total time = 11.798843s
50 : Statistics :: Grounding time = 0.431696s, Solving time = 14.360274s, Total time = 14.791971s
51 : Statistics :: Grounding time = 0.479038s, Solving time = 11.781124s, Total time = 12.260162s
52 : Statistics :: Grounding time = 0.454596s, Solving time = 18.573716s, Total time = 19.028312s
53 : Statistics :: Grounding time = 0.509247s, Solving time = 12.327673s, Total time = 12.836919s

[05-02-2021_14-16-39] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 9.610636s, Solving time = 162.929418s, Total time = 173.590868s
Model :: Total atoms = 12271, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-16-39] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),24)
occurs(1,talos,configure(manipulator_limb_2,retracted),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,configure(manipulator_limb_2,extended),35)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),38)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),39)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),40)
occurs(1,talos,release(manipulator_end_1,(block,3)),41)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),42)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),43)
occurs(1,talos,release(manipulator_end_2,(block,5)),44)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),45)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),46)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),47)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),48)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_1,(block,2)),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),52)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),53)

[05-02-2021_14-16-39] INFO :: Experiment >> 

      ================================================      
           Experimental run 5 : Time 173.935683s            
      ================================================      

[05-02-2021_14-16-39] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-16-39] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Instantiated.

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Program building started.

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Program building completed.

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding base program parts.

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.017119s.

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving base program parts.

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.002785s.

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental solving started.

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.191097s.

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.008990s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.070442s.

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.006012s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.063194s.

[05-02-2021_14-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.007705s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.069090s.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.010222s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.068111s.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.014309s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.072572s.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.015500s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.080578s.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.016555s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.086536s.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.016944s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.079416s.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.019411s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.079597s.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.019637s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.078874s.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.020490s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.081151s.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.024930s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.079896s.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.027985s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.091380s.

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.039120s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.097597s.

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.042198s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.094307s.

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.061527s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.084012s.

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.073207s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.085048s.

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.065370s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.097081s.

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.064116s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.088268s.

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.064571s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.089690s.

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.120089s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.093337s.

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.150059s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.094646s.

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.229444s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.092746s.

[05-02-2021_14-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.334928s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.098398s.

[05-02-2021_14-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.418295s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.097275s.

[05-02-2021_14-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.650490s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-16-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-16-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.109947s.

[05-02-2021_14-16-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.650628s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-16-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-16-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.100343s.

[05-02-2021_14-16-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.494844s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-16-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-16-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.101313s.

[05-02-2021_14-16-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.715909s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-16-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-16-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.101343s.

[05-02-2021_14-16-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 1.094619s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-16-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-16-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.103350s.

[05-02-2021_14-16-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 1.207032s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-16-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-16-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.102473s.

[05-02-2021_14-16-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 1.559895s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-16-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-16-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.108430s.

[05-02-2021_14-16-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 1.951213s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-16-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-16-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.109199s.

[05-02-2021_14-16-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 2.990044s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-16-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-16-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.114504s.

[05-02-2021_14-16-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-16-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 2.279677s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-16-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-16-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-16-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.110973s.

[05-02-2021_14-16-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-17-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 3.557881s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-17-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-17-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-17-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.111611s.

[05-02-2021_14-17-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 3.617601s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.115860s.

[05-02-2021_14-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 4.020342s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.113295s.

[05-02-2021_14-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-17-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 5.371479s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-17-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-17-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-17-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.114599s.

[05-02-2021_14-17-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-17-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 5.998378s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-17-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-17-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-17-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.362940s.

[05-02-2021_14-17-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-17-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 7.686203s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-17-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-17-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-17-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.370092s.

[05-02-2021_14-17-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 6.908217s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.374442s.

[05-02-2021_14-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 6.510324s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.433257s.

[05-02-2021_14-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-17-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 8.478164s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-17-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-17-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-17-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.383776s.

[05-02-2021_14-17-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-18-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 9.616541s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-18-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-18-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-18-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.386114s.

[05-02-2021_14-18-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-18-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 7.059932s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-18-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-18-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-18-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.445439s.

[05-02-2021_14-18-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-18-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 5.570958s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-18-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-18-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-18-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.434396s.

[05-02-2021_14-18-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 7.337798s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.446694s.

[05-02-2021_14-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-18-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 5.848389s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-18-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-18-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-18-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.426768s.

[05-02-2021_14-18-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-18-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 9.688201s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-18-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-18-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-18-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.506196s.

[05-02-2021_14-18-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-18-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 7.609454s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-18-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-18-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-18-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.487113s.

[05-02-2021_14-18-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-18-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 9.948748s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-18-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-18-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-19-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.491687s.

[05-02-2021_14-19-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Model found:
Model :: Total atoms = 12272, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 12.655582s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental solving completed in 153.387768s because STOP_CON_REACHED.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 9.387612s, Solving time = 142.952940s, Total time = 153.387768s
Final Model :: Total atoms = 12272, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.191097s, Solving time = 0.008990s, Total time = 0.200087s
2 : Statistics :: Grounding time = 0.070442s, Solving time = 0.006012s, Total time = 0.076453s
3 : Statistics :: Grounding time = 0.063194s, Solving time = 0.007705s, Total time = 0.070899s
4 : Statistics :: Grounding time = 0.069090s, Solving time = 0.010222s, Total time = 0.079312s
5 : Statistics :: Grounding time = 0.068111s, Solving time = 0.014309s, Total time = 0.082419s
6 : Statistics :: Grounding time = 0.072572s, Solving time = 0.015500s, Total time = 0.088073s
7 : Statistics :: Grounding time = 0.080578s, Solving time = 0.016555s, Total time = 0.097133s
8 : Statistics :: Grounding time = 0.086536s, Solving time = 0.016944s, Total time = 0.103480s
9 : Statistics :: Grounding time = 0.079416s, Solving time = 0.019411s, Total time = 0.098827s
10 : Statistics :: Grounding time = 0.079597s, Solving time = 0.019637s, Total time = 0.099234s
11 : Statistics :: Grounding time = 0.078874s, Solving time = 0.020490s, Total time = 0.099364s
12 : Statistics :: Grounding time = 0.081151s, Solving time = 0.024930s, Total time = 0.106082s
13 : Statistics :: Grounding time = 0.079896s, Solving time = 0.027985s, Total time = 0.107882s
14 : Statistics :: Grounding time = 0.091380s, Solving time = 0.039120s, Total time = 0.130500s
15 : Statistics :: Grounding time = 0.097597s, Solving time = 0.042198s, Total time = 0.139795s
16 : Statistics :: Grounding time = 0.094307s, Solving time = 0.061527s, Total time = 0.155835s
17 : Statistics :: Grounding time = 0.084012s, Solving time = 0.073207s, Total time = 0.157219s
18 : Statistics :: Grounding time = 0.085048s, Solving time = 0.065370s, Total time = 0.150418s
19 : Statistics :: Grounding time = 0.097081s, Solving time = 0.064116s, Total time = 0.161197s
20 : Statistics :: Grounding time = 0.088268s, Solving time = 0.064571s, Total time = 0.152838s
21 : Statistics :: Grounding time = 0.089690s, Solving time = 0.120089s, Total time = 0.209779s
22 : Statistics :: Grounding time = 0.093337s, Solving time = 0.150059s, Total time = 0.243396s
23 : Statistics :: Grounding time = 0.094646s, Solving time = 0.229444s, Total time = 0.324090s
24 : Statistics :: Grounding time = 0.092746s, Solving time = 0.334928s, Total time = 0.427674s
25 : Statistics :: Grounding time = 0.098398s, Solving time = 0.418295s, Total time = 0.516693s
26 : Statistics :: Grounding time = 0.097275s, Solving time = 0.650490s, Total time = 0.747765s
27 : Statistics :: Grounding time = 0.109947s, Solving time = 0.650628s, Total time = 0.760575s
28 : Statistics :: Grounding time = 0.100343s, Solving time = 0.494844s, Total time = 0.595187s
29 : Statistics :: Grounding time = 0.101313s, Solving time = 0.715909s, Total time = 0.817222s
30 : Statistics :: Grounding time = 0.101343s, Solving time = 1.094619s, Total time = 1.195961s
31 : Statistics :: Grounding time = 0.103350s, Solving time = 1.207032s, Total time = 1.310382s
32 : Statistics :: Grounding time = 0.102473s, Solving time = 1.559895s, Total time = 1.662368s
33 : Statistics :: Grounding time = 0.108430s, Solving time = 1.951213s, Total time = 2.059643s
34 : Statistics :: Grounding time = 0.109199s, Solving time = 2.990044s, Total time = 3.099243s
35 : Statistics :: Grounding time = 0.114504s, Solving time = 2.279677s, Total time = 2.394181s
36 : Statistics :: Grounding time = 0.110973s, Solving time = 3.557881s, Total time = 3.668853s
37 : Statistics :: Grounding time = 0.111611s, Solving time = 3.617601s, Total time = 3.729213s
38 : Statistics :: Grounding time = 0.115860s, Solving time = 4.020342s, Total time = 4.136202s
39 : Statistics :: Grounding time = 0.113295s, Solving time = 5.371479s, Total time = 5.484774s
40 : Statistics :: Grounding time = 0.114599s, Solving time = 5.998378s, Total time = 6.112977s
41 : Statistics :: Grounding time = 0.362940s, Solving time = 7.686203s, Total time = 8.049143s
42 : Statistics :: Grounding time = 0.370092s, Solving time = 6.908217s, Total time = 7.278309s
43 : Statistics :: Grounding time = 0.374442s, Solving time = 6.510324s, Total time = 6.884766s
44 : Statistics :: Grounding time = 0.433257s, Solving time = 8.478164s, Total time = 8.911421s
45 : Statistics :: Grounding time = 0.383776s, Solving time = 9.616541s, Total time = 10.000317s
46 : Statistics :: Grounding time = 0.386114s, Solving time = 7.059932s, Total time = 7.446046s
47 : Statistics :: Grounding time = 0.445439s, Solving time = 5.570958s, Total time = 6.016397s
48 : Statistics :: Grounding time = 0.434396s, Solving time = 7.337798s, Total time = 7.772194s
49 : Statistics :: Grounding time = 0.446694s, Solving time = 5.848389s, Total time = 6.295083s
50 : Statistics :: Grounding time = 0.426768s, Solving time = 9.688201s, Total time = 10.114969s
51 : Statistics :: Grounding time = 0.506196s, Solving time = 7.609454s, Total time = 8.115651s
52 : Statistics :: Grounding time = 0.487113s, Solving time = 9.948748s, Total time = 10.435861s
53 : Statistics :: Grounding time = 0.491687s, Solving time = 12.655582s, Total time = 13.147269s

[05-02-2021_14-19-13] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 9.387612s, Solving time = 142.952940s, Total time = 153.387768s
Model :: Total atoms = 12272, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-19-13] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),22)
occurs(1,talos,configure(manipulator_limb_1,retracted),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),35)
occurs(1,talos,release(manipulator_end_2,(block,6)),36)
occurs(1,talos,configure(manipulator_limb_1,extended),37)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),38)
occurs(1,talos,release(manipulator_end_1,(block,5)),39)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),40)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),41)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),42)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),43)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),44)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),45)
occurs(1,talos,release(manipulator_end_1,(block,3)),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),48)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_1,(block,2)),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),52)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),53)

[05-02-2021_14-19-13] INFO :: Experiment >> 

      ================================================      
           Experimental run 6 : Time 153.702630s            
      ================================================      

[05-02-2021_14-19-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-19-13] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Instantiated.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Program building started.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Program building completed.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding base program parts.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.018451s.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving base program parts.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.004146s.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental solving started.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.199458s.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.008476s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.066398s.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.006251s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.065158s.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.007737s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.075806s.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.010605s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.071853s.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.016582s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.085194s.

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.018805s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.089595s.

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.017287s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.084521s.

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.018167s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.097553s.

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.019424s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.082139s.

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.022850s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.082798s.

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.021296s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.086359s.

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.028341s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.091695s.

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.033979s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.088997s.

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.031661s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-19-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.089187s.

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.053112s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.089805s.

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.064295s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.088048s.

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.048485s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.090946s.

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.074775s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.095757s.

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.070921s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.096463s.

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.068817s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-19-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.088761s.

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.051503s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.090366s.

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.078166s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.092052s.

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.097617s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.094044s.

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.138711s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.102928s.

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.170220s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-19-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-19-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.097134s.

[05-02-2021_14-19-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.174579s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-19-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-19-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.104936s.

[05-02-2021_14-19-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.176081s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-19-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-19-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.107350s.

[05-02-2021_14-19-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.331838s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-19-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-19-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.102031s.

[05-02-2021_14-19-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.510721s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-19-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-19-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.105553s.

[05-02-2021_14-19-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.578812s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-19-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-19-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.105432s.

[05-02-2021_14-19-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.831088s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-19-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-19-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.105199s.

[05-02-2021_14-19-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 1.577358s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.109693s.

[05-02-2021_14-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 1.454156s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.113479s.

[05-02-2021_14-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 1.849218s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.111315s.

[05-02-2021_14-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 2.292911s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-19-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-19-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.113302s.

[05-02-2021_14-19-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 3.590758s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-19-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-19-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.124768s.

[05-02-2021_14-19-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 4.351543s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-19-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-19-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.117553s.

[05-02-2021_14-19-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 5.101393s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.132380s.

[05-02-2021_14-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 5.301915s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-19-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-19-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.123309s.

[05-02-2021_14-19-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 3.953746s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-19-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-19-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.365835s.

[05-02-2021_14-19-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-19-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 5.160807s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-19-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-19-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-19-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.375156s.

[05-02-2021_14-19-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-20-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 3.729051s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-20-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-20-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-20-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.434947s.

[05-02-2021_14-20-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-20-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 3.853798s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-20-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-20-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-20-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.411798s.

[05-02-2021_14-20-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-20-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 4.742567s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-20-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-20-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-20-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.411445s.

[05-02-2021_14-20-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 7.382263s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.399121s.

[05-02-2021_14-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-20-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 11.134787s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-20-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-20-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-20-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.400768s.

[05-02-2021_14-20-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 8.651985s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.436532s.

[05-02-2021_14-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-20-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 9.096079s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-20-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-20-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-20-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.432966s.

[05-02-2021_14-20-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-20-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 10.239830s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-20-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-20-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-20-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.589619s.

[05-02-2021_14-20-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-21-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 9.640273s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-21-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-21-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.457479s.

[05-02-2021_14-21-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-21-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 13.275007s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-21-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-21-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.476838s.

[05-02-2021_14-21-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-21-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 14.437171s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-21-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-21-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.477405s.

[05-02-2021_14-21-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Model found:
Model :: Total atoms = 12265, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 15.824486s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental solving completed in 161.112373s because STOP_CON_REACHED.

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 9.647677s, Solving time = 150.426448s, Total time = 161.112373s
Final Model :: Total atoms = 12265, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.199458s, Solving time = 0.008476s, Total time = 0.207934s
2 : Statistics :: Grounding time = 0.066398s, Solving time = 0.006251s, Total time = 0.072649s
3 : Statistics :: Grounding time = 0.065158s, Solving time = 0.007737s, Total time = 0.072895s
4 : Statistics :: Grounding time = 0.075806s, Solving time = 0.010605s, Total time = 0.086411s
5 : Statistics :: Grounding time = 0.071853s, Solving time = 0.016582s, Total time = 0.088435s
6 : Statistics :: Grounding time = 0.085194s, Solving time = 0.018805s, Total time = 0.103999s
7 : Statistics :: Grounding time = 0.089595s, Solving time = 0.017287s, Total time = 0.106883s
8 : Statistics :: Grounding time = 0.084521s, Solving time = 0.018167s, Total time = 0.102688s
9 : Statistics :: Grounding time = 0.097553s, Solving time = 0.019424s, Total time = 0.116977s
10 : Statistics :: Grounding time = 0.082139s, Solving time = 0.022850s, Total time = 0.104989s
11 : Statistics :: Grounding time = 0.082798s, Solving time = 0.021296s, Total time = 0.104093s
12 : Statistics :: Grounding time = 0.086359s, Solving time = 0.028341s, Total time = 0.114700s
13 : Statistics :: Grounding time = 0.091695s, Solving time = 0.033979s, Total time = 0.125673s
14 : Statistics :: Grounding time = 0.088997s, Solving time = 0.031661s, Total time = 0.120658s
15 : Statistics :: Grounding time = 0.089187s, Solving time = 0.053112s, Total time = 0.142299s
16 : Statistics :: Grounding time = 0.089805s, Solving time = 0.064295s, Total time = 0.154099s
17 : Statistics :: Grounding time = 0.088048s, Solving time = 0.048485s, Total time = 0.136532s
18 : Statistics :: Grounding time = 0.090946s, Solving time = 0.074775s, Total time = 0.165721s
19 : Statistics :: Grounding time = 0.095757s, Solving time = 0.070921s, Total time = 0.166679s
20 : Statistics :: Grounding time = 0.096463s, Solving time = 0.068817s, Total time = 0.165280s
21 : Statistics :: Grounding time = 0.088761s, Solving time = 0.051503s, Total time = 0.140264s
22 : Statistics :: Grounding time = 0.090366s, Solving time = 0.078166s, Total time = 0.168532s
23 : Statistics :: Grounding time = 0.092052s, Solving time = 0.097617s, Total time = 0.189669s
24 : Statistics :: Grounding time = 0.094044s, Solving time = 0.138711s, Total time = 0.232755s
25 : Statistics :: Grounding time = 0.102928s, Solving time = 0.170220s, Total time = 0.273148s
26 : Statistics :: Grounding time = 0.097134s, Solving time = 0.174579s, Total time = 0.271714s
27 : Statistics :: Grounding time = 0.104936s, Solving time = 0.176081s, Total time = 0.281018s
28 : Statistics :: Grounding time = 0.107350s, Solving time = 0.331838s, Total time = 0.439187s
29 : Statistics :: Grounding time = 0.102031s, Solving time = 0.510721s, Total time = 0.612752s
30 : Statistics :: Grounding time = 0.105553s, Solving time = 0.578812s, Total time = 0.684365s
31 : Statistics :: Grounding time = 0.105432s, Solving time = 0.831088s, Total time = 0.936520s
32 : Statistics :: Grounding time = 0.105199s, Solving time = 1.577358s, Total time = 1.682557s
33 : Statistics :: Grounding time = 0.109693s, Solving time = 1.454156s, Total time = 1.563849s
34 : Statistics :: Grounding time = 0.113479s, Solving time = 1.849218s, Total time = 1.962696s
35 : Statistics :: Grounding time = 0.111315s, Solving time = 2.292911s, Total time = 2.404227s
36 : Statistics :: Grounding time = 0.113302s, Solving time = 3.590758s, Total time = 3.704060s
37 : Statistics :: Grounding time = 0.124768s, Solving time = 4.351543s, Total time = 4.476311s
38 : Statistics :: Grounding time = 0.117553s, Solving time = 5.101393s, Total time = 5.218946s
39 : Statistics :: Grounding time = 0.132380s, Solving time = 5.301915s, Total time = 5.434295s
40 : Statistics :: Grounding time = 0.123309s, Solving time = 3.953746s, Total time = 4.077055s
41 : Statistics :: Grounding time = 0.365835s, Solving time = 5.160807s, Total time = 5.526642s
42 : Statistics :: Grounding time = 0.375156s, Solving time = 3.729051s, Total time = 4.104207s
43 : Statistics :: Grounding time = 0.434947s, Solving time = 3.853798s, Total time = 4.288745s
44 : Statistics :: Grounding time = 0.411798s, Solving time = 4.742567s, Total time = 5.154365s
45 : Statistics :: Grounding time = 0.411445s, Solving time = 7.382263s, Total time = 7.793707s
46 : Statistics :: Grounding time = 0.399121s, Solving time = 11.134787s, Total time = 11.533908s
47 : Statistics :: Grounding time = 0.400768s, Solving time = 8.651985s, Total time = 9.052753s
48 : Statistics :: Grounding time = 0.436532s, Solving time = 9.096079s, Total time = 9.532611s
49 : Statistics :: Grounding time = 0.432966s, Solving time = 10.239830s, Total time = 10.672796s
50 : Statistics :: Grounding time = 0.589619s, Solving time = 9.640273s, Total time = 10.229892s
51 : Statistics :: Grounding time = 0.457479s, Solving time = 13.275007s, Total time = 13.732485s
52 : Statistics :: Grounding time = 0.476838s, Solving time = 14.437171s, Total time = 14.914009s
53 : Statistics :: Grounding time = 0.477405s, Solving time = 15.824486s, Total time = 16.301891s

[05-02-2021_14-21-54] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 9.647677s, Solving time = 150.426448s, Total time = 161.112373s
Model :: Total atoms = 12265, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-21-54] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_2,retracted),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,configure(manipulator_limb_2,extended),35)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),38)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),39)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),40)
occurs(1,talos,release(manipulator_end_2,(block,5)),41)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),42)
occurs(1,talos,release(manipulator_end_1,(block,3)),43)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),44)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),45)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),46)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),47)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),48)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_1,(block,2)),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),52)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),53)

[05-02-2021_14-21-54] INFO :: Experiment >> 

      ================================================      
           Experimental run 7 : Time 161.402731s            
      ================================================      

[05-02-2021_14-21-54] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-21-54] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Instantiated.

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Program building started.

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Program building completed.

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding base program parts.

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.017390s.

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving base program parts.

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.003711s.

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental solving started.

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.188197s.

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.009479s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-21-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.063707s.

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.006054s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.064207s.

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.008084s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.067185s.

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.009964s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.076366s.

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.015005s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.090411s.

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.016156s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.077488s.

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.015707s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.076864s.

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.016492s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.081067s.

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.019181s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.083044s.

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.022098s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.080536s.

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.026876s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.081358s.

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.027918s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.081940s.

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.037917s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.093222s.

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.043976s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.086447s.

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.035341s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.085553s.

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.032114s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.085193s.

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.032244s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.088759s.

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.052849s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.088034s.

[05-02-2021_14-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.087808s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.091318s.

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.091611s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.090697s.

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.093955s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.092213s.

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.134330s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.095993s.

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.174461s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-21-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.094173s.

[05-02-2021_14-21-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.273216s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-21-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-21-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.105375s.

[05-02-2021_14-21-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.344904s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-21-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-21-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.095300s.

[05-02-2021_14-21-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-21-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.576724s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-21-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-21-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-21-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.106289s.

[05-02-2021_14-21-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-22-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.943138s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-22-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-22-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-22-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.103967s.

[05-02-2021_14-22-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 1.596916s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.100064s.

[05-02-2021_14-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-22-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 1.240714s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-22-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-22-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-22-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.117786s.

[05-02-2021_14-22-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-22-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.539757s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-22-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-22-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-22-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.104576s.

[05-02-2021_14-22-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-22-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.498836s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-22-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-22-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.106828s.

[05-02-2021_14-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.480308s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.105720s.

[05-02-2021_14-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.694508s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.109330s.

[05-02-2021_14-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 1.108286s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.108811s.

[05-02-2021_14-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-22-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 1.544481s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-22-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-22-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-22-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.110744s.

[05-02-2021_14-22-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-22-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 3.084109s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-22-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-22-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-22-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.112208s.

[05-02-2021_14-22-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 3.802348s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.115570s.

[05-02-2021_14-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-22-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 4.783944s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-22-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-22-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-22-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.128294s.

[05-02-2021_14-22-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-22-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 5.404825s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-22-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-22-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-22-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.118709s.

[05-02-2021_14-22-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-22-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 6.862858s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-22-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-22-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-22-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.385806s.

[05-02-2021_14-22-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-22-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 3.835721s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-22-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-22-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-22-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.368321s.

[05-02-2021_14-22-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-22-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 4.304689s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-22-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-22-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-22-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.377101s.

[05-02-2021_14-22-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-22-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 3.586945s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-22-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-22-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-22-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.411444s.

[05-02-2021_14-22-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 5.578759s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.397901s.

[05-02-2021_14-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-23-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 6.727291s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-23-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-23-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-23-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.421815s.

[05-02-2021_14-23-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-23-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 9.445303s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-23-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-23-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.409118s.

[05-02-2021_14-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-23-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 9.012387s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-23-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-23-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-23-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.440995s.

[05-02-2021_14-23-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-23-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 10.019384s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-23-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-23-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-23-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.437753s.

[05-02-2021_14-23-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-23-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 10.258010s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-23-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-23-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-23-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.449572s.

[05-02-2021_14-23-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-23-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 10.625202s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-23-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-23-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-23-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.462801s.

[05-02-2021_14-23-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 10.369061s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.472681s.

[05-02-2021_14-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-24-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 12.958905s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-24-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-24-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.552997s.

[05-02-2021_14-24-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Model found:
Model :: Total atoms = 12270, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 10.448233s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental solving completed in 152.443448s because STOP_CON_REACHED.

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 9.459237s, Solving time = 141.963094s, Total time = 152.443448s
Final Model :: Total atoms = 12270, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.188197s, Solving time = 0.009479s, Total time = 0.197676s
2 : Statistics :: Grounding time = 0.063707s, Solving time = 0.006054s, Total time = 0.069761s
3 : Statistics :: Grounding time = 0.064207s, Solving time = 0.008084s, Total time = 0.072291s
4 : Statistics :: Grounding time = 0.067185s, Solving time = 0.009964s, Total time = 0.077148s
5 : Statistics :: Grounding time = 0.076366s, Solving time = 0.015005s, Total time = 0.091371s
6 : Statistics :: Grounding time = 0.090411s, Solving time = 0.016156s, Total time = 0.106567s
7 : Statistics :: Grounding time = 0.077488s, Solving time = 0.015707s, Total time = 0.093195s
8 : Statistics :: Grounding time = 0.076864s, Solving time = 0.016492s, Total time = 0.093356s
9 : Statistics :: Grounding time = 0.081067s, Solving time = 0.019181s, Total time = 0.100249s
10 : Statistics :: Grounding time = 0.083044s, Solving time = 0.022098s, Total time = 0.105142s
11 : Statistics :: Grounding time = 0.080536s, Solving time = 0.026876s, Total time = 0.107412s
12 : Statistics :: Grounding time = 0.081358s, Solving time = 0.027918s, Total time = 0.109275s
13 : Statistics :: Grounding time = 0.081940s, Solving time = 0.037917s, Total time = 0.119857s
14 : Statistics :: Grounding time = 0.093222s, Solving time = 0.043976s, Total time = 0.137198s
15 : Statistics :: Grounding time = 0.086447s, Solving time = 0.035341s, Total time = 0.121788s
16 : Statistics :: Grounding time = 0.085553s, Solving time = 0.032114s, Total time = 0.117667s
17 : Statistics :: Grounding time = 0.085193s, Solving time = 0.032244s, Total time = 0.117437s
18 : Statistics :: Grounding time = 0.088759s, Solving time = 0.052849s, Total time = 0.141609s
19 : Statistics :: Grounding time = 0.088034s, Solving time = 0.087808s, Total time = 0.175842s
20 : Statistics :: Grounding time = 0.091318s, Solving time = 0.091611s, Total time = 0.182928s
21 : Statistics :: Grounding time = 0.090697s, Solving time = 0.093955s, Total time = 0.184652s
22 : Statistics :: Grounding time = 0.092213s, Solving time = 0.134330s, Total time = 0.226543s
23 : Statistics :: Grounding time = 0.095993s, Solving time = 0.174461s, Total time = 0.270454s
24 : Statistics :: Grounding time = 0.094173s, Solving time = 0.273216s, Total time = 0.367389s
25 : Statistics :: Grounding time = 0.105375s, Solving time = 0.344904s, Total time = 0.450279s
26 : Statistics :: Grounding time = 0.095300s, Solving time = 0.576724s, Total time = 0.672025s
27 : Statistics :: Grounding time = 0.106289s, Solving time = 0.943138s, Total time = 1.049427s
28 : Statistics :: Grounding time = 0.103967s, Solving time = 1.596916s, Total time = 1.700883s
29 : Statistics :: Grounding time = 0.100064s, Solving time = 1.240714s, Total time = 1.340778s
30 : Statistics :: Grounding time = 0.117786s, Solving time = 0.539757s, Total time = 0.657543s
31 : Statistics :: Grounding time = 0.104576s, Solving time = 0.498836s, Total time = 0.603413s
32 : Statistics :: Grounding time = 0.106828s, Solving time = 0.480308s, Total time = 0.587136s
33 : Statistics :: Grounding time = 0.105720s, Solving time = 0.694508s, Total time = 0.800228s
34 : Statistics :: Grounding time = 0.109330s, Solving time = 1.108286s, Total time = 1.217616s
35 : Statistics :: Grounding time = 0.108811s, Solving time = 1.544481s, Total time = 1.653292s
36 : Statistics :: Grounding time = 0.110744s, Solving time = 3.084109s, Total time = 3.194853s
37 : Statistics :: Grounding time = 0.112208s, Solving time = 3.802348s, Total time = 3.914556s
38 : Statistics :: Grounding time = 0.115570s, Solving time = 4.783944s, Total time = 4.899514s
39 : Statistics :: Grounding time = 0.128294s, Solving time = 5.404825s, Total time = 5.533119s
40 : Statistics :: Grounding time = 0.118709s, Solving time = 6.862858s, Total time = 6.981567s
41 : Statistics :: Grounding time = 0.385806s, Solving time = 3.835721s, Total time = 4.221527s
42 : Statistics :: Grounding time = 0.368321s, Solving time = 4.304689s, Total time = 4.673009s
43 : Statistics :: Grounding time = 0.377101s, Solving time = 3.586945s, Total time = 3.964046s
44 : Statistics :: Grounding time = 0.411444s, Solving time = 5.578759s, Total time = 5.990204s
45 : Statistics :: Grounding time = 0.397901s, Solving time = 6.727291s, Total time = 7.125192s
46 : Statistics :: Grounding time = 0.421815s, Solving time = 9.445303s, Total time = 9.867118s
47 : Statistics :: Grounding time = 0.409118s, Solving time = 9.012387s, Total time = 9.421505s
48 : Statistics :: Grounding time = 0.440995s, Solving time = 10.019384s, Total time = 10.460379s
49 : Statistics :: Grounding time = 0.437753s, Solving time = 10.258010s, Total time = 10.695764s
50 : Statistics :: Grounding time = 0.449572s, Solving time = 10.625202s, Total time = 11.074773s
51 : Statistics :: Grounding time = 0.462801s, Solving time = 10.369061s, Total time = 10.831862s
52 : Statistics :: Grounding time = 0.472681s, Solving time = 12.958905s, Total time = 13.431585s
53 : Statistics :: Grounding time = 0.552997s, Solving time = 10.448233s, Total time = 11.001230s

[05-02-2021_14-24-27] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 9.459237s, Solving time = 141.963094s, Total time = 152.443448s
Model :: Total atoms = 12270, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-24-27] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),36)
occurs(1,talos,release(manipulator_end_2,(block,6)),37)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),38)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),39)
occurs(1,talos,release(manipulator_end_1,(block,5)),40)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),41)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),42)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),43)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),44)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),45)
occurs(1,talos,release(manipulator_end_2,(block,3)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[05-02-2021_14-24-27] INFO :: Experiment >> 

      ================================================      
           Experimental run 8 : Time 152.736906s            
      ================================================      

[05-02-2021_14-24-27] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-24-27] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Instantiated.

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Program building started.

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Program building completed.

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding base program parts.

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.025748s.

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving base program parts.

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.002858s.

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental solving started.

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.210274s.

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.009689s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.063550s.

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.006321s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.064781s.

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.007602s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.067690s.

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.010937s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-24-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.073755s.

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.014868s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.071783s.

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.014122s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.085798s.

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.018850s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.102511s.

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.017083s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.089685s.

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.021434s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.086720s.

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.021326s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.084249s.

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.024043s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.085435s.

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.024450s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.096765s.

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.025421s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.083153s.

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.031061s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.085318s.

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.032131s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.092336s.

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.037143s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.087146s.

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.040214s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.091360s.

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.056870s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.090651s.

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.060133s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.099157s.

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.074896s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.091050s.

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.096183s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.093625s.

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.091694s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.094959s.

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.110560s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.096089s.

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.174880s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.095257s.

[05-02-2021_14-24-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.250728s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-24-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-24-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.096354s.

[05-02-2021_14-24-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.420207s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-24-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-24-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.103363s.

[05-02-2021_14-24-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.650798s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-24-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-24-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.101084s.

[05-02-2021_14-24-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.721939s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-24-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-24-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.101156s.

[05-02-2021_14-24-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 1.147146s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-24-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-24-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.104308s.

[05-02-2021_14-24-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 1.144057s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-24-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-24-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.105291s.

[05-02-2021_14-24-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 1.294048s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-24-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-24-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.105296s.

[05-02-2021_14-24-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 1.146828s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-24-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-24-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.106001s.

[05-02-2021_14-24-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 2.088245s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-24-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-24-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.107472s.

[05-02-2021_14-24-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 2.797877s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-24-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-24-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.110881s.

[05-02-2021_14-24-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 2.920674s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-24-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-24-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.110784s.

[05-02-2021_14-24-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 2.577041s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-24-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-24-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.115710s.

[05-02-2021_14-24-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 1.855243s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-24-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-24-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.120242s.

[05-02-2021_14-24-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-24-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 4.538813s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-24-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-24-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-24-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.117391s.

[05-02-2021_14-24-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-25-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 4.018517s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-25-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-25-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-25-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.118554s.

[05-02-2021_14-25-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-25-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 4.548913s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-25-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-25-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-25-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.469646s.

[05-02-2021_14-25-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-25-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 6.016154s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-25-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-25-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.415550s.

[05-02-2021_14-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-25-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 7.006275s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-25-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-25-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-25-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.413098s.

[05-02-2021_14-25-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-25-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 7.298392s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-25-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-25-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.389694s.

[05-02-2021_14-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-25-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 5.973598s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-25-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-25-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-25-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.396669s.

[05-02-2021_14-25-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-25-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 8.860552s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-25-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-25-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-25-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.403570s.

[05-02-2021_14-25-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-25-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 9.841916s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-25-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-25-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-25-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.429917s.

[05-02-2021_14-25-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-26-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 9.092526s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-26-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-26-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-26-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.465677s.

[05-02-2021_14-26-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-26-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 8.221579s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-26-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-26-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-26-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.484934s.

[05-02-2021_14-26-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-26-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 8.940903s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-26-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-26-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-26-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.471031s.

[05-02-2021_14-26-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-26-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 9.292849s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-26-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-26-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-26-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.472017s.

[05-02-2021_14-26-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-26-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 14.783306s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-26-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-26-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-26-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.501600s.

[05-02-2021_14-26-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-26-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 13.062610s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-26-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-26-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-26-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.531409s.

[05-02-2021_14-26-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_14-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Model found:
Model :: Total atoms = 12267, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 10.736362s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental solving completed in 163.105749s because STOP_CON_REACHED.

[05-02-2021_14-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 9.777546s, Solving time = 152.272867s, Total time = 163.105749s
Final Model :: Total atoms = 12267, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.210274s, Solving time = 0.009689s, Total time = 0.219963s
2 : Statistics :: Grounding time = 0.063550s, Solving time = 0.006321s, Total time = 0.069871s
3 : Statistics :: Grounding time = 0.064781s, Solving time = 0.007602s, Total time = 0.072383s
4 : Statistics :: Grounding time = 0.067690s, Solving time = 0.010937s, Total time = 0.078626s
5 : Statistics :: Grounding time = 0.073755s, Solving time = 0.014868s, Total time = 0.088622s
6 : Statistics :: Grounding time = 0.071783s, Solving time = 0.014122s, Total time = 0.085905s
7 : Statistics :: Grounding time = 0.085798s, Solving time = 0.018850s, Total time = 0.104649s
8 : Statistics :: Grounding time = 0.102511s, Solving time = 0.017083s, Total time = 0.119594s
9 : Statistics :: Grounding time = 0.089685s, Solving time = 0.021434s, Total time = 0.111119s
10 : Statistics :: Grounding time = 0.086720s, Solving time = 0.021326s, Total time = 0.108046s
11 : Statistics :: Grounding time = 0.084249s, Solving time = 0.024043s, Total time = 0.108292s
12 : Statistics :: Grounding time = 0.085435s, Solving time = 0.024450s, Total time = 0.109886s
13 : Statistics :: Grounding time = 0.096765s, Solving time = 0.025421s, Total time = 0.122186s
14 : Statistics :: Grounding time = 0.083153s, Solving time = 0.031061s, Total time = 0.114215s
15 : Statistics :: Grounding time = 0.085318s, Solving time = 0.032131s, Total time = 0.117448s
16 : Statistics :: Grounding time = 0.092336s, Solving time = 0.037143s, Total time = 0.129479s
17 : Statistics :: Grounding time = 0.087146s, Solving time = 0.040214s, Total time = 0.127359s
18 : Statistics :: Grounding time = 0.091360s, Solving time = 0.056870s, Total time = 0.148230s
19 : Statistics :: Grounding time = 0.090651s, Solving time = 0.060133s, Total time = 0.150784s
20 : Statistics :: Grounding time = 0.099157s, Solving time = 0.074896s, Total time = 0.174052s
21 : Statistics :: Grounding time = 0.091050s, Solving time = 0.096183s, Total time = 0.187233s
22 : Statistics :: Grounding time = 0.093625s, Solving time = 0.091694s, Total time = 0.185319s
23 : Statistics :: Grounding time = 0.094959s, Solving time = 0.110560s, Total time = 0.205519s
24 : Statistics :: Grounding time = 0.096089s, Solving time = 0.174880s, Total time = 0.270969s
25 : Statistics :: Grounding time = 0.095257s, Solving time = 0.250728s, Total time = 0.345985s
26 : Statistics :: Grounding time = 0.096354s, Solving time = 0.420207s, Total time = 0.516561s
27 : Statistics :: Grounding time = 0.103363s, Solving time = 0.650798s, Total time = 0.754161s
28 : Statistics :: Grounding time = 0.101084s, Solving time = 0.721939s, Total time = 0.823023s
29 : Statistics :: Grounding time = 0.101156s, Solving time = 1.147146s, Total time = 1.248301s
30 : Statistics :: Grounding time = 0.104308s, Solving time = 1.144057s, Total time = 1.248365s
31 : Statistics :: Grounding time = 0.105291s, Solving time = 1.294048s, Total time = 1.399340s
32 : Statistics :: Grounding time = 0.105296s, Solving time = 1.146828s, Total time = 1.252124s
33 : Statistics :: Grounding time = 0.106001s, Solving time = 2.088245s, Total time = 2.194245s
34 : Statistics :: Grounding time = 0.107472s, Solving time = 2.797877s, Total time = 2.905349s
35 : Statistics :: Grounding time = 0.110881s, Solving time = 2.920674s, Total time = 3.031555s
36 : Statistics :: Grounding time = 0.110784s, Solving time = 2.577041s, Total time = 2.687826s
37 : Statistics :: Grounding time = 0.115710s, Solving time = 1.855243s, Total time = 1.970954s
38 : Statistics :: Grounding time = 0.120242s, Solving time = 4.538813s, Total time = 4.659055s
39 : Statistics :: Grounding time = 0.117391s, Solving time = 4.018517s, Total time = 4.135909s
40 : Statistics :: Grounding time = 0.118554s, Solving time = 4.548913s, Total time = 4.667467s
41 : Statistics :: Grounding time = 0.469646s, Solving time = 6.016154s, Total time = 6.485800s
42 : Statistics :: Grounding time = 0.415550s, Solving time = 7.006275s, Total time = 7.421825s
43 : Statistics :: Grounding time = 0.413098s, Solving time = 7.298392s, Total time = 7.711491s
44 : Statistics :: Grounding time = 0.389694s, Solving time = 5.973598s, Total time = 6.363292s
45 : Statistics :: Grounding time = 0.396669s, Solving time = 8.860552s, Total time = 9.257221s
46 : Statistics :: Grounding time = 0.403570s, Solving time = 9.841916s, Total time = 10.245486s
47 : Statistics :: Grounding time = 0.429917s, Solving time = 9.092526s, Total time = 9.522443s
48 : Statistics :: Grounding time = 0.465677s, Solving time = 8.221579s, Total time = 8.687255s
49 : Statistics :: Grounding time = 0.484934s, Solving time = 8.940903s, Total time = 9.425838s
50 : Statistics :: Grounding time = 0.471031s, Solving time = 9.292849s, Total time = 9.763880s
51 : Statistics :: Grounding time = 0.472017s, Solving time = 14.783306s, Total time = 15.255323s
52 : Statistics :: Grounding time = 0.501600s, Solving time = 13.062610s, Total time = 13.564211s
53 : Statistics :: Grounding time = 0.531409s, Solving time = 10.736362s, Total time = 11.267771s

[05-02-2021_14-27-10] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 9.777546s, Solving time = 152.272867s, Total time = 163.105749s
Model :: Total atoms = 12267, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-27-10] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_1,retracted),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,configure(manipulator_limb_2,extended),35)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),36)
occurs(1,talos,release(manipulator_end_2,(block,6)),37)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),38)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),39)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),40)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),41)
occurs(1,talos,release(manipulator_end_1,(block,5)),42)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),43)
occurs(1,talos,release(manipulator_end_2,(block,3)),44)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),45)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),46)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),47)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),48)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_1,(block,2)),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),52)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),53)

[05-02-2021_14-27-10] INFO :: Experiment >> 

      ================================================      
           Experimental run 9 : Time 163.403214s            
      ================================================      

[05-02-2021_14-27-10] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-27-10] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Instantiated.

[05-02-2021_14-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Program building started.

[05-02-2021_14-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Program building completed.

[05-02-2021_14-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding base program parts.

[05-02-2021_14-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.021838s.

[05-02-2021_14-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving base program parts.

[05-02-2021_14-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.003911s.

[05-02-2021_14-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental solving started.

[05-02-2021_14-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.197719s.

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.009123s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.066296s.

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.007058s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.071918s.

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.008483s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.071324s.

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.010520s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.073119s.

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.015209s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.090844s.

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.013477s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.081770s.

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.015833s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.087571s.

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.019611s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.120195s.

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.021667s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.083104s.

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.021191s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.085397s.

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.023628s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.092026s.

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.035358s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.089609s.

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.033000s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.085427s.

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.036300s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.090454s.

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.063081s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.090182s.

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.051535s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-27-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.095100s.

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.066152s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.092753s.

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.072803s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.091937s.

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.077389s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.094009s.

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.094910s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.096699s.

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.124782s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.100743s.

[05-02-2021_14-27-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.150173s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-27-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-27-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.103225s.

[05-02-2021_14-27-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.239366s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-27-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-27-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.100680s.

[05-02-2021_14-27-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.338365s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-27-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-27-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.097349s.

[05-02-2021_14-27-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.425168s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-27-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-27-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.097286s.

[05-02-2021_14-27-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.419248s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-27-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-27-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.101887s.

[05-02-2021_14-27-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.432757s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-27-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-27-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.101149s.

[05-02-2021_14-27-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.558569s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-27-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-27-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.108034s.

[05-02-2021_14-27-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.764753s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-27-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-27-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.106841s.

[05-02-2021_14-27-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.973593s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-27-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-27-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.104924s.

[05-02-2021_14-27-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.803760s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-27-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-27-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.116140s.

[05-02-2021_14-27-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.993002s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.108822s.

[05-02-2021_14-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 1.141798s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.109040s.

[05-02-2021_14-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 2.041310s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-27-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-27-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.118260s.

[05-02-2021_14-27-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 3.261366s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-27-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-27-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.143918s.

[05-02-2021_14-27-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 2.655759s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-27-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-27-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.130423s.

[05-02-2021_14-27-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 3.931028s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.123038s.

[05-02-2021_14-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 3.681316s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.119804s.

[05-02-2021_14-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 5.255874s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-27-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-27-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.123365s.

[05-02-2021_14-27-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 6.590724s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-27-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-27-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.373110s.

[05-02-2021_14-27-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-27-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 6.064982s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-27-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-27-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-27-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.380809s.

[05-02-2021_14-27-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-28-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 9.003927s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-28-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-28-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-28-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.385879s.

[05-02-2021_14-28-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-28-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 5.543365s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-28-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-28-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-28-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.396950s.

[05-02-2021_14-28-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-28-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 6.493447s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-28-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-28-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-28-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.414718s.

[05-02-2021_14-28-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-28-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 7.485834s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-28-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-28-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-28-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.396690s.

[05-02-2021_14-28-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-28-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 9.218459s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-28-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-28-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-28-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.418167s.

[05-02-2021_14-28-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 12.186546s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.422789s.

[05-02-2021_14-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-28-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 7.925243s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-28-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-28-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-28-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.424443s.

[05-02-2021_14-28-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-29-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 7.044224s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-29-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-29-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.438230s.

[05-02-2021_14-29-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-29-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 7.005927s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-29-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-29-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.463156s.

[05-02-2021_14-29-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-29-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 9.681950s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-29-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.527135s.

[05-02-2021_14-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-29-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 15.206364s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-29-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-29-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.466157s.

[05-02-2021_14-29-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Model found:
Model :: Total atoms = 12266, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 11.409146s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental solving completed in 160.381667s because STOP_CON_REACHED.

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 9.592453s, Solving time = 149.752369s, Total time = 160.381667s
Final Model :: Total atoms = 12266, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.197719s, Solving time = 0.009123s, Total time = 0.206843s
2 : Statistics :: Grounding time = 0.066296s, Solving time = 0.007058s, Total time = 0.073353s
3 : Statistics :: Grounding time = 0.071918s, Solving time = 0.008483s, Total time = 0.080401s
4 : Statistics :: Grounding time = 0.071324s, Solving time = 0.010520s, Total time = 0.081844s
5 : Statistics :: Grounding time = 0.073119s, Solving time = 0.015209s, Total time = 0.088328s
6 : Statistics :: Grounding time = 0.090844s, Solving time = 0.013477s, Total time = 0.104322s
7 : Statistics :: Grounding time = 0.081770s, Solving time = 0.015833s, Total time = 0.097603s
8 : Statistics :: Grounding time = 0.087571s, Solving time = 0.019611s, Total time = 0.107183s
9 : Statistics :: Grounding time = 0.120195s, Solving time = 0.021667s, Total time = 0.141862s
10 : Statistics :: Grounding time = 0.083104s, Solving time = 0.021191s, Total time = 0.104294s
11 : Statistics :: Grounding time = 0.085397s, Solving time = 0.023628s, Total time = 0.109025s
12 : Statistics :: Grounding time = 0.092026s, Solving time = 0.035358s, Total time = 0.127385s
13 : Statistics :: Grounding time = 0.089609s, Solving time = 0.033000s, Total time = 0.122609s
14 : Statistics :: Grounding time = 0.085427s, Solving time = 0.036300s, Total time = 0.121727s
15 : Statistics :: Grounding time = 0.090454s, Solving time = 0.063081s, Total time = 0.153535s
16 : Statistics :: Grounding time = 0.090182s, Solving time = 0.051535s, Total time = 0.141718s
17 : Statistics :: Grounding time = 0.095100s, Solving time = 0.066152s, Total time = 0.161252s
18 : Statistics :: Grounding time = 0.092753s, Solving time = 0.072803s, Total time = 0.165556s
19 : Statistics :: Grounding time = 0.091937s, Solving time = 0.077389s, Total time = 0.169327s
20 : Statistics :: Grounding time = 0.094009s, Solving time = 0.094910s, Total time = 0.188920s
21 : Statistics :: Grounding time = 0.096699s, Solving time = 0.124782s, Total time = 0.221481s
22 : Statistics :: Grounding time = 0.100743s, Solving time = 0.150173s, Total time = 0.250916s
23 : Statistics :: Grounding time = 0.103225s, Solving time = 0.239366s, Total time = 0.342591s
24 : Statistics :: Grounding time = 0.100680s, Solving time = 0.338365s, Total time = 0.439045s
25 : Statistics :: Grounding time = 0.097349s, Solving time = 0.425168s, Total time = 0.522516s
26 : Statistics :: Grounding time = 0.097286s, Solving time = 0.419248s, Total time = 0.516534s
27 : Statistics :: Grounding time = 0.101887s, Solving time = 0.432757s, Total time = 0.534644s
28 : Statistics :: Grounding time = 0.101149s, Solving time = 0.558569s, Total time = 0.659718s
29 : Statistics :: Grounding time = 0.108034s, Solving time = 0.764753s, Total time = 0.872787s
30 : Statistics :: Grounding time = 0.106841s, Solving time = 0.973593s, Total time = 1.080433s
31 : Statistics :: Grounding time = 0.104924s, Solving time = 0.803760s, Total time = 0.908684s
32 : Statistics :: Grounding time = 0.116140s, Solving time = 0.993002s, Total time = 1.109143s
33 : Statistics :: Grounding time = 0.108822s, Solving time = 1.141798s, Total time = 1.250620s
34 : Statistics :: Grounding time = 0.109040s, Solving time = 2.041310s, Total time = 2.150350s
35 : Statistics :: Grounding time = 0.118260s, Solving time = 3.261366s, Total time = 3.379626s
36 : Statistics :: Grounding time = 0.143918s, Solving time = 2.655759s, Total time = 2.799678s
37 : Statistics :: Grounding time = 0.130423s, Solving time = 3.931028s, Total time = 4.061451s
38 : Statistics :: Grounding time = 0.123038s, Solving time = 3.681316s, Total time = 3.804354s
39 : Statistics :: Grounding time = 0.119804s, Solving time = 5.255874s, Total time = 5.375679s
40 : Statistics :: Grounding time = 0.123365s, Solving time = 6.590724s, Total time = 6.714090s
41 : Statistics :: Grounding time = 0.373110s, Solving time = 6.064982s, Total time = 6.438092s
42 : Statistics :: Grounding time = 0.380809s, Solving time = 9.003927s, Total time = 9.384736s
43 : Statistics :: Grounding time = 0.385879s, Solving time = 5.543365s, Total time = 5.929244s
44 : Statistics :: Grounding time = 0.396950s, Solving time = 6.493447s, Total time = 6.890397s
45 : Statistics :: Grounding time = 0.414718s, Solving time = 7.485834s, Total time = 7.900552s
46 : Statistics :: Grounding time = 0.396690s, Solving time = 9.218459s, Total time = 9.615149s
47 : Statistics :: Grounding time = 0.418167s, Solving time = 12.186546s, Total time = 12.604713s
48 : Statistics :: Grounding time = 0.422789s, Solving time = 7.925243s, Total time = 8.348033s
49 : Statistics :: Grounding time = 0.424443s, Solving time = 7.044224s, Total time = 7.468667s
50 : Statistics :: Grounding time = 0.438230s, Solving time = 7.005927s, Total time = 7.444157s
51 : Statistics :: Grounding time = 0.463156s, Solving time = 9.681950s, Total time = 10.145106s
52 : Statistics :: Grounding time = 0.527135s, Solving time = 15.206364s, Total time = 15.733499s
53 : Statistics :: Grounding time = 0.466157s, Solving time = 11.409146s, Total time = 11.875303s

[05-02-2021_14-29-51] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 9.592453s, Solving time = 149.752369s, Total time = 160.381667s
Model :: Total atoms = 12266, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_14-29-51] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_1,retracted),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),35)
occurs(1,talos,release(manipulator_end_1,(block,6)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),38)
occurs(1,talos,configure(manipulator_limb_2,extended),39)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),40)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),41)
occurs(1,talos,release(manipulator_end_1,(block,3)),42)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),43)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),44)
occurs(1,talos,release(manipulator_end_2,(block,5)),45)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[05-02-2021_14-29-51] INFO :: Experiment >> 

      ================================================      
           Experimental run 10 : Time 160.679957s           
      ================================================      

[05-02-2021_14-29-51] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-29-51] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Instantiated.

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Program building started.

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Program building completed.

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding base program parts.

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.019520s.

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving base program parts.

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.003397s.

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental solving started.

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.207155s.

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.009170s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.065965s.

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.006049s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.068154s.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.008055s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.070307s.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.009988s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.073001s.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.015800s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.074406s.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.013502s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.076515s.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.016273s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.079193s.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.016155s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.077047s.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.017213s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.076928s.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.018562s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.084279s.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.022282s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.082708s.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.025702s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.083005s.

[05-02-2021_14-29-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.022582s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.087566s.

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.028714s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.087926s.

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.025764s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.086334s.

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.029011s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.085342s.

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.034797s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.084290s.

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.056667s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.089895s.

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.068018s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.086205s.

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.080173s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-29-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.090064s.

[05-02-2021_14-29-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.140013s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-29-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-29-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.100802s.

[05-02-2021_14-29-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.226394s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-29-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-29-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.108890s.

[05-02-2021_14-29-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.186512s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-29-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-29-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.112237s.

[05-02-2021_14-29-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.299390s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-29-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-29-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.101310s.

[05-02-2021_14-29-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.230380s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-29-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-29-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.119806s.

[05-02-2021_14-29-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.192681s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-29-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-29-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.097154s.

[05-02-2021_14-29-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.309320s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-29-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-29-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.099047s.

[05-02-2021_14-29-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.606715s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-29-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-29-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.108348s.

[05-02-2021_14-29-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 1.044751s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-29-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-29-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.151765s.

[05-02-2021_14-29-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-29-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 1.096859s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-29-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-29-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-29-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.144192s.

[05-02-2021_14-29-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-30-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 1.216598s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-30-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-30-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-30-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.138538s.

[05-02-2021_14-30-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-30-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 1.338948s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-30-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-30-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-30-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.156699s.

[05-02-2021_14-30-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-30-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 1.033516s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-30-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-30-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-30-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.167014s.

[05-02-2021_14-30-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-30-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 1.424386s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-30-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-30-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-30-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.142297s.

[05-02-2021_14-30-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-30-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 1.868184s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-30-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-30-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-30-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.120587s.

[05-02-2021_14-30-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-30-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 2.544802s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-30-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-30-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-30-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.116766s.

[05-02-2021_14-30-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-30-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 2.655399s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-30-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-30-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-30-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.117358s.

[05-02-2021_14-30-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-30-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 2.949406s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-30-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-30-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-30-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.127872s.

[05-02-2021_14-30-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-30-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 5.106973s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-30-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-30-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-30-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.145204s.

[05-02-2021_14-30-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-30-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 4.134107s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-30-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-30-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-30-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.595929s.

[05-02-2021_14-30-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 4.326027s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.598548s.

[05-02-2021_14-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 5.879283s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.469834s.

[05-02-2021_14-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-30-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 6.475102s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-30-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-30-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-30-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.529985s.

[05-02-2021_14-30-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-30-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 7.106932s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-30-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-30-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-30-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.424729s.

[05-02-2021_14-30-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-30-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 6.550979s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-30-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-30-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-30-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.428658s.

[05-02-2021_14-30-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-31-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 5.610257s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-31-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-31-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-31-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.476913s.

[05-02-2021_14-31-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-31-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 7.223061s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-31-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-31-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-31-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.429834s.

[05-02-2021_14-31-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 8.429596s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.447295s.

[05-02-2021_14-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-31-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 7.710108s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-31-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-31-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-31-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.524953s.

[05-02-2021_14-31-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-31-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 14.644412s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-31-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-31-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-31-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.550680s.

[05-02-2021_14-31-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-31-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 12.509416s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-31-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-31-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-31-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.482902s.

[05-02-2021_14-31-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-32-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 16.986450s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-32-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-32-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.561066s.

[05-02-2021_14-32-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_14-32-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Model found:
Model :: Total atoms = 12261, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-32-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 7.761382s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-32-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental solving completed in 152.277986s because STOP_CON_REACHED.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 10.733016s, Solving time = 140.346213s, Total time = 152.277986s
Final Model :: Total atoms = 12261, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.207155s, Solving time = 0.009170s, Total time = 0.216324s
2 : Statistics :: Grounding time = 0.065965s, Solving time = 0.006049s, Total time = 0.072014s
3 : Statistics :: Grounding time = 0.068154s, Solving time = 0.008055s, Total time = 0.076209s
4 : Statistics :: Grounding time = 0.070307s, Solving time = 0.009988s, Total time = 0.080295s
5 : Statistics :: Grounding time = 0.073001s, Solving time = 0.015800s, Total time = 0.088800s
6 : Statistics :: Grounding time = 0.074406s, Solving time = 0.013502s, Total time = 0.087908s
7 : Statistics :: Grounding time = 0.076515s, Solving time = 0.016273s, Total time = 0.092788s
8 : Statistics :: Grounding time = 0.079193s, Solving time = 0.016155s, Total time = 0.095348s
9 : Statistics :: Grounding time = 0.077047s, Solving time = 0.017213s, Total time = 0.094260s
10 : Statistics :: Grounding time = 0.076928s, Solving time = 0.018562s, Total time = 0.095490s
11 : Statistics :: Grounding time = 0.084279s, Solving time = 0.022282s, Total time = 0.106561s
12 : Statistics :: Grounding time = 0.082708s, Solving time = 0.025702s, Total time = 0.108410s
13 : Statistics :: Grounding time = 0.083005s, Solving time = 0.022582s, Total time = 0.105588s
14 : Statistics :: Grounding time = 0.087566s, Solving time = 0.028714s, Total time = 0.116280s
15 : Statistics :: Grounding time = 0.087926s, Solving time = 0.025764s, Total time = 0.113690s
16 : Statistics :: Grounding time = 0.086334s, Solving time = 0.029011s, Total time = 0.115345s
17 : Statistics :: Grounding time = 0.085342s, Solving time = 0.034797s, Total time = 0.120139s
18 : Statistics :: Grounding time = 0.084290s, Solving time = 0.056667s, Total time = 0.140957s
19 : Statistics :: Grounding time = 0.089895s, Solving time = 0.068018s, Total time = 0.157913s
20 : Statistics :: Grounding time = 0.086205s, Solving time = 0.080173s, Total time = 0.166378s
21 : Statistics :: Grounding time = 0.090064s, Solving time = 0.140013s, Total time = 0.230077s
22 : Statistics :: Grounding time = 0.100802s, Solving time = 0.226394s, Total time = 0.327196s
23 : Statistics :: Grounding time = 0.108890s, Solving time = 0.186512s, Total time = 0.295402s
24 : Statistics :: Grounding time = 0.112237s, Solving time = 0.299390s, Total time = 0.411627s
25 : Statistics :: Grounding time = 0.101310s, Solving time = 0.230380s, Total time = 0.331690s
26 : Statistics :: Grounding time = 0.119806s, Solving time = 0.192681s, Total time = 0.312487s
27 : Statistics :: Grounding time = 0.097154s, Solving time = 0.309320s, Total time = 0.406474s
28 : Statistics :: Grounding time = 0.099047s, Solving time = 0.606715s, Total time = 0.705761s
29 : Statistics :: Grounding time = 0.108348s, Solving time = 1.044751s, Total time = 1.153100s
30 : Statistics :: Grounding time = 0.151765s, Solving time = 1.096859s, Total time = 1.248624s
31 : Statistics :: Grounding time = 0.144192s, Solving time = 1.216598s, Total time = 1.360790s
32 : Statistics :: Grounding time = 0.138538s, Solving time = 1.338948s, Total time = 1.477487s
33 : Statistics :: Grounding time = 0.156699s, Solving time = 1.033516s, Total time = 1.190215s
34 : Statistics :: Grounding time = 0.167014s, Solving time = 1.424386s, Total time = 1.591400s
35 : Statistics :: Grounding time = 0.142297s, Solving time = 1.868184s, Total time = 2.010481s
36 : Statistics :: Grounding time = 0.120587s, Solving time = 2.544802s, Total time = 2.665388s
37 : Statistics :: Grounding time = 0.116766s, Solving time = 2.655399s, Total time = 2.772164s
38 : Statistics :: Grounding time = 0.117358s, Solving time = 2.949406s, Total time = 3.066764s
39 : Statistics :: Grounding time = 0.127872s, Solving time = 5.106973s, Total time = 5.234844s
40 : Statistics :: Grounding time = 0.145204s, Solving time = 4.134107s, Total time = 4.279311s
41 : Statistics :: Grounding time = 0.595929s, Solving time = 4.326027s, Total time = 4.921956s
42 : Statistics :: Grounding time = 0.598548s, Solving time = 5.879283s, Total time = 6.477831s
43 : Statistics :: Grounding time = 0.469834s, Solving time = 6.475102s, Total time = 6.944936s
44 : Statistics :: Grounding time = 0.529985s, Solving time = 7.106932s, Total time = 7.636918s
45 : Statistics :: Grounding time = 0.424729s, Solving time = 6.550979s, Total time = 6.975708s
46 : Statistics :: Grounding time = 0.428658s, Solving time = 5.610257s, Total time = 6.038915s
47 : Statistics :: Grounding time = 0.476913s, Solving time = 7.223061s, Total time = 7.699974s
48 : Statistics :: Grounding time = 0.429834s, Solving time = 8.429596s, Total time = 8.859430s
49 : Statistics :: Grounding time = 0.447295s, Solving time = 7.710108s, Total time = 8.157403s
50 : Statistics :: Grounding time = 0.524953s, Solving time = 14.644412s, Total time = 15.169365s
51 : Statistics :: Grounding time = 0.550680s, Solving time = 12.509416s, Total time = 13.060096s
52 : Statistics :: Grounding time = 0.482902s, Solving time = 16.986450s, Total time = 17.469352s
53 : Statistics :: Grounding time = 0.561066s, Solving time = 7.761382s, Total time = 8.322449s

[05-02-2021_14-32-24] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 10.733016s, Solving time = 140.346213s, Total time = 152.277986s
Model :: Total atoms = 12261, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-32-24] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,configure(manipulator_limb_1,extended),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),36)
occurs(1,talos,release(manipulator_end_2,(block,6)),37)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),38)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),39)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),40)
occurs(1,talos,release(manipulator_end_1,(block,5)),41)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),42)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),43)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),44)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),45)
occurs(1,talos,release(manipulator_end_2,(block,3)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[05-02-2021_14-32-24] INFO :: Experiment >> 

      ================================================      
           Experimental run 11 : Time 152.537513s           
      ================================================      

[05-02-2021_14-32-24] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-32-24] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Instantiated.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Program building started.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Program building completed.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding base program parts.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.019360s.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving base program parts.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.003148s.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental solving started.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.200707s.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.009648s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.066334s.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.006593s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.065777s.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.008452s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.067816s.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.010449s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.074626s.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.015270s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.082076s.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.014521s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.077846s.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.016297s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.078531s.

[05-02-2021_14-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.017195s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.116747s.

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.020983s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.088854s.

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.022240s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.089315s.

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.025965s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.089542s.

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.022721s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.088601s.

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.026362s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.089397s.

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.032071s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.088951s.

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.027737s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.090871s.

[05-02-2021_14-32-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.037429s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.093162s.

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.033737s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.096918s.

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.083445s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.102749s.

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.079434s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.101065s.

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.096719s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.106301s.

[05-02-2021_14-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.148842s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-32-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-32-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.101656s.

[05-02-2021_14-32-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.229404s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-32-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-32-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.100129s.

[05-02-2021_14-32-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.282363s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-32-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-32-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.102802s.

[05-02-2021_14-32-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.456353s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-32-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-32-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.117550s.

[05-02-2021_14-32-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.571117s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-32-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-32-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.108868s.

[05-02-2021_14-32-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.564552s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-32-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-32-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.110820s.

[05-02-2021_14-32-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.538602s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-32-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-32-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.107600s.

[05-02-2021_14-32-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.822381s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-32-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-32-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.109992s.

[05-02-2021_14-32-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 1.318513s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-32-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-32-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.152669s.

[05-02-2021_14-32-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 1.426935s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-32-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-32-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.146453s.

[05-02-2021_14-32-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.973947s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-32-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-32-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.114695s.

[05-02-2021_14-32-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 1.191084s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-32-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-32-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.131341s.

[05-02-2021_14-32-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 1.095935s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-32-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-32-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.112570s.

[05-02-2021_14-32-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 2.106303s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-32-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-32-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.111770s.

[05-02-2021_14-32-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 2.990620s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-32-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-32-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.116383s.

[05-02-2021_14-32-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 3.067071s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-32-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-32-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.124770s.

[05-02-2021_14-32-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 2.768537s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-32-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-32-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.119390s.

[05-02-2021_14-32-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 2.814300s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-32-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-32-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.116751s.

[05-02-2021_14-32-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-32-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 5.021134s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-32-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-32-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-32-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.132640s.

[05-02-2021_14-32-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-33-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 6.509469s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-33-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-33-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-33-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.421855s.

[05-02-2021_14-33-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-33-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 8.423077s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-33-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-33-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-33-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.392326s.

[05-02-2021_14-33-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-33-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 5.201735s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-33-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-33-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.392173s.

[05-02-2021_14-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-33-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 8.441385s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-33-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-33-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-33-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.410904s.

[05-02-2021_14-33-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-33-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 4.528044s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-33-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-33-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-33-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.454618s.

[05-02-2021_14-33-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-33-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 5.367698s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-33-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-33-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-33-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.419099s.

[05-02-2021_14-33-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-33-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 9.385149s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-33-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-33-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-33-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.429607s.

[05-02-2021_14-33-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-33-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 6.426772s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-33-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-33-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-33-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.465079s.

[05-02-2021_14-33-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-34-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 5.005161s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-34-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-34-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.509468s.

[05-02-2021_14-34-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-34-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 7.448212s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-34-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-34-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.446598s.

[05-02-2021_14-34-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-34-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 9.289545s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-34-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-34-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.496090s.

[05-02-2021_14-34-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-34-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 8.459041s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-34-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-34-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.465516s.

[05-02-2021_14-34-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-34-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 15.358448s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-34-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-34-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.597195s.

[05-02-2021_14-34-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Model found:
Model :: Total atoms = 12271, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 12.866510s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental solving completed in 152.923668s because STOP_CON_REACHED.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 10.114924s, Solving time = 141.708657s, Total time = 152.923668s
Final Model :: Total atoms = 12271, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.200707s, Solving time = 0.009648s, Total time = 0.210355s
2 : Statistics :: Grounding time = 0.066334s, Solving time = 0.006593s, Total time = 0.072927s
3 : Statistics :: Grounding time = 0.065777s, Solving time = 0.008452s, Total time = 0.074230s
4 : Statistics :: Grounding time = 0.067816s, Solving time = 0.010449s, Total time = 0.078265s
5 : Statistics :: Grounding time = 0.074626s, Solving time = 0.015270s, Total time = 0.089897s
6 : Statistics :: Grounding time = 0.082076s, Solving time = 0.014521s, Total time = 0.096598s
7 : Statistics :: Grounding time = 0.077846s, Solving time = 0.016297s, Total time = 0.094143s
8 : Statistics :: Grounding time = 0.078531s, Solving time = 0.017195s, Total time = 0.095725s
9 : Statistics :: Grounding time = 0.116747s, Solving time = 0.020983s, Total time = 0.137730s
10 : Statistics :: Grounding time = 0.088854s, Solving time = 0.022240s, Total time = 0.111094s
11 : Statistics :: Grounding time = 0.089315s, Solving time = 0.025965s, Total time = 0.115279s
12 : Statistics :: Grounding time = 0.089542s, Solving time = 0.022721s, Total time = 0.112263s
13 : Statistics :: Grounding time = 0.088601s, Solving time = 0.026362s, Total time = 0.114963s
14 : Statistics :: Grounding time = 0.089397s, Solving time = 0.032071s, Total time = 0.121467s
15 : Statistics :: Grounding time = 0.088951s, Solving time = 0.027737s, Total time = 0.116688s
16 : Statistics :: Grounding time = 0.090871s, Solving time = 0.037429s, Total time = 0.128300s
17 : Statistics :: Grounding time = 0.093162s, Solving time = 0.033737s, Total time = 0.126899s
18 : Statistics :: Grounding time = 0.096918s, Solving time = 0.083445s, Total time = 0.180363s
19 : Statistics :: Grounding time = 0.102749s, Solving time = 0.079434s, Total time = 0.182183s
20 : Statistics :: Grounding time = 0.101065s, Solving time = 0.096719s, Total time = 0.197785s
21 : Statistics :: Grounding time = 0.106301s, Solving time = 0.148842s, Total time = 0.255143s
22 : Statistics :: Grounding time = 0.101656s, Solving time = 0.229404s, Total time = 0.331060s
23 : Statistics :: Grounding time = 0.100129s, Solving time = 0.282363s, Total time = 0.382492s
24 : Statistics :: Grounding time = 0.102802s, Solving time = 0.456353s, Total time = 0.559155s
25 : Statistics :: Grounding time = 0.117550s, Solving time = 0.571117s, Total time = 0.688667s
26 : Statistics :: Grounding time = 0.108868s, Solving time = 0.564552s, Total time = 0.673421s
27 : Statistics :: Grounding time = 0.110820s, Solving time = 0.538602s, Total time = 0.649422s
28 : Statistics :: Grounding time = 0.107600s, Solving time = 0.822381s, Total time = 0.929981s
29 : Statistics :: Grounding time = 0.109992s, Solving time = 1.318513s, Total time = 1.428506s
30 : Statistics :: Grounding time = 0.152669s, Solving time = 1.426935s, Total time = 1.579605s
31 : Statistics :: Grounding time = 0.146453s, Solving time = 0.973947s, Total time = 1.120400s
32 : Statistics :: Grounding time = 0.114695s, Solving time = 1.191084s, Total time = 1.305779s
33 : Statistics :: Grounding time = 0.131341s, Solving time = 1.095935s, Total time = 1.227277s
34 : Statistics :: Grounding time = 0.112570s, Solving time = 2.106303s, Total time = 2.218873s
35 : Statistics :: Grounding time = 0.111770s, Solving time = 2.990620s, Total time = 3.102391s
36 : Statistics :: Grounding time = 0.116383s, Solving time = 3.067071s, Total time = 3.183454s
37 : Statistics :: Grounding time = 0.124770s, Solving time = 2.768537s, Total time = 2.893307s
38 : Statistics :: Grounding time = 0.119390s, Solving time = 2.814300s, Total time = 2.933690s
39 : Statistics :: Grounding time = 0.116751s, Solving time = 5.021134s, Total time = 5.137885s
40 : Statistics :: Grounding time = 0.132640s, Solving time = 6.509469s, Total time = 6.642109s
41 : Statistics :: Grounding time = 0.421855s, Solving time = 8.423077s, Total time = 8.844932s
42 : Statistics :: Grounding time = 0.392326s, Solving time = 5.201735s, Total time = 5.594060s
43 : Statistics :: Grounding time = 0.392173s, Solving time = 8.441385s, Total time = 8.833558s
44 : Statistics :: Grounding time = 0.410904s, Solving time = 4.528044s, Total time = 4.938948s
45 : Statistics :: Grounding time = 0.454618s, Solving time = 5.367698s, Total time = 5.822316s
46 : Statistics :: Grounding time = 0.419099s, Solving time = 9.385149s, Total time = 9.804248s
47 : Statistics :: Grounding time = 0.429607s, Solving time = 6.426772s, Total time = 6.856378s
48 : Statistics :: Grounding time = 0.465079s, Solving time = 5.005161s, Total time = 5.470239s
49 : Statistics :: Grounding time = 0.509468s, Solving time = 7.448212s, Total time = 7.957680s
50 : Statistics :: Grounding time = 0.446598s, Solving time = 9.289545s, Total time = 9.736142s
51 : Statistics :: Grounding time = 0.496090s, Solving time = 8.459041s, Total time = 8.955132s
52 : Statistics :: Grounding time = 0.465516s, Solving time = 15.358448s, Total time = 15.823963s
53 : Statistics :: Grounding time = 0.597195s, Solving time = 12.866510s, Total time = 13.463705s

[05-02-2021_14-34-57] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 10.114924s, Solving time = 141.708657s, Total time = 152.923668s
Model :: Total atoms = 12271, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[05-02-2021_14-34-57] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),24)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_2,retracted),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),35)
occurs(1,talos,configure(manipulator_limb_2,extended),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),38)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),39)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),40)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),41)
occurs(1,talos,release(manipulator_end_2,(block,5)),42)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),43)
occurs(1,talos,release(manipulator_end_1,(block,3)),44)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),45)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),46)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),47)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),48)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_1,(block,2)),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),52)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),53)

[05-02-2021_14-34-57] INFO :: Experiment >> 

      ================================================      
           Experimental run 12 : Time 153.181580s           
      ================================================      

[05-02-2021_14-34-57] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-34-57] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Instantiated.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Program building started.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Program building completed.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding base program parts.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.019347s.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving base program parts.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.003375s.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental solving started.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.191821s.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.008633s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.067159s.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.006319s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.067059s.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.007422s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.069316s.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.009959s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.071298s.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.014681s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.080302s.

[05-02-2021_14-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.024457s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.100372s.

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.016778s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.083162s.

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.016952s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.082638s.

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.018278s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.086431s.

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.022066s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.082002s.

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.024319s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.088939s.

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.032897s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.085483s.

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.037809s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.084553s.

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.040712s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.091693s.

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.040859s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.091405s.

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.063554s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.090544s.

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.045251s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.090914s.

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.078034s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.095630s.

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.070479s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.090149s.

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.069299s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.093867s.

[05-02-2021_14-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.089957s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.096792s.

[05-02-2021_14-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.116986s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.092760s.

[05-02-2021_14-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.205875s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.112658s.

[05-02-2021_14-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.287151s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-35-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-35-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.109318s.

[05-02-2021_14-35-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.597608s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-35-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-35-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.115407s.

[05-02-2021_14-35-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.695865s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-35-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-35-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.113782s.

[05-02-2021_14-35-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 1.516658s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-35-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-35-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.110938s.

[05-02-2021_14-35-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 1.273109s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-35-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-35-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.109734s.

[05-02-2021_14-35-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.641124s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-35-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-35-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.114324s.

[05-02-2021_14-35-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.445562s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-35-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-35-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.107433s.

[05-02-2021_14-35-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.413930s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-35-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-35-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.112561s.

[05-02-2021_14-35-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.641441s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-35-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-35-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.121096s.

[05-02-2021_14-35-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.865617s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-35-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-35-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.114635s.

[05-02-2021_14-35-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 1.159960s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-35-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-35-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.122471s.

[05-02-2021_14-35-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 2.200718s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-35-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-35-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.112563s.

[05-02-2021_14-35-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 2.201551s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-35-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-35-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.117869s.

[05-02-2021_14-35-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 2.867071s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-35-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-35-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.120984s.

[05-02-2021_14-35-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 4.684452s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-35-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-35-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.123346s.

[05-02-2021_14-35-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 4.792077s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-35-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-35-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.128381s.

[05-02-2021_14-35-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 6.035367s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-35-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-35-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.448777s.

[05-02-2021_14-35-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 6.033095s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-35-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-35-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.386996s.

[05-02-2021_14-35-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 6.113362s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-35-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-35-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.411975s.

[05-02-2021_14-35-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 6.356062s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.456573s.

[05-02-2021_14-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-36-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 10.132792s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-36-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-36-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-36-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.455663s.

[05-02-2021_14-36-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-36-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 11.473214s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-36-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-36-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-36-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.427174s.

[05-02-2021_14-36-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-36-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 8.521003s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-36-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-36-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-36-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.431238s.

[05-02-2021_14-36-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-36-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 4.588692s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-36-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-36-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-36-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.484306s.

[05-02-2021_14-36-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-36-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 6.234660s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-36-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-36-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-36-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.449088s.

[05-02-2021_14-36-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-36-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 5.759855s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-36-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-36-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-36-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.446519s.

[05-02-2021_14-36-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 6.596067s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.458108s.

[05-02-2021_14-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 9.535883s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.520755s.

[05-02-2021_14-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 11.101894s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.496984s.

[05-02-2021_14-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_14-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Model found:
Model :: Total atoms = 12264, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_14-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 10.747100s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental solving completed in 146.649025s because STOP_CON_REACHED.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 9.935293s, Solving time = 135.577889s, Total time = 146.649025s
Final Model :: Total atoms = 12264, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.191821s, Solving time = 0.008633s, Total time = 0.200454s
2 : Statistics :: Grounding time = 0.067159s, Solving time = 0.006319s, Total time = 0.073478s
3 : Statistics :: Grounding time = 0.067059s, Solving time = 0.007422s, Total time = 0.074481s
4 : Statistics :: Grounding time = 0.069316s, Solving time = 0.009959s, Total time = 0.079274s
5 : Statistics :: Grounding time = 0.071298s, Solving time = 0.014681s, Total time = 0.085980s
6 : Statistics :: Grounding time = 0.080302s, Solving time = 0.024457s, Total time = 0.104759s
7 : Statistics :: Grounding time = 0.100372s, Solving time = 0.016778s, Total time = 0.117150s
8 : Statistics :: Grounding time = 0.083162s, Solving time = 0.016952s, Total time = 0.100114s
9 : Statistics :: Grounding time = 0.082638s, Solving time = 0.018278s, Total time = 0.100916s
10 : Statistics :: Grounding time = 0.086431s, Solving time = 0.022066s, Total time = 0.108497s
11 : Statistics :: Grounding time = 0.082002s, Solving time = 0.024319s, Total time = 0.106320s
12 : Statistics :: Grounding time = 0.088939s, Solving time = 0.032897s, Total time = 0.121836s
13 : Statistics :: Grounding time = 0.085483s, Solving time = 0.037809s, Total time = 0.123292s
14 : Statistics :: Grounding time = 0.084553s, Solving time = 0.040712s, Total time = 0.125265s
15 : Statistics :: Grounding time = 0.091693s, Solving time = 0.040859s, Total time = 0.132552s
16 : Statistics :: Grounding time = 0.091405s, Solving time = 0.063554s, Total time = 0.154959s
17 : Statistics :: Grounding time = 0.090544s, Solving time = 0.045251s, Total time = 0.135795s
18 : Statistics :: Grounding time = 0.090914s, Solving time = 0.078034s, Total time = 0.168948s
19 : Statistics :: Grounding time = 0.095630s, Solving time = 0.070479s, Total time = 0.166109s
20 : Statistics :: Grounding time = 0.090149s, Solving time = 0.069299s, Total time = 0.159447s
21 : Statistics :: Grounding time = 0.093867s, Solving time = 0.089957s, Total time = 0.183824s
22 : Statistics :: Grounding time = 0.096792s, Solving time = 0.116986s, Total time = 0.213778s
23 : Statistics :: Grounding time = 0.092760s, Solving time = 0.205875s, Total time = 0.298635s
24 : Statistics :: Grounding time = 0.112658s, Solving time = 0.287151s, Total time = 0.399808s
25 : Statistics :: Grounding time = 0.109318s, Solving time = 0.597608s, Total time = 0.706926s
26 : Statistics :: Grounding time = 0.115407s, Solving time = 0.695865s, Total time = 0.811272s
27 : Statistics :: Grounding time = 0.113782s, Solving time = 1.516658s, Total time = 1.630440s
28 : Statistics :: Grounding time = 0.110938s, Solving time = 1.273109s, Total time = 1.384047s
29 : Statistics :: Grounding time = 0.109734s, Solving time = 0.641124s, Total time = 0.750858s
30 : Statistics :: Grounding time = 0.114324s, Solving time = 0.445562s, Total time = 0.559886s
31 : Statistics :: Grounding time = 0.107433s, Solving time = 0.413930s, Total time = 0.521363s
32 : Statistics :: Grounding time = 0.112561s, Solving time = 0.641441s, Total time = 0.754002s
33 : Statistics :: Grounding time = 0.121096s, Solving time = 0.865617s, Total time = 0.986713s
34 : Statistics :: Grounding time = 0.114635s, Solving time = 1.159960s, Total time = 1.274595s
35 : Statistics :: Grounding time = 0.122471s, Solving time = 2.200718s, Total time = 2.323190s
36 : Statistics :: Grounding time = 0.112563s, Solving time = 2.201551s, Total time = 2.314114s
37 : Statistics :: Grounding time = 0.117869s, Solving time = 2.867071s, Total time = 2.984939s
38 : Statistics :: Grounding time = 0.120984s, Solving time = 4.684452s, Total time = 4.805436s
39 : Statistics :: Grounding time = 0.123346s, Solving time = 4.792077s, Total time = 4.915423s
40 : Statistics :: Grounding time = 0.128381s, Solving time = 6.035367s, Total time = 6.163748s
41 : Statistics :: Grounding time = 0.448777s, Solving time = 6.033095s, Total time = 6.481872s
42 : Statistics :: Grounding time = 0.386996s, Solving time = 6.113362s, Total time = 6.500358s
43 : Statistics :: Grounding time = 0.411975s, Solving time = 6.356062s, Total time = 6.768036s
44 : Statistics :: Grounding time = 0.456573s, Solving time = 10.132792s, Total time = 10.589365s
45 : Statistics :: Grounding time = 0.455663s, Solving time = 11.473214s, Total time = 11.928877s
46 : Statistics :: Grounding time = 0.427174s, Solving time = 8.521003s, Total time = 8.948177s
47 : Statistics :: Grounding time = 0.431238s, Solving time = 4.588692s, Total time = 5.019930s
48 : Statistics :: Grounding time = 0.484306s, Solving time = 6.234660s, Total time = 6.718966s
49 : Statistics :: Grounding time = 0.449088s, Solving time = 5.759855s, Total time = 6.208944s
50 : Statistics :: Grounding time = 0.446519s, Solving time = 6.596067s, Total time = 7.042585s
51 : Statistics :: Grounding time = 0.458108s, Solving time = 9.535883s, Total time = 9.993992s
52 : Statistics :: Grounding time = 0.520755s, Solving time = 11.101894s, Total time = 11.622649s
53 : Statistics :: Grounding time = 0.496984s, Solving time = 10.747100s, Total time = 11.244085s

[05-02-2021_14-37-24] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 9.935293s, Solving time = 135.577889s, Total time = 146.649025s
Model :: Total atoms = 12264, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_14-37-24] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),22)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_1,retracted),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),35)
occurs(1,talos,release(manipulator_end_2,(block,6)),36)
occurs(1,talos,configure(manipulator_limb_1,extended),37)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),38)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),39)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),40)
occurs(1,talos,release(manipulator_end_1,(block,5)),41)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),43)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),44)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),45)
occurs(1,talos,release(manipulator_end_1,(block,3)),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),48)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_1,(block,2)),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),52)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),53)

[05-02-2021_14-37-24] INFO :: Experiment >> 

      ================================================      
           Experimental run 13 : Time 146.906819s           
      ================================================      

[05-02-2021_14-37-24] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-37-24] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Instantiated.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Program building started.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Program building completed.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding base program parts.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.017359s.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving base program parts.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.002869s.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental solving started.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.247768s.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.010432s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.067524s.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.006058s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.068811s.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.008101s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.069294s.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.010173s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.071394s.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.015794s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.075437s.

[05-02-2021_14-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.014799s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.078190s.

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.016961s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.080347s.

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.017483s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.084379s.

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.018413s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.080237s.

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.019905s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.080597s.

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.023606s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.083027s.

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.029021s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.082401s.

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.032455s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.084381s.

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.036673s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.089124s.

[05-02-2021_14-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.045467s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.089847s.

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.068622s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.092075s.

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.072232s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.089238s.

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.070056s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.090322s.

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.060636s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.097300s.

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.057246s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.091909s.

[05-02-2021_14-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.065776s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.101177s.

[05-02-2021_14-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.100748s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.101948s.

[05-02-2021_14-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.134508s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.101700s.

[05-02-2021_14-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.210091s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.103966s.

[05-02-2021_14-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.252953s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.099462s.

[05-02-2021_14-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.354913s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.100045s.

[05-02-2021_14-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.363339s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.105332s.

[05-02-2021_14-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.399728s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.106009s.

[05-02-2021_14-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.456519s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.114427s.

[05-02-2021_14-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.562765s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.124957s.

[05-02-2021_14-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.641278s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.118914s.

[05-02-2021_14-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.710290s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.119082s.

[05-02-2021_14-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 1.076108s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.126420s.

[05-02-2021_14-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 1.762238s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.121627s.

[05-02-2021_14-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 2.686439s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.115927s.

[05-02-2021_14-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 3.508063s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-37-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-37-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.119184s.

[05-02-2021_14-37-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 4.588092s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-37-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-37-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.130652s.

[05-02-2021_14-37-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 5.187036s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-37-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-37-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.131086s.

[05-02-2021_14-37-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 4.694343s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.124814s.

[05-02-2021_14-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 6.762214s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.400007s.

[05-02-2021_14-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 5.587099s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.409615s.

[05-02-2021_14-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-38-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 6.615940s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-38-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-38-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-38-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.409170s.

[05-02-2021_14-38-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-38-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 6.597938s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-38-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-38-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-38-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.402233s.

[05-02-2021_14-38-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 6.081906s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.464011s.

[05-02-2021_14-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 7.028730s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.425721s.

[05-02-2021_14-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 5.661606s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.457366s.

[05-02-2021_14-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-38-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 5.808699s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-38-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-38-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-38-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.455601s.

[05-02-2021_14-38-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 8.318151s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.466684s.

[05-02-2021_14-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 6.843447s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.472506s.

[05-02-2021_14-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-39-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 10.031960s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-39-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-39-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.484825s.

[05-02-2021_14-39-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 8.387993s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.539155s.

[05-02-2021_14-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 12.443748s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.482980s.

[05-02-2021_14-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Model found:
Model :: Total atoms = 12267, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 8.494869s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental solving completed in 144.032420s because STOP_CON_REACHED.

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 9.947566s, Solving time = 133.056529s, Total time = 144.032420s
Final Model :: Total atoms = 12267, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.247768s, Solving time = 0.010432s, Total time = 0.258200s
2 : Statistics :: Grounding time = 0.067524s, Solving time = 0.006058s, Total time = 0.073582s
3 : Statistics :: Grounding time = 0.068811s, Solving time = 0.008101s, Total time = 0.076912s
4 : Statistics :: Grounding time = 0.069294s, Solving time = 0.010173s, Total time = 0.079468s
5 : Statistics :: Grounding time = 0.071394s, Solving time = 0.015794s, Total time = 0.087189s
6 : Statistics :: Grounding time = 0.075437s, Solving time = 0.014799s, Total time = 0.090235s
7 : Statistics :: Grounding time = 0.078190s, Solving time = 0.016961s, Total time = 0.095151s
8 : Statistics :: Grounding time = 0.080347s, Solving time = 0.017483s, Total time = 0.097830s
9 : Statistics :: Grounding time = 0.084379s, Solving time = 0.018413s, Total time = 0.102792s
10 : Statistics :: Grounding time = 0.080237s, Solving time = 0.019905s, Total time = 0.100142s
11 : Statistics :: Grounding time = 0.080597s, Solving time = 0.023606s, Total time = 0.104203s
12 : Statistics :: Grounding time = 0.083027s, Solving time = 0.029021s, Total time = 0.112048s
13 : Statistics :: Grounding time = 0.082401s, Solving time = 0.032455s, Total time = 0.114856s
14 : Statistics :: Grounding time = 0.084381s, Solving time = 0.036673s, Total time = 0.121055s
15 : Statistics :: Grounding time = 0.089124s, Solving time = 0.045467s, Total time = 0.134592s
16 : Statistics :: Grounding time = 0.089847s, Solving time = 0.068622s, Total time = 0.158470s
17 : Statistics :: Grounding time = 0.092075s, Solving time = 0.072232s, Total time = 0.164307s
18 : Statistics :: Grounding time = 0.089238s, Solving time = 0.070056s, Total time = 0.159295s
19 : Statistics :: Grounding time = 0.090322s, Solving time = 0.060636s, Total time = 0.150958s
20 : Statistics :: Grounding time = 0.097300s, Solving time = 0.057246s, Total time = 0.154547s
21 : Statistics :: Grounding time = 0.091909s, Solving time = 0.065776s, Total time = 0.157685s
22 : Statistics :: Grounding time = 0.101177s, Solving time = 0.100748s, Total time = 0.201924s
23 : Statistics :: Grounding time = 0.101948s, Solving time = 0.134508s, Total time = 0.236456s
24 : Statistics :: Grounding time = 0.101700s, Solving time = 0.210091s, Total time = 0.311791s
25 : Statistics :: Grounding time = 0.103966s, Solving time = 0.252953s, Total time = 0.356920s
26 : Statistics :: Grounding time = 0.099462s, Solving time = 0.354913s, Total time = 0.454375s
27 : Statistics :: Grounding time = 0.100045s, Solving time = 0.363339s, Total time = 0.463384s
28 : Statistics :: Grounding time = 0.105332s, Solving time = 0.399728s, Total time = 0.505059s
29 : Statistics :: Grounding time = 0.106009s, Solving time = 0.456519s, Total time = 0.562527s
30 : Statistics :: Grounding time = 0.114427s, Solving time = 0.562765s, Total time = 0.677192s
31 : Statistics :: Grounding time = 0.124957s, Solving time = 0.641278s, Total time = 0.766235s
32 : Statistics :: Grounding time = 0.118914s, Solving time = 0.710290s, Total time = 0.829204s
33 : Statistics :: Grounding time = 0.119082s, Solving time = 1.076108s, Total time = 1.195190s
34 : Statistics :: Grounding time = 0.126420s, Solving time = 1.762238s, Total time = 1.888658s
35 : Statistics :: Grounding time = 0.121627s, Solving time = 2.686439s, Total time = 2.808066s
36 : Statistics :: Grounding time = 0.115927s, Solving time = 3.508063s, Total time = 3.623990s
37 : Statistics :: Grounding time = 0.119184s, Solving time = 4.588092s, Total time = 4.707277s
38 : Statistics :: Grounding time = 0.130652s, Solving time = 5.187036s, Total time = 5.317688s
39 : Statistics :: Grounding time = 0.131086s, Solving time = 4.694343s, Total time = 4.825428s
40 : Statistics :: Grounding time = 0.124814s, Solving time = 6.762214s, Total time = 6.887028s
41 : Statistics :: Grounding time = 0.400007s, Solving time = 5.587099s, Total time = 5.987106s
42 : Statistics :: Grounding time = 0.409615s, Solving time = 6.615940s, Total time = 7.025555s
43 : Statistics :: Grounding time = 0.409170s, Solving time = 6.597938s, Total time = 7.007108s
44 : Statistics :: Grounding time = 0.402233s, Solving time = 6.081906s, Total time = 6.484139s
45 : Statistics :: Grounding time = 0.464011s, Solving time = 7.028730s, Total time = 7.492742s
46 : Statistics :: Grounding time = 0.425721s, Solving time = 5.661606s, Total time = 6.087327s
47 : Statistics :: Grounding time = 0.457366s, Solving time = 5.808699s, Total time = 6.266064s
48 : Statistics :: Grounding time = 0.455601s, Solving time = 8.318151s, Total time = 8.773752s
49 : Statistics :: Grounding time = 0.466684s, Solving time = 6.843447s, Total time = 7.310131s
50 : Statistics :: Grounding time = 0.472506s, Solving time = 10.031960s, Total time = 10.504466s
51 : Statistics :: Grounding time = 0.484825s, Solving time = 8.387993s, Total time = 8.872818s
52 : Statistics :: Grounding time = 0.539155s, Solving time = 12.443748s, Total time = 12.982903s
53 : Statistics :: Grounding time = 0.482980s, Solving time = 8.494869s, Total time = 8.977849s

[05-02-2021_14-39-48] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 9.947566s, Solving time = 133.056529s, Total time = 144.032420s
Model :: Total atoms = 12267, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_14-39-48] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_1,retracted),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,release(manipulator_end_2,(block,6)),37)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),38)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),39)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),40)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),41)
occurs(1,talos,release(manipulator_end_1,(block,5)),42)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),43)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),44)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),45)
occurs(1,talos,release(manipulator_end_2,(block,3)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[05-02-2021_14-39-48] INFO :: Experiment >> 

      ================================================      
           Experimental run 14 : Time 144.309314s           
      ================================================      

[05-02-2021_14-39-48] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-39-48] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Instantiated.

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Program building started.

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Program building completed.

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding base program parts.

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.016840s.

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving base program parts.

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.002942s.

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental solving started.

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.194109s.

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.008555s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.063652s.

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.006459s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.064463s.

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.007428s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.070719s.

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.010160s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.072588s.

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.024352s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.077037s.

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.014204s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.077311s.

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.015060s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.079649s.

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.016714s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.102212s.

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.017983s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.083715s.

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.020272s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.081825s.

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.022449s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.081806s.

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.025264s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.086328s.

[05-02-2021_14-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.043672s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.085970s.

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.040373s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.087348s.

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.047913s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.084808s.

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.057534s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.090417s.

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.069389s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.088940s.

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.069955s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.088117s.

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.073061s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.093513s.

[05-02-2021_14-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.085930s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.093099s.

[05-02-2021_14-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.121459s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.093233s.

[05-02-2021_14-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.223151s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.096078s.

[05-02-2021_14-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.334035s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.097621s.

[05-02-2021_14-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.363796s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.104296s.

[05-02-2021_14-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.586591s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.103633s.

[05-02-2021_14-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.708189s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.109347s.

[05-02-2021_14-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 1.170792s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.105371s.

[05-02-2021_14-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.915722s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.106215s.

[05-02-2021_14-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.867630s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.105586s.

[05-02-2021_14-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 1.036862s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.110235s.

[05-02-2021_14-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-40-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 1.323631s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-40-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-40-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-40-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.127236s.

[05-02-2021_14-40-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-40-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 1.478327s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-40-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-40-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-40-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.117211s.

[05-02-2021_14-40-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-40-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 1.916626s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-40-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-40-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-40-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.119348s.

[05-02-2021_14-40-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-40-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 2.279044s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-40-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-40-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-40-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.128766s.

[05-02-2021_14-40-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-40-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 2.531499s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-40-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-40-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-40-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.115388s.

[05-02-2021_14-40-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 3.111107s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.130899s.

[05-02-2021_14-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 4.066520s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.115675s.

[05-02-2021_14-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 4.820689s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.119411s.

[05-02-2021_14-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 5.481620s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.123587s.

[05-02-2021_14-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-40-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 2.858058s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-40-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-40-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-40-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.371647s.

[05-02-2021_14-40-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 4.065887s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.429447s.

[05-02-2021_14-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 2.893932s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.382593s.

[05-02-2021_14-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 3.027655s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.394839s.

[05-02-2021_14-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 5.494209s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.406011s.

[05-02-2021_14-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-40-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 7.447030s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-40-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-40-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-40-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.414802s.

[05-02-2021_14-40-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-41-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 6.527297s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-41-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-41-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-41-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.468823s.

[05-02-2021_14-41-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 7.151166s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.444853s.

[05-02-2021_14-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 6.813878s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.461803s.

[05-02-2021_14-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 9.102121s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.474308s.

[05-02-2021_14-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-41-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 12.545067s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-41-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-41-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-41-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.512691s.

[05-02-2021_14-41-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-41-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 12.604165s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-41-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-41-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.482467s.

[05-02-2021_14-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 18.632743s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.516636s.

[05-02-2021_14-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Model found:
Model :: Total atoms = 12268, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 17.596044s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental solving completed in 161.594984s because STOP_CON_REACHED.

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 9.754524s, Solving time = 150.776216s, Total time = 161.594984s
Final Model :: Total atoms = 12268, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.194109s, Solving time = 0.008555s, Total time = 0.202665s
2 : Statistics :: Grounding time = 0.063652s, Solving time = 0.006459s, Total time = 0.070111s
3 : Statistics :: Grounding time = 0.064463s, Solving time = 0.007428s, Total time = 0.071891s
4 : Statistics :: Grounding time = 0.070719s, Solving time = 0.010160s, Total time = 0.080879s
5 : Statistics :: Grounding time = 0.072588s, Solving time = 0.024352s, Total time = 0.096940s
6 : Statistics :: Grounding time = 0.077037s, Solving time = 0.014204s, Total time = 0.091241s
7 : Statistics :: Grounding time = 0.077311s, Solving time = 0.015060s, Total time = 0.092372s
8 : Statistics :: Grounding time = 0.079649s, Solving time = 0.016714s, Total time = 0.096363s
9 : Statistics :: Grounding time = 0.102212s, Solving time = 0.017983s, Total time = 0.120195s
10 : Statistics :: Grounding time = 0.083715s, Solving time = 0.020272s, Total time = 0.103988s
11 : Statistics :: Grounding time = 0.081825s, Solving time = 0.022449s, Total time = 0.104274s
12 : Statistics :: Grounding time = 0.081806s, Solving time = 0.025264s, Total time = 0.107071s
13 : Statistics :: Grounding time = 0.086328s, Solving time = 0.043672s, Total time = 0.130000s
14 : Statistics :: Grounding time = 0.085970s, Solving time = 0.040373s, Total time = 0.126343s
15 : Statistics :: Grounding time = 0.087348s, Solving time = 0.047913s, Total time = 0.135261s
16 : Statistics :: Grounding time = 0.084808s, Solving time = 0.057534s, Total time = 0.142342s
17 : Statistics :: Grounding time = 0.090417s, Solving time = 0.069389s, Total time = 0.159806s
18 : Statistics :: Grounding time = 0.088940s, Solving time = 0.069955s, Total time = 0.158895s
19 : Statistics :: Grounding time = 0.088117s, Solving time = 0.073061s, Total time = 0.161179s
20 : Statistics :: Grounding time = 0.093513s, Solving time = 0.085930s, Total time = 0.179443s
21 : Statistics :: Grounding time = 0.093099s, Solving time = 0.121459s, Total time = 0.214558s
22 : Statistics :: Grounding time = 0.093233s, Solving time = 0.223151s, Total time = 0.316384s
23 : Statistics :: Grounding time = 0.096078s, Solving time = 0.334035s, Total time = 0.430113s
24 : Statistics :: Grounding time = 0.097621s, Solving time = 0.363796s, Total time = 0.461417s
25 : Statistics :: Grounding time = 0.104296s, Solving time = 0.586591s, Total time = 0.690887s
26 : Statistics :: Grounding time = 0.103633s, Solving time = 0.708189s, Total time = 0.811823s
27 : Statistics :: Grounding time = 0.109347s, Solving time = 1.170792s, Total time = 1.280140s
28 : Statistics :: Grounding time = 0.105371s, Solving time = 0.915722s, Total time = 1.021093s
29 : Statistics :: Grounding time = 0.106215s, Solving time = 0.867630s, Total time = 0.973846s
30 : Statistics :: Grounding time = 0.105586s, Solving time = 1.036862s, Total time = 1.142448s
31 : Statistics :: Grounding time = 0.110235s, Solving time = 1.323631s, Total time = 1.433866s
32 : Statistics :: Grounding time = 0.127236s, Solving time = 1.478327s, Total time = 1.605563s
33 : Statistics :: Grounding time = 0.117211s, Solving time = 1.916626s, Total time = 2.033837s
34 : Statistics :: Grounding time = 0.119348s, Solving time = 2.279044s, Total time = 2.398391s
35 : Statistics :: Grounding time = 0.128766s, Solving time = 2.531499s, Total time = 2.660265s
36 : Statistics :: Grounding time = 0.115388s, Solving time = 3.111107s, Total time = 3.226495s
37 : Statistics :: Grounding time = 0.130899s, Solving time = 4.066520s, Total time = 4.197418s
38 : Statistics :: Grounding time = 0.115675s, Solving time = 4.820689s, Total time = 4.936364s
39 : Statistics :: Grounding time = 0.119411s, Solving time = 5.481620s, Total time = 5.601031s
40 : Statistics :: Grounding time = 0.123587s, Solving time = 2.858058s, Total time = 2.981645s
41 : Statistics :: Grounding time = 0.371647s, Solving time = 4.065887s, Total time = 4.437533s
42 : Statistics :: Grounding time = 0.429447s, Solving time = 2.893932s, Total time = 3.323379s
43 : Statistics :: Grounding time = 0.382593s, Solving time = 3.027655s, Total time = 3.410248s
44 : Statistics :: Grounding time = 0.394839s, Solving time = 5.494209s, Total time = 5.889048s
45 : Statistics :: Grounding time = 0.406011s, Solving time = 7.447030s, Total time = 7.853041s
46 : Statistics :: Grounding time = 0.414802s, Solving time = 6.527297s, Total time = 6.942099s
47 : Statistics :: Grounding time = 0.468823s, Solving time = 7.151166s, Total time = 7.619988s
48 : Statistics :: Grounding time = 0.444853s, Solving time = 6.813878s, Total time = 7.258732s
49 : Statistics :: Grounding time = 0.461803s, Solving time = 9.102121s, Total time = 9.563925s
50 : Statistics :: Grounding time = 0.474308s, Solving time = 12.545067s, Total time = 13.019375s
51 : Statistics :: Grounding time = 0.512691s, Solving time = 12.604165s, Total time = 13.116856s
52 : Statistics :: Grounding time = 0.482467s, Solving time = 18.632743s, Total time = 19.115210s
53 : Statistics :: Grounding time = 0.516636s, Solving time = 17.596044s, Total time = 18.112680s

[05-02-2021_14-42-30] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 9.754524s, Solving time = 150.776216s, Total time = 161.594984s
Model :: Total atoms = 12268, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_14-42-30] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_2,retracted),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),35)
occurs(1,talos,configure(manipulator_limb_2,extended),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),38)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),39)
occurs(1,talos,release(manipulator_end_2,(block,5)),40)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),41)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),42)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),43)
occurs(1,talos,release(manipulator_end_2,(block,3)),44)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),45)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),46)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),47)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),48)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_1,(block,2)),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),52)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),53)

[05-02-2021_14-42-30] INFO :: Experiment >> 

      ================================================      
           Experimental run 15 : Time 161.911741s           
      ================================================      

[05-02-2021_14-42-30] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-42-30] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Instantiated.

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Program building started.

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Program building completed.

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding base program parts.

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.017687s.

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving base program parts.

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.003710s.

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental solving started.

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.195395s.

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.009242s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.068983s.

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.006055s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.065952s.

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.007896s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.068976s.

[05-02-2021_14-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.010482s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.082188s.

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.016816s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.079050s.

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.015046s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.085137s.

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.017562s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.084865s.

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.017353s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.087601s.

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.020235s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.086890s.

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.020496s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.087263s.

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.024306s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.088158s.

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.024316s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.086968s.

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.026791s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.093150s.

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.025432s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.088042s.

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.032387s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.095548s.

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.036887s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.092463s.

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.044391s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.099738s.

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.066383s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.102803s.

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.073500s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.098397s.

[05-02-2021_14-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.107452s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.099526s.

[05-02-2021_14-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.151259s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.098606s.

[05-02-2021_14-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.225803s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.106102s.

[05-02-2021_14-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.262051s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.101328s.

[05-02-2021_14-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.402314s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.112606s.

[05-02-2021_14-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.762468s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.108689s.

[05-02-2021_14-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.717878s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.104488s.

[05-02-2021_14-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.859697s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.101097s.

[05-02-2021_14-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.695507s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.107265s.

[05-02-2021_14-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.377339s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.106904s.

[05-02-2021_14-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.439854s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.111031s.

[05-02-2021_14-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.620602s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.115849s.

[05-02-2021_14-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.595749s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.124938s.

[05-02-2021_14-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.970526s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-42-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-42-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.110121s.

[05-02-2021_14-42-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 1.656380s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.115845s.

[05-02-2021_14-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 2.471697s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-42-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-42-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.125674s.

[05-02-2021_14-42-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 2.013539s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-42-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-42-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.118635s.

[05-02-2021_14-42-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 4.430288s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-42-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-42-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.117148s.

[05-02-2021_14-42-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-42-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 2.643459s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-42-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-42-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-42-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.128690s.

[05-02-2021_14-42-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 5.355910s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.141196s.

[05-02-2021_14-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-43-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 8.519493s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-43-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-43-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.378045s.

[05-02-2021_14-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 5.814263s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.389583s.

[05-02-2021_14-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 8.382104s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.405132s.

[05-02-2021_14-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 7.376127s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.445589s.

[05-02-2021_14-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-43-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 8.609891s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-43-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-43-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-43-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.415858s.

[05-02-2021_14-43-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 7.887665s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.422966s.

[05-02-2021_14-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 5.125315s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.451349s.

[05-02-2021_14-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-44-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 5.095052s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-44-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-44-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-44-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.489627s.

[05-02-2021_14-44-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-44-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 6.718321s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-44-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-44-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-44-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.440574s.

[05-02-2021_14-44-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-44-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 9.451787s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-44-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-44-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-44-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.466330s.

[05-02-2021_14-44-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 8.145205s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.486514s.

[05-02-2021_14-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-44-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 12.301429s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-44-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-44-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-44-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.487420s.

[05-02-2021_14-44-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 13.398103s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.513985s.

[05-02-2021_14-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_14-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Model found:
Model :: Total atoms = 12267, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[05-02-2021_14-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 14.320995s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental solving completed in 158.371937s because STOP_CON_REACHED.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 9.903964s, Solving time = 147.404806s, Total time = 158.371937s
Final Model :: Total atoms = 12267, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.195395s, Solving time = 0.009242s, Total time = 0.204637s
2 : Statistics :: Grounding time = 0.068983s, Solving time = 0.006055s, Total time = 0.075038s
3 : Statistics :: Grounding time = 0.065952s, Solving time = 0.007896s, Total time = 0.073848s
4 : Statistics :: Grounding time = 0.068976s, Solving time = 0.010482s, Total time = 0.079458s
5 : Statistics :: Grounding time = 0.082188s, Solving time = 0.016816s, Total time = 0.099004s
6 : Statistics :: Grounding time = 0.079050s, Solving time = 0.015046s, Total time = 0.094095s
7 : Statistics :: Grounding time = 0.085137s, Solving time = 0.017562s, Total time = 0.102699s
8 : Statistics :: Grounding time = 0.084865s, Solving time = 0.017353s, Total time = 0.102218s
9 : Statistics :: Grounding time = 0.087601s, Solving time = 0.020235s, Total time = 0.107836s
10 : Statistics :: Grounding time = 0.086890s, Solving time = 0.020496s, Total time = 0.107386s
11 : Statistics :: Grounding time = 0.087263s, Solving time = 0.024306s, Total time = 0.111569s
12 : Statistics :: Grounding time = 0.088158s, Solving time = 0.024316s, Total time = 0.112474s
13 : Statistics :: Grounding time = 0.086968s, Solving time = 0.026791s, Total time = 0.113759s
14 : Statistics :: Grounding time = 0.093150s, Solving time = 0.025432s, Total time = 0.118582s
15 : Statistics :: Grounding time = 0.088042s, Solving time = 0.032387s, Total time = 0.120429s
16 : Statistics :: Grounding time = 0.095548s, Solving time = 0.036887s, Total time = 0.132435s
17 : Statistics :: Grounding time = 0.092463s, Solving time = 0.044391s, Total time = 0.136854s
18 : Statistics :: Grounding time = 0.099738s, Solving time = 0.066383s, Total time = 0.166121s
19 : Statistics :: Grounding time = 0.102803s, Solving time = 0.073500s, Total time = 0.176304s
20 : Statistics :: Grounding time = 0.098397s, Solving time = 0.107452s, Total time = 0.205849s
21 : Statistics :: Grounding time = 0.099526s, Solving time = 0.151259s, Total time = 0.250786s
22 : Statistics :: Grounding time = 0.098606s, Solving time = 0.225803s, Total time = 0.324409s
23 : Statistics :: Grounding time = 0.106102s, Solving time = 0.262051s, Total time = 0.368153s
24 : Statistics :: Grounding time = 0.101328s, Solving time = 0.402314s, Total time = 0.503642s
25 : Statistics :: Grounding time = 0.112606s, Solving time = 0.762468s, Total time = 0.875074s
26 : Statistics :: Grounding time = 0.108689s, Solving time = 0.717878s, Total time = 0.826566s
27 : Statistics :: Grounding time = 0.104488s, Solving time = 0.859697s, Total time = 0.964185s
28 : Statistics :: Grounding time = 0.101097s, Solving time = 0.695507s, Total time = 0.796604s
29 : Statistics :: Grounding time = 0.107265s, Solving time = 0.377339s, Total time = 0.484604s
30 : Statistics :: Grounding time = 0.106904s, Solving time = 0.439854s, Total time = 0.546758s
31 : Statistics :: Grounding time = 0.111031s, Solving time = 0.620602s, Total time = 0.731632s
32 : Statistics :: Grounding time = 0.115849s, Solving time = 0.595749s, Total time = 0.711599s
33 : Statistics :: Grounding time = 0.124938s, Solving time = 0.970526s, Total time = 1.095465s
34 : Statistics :: Grounding time = 0.110121s, Solving time = 1.656380s, Total time = 1.766501s
35 : Statistics :: Grounding time = 0.115845s, Solving time = 2.471697s, Total time = 2.587542s
36 : Statistics :: Grounding time = 0.125674s, Solving time = 2.013539s, Total time = 2.139213s
37 : Statistics :: Grounding time = 0.118635s, Solving time = 4.430288s, Total time = 4.548923s
38 : Statistics :: Grounding time = 0.117148s, Solving time = 2.643459s, Total time = 2.760606s
39 : Statistics :: Grounding time = 0.128690s, Solving time = 5.355910s, Total time = 5.484600s
40 : Statistics :: Grounding time = 0.141196s, Solving time = 8.519493s, Total time = 8.660689s
41 : Statistics :: Grounding time = 0.378045s, Solving time = 5.814263s, Total time = 6.192308s
42 : Statistics :: Grounding time = 0.389583s, Solving time = 8.382104s, Total time = 8.771687s
43 : Statistics :: Grounding time = 0.405132s, Solving time = 7.376127s, Total time = 7.781259s
44 : Statistics :: Grounding time = 0.445589s, Solving time = 8.609891s, Total time = 9.055480s
45 : Statistics :: Grounding time = 0.415858s, Solving time = 7.887665s, Total time = 8.303523s
46 : Statistics :: Grounding time = 0.422966s, Solving time = 5.125315s, Total time = 5.548281s
47 : Statistics :: Grounding time = 0.451349s, Solving time = 5.095052s, Total time = 5.546401s
48 : Statistics :: Grounding time = 0.489627s, Solving time = 6.718321s, Total time = 7.207948s
49 : Statistics :: Grounding time = 0.440574s, Solving time = 9.451787s, Total time = 9.892360s
50 : Statistics :: Grounding time = 0.466330s, Solving time = 8.145205s, Total time = 8.611535s
51 : Statistics :: Grounding time = 0.486514s, Solving time = 12.301429s, Total time = 12.787944s
52 : Statistics :: Grounding time = 0.487420s, Solving time = 13.398103s, Total time = 13.885523s
53 : Statistics :: Grounding time = 0.513985s, Solving time = 14.320995s, Total time = 14.834980s

[05-02-2021_14-45-09] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 9.903964s, Solving time = 147.404806s, Total time = 158.371937s
Model :: Total atoms = 12267, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[05-02-2021_14-45-09] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),22)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_limb_2,retracted),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),36)
occurs(1,talos,release(manipulator_end_2,(block,6)),37)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),38)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),39)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),40)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),41)
occurs(1,talos,release(manipulator_end_1,(block,5)),42)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),43)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),44)
occurs(1,talos,release(manipulator_end_2,(block,3)),45)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[05-02-2021_14-45-09] INFO :: Experiment >> 

      ================================================      
           Experimental run 16 : Time 158.645287s           
      ================================================      

[05-02-2021_14-45-09] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-45-09] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Instantiated.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Program building started.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Program building completed.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding base program parts.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.016940s.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving base program parts.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.003047s.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental solving started.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.198393s.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.009561s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.064364s.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.005197s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.067760s.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.008656s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.074960s.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.012024s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.081427s.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.016911s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.077205s.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.014565s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.079057s.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.016438s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.085097s.

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.018401s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.088043s.

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.019697s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.084551s.

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.019069s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.098591s.

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.021217s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.084199s.

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.026192s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.083387s.

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.031726s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.085124s.

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.046139s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.087881s.

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.048490s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.087762s.

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.063097s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.099432s.

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.052022s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.095232s.

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.067657s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.089717s.

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.070552s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.093136s.

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.088246s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.092303s.

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.079618s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.100234s.

[05-02-2021_14-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.177407s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.103522s.

[05-02-2021_14-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.254575s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.096843s.

[05-02-2021_14-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.271180s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.096735s.

[05-02-2021_14-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.287210s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.099292s.

[05-02-2021_14-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.397459s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.106604s.

[05-02-2021_14-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.837652s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.101916s.

[05-02-2021_14-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 1.042526s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.105072s.

[05-02-2021_14-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 1.244541s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.104023s.

[05-02-2021_14-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 1.486699s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.113618s.

[05-02-2021_14-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 1.148667s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.108156s.

[05-02-2021_14-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 2.053858s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.117898s.

[05-02-2021_14-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 2.097026s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.112274s.

[05-02-2021_14-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 2.420046s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.121016s.

[05-02-2021_14-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 3.232090s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.115233s.

[05-02-2021_14-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 4.050647s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.127198s.

[05-02-2021_14-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 5.096951s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-45-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-45-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.120559s.

[05-02-2021_14-45-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 3.819278s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-45-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-45-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.122122s.

[05-02-2021_14-45-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 5.298159s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-45-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-45-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.124563s.

[05-02-2021_14-45-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 4.794862s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-45-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-45-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.378264s.

[05-02-2021_14-45-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-45-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 3.358714s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-45-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-45-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-45-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.382372s.

[05-02-2021_14-45-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-46-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 3.531679s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-46-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-46-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-46-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.459270s.

[05-02-2021_14-46-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-46-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 4.246828s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-46-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-46-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-46-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.398472s.

[05-02-2021_14-46-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-46-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 5.081176s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-46-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-46-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-46-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.419045s.

[05-02-2021_14-46-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-46-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 7.615449s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-46-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-46-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-46-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.437647s.

[05-02-2021_14-46-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 8.786525s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.427873s.

[05-02-2021_14-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-46-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 7.779517s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-46-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-46-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-46-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.452274s.

[05-02-2021_14-46-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-46-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 8.614122s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-46-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-46-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-46-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.436443s.

[05-02-2021_14-46-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-46-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 5.005460s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-46-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-46-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-46-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.491639s.

[05-02-2021_14-46-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-47-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 11.714638s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-47-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-47-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.558616s.

[05-02-2021_14-47-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-47-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 11.977420s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-47-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-47-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.532429s.

[05-02-2021_14-47-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-47-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 15.225895s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-47-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-47-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.580071s.

[05-02-2021_14-47-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_14-47-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Model found:
Model :: Total atoms = 12270, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-47-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 11.722480s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-47-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental solving completed in 156.494784s because STOP_CON_REACHED.

[05-02-2021_14-47-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 9.965857s, Solving time = 145.409261s, Total time = 156.494784s
Final Model :: Total atoms = 12270, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-47-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.198393s, Solving time = 0.009561s, Total time = 0.207954s
2 : Statistics :: Grounding time = 0.064364s, Solving time = 0.005197s, Total time = 0.069561s
3 : Statistics :: Grounding time = 0.067760s, Solving time = 0.008656s, Total time = 0.076416s
4 : Statistics :: Grounding time = 0.074960s, Solving time = 0.012024s, Total time = 0.086984s
5 : Statistics :: Grounding time = 0.081427s, Solving time = 0.016911s, Total time = 0.098338s
6 : Statistics :: Grounding time = 0.077205s, Solving time = 0.014565s, Total time = 0.091771s
7 : Statistics :: Grounding time = 0.079057s, Solving time = 0.016438s, Total time = 0.095495s
8 : Statistics :: Grounding time = 0.085097s, Solving time = 0.018401s, Total time = 0.103498s
9 : Statistics :: Grounding time = 0.088043s, Solving time = 0.019697s, Total time = 0.107740s
10 : Statistics :: Grounding time = 0.084551s, Solving time = 0.019069s, Total time = 0.103620s
11 : Statistics :: Grounding time = 0.098591s, Solving time = 0.021217s, Total time = 0.119808s
12 : Statistics :: Grounding time = 0.084199s, Solving time = 0.026192s, Total time = 0.110391s
13 : Statistics :: Grounding time = 0.083387s, Solving time = 0.031726s, Total time = 0.115114s
14 : Statistics :: Grounding time = 0.085124s, Solving time = 0.046139s, Total time = 0.131263s
15 : Statistics :: Grounding time = 0.087881s, Solving time = 0.048490s, Total time = 0.136371s
16 : Statistics :: Grounding time = 0.087762s, Solving time = 0.063097s, Total time = 0.150859s
17 : Statistics :: Grounding time = 0.099432s, Solving time = 0.052022s, Total time = 0.151454s
18 : Statistics :: Grounding time = 0.095232s, Solving time = 0.067657s, Total time = 0.162889s
19 : Statistics :: Grounding time = 0.089717s, Solving time = 0.070552s, Total time = 0.160269s
20 : Statistics :: Grounding time = 0.093136s, Solving time = 0.088246s, Total time = 0.181382s
21 : Statistics :: Grounding time = 0.092303s, Solving time = 0.079618s, Total time = 0.171921s
22 : Statistics :: Grounding time = 0.100234s, Solving time = 0.177407s, Total time = 0.277641s
23 : Statistics :: Grounding time = 0.103522s, Solving time = 0.254575s, Total time = 0.358097s
24 : Statistics :: Grounding time = 0.096843s, Solving time = 0.271180s, Total time = 0.368023s
25 : Statistics :: Grounding time = 0.096735s, Solving time = 0.287210s, Total time = 0.383945s
26 : Statistics :: Grounding time = 0.099292s, Solving time = 0.397459s, Total time = 0.496751s
27 : Statistics :: Grounding time = 0.106604s, Solving time = 0.837652s, Total time = 0.944256s
28 : Statistics :: Grounding time = 0.101916s, Solving time = 1.042526s, Total time = 1.144442s
29 : Statistics :: Grounding time = 0.105072s, Solving time = 1.244541s, Total time = 1.349613s
30 : Statistics :: Grounding time = 0.104023s, Solving time = 1.486699s, Total time = 1.590722s
31 : Statistics :: Grounding time = 0.113618s, Solving time = 1.148667s, Total time = 1.262285s
32 : Statistics :: Grounding time = 0.108156s, Solving time = 2.053858s, Total time = 2.162015s
33 : Statistics :: Grounding time = 0.117898s, Solving time = 2.097026s, Total time = 2.214925s
34 : Statistics :: Grounding time = 0.112274s, Solving time = 2.420046s, Total time = 2.532321s
35 : Statistics :: Grounding time = 0.121016s, Solving time = 3.232090s, Total time = 3.353106s
36 : Statistics :: Grounding time = 0.115233s, Solving time = 4.050647s, Total time = 4.165881s
37 : Statistics :: Grounding time = 0.127198s, Solving time = 5.096951s, Total time = 5.224149s
38 : Statistics :: Grounding time = 0.120559s, Solving time = 3.819278s, Total time = 3.939837s
39 : Statistics :: Grounding time = 0.122122s, Solving time = 5.298159s, Total time = 5.420280s
40 : Statistics :: Grounding time = 0.124563s, Solving time = 4.794862s, Total time = 4.919425s
41 : Statistics :: Grounding time = 0.378264s, Solving time = 3.358714s, Total time = 3.736977s
42 : Statistics :: Grounding time = 0.382372s, Solving time = 3.531679s, Total time = 3.914051s
43 : Statistics :: Grounding time = 0.459270s, Solving time = 4.246828s, Total time = 4.706098s
44 : Statistics :: Grounding time = 0.398472s, Solving time = 5.081176s, Total time = 5.479648s
45 : Statistics :: Grounding time = 0.419045s, Solving time = 7.615449s, Total time = 8.034494s
46 : Statistics :: Grounding time = 0.437647s, Solving time = 8.786525s, Total time = 9.224173s
47 : Statistics :: Grounding time = 0.427873s, Solving time = 7.779517s, Total time = 8.207390s
48 : Statistics :: Grounding time = 0.452274s, Solving time = 8.614122s, Total time = 9.066396s
49 : Statistics :: Grounding time = 0.436443s, Solving time = 5.005460s, Total time = 5.441904s
50 : Statistics :: Grounding time = 0.491639s, Solving time = 11.714638s, Total time = 12.206277s
51 : Statistics :: Grounding time = 0.558616s, Solving time = 11.977420s, Total time = 12.536036s
52 : Statistics :: Grounding time = 0.532429s, Solving time = 15.225895s, Total time = 15.758325s
53 : Statistics :: Grounding time = 0.580071s, Solving time = 11.722480s, Total time = 12.302552s

[05-02-2021_14-47-45] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 9.965857s, Solving time = 145.409261s, Total time = 156.494784s
Model :: Total atoms = 12270, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_14-47-45] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_limb_2,retracted),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,configure(manipulator_limb_2,extended),35)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),36)
occurs(1,talos,release(manipulator_end_2,(block,6)),37)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),38)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),39)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),40)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),41)
occurs(1,talos,release(manipulator_end_1,(block,5)),42)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),43)
occurs(1,talos,release(manipulator_end_2,(block,3)),44)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),45)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[05-02-2021_14-47-45] INFO :: Experiment >> 

      ================================================      
           Experimental run 17 : Time 156.828826s           
      ================================================      

[05-02-2021_14-47-46] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-47-46] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Instantiated.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Program building started.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Program building completed.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding base program parts.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.017184s.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving base program parts.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.003121s.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental solving started.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.200120s.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.009246s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.069827s.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.006917s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.068122s.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.008054s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.070957s.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.010612s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.077180s.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.016230s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.077974s.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.016095s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.082738s.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.017072s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.082318s.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.018664s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-47-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.082702s.

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.020006s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.086053s.

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.023695s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.083511s.

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.022862s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.085696s.

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.028082s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.097786s.

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.034061s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.083787s.

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.041265s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.090596s.

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.039849s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.084871s.

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.064089s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-47-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.087466s.

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.071243s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.100458s.

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.075545s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.090894s.

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.077149s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.096538s.

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.090227s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.093522s.

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.109834s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.095669s.

[05-02-2021_14-47-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.137014s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-47-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-47-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.107357s.

[05-02-2021_14-47-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.176853s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-47-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-47-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.099066s.

[05-02-2021_14-47-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.358046s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-47-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-47-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.096329s.

[05-02-2021_14-47-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.458239s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-47-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-47-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.099008s.

[05-02-2021_14-47-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.846185s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-47-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-47-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.107614s.

[05-02-2021_14-47-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.513354s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.105505s.

[05-02-2021_14-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.476899s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.108920s.

[05-02-2021_14-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.496580s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.106536s.

[05-02-2021_14-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.615444s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.105680s.

[05-02-2021_14-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.756077s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.115635s.

[05-02-2021_14-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 1.242196s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-47-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-47-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.112504s.

[05-02-2021_14-47-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 1.215944s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.116287s.

[05-02-2021_14-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-47-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 2.254139s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-47-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-47-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-48-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.113183s.

[05-02-2021_14-48-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-48-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 3.139354s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-48-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-48-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-48-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.134853s.

[05-02-2021_14-48-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-48-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 3.692441s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-48-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-48-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-48-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.125872s.

[05-02-2021_14-48-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-48-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 3.951501s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-48-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-48-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-48-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.115834s.

[05-02-2021_14-48-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-48-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 4.079728s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-48-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-48-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-48-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.117815s.

[05-02-2021_14-48-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-48-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 5.284191s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-48-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-48-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-48-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.120399s.

[05-02-2021_14-48-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-48-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 5.792328s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-48-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-48-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-48-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.383020s.

[05-02-2021_14-48-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-48-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 6.301329s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-48-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-48-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-48-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.401121s.

[05-02-2021_14-48-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-48-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 6.254390s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-48-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-48-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-48-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.475793s.

[05-02-2021_14-48-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-48-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 10.672992s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-48-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-48-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-48-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.403853s.

[05-02-2021_14-48-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-49-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 8.961204s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-49-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-49-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-49-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.475019s.

[05-02-2021_14-49-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 13.016757s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.433289s.

[05-02-2021_14-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 6.705492s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-49-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.434265s.

[05-02-2021_14-49-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-49-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 7.050807s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-49-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-49-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-49-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.458475s.

[05-02-2021_14-49-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-49-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 8.909566s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-49-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-49-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-49-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.441043s.

[05-02-2021_14-49-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-49-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 9.107623s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-49-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-49-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-49-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.451779s.

[05-02-2021_14-49-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-49-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 8.403427s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-49-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-49-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-49-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.456099s.

[05-02-2021_14-49-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-50-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 11.629069s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-50-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-50-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.489697s.

[05-02-2021_14-50-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 17.091944s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-50-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.485119s.

[05-02-2021_14-50-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_14-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Model found:
Model :: Total atoms = 12266, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_14-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 16.151012s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental solving completed in 177.477132s because STOP_CON_REACHED.

[05-02-2021_14-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 9.802937s, Solving time = 166.546047s, Total time = 177.477132s
Final Model :: Total atoms = 12266, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_14-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.200120s, Solving time = 0.009246s, Total time = 0.209366s
2 : Statistics :: Grounding time = 0.069827s, Solving time = 0.006917s, Total time = 0.076744s
3 : Statistics :: Grounding time = 0.068122s, Solving time = 0.008054s, Total time = 0.076176s
4 : Statistics :: Grounding time = 0.070957s, Solving time = 0.010612s, Total time = 0.081569s
5 : Statistics :: Grounding time = 0.077180s, Solving time = 0.016230s, Total time = 0.093410s
6 : Statistics :: Grounding time = 0.077974s, Solving time = 0.016095s, Total time = 0.094069s
7 : Statistics :: Grounding time = 0.082738s, Solving time = 0.017072s, Total time = 0.099811s
8 : Statistics :: Grounding time = 0.082318s, Solving time = 0.018664s, Total time = 0.100982s
9 : Statistics :: Grounding time = 0.082702s, Solving time = 0.020006s, Total time = 0.102708s
10 : Statistics :: Grounding time = 0.086053s, Solving time = 0.023695s, Total time = 0.109748s
11 : Statistics :: Grounding time = 0.083511s, Solving time = 0.022862s, Total time = 0.106373s
12 : Statistics :: Grounding time = 0.085696s, Solving time = 0.028082s, Total time = 0.113778s
13 : Statistics :: Grounding time = 0.097786s, Solving time = 0.034061s, Total time = 0.131846s
14 : Statistics :: Grounding time = 0.083787s, Solving time = 0.041265s, Total time = 0.125052s
15 : Statistics :: Grounding time = 0.090596s, Solving time = 0.039849s, Total time = 0.130445s
16 : Statistics :: Grounding time = 0.084871s, Solving time = 0.064089s, Total time = 0.148960s
17 : Statistics :: Grounding time = 0.087466s, Solving time = 0.071243s, Total time = 0.158710s
18 : Statistics :: Grounding time = 0.100458s, Solving time = 0.075545s, Total time = 0.176003s
19 : Statistics :: Grounding time = 0.090894s, Solving time = 0.077149s, Total time = 0.168043s
20 : Statistics :: Grounding time = 0.096538s, Solving time = 0.090227s, Total time = 0.186766s
21 : Statistics :: Grounding time = 0.093522s, Solving time = 0.109834s, Total time = 0.203356s
22 : Statistics :: Grounding time = 0.095669s, Solving time = 0.137014s, Total time = 0.232683s
23 : Statistics :: Grounding time = 0.107357s, Solving time = 0.176853s, Total time = 0.284210s
24 : Statistics :: Grounding time = 0.099066s, Solving time = 0.358046s, Total time = 0.457113s
25 : Statistics :: Grounding time = 0.096329s, Solving time = 0.458239s, Total time = 0.554567s
26 : Statistics :: Grounding time = 0.099008s, Solving time = 0.846185s, Total time = 0.945192s
27 : Statistics :: Grounding time = 0.107614s, Solving time = 0.513354s, Total time = 0.620968s
28 : Statistics :: Grounding time = 0.105505s, Solving time = 0.476899s, Total time = 0.582404s
29 : Statistics :: Grounding time = 0.108920s, Solving time = 0.496580s, Total time = 0.605500s
30 : Statistics :: Grounding time = 0.106536s, Solving time = 0.615444s, Total time = 0.721980s
31 : Statistics :: Grounding time = 0.105680s, Solving time = 0.756077s, Total time = 0.861757s
32 : Statistics :: Grounding time = 0.115635s, Solving time = 1.242196s, Total time = 1.357831s
33 : Statistics :: Grounding time = 0.112504s, Solving time = 1.215944s, Total time = 1.328448s
34 : Statistics :: Grounding time = 0.116287s, Solving time = 2.254139s, Total time = 2.370426s
35 : Statistics :: Grounding time = 0.113183s, Solving time = 3.139354s, Total time = 3.252537s
36 : Statistics :: Grounding time = 0.134853s, Solving time = 3.692441s, Total time = 3.827293s
37 : Statistics :: Grounding time = 0.125872s, Solving time = 3.951501s, Total time = 4.077373s
38 : Statistics :: Grounding time = 0.115834s, Solving time = 4.079728s, Total time = 4.195562s
39 : Statistics :: Grounding time = 0.117815s, Solving time = 5.284191s, Total time = 5.402006s
40 : Statistics :: Grounding time = 0.120399s, Solving time = 5.792328s, Total time = 5.912727s
41 : Statistics :: Grounding time = 0.383020s, Solving time = 6.301329s, Total time = 6.684349s
42 : Statistics :: Grounding time = 0.401121s, Solving time = 6.254390s, Total time = 6.655511s
43 : Statistics :: Grounding time = 0.475793s, Solving time = 10.672992s, Total time = 11.148785s
44 : Statistics :: Grounding time = 0.403853s, Solving time = 8.961204s, Total time = 9.365057s
45 : Statistics :: Grounding time = 0.475019s, Solving time = 13.016757s, Total time = 13.491776s
46 : Statistics :: Grounding time = 0.433289s, Solving time = 6.705492s, Total time = 7.138781s
47 : Statistics :: Grounding time = 0.434265s, Solving time = 7.050807s, Total time = 7.485072s
48 : Statistics :: Grounding time = 0.458475s, Solving time = 8.909566s, Total time = 9.368040s
49 : Statistics :: Grounding time = 0.441043s, Solving time = 9.107623s, Total time = 9.548666s
50 : Statistics :: Grounding time = 0.451779s, Solving time = 8.403427s, Total time = 8.855206s
51 : Statistics :: Grounding time = 0.456099s, Solving time = 11.629069s, Total time = 12.085168s
52 : Statistics :: Grounding time = 0.489697s, Solving time = 17.091944s, Total time = 17.581642s
53 : Statistics :: Grounding time = 0.485119s, Solving time = 16.151012s, Total time = 16.636131s

[05-02-2021_14-50-43] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 9.802937s, Solving time = 166.546047s, Total time = 177.477132s
Model :: Total atoms = 12266, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_14-50-43] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_1,retracted),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,configure(manipulator_limb_2,extended),35)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),38)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),39)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),40)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),41)
occurs(1,talos,release(manipulator_end_2,(block,5)),42)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),43)
occurs(1,talos,release(manipulator_end_1,(block,3)),44)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),45)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),46)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),47)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),48)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_1,(block,2)),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),52)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),53)

[05-02-2021_14-50-43] INFO :: Experiment >> 

      ================================================      
           Experimental run 18 : Time 177.748911s           
      ================================================      

[05-02-2021_14-50-43] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-50-43] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Instantiated.

[05-02-2021_14-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Program building started.

[05-02-2021_14-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Program building completed.

[05-02-2021_14-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding base program parts.

[05-02-2021_14-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.017768s.

[05-02-2021_14-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving base program parts.

[05-02-2021_14-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.003945s.

[05-02-2021_14-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental solving started.

[05-02-2021_14-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.198023s.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.009363s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.065404s.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.005789s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.074200s.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.008683s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.071740s.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.010709s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.071980s.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.015919s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.080078s.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.015233s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.077724s.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.015065s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.083200s.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.017978s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.081872s.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.018203s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.083571s.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.022356s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.090325s.

[05-02-2021_14-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.020769s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.082049s.

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.026269s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.086212s.

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.028830s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.087304s.

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.029666s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.086769s.

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.039569s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.093562s.

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.047782s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.092230s.

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.073782s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.104367s.

[05-02-2021_14-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.075081s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.089771s.

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.065157s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.094037s.

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.064092s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.096500s.

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.109841s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.095745s.

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.134650s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.098525s.

[05-02-2021_14-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.197670s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-50-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-50-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.103355s.

[05-02-2021_14-50-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.298425s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-50-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-50-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.100770s.

[05-02-2021_14-50-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.515481s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-50-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-50-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.099497s.

[05-02-2021_14-50-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.801191s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-50-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-50-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.109998s.

[05-02-2021_14-50-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 1.015014s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-50-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-50-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.122317s.

[05-02-2021_14-50-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 1.800841s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-50-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-50-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.133747s.

[05-02-2021_14-50-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 1.213223s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-50-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-50-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.119448s.

[05-02-2021_14-50-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.471863s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.110054s.

[05-02-2021_14-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.726493s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-50-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.112453s.

[05-02-2021_14-50-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.549665s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-50-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-50-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.116961s.

[05-02-2021_14-50-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.725849s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-50-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-50-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.113191s.

[05-02-2021_14-50-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 1.008517s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-50-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-50-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.116680s.

[05-02-2021_14-50-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-50-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 1.215952s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-50-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-50-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-50-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.112661s.

[05-02-2021_14-50-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-51-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 2.449567s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-51-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-51-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-51-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.134206s.

[05-02-2021_14-51-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-51-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 3.298751s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-51-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-51-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-51-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.144482s.

[05-02-2021_14-51-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-51-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 3.914227s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-51-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-51-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-51-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.122882s.

[05-02-2021_14-51-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-51-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 5.793270s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-51-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-51-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-51-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.125422s.

[05-02-2021_14-51-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-51-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 4.544814s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-51-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-51-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-51-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.388727s.

[05-02-2021_14-51-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-51-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 4.834047s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-51-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-51-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-51-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.411240s.

[05-02-2021_14-51-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-51-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 4.266674s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-51-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-51-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-51-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.406245s.

[05-02-2021_14-51-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-51-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 5.517614s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-51-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-51-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-51-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.471640s.

[05-02-2021_14-51-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-51-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 6.319431s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-51-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-51-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-51-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.452336s.

[05-02-2021_14-51-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-51-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 8.478717s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-51-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-51-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-51-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.449043s.

[05-02-2021_14-51-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-51-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 7.820515s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-51-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-51-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-52-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.442510s.

[05-02-2021_14-52-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-52-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 13.178484s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-52-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-52-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-52-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.453867s.

[05-02-2021_14-52-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-52-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 14.019673s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-52-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-52-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-52-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.476050s.

[05-02-2021_14-52-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 12.630091s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.473657s.

[05-02-2021_14-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 13.878445s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.512633s.

[05-02-2021_14-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 22.875828s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.488437s.

[05-02-2021_14-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 19.517931s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.504663s.

[05-02-2021_14-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Model found:
Model :: Total atoms = 12259, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 15.343704s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental solving completed in 191.209508s because STOP_CON_REACHED.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 10.032129s, Solving time = 180.080697s, Total time = 191.209508s
Final Model :: Total atoms = 12259, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.198023s, Solving time = 0.009363s, Total time = 0.207387s
2 : Statistics :: Grounding time = 0.065404s, Solving time = 0.005789s, Total time = 0.071193s
3 : Statistics :: Grounding time = 0.074200s, Solving time = 0.008683s, Total time = 0.082883s
4 : Statistics :: Grounding time = 0.071740s, Solving time = 0.010709s, Total time = 0.082449s
5 : Statistics :: Grounding time = 0.071980s, Solving time = 0.015919s, Total time = 0.087899s
6 : Statistics :: Grounding time = 0.080078s, Solving time = 0.015233s, Total time = 0.095311s
7 : Statistics :: Grounding time = 0.077724s, Solving time = 0.015065s, Total time = 0.092788s
8 : Statistics :: Grounding time = 0.083200s, Solving time = 0.017978s, Total time = 0.101178s
9 : Statistics :: Grounding time = 0.081872s, Solving time = 0.018203s, Total time = 0.100075s
10 : Statistics :: Grounding time = 0.083571s, Solving time = 0.022356s, Total time = 0.105928s
11 : Statistics :: Grounding time = 0.090325s, Solving time = 0.020769s, Total time = 0.111094s
12 : Statistics :: Grounding time = 0.082049s, Solving time = 0.026269s, Total time = 0.108318s
13 : Statistics :: Grounding time = 0.086212s, Solving time = 0.028830s, Total time = 0.115043s
14 : Statistics :: Grounding time = 0.087304s, Solving time = 0.029666s, Total time = 0.116969s
15 : Statistics :: Grounding time = 0.086769s, Solving time = 0.039569s, Total time = 0.126338s
16 : Statistics :: Grounding time = 0.093562s, Solving time = 0.047782s, Total time = 0.141343s
17 : Statistics :: Grounding time = 0.092230s, Solving time = 0.073782s, Total time = 0.166013s
18 : Statistics :: Grounding time = 0.104367s, Solving time = 0.075081s, Total time = 0.179448s
19 : Statistics :: Grounding time = 0.089771s, Solving time = 0.065157s, Total time = 0.154928s
20 : Statistics :: Grounding time = 0.094037s, Solving time = 0.064092s, Total time = 0.158128s
21 : Statistics :: Grounding time = 0.096500s, Solving time = 0.109841s, Total time = 0.206341s
22 : Statistics :: Grounding time = 0.095745s, Solving time = 0.134650s, Total time = 0.230395s
23 : Statistics :: Grounding time = 0.098525s, Solving time = 0.197670s, Total time = 0.296195s
24 : Statistics :: Grounding time = 0.103355s, Solving time = 0.298425s, Total time = 0.401780s
25 : Statistics :: Grounding time = 0.100770s, Solving time = 0.515481s, Total time = 0.616251s
26 : Statistics :: Grounding time = 0.099497s, Solving time = 0.801191s, Total time = 0.900688s
27 : Statistics :: Grounding time = 0.109998s, Solving time = 1.015014s, Total time = 1.125012s
28 : Statistics :: Grounding time = 0.122317s, Solving time = 1.800841s, Total time = 1.923158s
29 : Statistics :: Grounding time = 0.133747s, Solving time = 1.213223s, Total time = 1.346970s
30 : Statistics :: Grounding time = 0.119448s, Solving time = 0.471863s, Total time = 0.591311s
31 : Statistics :: Grounding time = 0.110054s, Solving time = 0.726493s, Total time = 0.836547s
32 : Statistics :: Grounding time = 0.112453s, Solving time = 0.549665s, Total time = 0.662118s
33 : Statistics :: Grounding time = 0.116961s, Solving time = 0.725849s, Total time = 0.842810s
34 : Statistics :: Grounding time = 0.113191s, Solving time = 1.008517s, Total time = 1.121707s
35 : Statistics :: Grounding time = 0.116680s, Solving time = 1.215952s, Total time = 1.332632s
36 : Statistics :: Grounding time = 0.112661s, Solving time = 2.449567s, Total time = 2.562228s
37 : Statistics :: Grounding time = 0.134206s, Solving time = 3.298751s, Total time = 3.432957s
38 : Statistics :: Grounding time = 0.144482s, Solving time = 3.914227s, Total time = 4.058710s
39 : Statistics :: Grounding time = 0.122882s, Solving time = 5.793270s, Total time = 5.916152s
40 : Statistics :: Grounding time = 0.125422s, Solving time = 4.544814s, Total time = 4.670236s
41 : Statistics :: Grounding time = 0.388727s, Solving time = 4.834047s, Total time = 5.222773s
42 : Statistics :: Grounding time = 0.411240s, Solving time = 4.266674s, Total time = 4.677914s
43 : Statistics :: Grounding time = 0.406245s, Solving time = 5.517614s, Total time = 5.923859s
44 : Statistics :: Grounding time = 0.471640s, Solving time = 6.319431s, Total time = 6.791071s
45 : Statistics :: Grounding time = 0.452336s, Solving time = 8.478717s, Total time = 8.931053s
46 : Statistics :: Grounding time = 0.449043s, Solving time = 7.820515s, Total time = 8.269558s
47 : Statistics :: Grounding time = 0.442510s, Solving time = 13.178484s, Total time = 13.620994s
48 : Statistics :: Grounding time = 0.453867s, Solving time = 14.019673s, Total time = 14.473540s
49 : Statistics :: Grounding time = 0.476050s, Solving time = 12.630091s, Total time = 13.106141s
50 : Statistics :: Grounding time = 0.473657s, Solving time = 13.878445s, Total time = 14.352102s
51 : Statistics :: Grounding time = 0.512633s, Solving time = 22.875828s, Total time = 23.388461s
52 : Statistics :: Grounding time = 0.488437s, Solving time = 19.517931s, Total time = 20.006369s
53 : Statistics :: Grounding time = 0.504663s, Solving time = 15.343704s, Total time = 15.848367s

[05-02-2021_14-53-55] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 10.032129s, Solving time = 180.080697s, Total time = 191.209508s
Model :: Total atoms = 12259, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_14-53-55] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_1,retracted),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),36)
occurs(1,talos,release(manipulator_end_2,(block,6)),37)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),38)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),39)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),40)
occurs(1,talos,release(manipulator_end_1,(block,5)),41)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),43)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),44)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),45)
occurs(1,talos,release(manipulator_end_1,(block,3)),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),48)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_1,(block,2)),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),52)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),53)

[05-02-2021_14-53-55] INFO :: Experiment >> 

      ================================================      
           Experimental run 19 : Time 191.484593s           
      ================================================      

[05-02-2021_14-53-55] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_14-53-55] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Instantiated.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Program building started.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Program building completed.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding base program parts.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.021575s.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving base program parts.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.003778s.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental solving started.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.200470s.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.009131s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.070066s.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.006125s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.067807s.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.008330s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.074587s.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.012974s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.075130s.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.015300s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.075204s.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.014688s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.080964s.

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.015994s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.079307s.

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.018560s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.088837s.

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.019677s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.079093s.

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.021208s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.085968s.

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.021927s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.082307s.

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.028358s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.084445s.

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.035887s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.095315s.

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.043600s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.089031s.

[05-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.057449s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.099967s.

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.074301s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.088572s.

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.053288s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.086605s.

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.059706s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.093983s.

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.070715s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.099941s.

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.093453s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.096104s.

[05-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.101167s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.092884s.

[05-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.162093s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.108675s.

[05-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.226965s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.099176s.

[05-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.342142s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_14-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_14-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.097751s.

[05-02-2021_14-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.539957s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_14-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_14-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.103300s.

[05-02-2021_14-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.732214s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.112868s.

[05-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 1.237193s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.127866s.

[05-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 1.919787s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.114218s.

[05-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.912052s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_14-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_14-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.123398s.

[05-02-2021_14-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.788401s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_14-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_14-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.117977s.

[05-02-2021_14-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.960887s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_14-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_14-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.108707s.

[05-02-2021_14-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 1.383249s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.111154s.

[05-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 2.204224s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_14-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_14-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.116089s.

[05-02-2021_14-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 2.718650s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.145527s.

[05-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 2.754863s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.116722s.

[05-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 2.235331s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_14-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_14-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.115438s.

[05-02-2021_14-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 3.530440s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_14-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_14-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.119899s.

[05-02-2021_14-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 5.252103s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.136006s.

[05-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 5.743706s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[05-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[05-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.132370s.

[05-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 5.118994s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[05-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[05-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.393545s.

[05-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 7.393086s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[05-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[05-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.427879s.

[05-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 3.574856s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[05-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[05-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.500659s.

[05-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-54-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 4.793416s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-54-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[05-02-2021_14-54-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[05-02-2021_14-54-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.453735s.

[05-02-2021_14-54-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 7.233203s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[05-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[05-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.459588s.

[05-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 8.596119s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[05-02-2021_14-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[05-02-2021_14-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.421319s.

[05-02-2021_14-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 10.191354s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[05-02-2021_14-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[05-02-2021_14-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.425447s.

[05-02-2021_14-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 9.020502s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[05-02-2021_14-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[05-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.486003s.

[05-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-55-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 8.768865s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-55-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[05-02-2021_14-55-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[05-02-2021_14-55-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.444907s.

[05-02-2021_14-55-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-55-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 7.188329s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-55-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[05-02-2021_14-55-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[05-02-2021_14-55-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.469150s.

[05-02-2021_14-55-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 12.185372s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[05-02-2021_14-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[05-02-2021_14-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.559604s.

[05-02-2021_14-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 15.878018s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[05-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[05-02-2021_14-56-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.492919s.

[05-02-2021_14-56-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 16.886446s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[05-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[05-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.534167s.

[05-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Model found:
Model :: Total atoms = 12270, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 13.501777s:
Result = SAT, Stop condition = SAT

[05-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental solving completed in 176.121940s because STOP_CON_REACHED.

[05-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 10.184222s, Solving time = 164.760211s, Total time = 176.121940s
Final Model :: Total atoms = 12270, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.200470s, Solving time = 0.009131s, Total time = 0.209601s
2 : Statistics :: Grounding time = 0.070066s, Solving time = 0.006125s, Total time = 0.076191s
3 : Statistics :: Grounding time = 0.067807s, Solving time = 0.008330s, Total time = 0.076137s
4 : Statistics :: Grounding time = 0.074587s, Solving time = 0.012974s, Total time = 0.087561s
5 : Statistics :: Grounding time = 0.075130s, Solving time = 0.015300s, Total time = 0.090430s
6 : Statistics :: Grounding time = 0.075204s, Solving time = 0.014688s, Total time = 0.089891s
7 : Statistics :: Grounding time = 0.080964s, Solving time = 0.015994s, Total time = 0.096957s
8 : Statistics :: Grounding time = 0.079307s, Solving time = 0.018560s, Total time = 0.097868s
9 : Statistics :: Grounding time = 0.088837s, Solving time = 0.019677s, Total time = 0.108514s
10 : Statistics :: Grounding time = 0.079093s, Solving time = 0.021208s, Total time = 0.100301s
11 : Statistics :: Grounding time = 0.085968s, Solving time = 0.021927s, Total time = 0.107895s
12 : Statistics :: Grounding time = 0.082307s, Solving time = 0.028358s, Total time = 0.110665s
13 : Statistics :: Grounding time = 0.084445s, Solving time = 0.035887s, Total time = 0.120331s
14 : Statistics :: Grounding time = 0.095315s, Solving time = 0.043600s, Total time = 0.138914s
15 : Statistics :: Grounding time = 0.089031s, Solving time = 0.057449s, Total time = 0.146480s
16 : Statistics :: Grounding time = 0.099967s, Solving time = 0.074301s, Total time = 0.174268s
17 : Statistics :: Grounding time = 0.088572s, Solving time = 0.053288s, Total time = 0.141860s
18 : Statistics :: Grounding time = 0.086605s, Solving time = 0.059706s, Total time = 0.146311s
19 : Statistics :: Grounding time = 0.093983s, Solving time = 0.070715s, Total time = 0.164698s
20 : Statistics :: Grounding time = 0.099941s, Solving time = 0.093453s, Total time = 0.193394s
21 : Statistics :: Grounding time = 0.096104s, Solving time = 0.101167s, Total time = 0.197272s
22 : Statistics :: Grounding time = 0.092884s, Solving time = 0.162093s, Total time = 0.254977s
23 : Statistics :: Grounding time = 0.108675s, Solving time = 0.226965s, Total time = 0.335640s
24 : Statistics :: Grounding time = 0.099176s, Solving time = 0.342142s, Total time = 0.441318s
25 : Statistics :: Grounding time = 0.097751s, Solving time = 0.539957s, Total time = 0.637708s
26 : Statistics :: Grounding time = 0.103300s, Solving time = 0.732214s, Total time = 0.835514s
27 : Statistics :: Grounding time = 0.112868s, Solving time = 1.237193s, Total time = 1.350061s
28 : Statistics :: Grounding time = 0.127866s, Solving time = 1.919787s, Total time = 2.047653s
29 : Statistics :: Grounding time = 0.114218s, Solving time = 0.912052s, Total time = 1.026270s
30 : Statistics :: Grounding time = 0.123398s, Solving time = 0.788401s, Total time = 0.911800s
31 : Statistics :: Grounding time = 0.117977s, Solving time = 0.960887s, Total time = 1.078864s
32 : Statistics :: Grounding time = 0.108707s, Solving time = 1.383249s, Total time = 1.491955s
33 : Statistics :: Grounding time = 0.111154s, Solving time = 2.204224s, Total time = 2.315378s
34 : Statistics :: Grounding time = 0.116089s, Solving time = 2.718650s, Total time = 2.834739s
35 : Statistics :: Grounding time = 0.145527s, Solving time = 2.754863s, Total time = 2.900390s
36 : Statistics :: Grounding time = 0.116722s, Solving time = 2.235331s, Total time = 2.352053s
37 : Statistics :: Grounding time = 0.115438s, Solving time = 3.530440s, Total time = 3.645878s
38 : Statistics :: Grounding time = 0.119899s, Solving time = 5.252103s, Total time = 5.372001s
39 : Statistics :: Grounding time = 0.136006s, Solving time = 5.743706s, Total time = 5.879712s
40 : Statistics :: Grounding time = 0.132370s, Solving time = 5.118994s, Total time = 5.251364s
41 : Statistics :: Grounding time = 0.393545s, Solving time = 7.393086s, Total time = 7.786631s
42 : Statistics :: Grounding time = 0.427879s, Solving time = 3.574856s, Total time = 4.002735s
43 : Statistics :: Grounding time = 0.500659s, Solving time = 4.793416s, Total time = 5.294075s
44 : Statistics :: Grounding time = 0.453735s, Solving time = 7.233203s, Total time = 7.686938s
45 : Statistics :: Grounding time = 0.459588s, Solving time = 8.596119s, Total time = 9.055708s
46 : Statistics :: Grounding time = 0.421319s, Solving time = 10.191354s, Total time = 10.612673s
47 : Statistics :: Grounding time = 0.425447s, Solving time = 9.020502s, Total time = 9.445949s
48 : Statistics :: Grounding time = 0.486003s, Solving time = 8.768865s, Total time = 9.254868s
49 : Statistics :: Grounding time = 0.444907s, Solving time = 7.188329s, Total time = 7.633236s
50 : Statistics :: Grounding time = 0.469150s, Solving time = 12.185372s, Total time = 12.654522s
51 : Statistics :: Grounding time = 0.559604s, Solving time = 15.878018s, Total time = 16.437622s
52 : Statistics :: Grounding time = 0.492919s, Solving time = 16.886446s, Total time = 17.379365s
53 : Statistics :: Grounding time = 0.534167s, Solving time = 13.501777s, Total time = 14.035944s

[05-02-2021_14-56-51] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 10.184222s, Solving time = 164.760211s, Total time = 176.121940s
Model :: Total atoms = 12270, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_14-56-51] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),24)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_2,retracted),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),35)
occurs(1,talos,release(manipulator_end_1,(block,6)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),38)
occurs(1,talos,configure(manipulator_limb_2,extended),39)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),40)
occurs(1,talos,release(manipulator_end_1,(block,3)),41)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),42)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),43)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),44)
occurs(1,talos,release(manipulator_end_2,(block,5)),45)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[05-02-2021_14-56-51] INFO :: Experiment >> 

      ================================================      
           Experimental run 20 : Time 176.386856s           
      ================================================      

[05-02-2021_14-56-51] INFO :: Experiment >> 

  ################################################################################################  
     All 20 experimental runs complete : Real time 3223.445141s, Proccessing time 22058.656250s     
  ################################################################################################  

[05-02-2021_14-56-51] INFO :: Experiment >> 

          ========================================          
                     Experimental Data                      
          ========================================          

 RU  IT  AL         GT          ST          TT   S   A
  0   1   1   9.643593  154.355848  165.146554  53  53
  1   1   1   9.440248  135.734154  146.233538  53  53
  2   1   1   9.190277  131.713461  141.948763  53  53
  3   1   1   9.923981  171.696129  182.800487  53  53
  4   1   1   9.610636  162.929418  173.590868  53  53
  5   1   1   9.387612  142.952940  153.387768  53  53
  6   1   1   9.647677  150.426448  161.112373  53  53
  7   1   1   9.459237  141.963094  152.443448  53  53
  8   1   1   9.777546  152.272867  163.105749  53  53
  9   1   1   9.592453  149.752369  160.381667  53  53
 10   1   1  10.733016  140.346213  152.277986  53  53
 11   1   1  10.114924  141.708657  152.923668  53  53
 12   1   1   9.935293  135.577889  146.649025  53  53
 13   1   1   9.947566  133.056529  144.032420  53  53
 14   1   1   9.754524  150.776216  161.594984  53  53
 15   1   1   9.903964  147.404806  158.371937  53  53
 16   1   1   9.965857  145.409261  156.494784  53  53
 17   1   1   9.802937  166.546047  177.477132  53  53
 18   1   1  10.032129  180.080697  191.209508  53  53
 19   1   1  10.184222  164.760211  176.121940  53  53

[05-02-2021_14-56-51] INFO :: __main__ >> Exiting with code 0

