[16-02-2021_16-36-47] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Abstraction Planner for Robots                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
         This program comes with ABSOLUTELY NO WARRANTY; for details type `--warranty'. This is free software,          
           and you are welcome to redistribute it under certain conditions; type `--conditions' for details.            
                                     For help and usage instructions type `--help'.                                     
                                                                                                                        
  ####################################################################################################################  

[16-02-2021_16-36-47] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[16-02-2021_16-36-47] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Abstraction Planner for Robots                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[16-02-2021_16-36-47] DEBUG :: __main__ >> Parsing command line arguments: ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp', '-sc', '-pm=online', '-xf', '-df', '-ir', '2', '-er', '20', '-ppl', '10', '0.5', '0.5', '-op=False'].

[16-02-2021_16-36-47] DEBUG :: __main__ >> Parsing complete:
('domain_files', ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'])
('log_file', None)
('excel_file', './results/ASH_Excel_16-02-2021_16-36-47.xlsx')
('data_file', './results/ASH_Data_16-02-2021_16-36-47.dat')
('data_sep', ' ')
('data_end', '\n')
('silence_ash', False)
('silence_clingo', True)
('logging', 'INFO')
('threads', 8)
('time_limit', [3600])
('planning_mode', 'online')
('enforce_conformance', True)
('optimise_plan', False)
('step_max', [0])
('step_inc', [1])
('step_inc_init', [2])
('partial_planning_length', [10, 0.5, 0.5])
('experimental_runs', 20)
('initial_runs', 2)
('warranty', False)
('conditions', False)

[16-02-2021_16-36-47] DEBUG :: planner.ASH >> Instantiating new planning domain: Name = None, Domain files = ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'].

[16-02-2021_16-36-48] DEBUG :: planner.ASH >> The domain files ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'] were loaded successfully, contain all required program parts, and contain optional program parts: {'entities': True, 'static_state': True, 'initial_state': True, 'goal_state': True}.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Anon #1 >> Instantiated.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Anon #1 >> Entering standard solve call:
Solver options = --outf=3, --warn=none, -t, 1, -c, plan_at=0
Program parts = #program instance_module()., #program domain_sorts().

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Anon #1 >> Program building started.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Anon #1 >> Program building completed.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Anon #1 >> Grounding started.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Anon #1 >> Grounding completed in 0.006099s.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Anon #1 >> Solving started.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Anon #1 >> Model found:
Model :: Total atoms = 69, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Anon #1 >> Solving completed in 0.000205s.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Anon #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.006099s, Solving time = 0.000205s, Total time = 0.006303s
Final Model :: Total atoms = 69, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-36-48] DEBUG :: planner.ASH >> Planning Domain Anon #1 : Abstraction range = [1-3] instantiated successfully

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program ASH #1 >> Instantiated.

[16-02-2021_16-36-48] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program instance_module.
al((1..abstraction_max)).
#const plan_at = 1.
pl(AL) :- AL=plan_at; al(AL).
sl(AL) :- AL>=plan_at; AL<=(plan_at+1); al(AL).
sl(AL) :- plan_at<1; al(AL).
(boolean(true);boolean(false)).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1>=AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1!=DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step).
#show is/2.
#show holds/4.
{ holds(AL,F,V,step) :  } :- fluent(AL,inertial,F,V); AL>=plan_at; sl(AL); step=0.
#false :- not 1 = { holds(AL,F,V,step) : fluent(AL,_,F,V) }; fluent(AL,_,F,_); AL>=plan_at; sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); AL>=plan_at; sl(AL); step>0.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); AL>=plan_at; sl(AL).
#program plan_module(step,start).
#show occurs/4.
#show sub_goal/6.
{ occurs(AL,ROBOT,A,step) : action(AL,ROBOT,A) } :- incomplete_plan((step-1)); AL=plan_at; step>start.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1!=A_2; action(AL,ROBOT,A_1); action(AL,ROBOT,A_2); AL=plan_at; step>start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; step>start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; step>start.
:~ occurs(AL,step); incomplete_plan((step-1)); AL=plan_at; step>start. [1@3,step]
:~ occurs(AL,ROBOT,A,step); action(AL,ROBOT,A); incomplete_plan((step-1)); AL=plan_at; step>start. [1@2,ROBOT,A,step]
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,ROBOT,A); AL=plan_at; step>start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); AL=plan_at; step>start.
goal_satisfied(AL,F,V,true,step) :- goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); AL=plan_at.
goal_satisfied(AL,F,V,false,step) :- goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); AL=plan_at.
incomplete_plan(step) :- goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); AL=plan_at; boolean(B).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; AL!=1; step>start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; AL!=1; step>start.
#program check(step).
#external query(step). [false]
#false :- incomplete_plan(step); query(step).
#program conformance_module(step).
#show current_sub_goal/7.
current_sub_goal((AL+1),ROBOT,A,F,V,1,0) :- sub_goal((AL+1),ROBOT,A,F,V,1); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); holds((AL+1),F,V,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
incomplete_sub_goals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,(step-1)); sub_goal((AL+1),ROBOT,A,F,V,I_SG); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); incomplete_sub_goals((AL+1),I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); AL=plan_at.
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
#program goal_abstraction_module.
#show holds/4.
#show goal/4.
holds(AL,F,V,0) :- goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
not holds(AL,F,V,0) :- goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) :  } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); AL>=plan_at; al(AL).
#false :- not 1 = { holds(AL,F,V,0) : fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); AL>=plan_at; al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); AL>=plan_at; al(AL).
#program domain_sorts.
#const abstraction_max = 3.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
class(3,robot).
class(3,armed_robot).
class(3,location).
class(3,room).
class(3,object).
class(3,grounded).
class(3,graspable).
class(3,placeable).
class(3,block).
class(3,surface).
class(3,table).
class(3,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL<reduc; al(AL).
state(AL,extensible,retracted) :- AL<reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL,manipulator_end); AL<reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL<reduc; al(AL).
state(AL,door,open) :- AL<reduc; al(AL).
state(AL,door,closed) :- AL<reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL<reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL<reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ!=nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ!=SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); AL_1<redef; AL_2<redef; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1<reduc; AL_2<reduc; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1<reduc; AL_2<reduc; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL,defined,tower_base(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,complete(COLOUR),B) :- insta_of(AL,colour,COLOUR); sl(AL); boolean(B).
action(AL,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; sl(AL).
action(AL,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; sl(AL).
action(AL,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL<reduc; sl(AL).
action(AL,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ!=SURFACE; SURFACE!=nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); sl(AL).
action(AL,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); sl(AL).
action(AL,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL<reduc; sl(AL).
#program domain_rules(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL<reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL<reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL<reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ!=SURFACE; SURFACE!=nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1!=STATE_2; AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L_2),t) :- holds(AL,in(ROBO),L_1,(t-1)); not is(AL,connected(L_1,L_2)); L_1!=L_2; action(AL,ROBO,move(L_2)); fluent(AL,inertial,in(ROBO),L_1); static(AL,connected(L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L_2),t) :- holds(AL,configuration(D),closed,(t-1)); holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1!=L_2; action(AL,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL<reduc; pl(AL).
not occurs(AL,ROBO,actuate(DESC,D),t) :- not 1 = { holds(AL,grasping(DESC),H,(t-1)) : desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,ROBO,actuate(DESC,D)), fluent(AL,inertial,grasping(DESC),H) }; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,in(ROBO),L,(t-1)); is(AL,in(OBJ,L)); action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L),t) :- holds(AL,configuration(DESC),extended,(t-1)); action(AL,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,in(ROBO),L,(t-1)); holds(AL,in(OBJ),L,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,grasping(DESC),nothing,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ_1),t) :- holds(AL,on(OBJ_2),OBJ_1,(t-1)); OBJ_1!=OBJ_2; OBJ_1!=nothing; action(AL,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- holds(AL,configuration(DESC),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC_1,OBJ),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(END,OBJ),t) :- not holds(AL,configuration(END),aligned_with(OBJ),(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL<reduc; pl(AL).
not occurs(AL,ROBO,release(DESC,OBJ),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,release(DESC,OBJ),t) :- holds(AL,configuration(DESC),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t>0.
not occurs(AL,ROBO,release(DESC_1,OBJ),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,configure(DESC_1,STATE),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); action(AL,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL<reduc; pl(AL).
not occurs(AL,ROBO,configure(DESC,aligned_with(OBJ)),t) :- not holds(AL,grasping(DESC),nothing,(t-1)); action(AL,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; state_of(AL,DESC,aligned_with(OBJ)); AL<reduc; pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- not holds(AL,in(ROBO),L,(t-1)); holds(AL,in(SURFACE),L,(t-1)); action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ_1,BLOCK),t) :- holds(AL,on(OBJ_2),BLOCK,(t-1)); OBJ_1!=OBJ_2; action(AL,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=SURFACE; OBJ!=nothing; SURFACE!=nothing; action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
not occurs(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),t) :- holds(AL,grasping(DESC_2),OBJ_2,(t-1)); OBJ_1!=OBJ_2; DESC_1!=DESC_2; action(AL,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- holds(AL,configuration(DESC),retracted,(t-1)); action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL<reduc; pl(AL).
not occurs(AL,ROBO,put(DESC_1,OBJ,SURFACE),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); action(AL,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL<reduc; pl(AL).
not occurs(AL,ROBO,lift(DESC,OBJ_1),t) :- holds(AL,on(OBJ_2),OBJ_1,(t-1)); OBJ_1!=OBJ_2; action(AL,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
not occurs(AL,ROBO,lift(DESC,OBJ),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=SURFACE; action(AL,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,surface,SURFACE); pl(AL).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t) : not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)) : insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t) : not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)) : insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ!=nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1!=nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1!=BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,surface,SURFACE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE),true); insta_of(AL,block,BASE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1!=BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1=(block,N_1); number(N_1); BLOCK_2=(block,N_2); number(N_2); BLOCK_1!=BLOCK_2; N_1>N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); sl(AL).
holds(AL,complete(COLOUR),true,t) :- N = #count { BLOCK : holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; N = #count { BLOCK : is(AL,colour_of(BLOCK,COLOUR)), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; holds(AL,unordered_tower(BASE),false,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,tower_base(BASE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); sl(AL).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1!=L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1!=L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1!=L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1>=AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_2; sl(AL_4); AL_4>=AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ!=nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_3; sl(AL_5); AL_5>=AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_2; sl(AL_5); AL_5>=AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1>=AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,connected_by_door(store_room_door,(store_room,1),(hallway,0))).
is(1,connected_by_door(puzzle_room_door,(hallway,2),(puzzle_room,0))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N<=3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N>3; N<=6; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2=(X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); sl(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,on((block,4)),(block,2),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
#program goal_state.
goal_fluent(AL,complete(COLOUR)) :- insta_of(AL,colour,COLOUR); al(AL).
goal_fluent(AL,on((block,3))) :- al(AL).
goal_fluent(AL,on((block,6))) :- al(AL).
goal(AL,complete(COLOUR),true,true) :- insta_of(AL,colour,COLOUR); al(AL).
goal(1,on((block,3)),puzzle_room_table_left,true).
goal(1,on((block,6)),puzzle_room_table_right,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
number((1..6)).
entity(block,(block,N)) :- number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X<MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., ASH #1)

[16-02-2021_16-36-48] INFO :: ASH Planner Main #1 >> Generating initial state.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Instantiated.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Entering standard solve call:
Solver options = -c, plan_at=0, --models=2, --parallel-mode=8,compete, --outf=3, --warn=none
Program parts = ('entities', []), ('static_state', []), ('initial_state', []), ('instance_module', []), ('state_module', [0]), ('domain_sorts', []), ('domain_rules', [0])

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Program building started.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Program building completed.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Grounding started.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Grounding completed in 0.100588s.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Solving started.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Model found:
Model :: Total atoms = 2730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Solving completed in 0.015030s.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED : Total models = 1
Statistics :: Grounding time = 0.100588s, Solving time = 0.015030s, Total time = 0.115618s
Final Model :: Total atoms = 2730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-36-48] INFO :: ASH Planner Main #1 >> Initial state generated successfully:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED
Statistics :: Grounding time = 0.100588s, Solving time = 0.015030s, Total time = 0.115618s
Model :: Total atoms = 2730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-36-48] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 3            
          ========================================          

holds(3,complete(blue),false,0)
holds(3,complete(red),false,0)
holds(3,grasping(manipulator_arm_1),nothing,0)
holds(3,grasping(manipulator_arm_2),nothing,0)
holds(3,in(manipulator_arm_1),starting_room,0)
holds(3,in(manipulator_arm_2),starting_room,0)
holds(3,in(puzzle_room_table),puzzle_room,0)
holds(3,in(talos),starting_room,0)
holds(3,in((block,1)),puzzle_room,0)
holds(3,in((block,2)),puzzle_room,0)
holds(3,in((block,3)),puzzle_room,0)
holds(3,in((block,4)),puzzle_room,0)
holds(3,in((block,5)),store_room,0)
holds(3,in((block,6)),store_room,0)
holds(3,on((block,1)),puzzle_room_table,0)
holds(3,on((block,2)),puzzle_room_table,0)
holds(3,on((block,3)),(block,1),0)
holds(3,on((block,4)),(block,2),0)
holds(3,on((block,5)),nothing,0)
holds(3,on((block,6)),nothing,0)
holds(3,tower_base((block,1)),true,0)
holds(3,tower_base((block,2)),true,0)
holds(3,tower_base((block,3)),false,0)
holds(3,tower_base((block,4)),false,0)
holds(3,tower_base((block,5)),false,0)
holds(3,tower_base((block,6)),false,0)
holds(3,unordered_tower((block,1)),true,0)
holds(3,unordered_tower((block,2)),true,0)
holds(3,unordered_tower((block,3)),false,0)
holds(3,unordered_tower((block,4)),false,0)
holds(3,unordered_tower((block,5)),false,0)
holds(3,unordered_tower((block,6)),false,0)
holds(3,in_tower((block,1),(block,1)),true,0)
holds(3,in_tower((block,1),(block,2)),false,0)
holds(3,in_tower((block,1),(block,3)),true,0)
holds(3,in_tower((block,1),(block,4)),false,0)
holds(3,in_tower((block,1),(block,5)),false,0)
holds(3,in_tower((block,1),(block,6)),false,0)
holds(3,in_tower((block,2),(block,1)),false,0)
holds(3,in_tower((block,2),(block,2)),true,0)
holds(3,in_tower((block,2),(block,3)),false,0)
holds(3,in_tower((block,2),(block,4)),true,0)
holds(3,in_tower((block,2),(block,5)),false,0)
holds(3,in_tower((block,2),(block,6)),false,0)
holds(3,in_tower((block,3),(block,1)),false,0)
holds(3,in_tower((block,3),(block,2)),false,0)
holds(3,in_tower((block,3),(block,3)),false,0)
holds(3,in_tower((block,3),(block,4)),false,0)
holds(3,in_tower((block,3),(block,5)),false,0)
holds(3,in_tower((block,3),(block,6)),false,0)
holds(3,in_tower((block,4),(block,1)),false,0)
holds(3,in_tower((block,4),(block,2)),false,0)
holds(3,in_tower((block,4),(block,3)),false,0)
holds(3,in_tower((block,4),(block,4)),false,0)
holds(3,in_tower((block,4),(block,5)),false,0)
holds(3,in_tower((block,4),(block,6)),false,0)
holds(3,in_tower((block,5),(block,1)),false,0)
holds(3,in_tower((block,5),(block,2)),false,0)
holds(3,in_tower((block,5),(block,3)),false,0)
holds(3,in_tower((block,5),(block,4)),false,0)
holds(3,in_tower((block,5),(block,5)),false,0)
holds(3,in_tower((block,5),(block,6)),false,0)
holds(3,in_tower((block,6),(block,1)),false,0)
holds(3,in_tower((block,6),(block,2)),false,0)
holds(3,in_tower((block,6),(block,3)),false,0)
holds(3,in_tower((block,6),(block,4)),false,0)
holds(3,in_tower((block,6),(block,5)),false,0)
holds(3,in_tower((block,6),(block,6)),false,0)

[16-02-2021_16-36-48] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 2            
          ========================================          

holds(2,complete(blue),false,0)
holds(2,complete(red),false,0)
holds(2,configuration(manipulator_arm_1),retracted,0)
holds(2,configuration(manipulator_arm_2),retracted,0)
holds(2,configuration(puzzle_room_door),closed,0)
holds(2,configuration(starting_room_door),closed,0)
holds(2,configuration(store_room_door),closed,0)
holds(2,grasping(manipulator_arm_1),nothing,0)
holds(2,grasping(manipulator_arm_2),nothing,0)
holds(2,in(manipulator_arm_1),starting_room,0)
holds(2,in(manipulator_arm_2),starting_room,0)
holds(2,in(puzzle_room_table),puzzle_room,0)
holds(2,in(talos),starting_room,0)
holds(2,in((block,1)),puzzle_room,0)
holds(2,in((block,2)),puzzle_room,0)
holds(2,in((block,3)),puzzle_room,0)
holds(2,in((block,4)),puzzle_room,0)
holds(2,in((block,5)),store_room,0)
holds(2,in((block,6)),store_room,0)
holds(2,on((block,1)),puzzle_room_table,0)
holds(2,on((block,2)),puzzle_room_table,0)
holds(2,on((block,3)),(block,1),0)
holds(2,on((block,4)),(block,2),0)
holds(2,on((block,5)),nothing,0)
holds(2,on((block,6)),nothing,0)
holds(2,tower_base((block,1)),true,0)
holds(2,tower_base((block,2)),true,0)
holds(2,tower_base((block,3)),false,0)
holds(2,tower_base((block,4)),false,0)
holds(2,tower_base((block,5)),false,0)
holds(2,tower_base((block,6)),false,0)
holds(2,unordered_tower((block,1)),true,0)
holds(2,unordered_tower((block,2)),true,0)
holds(2,unordered_tower((block,3)),false,0)
holds(2,unordered_tower((block,4)),false,0)
holds(2,unordered_tower((block,5)),false,0)
holds(2,unordered_tower((block,6)),false,0)
holds(2,in_tower((block,1),(block,1)),true,0)
holds(2,in_tower((block,1),(block,2)),false,0)
holds(2,in_tower((block,1),(block,3)),true,0)
holds(2,in_tower((block,1),(block,4)),false,0)
holds(2,in_tower((block,1),(block,5)),false,0)
holds(2,in_tower((block,1),(block,6)),false,0)
holds(2,in_tower((block,2),(block,1)),false,0)
holds(2,in_tower((block,2),(block,2)),true,0)
holds(2,in_tower((block,2),(block,3)),false,0)
holds(2,in_tower((block,2),(block,4)),true,0)
holds(2,in_tower((block,2),(block,5)),false,0)
holds(2,in_tower((block,2),(block,6)),false,0)
holds(2,in_tower((block,3),(block,1)),false,0)
holds(2,in_tower((block,3),(block,2)),false,0)
holds(2,in_tower((block,3),(block,3)),false,0)
holds(2,in_tower((block,3),(block,4)),false,0)
holds(2,in_tower((block,3),(block,5)),false,0)
holds(2,in_tower((block,3),(block,6)),false,0)
holds(2,in_tower((block,4),(block,1)),false,0)
holds(2,in_tower((block,4),(block,2)),false,0)
holds(2,in_tower((block,4),(block,3)),false,0)
holds(2,in_tower((block,4),(block,4)),false,0)
holds(2,in_tower((block,4),(block,5)),false,0)
holds(2,in_tower((block,4),(block,6)),false,0)
holds(2,in_tower((block,5),(block,1)),false,0)
holds(2,in_tower((block,5),(block,2)),false,0)
holds(2,in_tower((block,5),(block,3)),false,0)
holds(2,in_tower((block,5),(block,4)),false,0)
holds(2,in_tower((block,5),(block,5)),false,0)
holds(2,in_tower((block,5),(block,6)),false,0)
holds(2,in_tower((block,6),(block,1)),false,0)
holds(2,in_tower((block,6),(block,2)),false,0)
holds(2,in_tower((block,6),(block,3)),false,0)
holds(2,in_tower((block,6),(block,4)),false,0)
holds(2,in_tower((block,6),(block,5)),false,0)
holds(2,in_tower((block,6),(block,6)),false,0)

[16-02-2021_16-36-48] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 1            
          ========================================          

holds(1,complete(blue),false,0)
holds(1,complete(red),false,0)
holds(1,configuration(manipulator_end_1),aligned_with(nothing),0)
holds(1,configuration(manipulator_end_2),aligned_with(nothing),0)
holds(1,configuration(manipulator_limb_1),retracted,0)
holds(1,configuration(manipulator_limb_2),retracted,0)
holds(1,configuration(puzzle_room_door),closed,0)
holds(1,configuration(starting_room_door),closed,0)
holds(1,configuration(store_room_door),closed,0)
holds(1,grasping(manipulator_arm_1),nothing,0)
holds(1,grasping(manipulator_arm_2),nothing,0)
holds(1,grasping(manipulator_end_1),nothing,0)
holds(1,grasping(manipulator_end_2),nothing,0)
holds(1,in(manipulator_arm_1),(starting_room,0),0)
holds(1,in(manipulator_arm_2),(starting_room,0),0)
holds(1,in(manipulator_end_1),(starting_room,0),0)
holds(1,in(manipulator_end_2),(starting_room,0),0)
holds(1,in(manipulator_limb_1),(starting_room,0),0)
holds(1,in(manipulator_limb_2),(starting_room,0),0)
holds(1,in(puzzle_room_table),(puzzle_room,1),0)
holds(1,in(puzzle_room_table_left),(puzzle_room,1),0)
holds(1,in(puzzle_room_table_right),(puzzle_room,1),0)
holds(1,in(talos),(starting_room,0),0)
holds(1,in((block,1)),(puzzle_room,1),0)
holds(1,in((block,2)),(puzzle_room,1),0)
holds(1,in((block,3)),(puzzle_room,1),0)
holds(1,in((block,4)),(puzzle_room,1),0)
holds(1,in((block,5)),(store_room,0),0)
holds(1,in((block,6)),(store_room,0),0)
holds(1,on((block,1)),puzzle_room_table_left,0)
holds(1,on((block,2)),puzzle_room_table_right,0)
holds(1,on((block,3)),(block,1),0)
holds(1,on((block,4)),(block,2),0)
holds(1,on((block,5)),nothing,0)
holds(1,on((block,6)),nothing,0)
holds(1,tower_base((block,1)),true,0)
holds(1,tower_base((block,2)),true,0)
holds(1,tower_base((block,3)),false,0)
holds(1,tower_base((block,4)),false,0)
holds(1,tower_base((block,5)),false,0)
holds(1,tower_base((block,6)),false,0)
holds(1,unordered_tower((block,1)),true,0)
holds(1,unordered_tower((block,2)),true,0)
holds(1,unordered_tower((block,3)),false,0)
holds(1,unordered_tower((block,4)),false,0)
holds(1,unordered_tower((block,5)),false,0)
holds(1,unordered_tower((block,6)),false,0)
holds(1,in_tower((block,1),(block,1)),true,0)
holds(1,in_tower((block,1),(block,2)),false,0)
holds(1,in_tower((block,1),(block,3)),true,0)
holds(1,in_tower((block,1),(block,4)),false,0)
holds(1,in_tower((block,1),(block,5)),false,0)
holds(1,in_tower((block,1),(block,6)),false,0)
holds(1,in_tower((block,2),(block,1)),false,0)
holds(1,in_tower((block,2),(block,2)),true,0)
holds(1,in_tower((block,2),(block,3)),false,0)
holds(1,in_tower((block,2),(block,4)),true,0)
holds(1,in_tower((block,2),(block,5)),false,0)
holds(1,in_tower((block,2),(block,6)),false,0)
holds(1,in_tower((block,3),(block,1)),false,0)
holds(1,in_tower((block,3),(block,2)),false,0)
holds(1,in_tower((block,3),(block,3)),false,0)
holds(1,in_tower((block,3),(block,4)),false,0)
holds(1,in_tower((block,3),(block,5)),false,0)
holds(1,in_tower((block,3),(block,6)),false,0)
holds(1,in_tower((block,4),(block,1)),false,0)
holds(1,in_tower((block,4),(block,2)),false,0)
holds(1,in_tower((block,4),(block,3)),false,0)
holds(1,in_tower((block,4),(block,4)),false,0)
holds(1,in_tower((block,4),(block,5)),false,0)
holds(1,in_tower((block,4),(block,6)),false,0)
holds(1,in_tower((block,5),(block,1)),false,0)
holds(1,in_tower((block,5),(block,2)),false,0)
holds(1,in_tower((block,5),(block,3)),false,0)
holds(1,in_tower((block,5),(block,4)),false,0)
holds(1,in_tower((block,5),(block,5)),false,0)
holds(1,in_tower((block,5),(block,6)),false,0)
holds(1,in_tower((block,6),(block,1)),false,0)
holds(1,in_tower((block,6),(block,2)),false,0)
holds(1,in_tower((block,6),(block,3)),false,0)
holds(1,in_tower((block,6),(block,4)),false,0)
holds(1,in_tower((block,6),(block,5)),false,0)
holds(1,in_tower((block,6),(block,6)),false,0)

[16-02-2021_16-36-48] INFO :: ASH Planner Main #1 >> Generating goal state.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Instantiated.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Entering standard solve call:
Solver options = -c, plan_at=0, --models=2, --parallel-mode=8,compete, --outf=3, --warn=none
Program parts = ('entities', []), ('static_state', []), ('goal_state', []), ('instance_module', []), ('goal_abstraction_module', []), ('domain_sorts', []), ('domain_rules', [0])

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Program building started.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Program building completed.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Grounding started.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Grounding completed in 0.039109s.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Solving started.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Model found:
Model :: Total atoms = 2598, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Solving completed in 0.004504s.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED : Total models = 1
Statistics :: Grounding time = 0.039109s, Solving time = 0.004504s, Total time = 0.043613s
Final Model :: Total atoms = 2598, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-36-48] INFO :: ASH Planner Main #1 >> Goal state generated successfully:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED
Statistics :: Grounding time = 0.039109s, Solving time = 0.004504s, Total time = 0.043613s
Model :: Total atoms = 2598, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-36-48] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 3              
          ========================================          

goal(3,complete(blue),false,false)
goal(3,complete(blue),true,true)
goal(3,complete(red),false,false)
goal(3,complete(red),true,true)
goal(3,on((block,3)),nothing,false)
goal(3,on((block,3)),puzzle_room_table,true)
goal(3,on((block,3)),(block,1),false)
goal(3,on((block,3)),(block,2),false)
goal(3,on((block,3)),(block,4),false)
goal(3,on((block,3)),(block,5),false)
goal(3,on((block,3)),(block,6),false)
goal(3,on((block,6)),nothing,false)
goal(3,on((block,6)),puzzle_room_table,true)
goal(3,on((block,6)),(block,1),false)
goal(3,on((block,6)),(block,2),false)
goal(3,on((block,6)),(block,3),false)
goal(3,on((block,6)),(block,4),false)
goal(3,on((block,6)),(block,5),false)

[16-02-2021_16-36-48] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 2              
          ========================================          

goal(2,complete(blue),false,false)
goal(2,complete(blue),true,true)
goal(2,complete(red),false,false)
goal(2,complete(red),true,true)
goal(2,on((block,3)),nothing,false)
goal(2,on((block,3)),puzzle_room_table,true)
goal(2,on((block,3)),(block,1),false)
goal(2,on((block,3)),(block,2),false)
goal(2,on((block,3)),(block,4),false)
goal(2,on((block,3)),(block,5),false)
goal(2,on((block,3)),(block,6),false)
goal(2,on((block,6)),nothing,false)
goal(2,on((block,6)),puzzle_room_table,true)
goal(2,on((block,6)),(block,1),false)
goal(2,on((block,6)),(block,2),false)
goal(2,on((block,6)),(block,3),false)
goal(2,on((block,6)),(block,4),false)
goal(2,on((block,6)),(block,5),false)

[16-02-2021_16-36-48] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 1              
          ========================================          

goal(1,complete(blue),false,false)
goal(1,complete(blue),true,true)
goal(1,complete(red),false,false)
goal(1,complete(red),true,true)
goal(1,on((block,3)),nothing,false)
goal(1,on((block,3)),puzzle_room_table_left,true)
goal(1,on((block,3)),puzzle_room_table_right,false)
goal(1,on((block,3)),(block,1),false)
goal(1,on((block,3)),(block,2),false)
goal(1,on((block,3)),(block,4),false)
goal(1,on((block,3)),(block,5),false)
goal(1,on((block,3)),(block,6),false)
goal(1,on((block,6)),nothing,false)
goal(1,on((block,6)),puzzle_room_table_left,false)
goal(1,on((block,6)),puzzle_room_table_right,true)
goal(1,on((block,6)),(block,1),false)
goal(1,on((block,6)),(block,2),false)
goal(1,on((block,6)),(block,3),false)
goal(1,on((block,6)),(block,4),false)
goal(1,on((block,6)),(block,5),false)

[16-02-2021_16-36-48] INFO :: Experiment >> 

  ################################################################################################  
                  Running experiments : Initial runs = 2 : Experimental runs = 20                   
  ################################################################################################  

[16-02-2021_16-36-48] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-36-48] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-36-48] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-36-48] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-36-48] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-36-48] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Instantiated.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Program building started.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Program building completed.

[16-02-2021_16-36-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding base program parts.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.017590s.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving base program parts.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.002195s.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental solving started.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.048084s.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.005460s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.040639s.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.002556s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.032525s.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.003604s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.034768s.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.005256s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.035878s.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.005319s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.038483s.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.006050s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.038297s.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.007239s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.037958s.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.008954s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.044927s.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.009986s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.041572s.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.011608s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.041057s.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.014102s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.041733s.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.019118s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.046325s.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.028954s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.046638s.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.046744s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.043770s.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.068658s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.087601s.

[16-02-2021_16-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.132209s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.089111s.

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.258878s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.092245s.

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.239863s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental solving completed in 1.833133s because STOP_CON_REACHED.

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.899201s, Solving time = 0.876755s, Total time = 1.833133s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.048084s, Solving time = 0.005460s, Total time = 0.053544s
2 : Statistics :: Grounding time = 0.040639s, Solving time = 0.002556s, Total time = 0.043195s
3 : Statistics :: Grounding time = 0.032525s, Solving time = 0.003604s, Total time = 0.036130s
4 : Statistics :: Grounding time = 0.034768s, Solving time = 0.005256s, Total time = 0.040024s
5 : Statistics :: Grounding time = 0.035878s, Solving time = 0.005319s, Total time = 0.041197s
6 : Statistics :: Grounding time = 0.038483s, Solving time = 0.006050s, Total time = 0.044534s
7 : Statistics :: Grounding time = 0.038297s, Solving time = 0.007239s, Total time = 0.045536s
8 : Statistics :: Grounding time = 0.037958s, Solving time = 0.008954s, Total time = 0.046912s
9 : Statistics :: Grounding time = 0.044927s, Solving time = 0.009986s, Total time = 0.054913s
10 : Statistics :: Grounding time = 0.041572s, Solving time = 0.011608s, Total time = 0.053180s
11 : Statistics :: Grounding time = 0.041057s, Solving time = 0.014102s, Total time = 0.055159s
12 : Statistics :: Grounding time = 0.041733s, Solving time = 0.019118s, Total time = 0.060852s
13 : Statistics :: Grounding time = 0.046325s, Solving time = 0.028954s, Total time = 0.075278s
14 : Statistics :: Grounding time = 0.046638s, Solving time = 0.046744s, Total time = 0.093383s
15 : Statistics :: Grounding time = 0.043770s, Solving time = 0.068658s, Total time = 0.112428s
16 : Statistics :: Grounding time = 0.087601s, Solving time = 0.132209s, Total time = 0.219809s
17 : Statistics :: Grounding time = 0.089111s, Solving time = 0.258878s, Total time = 0.347989s
18 : Statistics :: Grounding time = 0.092245s, Solving time = 0.239863s, Total time = 0.332108s

[16-02-2021_16-36-50] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.899201s, Solving time = 0.876755s, Total time = 1.833133s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-36-50] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),11)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[16-02-2021_16-36-50] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-36-50] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-36-50] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-36-50] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-36-50] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-36-50] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Instantiated.

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Program building started.

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Program building completed.

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding base program parts.

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.014070s.

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving base program parts.

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.001644s.

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental solving started.

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.063612s.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.005242s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.044078s.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.003592s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.051147s.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.004187s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.046726s.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.006906s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.049549s.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.008678s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.050044s.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.009143s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.053828s.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.010308s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.053723s.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.010727s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.056527s.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.010924s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.055227s.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.011103s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.060116s.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.013282s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.061832s.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.015078s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.066916s.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.016560s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.065456s.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.018252s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.063006s.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.018771s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.068924s.

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.017073s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.064501s.

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.024469s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.072769s.

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.037295s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.073192s.

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.044136s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.066853s.

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.069716s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.069696s.

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.073439s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.074607s.

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.097328s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.071630s.

[16-02-2021_16-36-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.102272s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.073138s.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.111805s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.074817s.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.134169s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental solving completed in 2.540702s because STOP_CON_REACHED.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.565983s, Solving time = 0.876096s, Total time = 2.540702s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.063612s, Solving time = 0.005242s, Total time = 0.068853s
2 : Statistics :: Grounding time = 0.044078s, Solving time = 0.003592s, Total time = 0.047670s
3 : Statistics :: Grounding time = 0.051147s, Solving time = 0.004187s, Total time = 0.055334s
4 : Statistics :: Grounding time = 0.046726s, Solving time = 0.006906s, Total time = 0.053632s
5 : Statistics :: Grounding time = 0.049549s, Solving time = 0.008678s, Total time = 0.058227s
6 : Statistics :: Grounding time = 0.050044s, Solving time = 0.009143s, Total time = 0.059188s
7 : Statistics :: Grounding time = 0.053828s, Solving time = 0.010308s, Total time = 0.064135s
8 : Statistics :: Grounding time = 0.053723s, Solving time = 0.010727s, Total time = 0.064450s
9 : Statistics :: Grounding time = 0.056527s, Solving time = 0.010924s, Total time = 0.067451s
10 : Statistics :: Grounding time = 0.055227s, Solving time = 0.011103s, Total time = 0.066330s
11 : Statistics :: Grounding time = 0.060116s, Solving time = 0.013282s, Total time = 0.073398s
12 : Statistics :: Grounding time = 0.061832s, Solving time = 0.015078s, Total time = 0.076910s
13 : Statistics :: Grounding time = 0.066916s, Solving time = 0.016560s, Total time = 0.083476s
14 : Statistics :: Grounding time = 0.065456s, Solving time = 0.018252s, Total time = 0.083708s
15 : Statistics :: Grounding time = 0.063006s, Solving time = 0.018771s, Total time = 0.081776s
16 : Statistics :: Grounding time = 0.068924s, Solving time = 0.017073s, Total time = 0.085997s
17 : Statistics :: Grounding time = 0.064501s, Solving time = 0.024469s, Total time = 0.088970s
18 : Statistics :: Grounding time = 0.072769s, Solving time = 0.037295s, Total time = 0.110064s
19 : Statistics :: Grounding time = 0.073192s, Solving time = 0.044136s, Total time = 0.117328s
20 : Statistics :: Grounding time = 0.066853s, Solving time = 0.069716s, Total time = 0.136569s
21 : Statistics :: Grounding time = 0.069696s, Solving time = 0.073439s, Total time = 0.143135s
22 : Statistics :: Grounding time = 0.074607s, Solving time = 0.097328s, Total time = 0.171935s
23 : Statistics :: Grounding time = 0.071630s, Solving time = 0.102272s, Total time = 0.173901s
24 : Statistics :: Grounding time = 0.073138s, Solving time = 0.111805s, Total time = 0.184943s
25 : Statistics :: Grounding time = 0.074817s, Solving time = 0.134169s, Total time = 0.208986s

[16-02-2021_16-36-53] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.565983s, Solving time = 0.876096s, Total time = 2.540702s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-36-53] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_2,extended),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_2,(block,5)),25)

[16-02-2021_16-36-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-36-53] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-36-53] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-36-53] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-36-53] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-36-53] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Instantiated.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Program building started.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Program building completed.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding base program parts.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.015856s.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving base program parts.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.003075s.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental solving started.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.187574s.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.008689s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.064815s.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.005703s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.064342s.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.007091s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-36-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.075875s.

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.010350s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.075097s.

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.011807s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.074432s.

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.013447s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.075377s.

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.015142s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.078512s.

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.015074s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.076481s.

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.015403s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.079530s.

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.016451s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.079729s.

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.017203s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.087077s.

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.017108s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.084528s.

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.022424s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-36-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.088056s.

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.024091s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.088129s.

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.026510s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.086865s.

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.033795s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.092341s.

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.029772s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.091496s.

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.035804s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.090948s.

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.047166s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.094365s.

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.056610s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.096578s.

[16-02-2021_16-36-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.075293s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.094230s.

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.059771s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.095427s.

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.091546s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.099104s.

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Model found:
Model :: Total atoms = 6742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.122962s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental solving completed in 3.040179s because STOP_CON_REACHED.

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.136765s, Solving time = 0.782285s, Total time = 3.040179s
Final Model :: Total atoms = 6742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.187574s, Solving time = 0.008689s, Total time = 0.196264s
2 : Statistics :: Grounding time = 0.064815s, Solving time = 0.005703s, Total time = 0.070519s
3 : Statistics :: Grounding time = 0.064342s, Solving time = 0.007091s, Total time = 0.071433s
4 : Statistics :: Grounding time = 0.075875s, Solving time = 0.010350s, Total time = 0.086225s
5 : Statistics :: Grounding time = 0.075097s, Solving time = 0.011807s, Total time = 0.086904s
6 : Statistics :: Grounding time = 0.074432s, Solving time = 0.013447s, Total time = 0.087879s
7 : Statistics :: Grounding time = 0.075377s, Solving time = 0.015142s, Total time = 0.090519s
8 : Statistics :: Grounding time = 0.078512s, Solving time = 0.015074s, Total time = 0.093586s
9 : Statistics :: Grounding time = 0.076481s, Solving time = 0.015403s, Total time = 0.091884s
10 : Statistics :: Grounding time = 0.079530s, Solving time = 0.016451s, Total time = 0.095980s
11 : Statistics :: Grounding time = 0.079729s, Solving time = 0.017203s, Total time = 0.096932s
12 : Statistics :: Grounding time = 0.087077s, Solving time = 0.017108s, Total time = 0.104185s
13 : Statistics :: Grounding time = 0.084528s, Solving time = 0.022424s, Total time = 0.106952s
14 : Statistics :: Grounding time = 0.088056s, Solving time = 0.024091s, Total time = 0.112147s
15 : Statistics :: Grounding time = 0.088129s, Solving time = 0.026510s, Total time = 0.114639s
16 : Statistics :: Grounding time = 0.086865s, Solving time = 0.033795s, Total time = 0.120660s
17 : Statistics :: Grounding time = 0.092341s, Solving time = 0.029772s, Total time = 0.122113s
18 : Statistics :: Grounding time = 0.091496s, Solving time = 0.035804s, Total time = 0.127300s
19 : Statistics :: Grounding time = 0.090948s, Solving time = 0.047166s, Total time = 0.138114s
20 : Statistics :: Grounding time = 0.094365s, Solving time = 0.056610s, Total time = 0.150975s
21 : Statistics :: Grounding time = 0.096578s, Solving time = 0.075293s, Total time = 0.171871s
22 : Statistics :: Grounding time = 0.094230s, Solving time = 0.059771s, Total time = 0.154001s
23 : Statistics :: Grounding time = 0.095427s, Solving time = 0.091546s, Total time = 0.186973s
24 : Statistics :: Grounding time = 0.099104s, Solving time = 0.122962s, Total time = 0.222066s

[16-02-2021_16-36-56] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 2.136765s, Solving time = 0.782285s, Total time = 3.040179s
Model :: Total atoms = 6742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-36-56] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),24)

[16-02-2021_16-36-56] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.833133s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.540702s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     3.040179s : Steps =    24 : Actions =    24 |  
  ====================================================================  

[16-02-2021_16-36-56] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-36-56] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-36-56] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-36-56] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-36-56] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-36-56] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-36-56] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-36-56] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Instantiated.

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> The logic program was extended with 24 rules into program part plan_module(step, start).

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> The logic program was extended with 3968 rules into program part state_module(step).

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=24, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 24], range_=IncRange(start=24, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 24, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Program building started.

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Program building completed.

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding base program parts.

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.023015s.

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving base program parts.

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.002721s.

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental solving started.

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 24
End step max = None

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [25]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 24]), ('conformance_module', [25])].

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.348352s.

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.035217s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 24
End step max = None

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 24]), ('conformance_module', [26])].

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.070039s.

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.007280s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 24
End step max = None

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 24]), ('conformance_module', [27])].

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.075107s.

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.008668s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 24
End step max = None

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 24]), ('conformance_module', [28])].

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.075919s.

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.011039s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 24
End step max = None

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 24]), ('conformance_module', [29])].

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.078513s.

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.012907s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 24
End step max = None

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 24]), ('conformance_module', [30])].

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.078607s.

[16-02-2021_16-36-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.015371s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 24
End step max = None

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 24]), ('conformance_module', [31])].

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.089131s.

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.016190s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 24
End step max = None

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 24]), ('conformance_module', [32])].

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.089274s.

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.016826s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 24
End step max = None

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 24]), ('conformance_module', [33])].

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.108216s.

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.017281s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 24
End step max = None

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 24]), ('conformance_module', [34])].

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.087800s.

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.019545s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 24
End step max = None

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 24]), ('conformance_module', [35])].

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.088923s.

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.019392s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 24
End step max = None

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 24]), ('conformance_module', [36])].

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.090293s.

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.019799s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 24
End step max = None

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 24]), ('conformance_module', [37])].

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.091591s.

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.019536s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 24
End step max = None

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 24]), ('conformance_module', [38])].

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.096552s.

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.030737s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 24
End step max = None

[16-02-2021_16-36-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 24]), ('conformance_module', [39])].

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.095984s.

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.036705s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [16]:
Current step bound = 40
End step min = 24
End step max = None

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 24]), ('conformance_module', [40])].

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.097530s.

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.036762s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [17]:
Current step bound = 41
End step min = 24
End step max = None

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 24]), ('conformance_module', [41])].

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.096080s.

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.032503s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [18]:
Current step bound = 42
End step min = 24
End step max = None

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 24]), ('conformance_module', [42])].

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.099731s.

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.059642s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [19]:
Current step bound = 43
End step min = 24
End step max = None

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 24]), ('conformance_module', [43])].

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.097932s.

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Model found:
Model :: Total atoms = 9743, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.108557s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental solving completed in 2.593154s because STOP_CON_REACHED.

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.978590s, Solving time = 0.526676s, Total time = 2.593154s
Final Model :: Total atoms = 9743, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.348352s, Solving time = 0.035217s, Total time = 0.383568s
2 : Statistics :: Grounding time = 0.070039s, Solving time = 0.007280s, Total time = 0.077319s
3 : Statistics :: Grounding time = 0.075107s, Solving time = 0.008668s, Total time = 0.083775s
4 : Statistics :: Grounding time = 0.075919s, Solving time = 0.011039s, Total time = 0.086958s
5 : Statistics :: Grounding time = 0.078513s, Solving time = 0.012907s, Total time = 0.091420s
6 : Statistics :: Grounding time = 0.078607s, Solving time = 0.015371s, Total time = 0.093978s
7 : Statistics :: Grounding time = 0.089131s, Solving time = 0.016190s, Total time = 0.105321s
8 : Statistics :: Grounding time = 0.089274s, Solving time = 0.016826s, Total time = 0.106100s
9 : Statistics :: Grounding time = 0.108216s, Solving time = 0.017281s, Total time = 0.125496s
10 : Statistics :: Grounding time = 0.087800s, Solving time = 0.019545s, Total time = 0.107345s
11 : Statistics :: Grounding time = 0.088923s, Solving time = 0.019392s, Total time = 0.108316s
12 : Statistics :: Grounding time = 0.090293s, Solving time = 0.019799s, Total time = 0.110092s
13 : Statistics :: Grounding time = 0.091591s, Solving time = 0.019536s, Total time = 0.111127s
14 : Statistics :: Grounding time = 0.096552s, Solving time = 0.030737s, Total time = 0.127288s
15 : Statistics :: Grounding time = 0.095984s, Solving time = 0.036705s, Total time = 0.132689s
16 : Statistics :: Grounding time = 0.097530s, Solving time = 0.036762s, Total time = 0.134291s
17 : Statistics :: Grounding time = 0.096080s, Solving time = 0.032503s, Total time = 0.128583s
18 : Statistics :: Grounding time = 0.099731s, Solving time = 0.059642s, Total time = 0.159373s
19 : Statistics :: Grounding time = 0.097932s, Solving time = 0.108557s, Total time = 0.206489s

[16-02-2021_16-36-59] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.978590s, Solving time = 0.526676s, Total time = 2.593154s
Model :: Total atoms = 9743, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-36-59] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),24)
occurs(1,talos,configure(manipulator_limb_2,extended),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),26)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_limb_1,retracted),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,configure(manipulator_limb_2,extended),37)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),40)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),41)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),42)
occurs(1,talos,release(manipulator_end_2,(block,5)),43)

[16-02-2021_16-36-59] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     2.593154s : Steps =    43 : Actions =    43 |  
  ====================================================================  

[16-02-2021_16-36-59] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-36-59] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-36-59] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-36-59] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-36-59] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-36-59] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-36-59] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-36-59] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Instantiated.

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-36-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Program building started.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Program building completed.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding base program parts.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.021160s.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving base program parts.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.002347s.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental solving started.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.145023s.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.018975s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.053410s.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.006707s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.052625s.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.008731s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.061362s.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.010340s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.058738s.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.011104s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.065561s.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.011850s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.061929s.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.012395s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-37-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.065399s.

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.012308s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.064422s.

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Model found:
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.015721s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental solving completed in 0.780997s because STOP_CON_REACHED.

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.649628s, Solving time = 0.110477s, Total time = 0.780997s
Final Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.145023s, Solving time = 0.018975s, Total time = 0.163998s
2 : Statistics :: Grounding time = 0.053410s, Solving time = 0.006707s, Total time = 0.060117s
3 : Statistics :: Grounding time = 0.052625s, Solving time = 0.008731s, Total time = 0.061356s
4 : Statistics :: Grounding time = 0.061362s, Solving time = 0.010340s, Total time = 0.071702s
5 : Statistics :: Grounding time = 0.058738s, Solving time = 0.011104s, Total time = 0.069842s
6 : Statistics :: Grounding time = 0.065561s, Solving time = 0.011850s, Total time = 0.077411s
7 : Statistics :: Grounding time = 0.061929s, Solving time = 0.012395s, Total time = 0.074324s
8 : Statistics :: Grounding time = 0.065399s, Solving time = 0.012308s, Total time = 0.077707s
9 : Statistics :: Grounding time = 0.064422s, Solving time = 0.015721s, Total time = 0.080143s

[16-02-2021_16-37-01] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.649628s, Solving time = 0.110477s, Total time = 0.780997s
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-37-01] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_2,extended),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_2,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),26)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),27)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),28)
occurs(2,talos,release(manipulator_arm_1,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[16-02-2021_16-37-01] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-37-01] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-37-01] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-37-01] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-37-01] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-37-01] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Instantiated.

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 43 rules into program part plan_module(step, start).

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 6932 rules into program part state_module(step).

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=43, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 43], range_=IncRange(start=43, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 43, Max end step = None
Step inc = 1, Step inc init = 45, Stop con = StopCondition.Satisfiable

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Program building started.

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Program building completed.

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding base program parts.

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.029219s.

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving base program parts.

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.003432s.

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental solving started.

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [1]:
Current step bound = 44
End step min = 43
End step max = None

[16-02-2021_16-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [44]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 43]), ('conformance_module', [43]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 43]), ('conformance_module', [44])].

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.447739s.

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.054596s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [2]:
Current step bound = 45
End step min = 43
End step max = None

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 43]), ('conformance_module', [45])].

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.075808s.

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.008608s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [3]:
Current step bound = 46
End step min = 43
End step max = None

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 43]), ('conformance_module', [46])].

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.078006s.

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.012111s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [4]:
Current step bound = 47
End step min = 43
End step max = None

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 43]), ('conformance_module', [47])].

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.082954s.

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.015453s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [5]:
Current step bound = 48
End step min = 43
End step max = None

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 43]), ('conformance_module', [48])].

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.085385s.

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Model found:
Model :: Total atoms = 10435, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.017951s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental solving completed in 0.929061s because STOP_CON_REACHED.

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.799110s, Solving time = 0.112150s, Total time = 0.929061s
Final Model :: Total atoms = 10435, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.447739s, Solving time = 0.054596s, Total time = 0.502335s
2 : Statistics :: Grounding time = 0.075808s, Solving time = 0.008608s, Total time = 0.084416s
3 : Statistics :: Grounding time = 0.078006s, Solving time = 0.012111s, Total time = 0.090117s
4 : Statistics :: Grounding time = 0.082954s, Solving time = 0.015453s, Total time = 0.098407s
5 : Statistics :: Grounding time = 0.085385s, Solving time = 0.017951s, Total time = 0.103336s

[16-02-2021_16-37-02] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.799110s, Solving time = 0.112150s, Total time = 0.929061s
Model :: Total atoms = 10435, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-37-02] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),24)
occurs(1,talos,configure(manipulator_limb_2,extended),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),26)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_limb_1,retracted),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,configure(manipulator_limb_2,extended),37)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),40)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),41)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),42)
occurs(1,talos,release(manipulator_end_2,(block,5)),43)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),44)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),45)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),46)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),47)
occurs(1,talos,release(manipulator_end_1,(block,3)),48)

[16-02-2021_16-37-02] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.780997s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     0.929061s : Steps =    48 : Actions =    48 |  
  ====================================================================  

[16-02-2021_16-37-02] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-37-02] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-37-02] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-37-02] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-37-02] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-37-02] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-37-02] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-37-02] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Instantiated.

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-37-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 48 rules into program part plan_module(step, start).

[16-02-2021_16-37-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 7712 rules into program part state_module(step).

[16-02-2021_16-37-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=48, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 48], range_=IncRange(start=48, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 48, Max end step = None
Step inc = 1, Step inc init = 50, Stop con = StopCondition.Satisfiable

[16-02-2021_16-37-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Program building started.

[16-02-2021_16-37-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Program building completed.

[16-02-2021_16-37-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding base program parts.

[16-02-2021_16-37-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.030486s.

[16-02-2021_16-37-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving base program parts.

[16-02-2021_16-37-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.003663s.

[16-02-2021_16-37-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental solving started.

[16-02-2021_16-37-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [1]:
Current step bound = 49
End step min = 48
End step max = None

[16-02-2021_16-37-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [49]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('state_module', [46]), ('conformance_module', [46]), ('state_module', [47]), ('conformance_module', [47]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 48]), ('conformance_module', [48]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 48]), ('conformance_module', [49])].

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.492959s.

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.059193s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [2]:
Current step bound = 50
End step min = 48
End step max = None

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 48]), ('conformance_module', [50])].

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.080103s.

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.009278s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [3]:
Current step bound = 51
End step min = 48
End step max = None

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 48]), ('conformance_module', [51])].

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.081824s.

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.014421s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [4]:
Current step bound = 52
End step min = 48
End step max = None

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 48]), ('conformance_module', [52])].

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.086176s.

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.017441s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [5]:
Current step bound = 53
End step min = 48
End step max = None

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 48]), ('conformance_module', [53])].

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.092594s.

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.016610s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [6]:
Current step bound = 54
End step min = 48
End step max = None

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 48]), ('conformance_module', [54])].

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.093751s.

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.019434s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [7]:
Current step bound = 55
End step min = 48
End step max = None

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 48]), ('conformance_module', [55])].

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.100103s.

[16-02-2021_16-37-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Model found:
Model :: Total atoms = 11787, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.027917s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental solving completed in 1.253221s because STOP_CON_REACHED.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.057996s, Solving time = 0.167957s, Total time = 1.253221s
Final Model :: Total atoms = 11787, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.492959s, Solving time = 0.059193s, Total time = 0.552152s
2 : Statistics :: Grounding time = 0.080103s, Solving time = 0.009278s, Total time = 0.089381s
3 : Statistics :: Grounding time = 0.081824s, Solving time = 0.014421s, Total time = 0.096245s
4 : Statistics :: Grounding time = 0.086176s, Solving time = 0.017441s, Total time = 0.103617s
5 : Statistics :: Grounding time = 0.092594s, Solving time = 0.016610s, Total time = 0.109204s
6 : Statistics :: Grounding time = 0.093751s, Solving time = 0.019434s, Total time = 0.113185s
7 : Statistics :: Grounding time = 0.100103s, Solving time = 0.027917s, Total time = 0.128020s

[16-02-2021_16-37-05] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.057996s, Solving time = 0.167957s, Total time = 1.253221s
Model :: Total atoms = 11787, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-37-05] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),24)
occurs(1,talos,configure(manipulator_limb_2,extended),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),26)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_limb_1,retracted),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,configure(manipulator_limb_2,extended),37)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),40)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),41)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),42)
occurs(1,talos,release(manipulator_end_2,(block,5)),43)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),44)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),45)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),46)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),47)
occurs(1,talos,release(manipulator_end_1,(block,3)),48)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),49)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),50)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),51)
occurs(1,talos,release(manipulator_end_1,(block,2)),52)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),53)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),54)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),55)

[16-02-2021_16-37-05] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.253221s : Steps =    55 : Actions =    55 |  
  ====================================================================  

[16-02-2021_16-37-05] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-37-05] INFO :: Experiment >> 

      ================================================      
              Initial run 1 : Time 16.330100s               
      ================================================      

[16-02-2021_16-37-05] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-37-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-37-05] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-37-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-37-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-37-05] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Instantiated.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Program building started.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Program building completed.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding base program parts.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.013911s.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving base program parts.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.002243s.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental solving started.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.039892s.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.005799s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.031470s.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.003742s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.031201s.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.004710s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.034551s.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.005388s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.035698s.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.005746s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.036622s.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.006829s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.037991s.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.006782s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.037964s.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.008799s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.038087s.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.010504s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.041566s.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.010885s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.039500s.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.013761s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.040084s.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.018057s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.042321s.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.026068s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-37-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.041602s.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.042634s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.043707s.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.051954s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.077839s.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.100347s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.079996s.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.158881s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.083504s.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Model found:
Model :: Total atoms = 3531, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.060749s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental solving completed in 1.414558s because STOP_CON_REACHED.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.827505s, Solving time = 0.543879s, Total time = 1.414558s
Final Model :: Total atoms = 3531, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039892s, Solving time = 0.005799s, Total time = 0.045691s
2 : Statistics :: Grounding time = 0.031470s, Solving time = 0.003742s, Total time = 0.035212s
3 : Statistics :: Grounding time = 0.031201s, Solving time = 0.004710s, Total time = 0.035911s
4 : Statistics :: Grounding time = 0.034551s, Solving time = 0.005388s, Total time = 0.039938s
5 : Statistics :: Grounding time = 0.035698s, Solving time = 0.005746s, Total time = 0.041444s
6 : Statistics :: Grounding time = 0.036622s, Solving time = 0.006829s, Total time = 0.043451s
7 : Statistics :: Grounding time = 0.037991s, Solving time = 0.006782s, Total time = 0.044773s
8 : Statistics :: Grounding time = 0.037964s, Solving time = 0.008799s, Total time = 0.046763s
9 : Statistics :: Grounding time = 0.038087s, Solving time = 0.010504s, Total time = 0.048591s
10 : Statistics :: Grounding time = 0.041566s, Solving time = 0.010885s, Total time = 0.052451s
11 : Statistics :: Grounding time = 0.039500s, Solving time = 0.013761s, Total time = 0.053261s
12 : Statistics :: Grounding time = 0.040084s, Solving time = 0.018057s, Total time = 0.058141s
13 : Statistics :: Grounding time = 0.042321s, Solving time = 0.026068s, Total time = 0.068389s
14 : Statistics :: Grounding time = 0.041602s, Solving time = 0.042634s, Total time = 0.084236s
15 : Statistics :: Grounding time = 0.043707s, Solving time = 0.051954s, Total time = 0.095661s
16 : Statistics :: Grounding time = 0.077839s, Solving time = 0.100347s, Total time = 0.178186s
17 : Statistics :: Grounding time = 0.079996s, Solving time = 0.158881s, Total time = 0.238878s
18 : Statistics :: Grounding time = 0.083504s, Solving time = 0.060749s, Total time = 0.144254s

[16-02-2021_16-37-06] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.827505s, Solving time = 0.543879s, Total time = 1.414558s
Model :: Total atoms = 3531, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-37-06] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),9)
occurs(3,talos,release(manipulator_arm_2,(block,5)),10)
occurs(3,talos,release(manipulator_arm_1,(block,3)),11)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),12)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[16-02-2021_16-37-06] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-37-06] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-37-06] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-37-06] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-37-06] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-37-06] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Instantiated.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Program building started.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Program building completed.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding base program parts.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.015084s.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving base program parts.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.003116s.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental solving started.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.061956s.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.005693s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.048255s.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.004515s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.046395s.

[16-02-2021_16-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.005092s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.045556s.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.007036s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.049244s.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.008339s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.051142s.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.009230s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.053979s.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.010455s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.053096s.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.009999s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.056602s.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.011056s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.056064s.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.011381s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.058744s.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.012989s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.066892s.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.015248s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.067681s.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.016651s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.060708s.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.016547s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.063653s.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.016369s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.063685s.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.025507s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-37-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.066982s.

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.025456s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.064647s.

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.033215s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.068549s.

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.043541s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.068107s.

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.084311s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.069038s.

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.067686s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.070379s.

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.101057s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.071569s.

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.140069s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-37-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.073849s.

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.164240s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.074052s.

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.152775s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental solving completed in 2.650471s because STOP_CON_REACHED.

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.545908s, Solving time = 1.001570s, Total time = 2.650471s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.061956s, Solving time = 0.005693s, Total time = 0.067649s
2 : Statistics :: Grounding time = 0.048255s, Solving time = 0.004515s, Total time = 0.052770s
3 : Statistics :: Grounding time = 0.046395s, Solving time = 0.005092s, Total time = 0.051487s
4 : Statistics :: Grounding time = 0.045556s, Solving time = 0.007036s, Total time = 0.052592s
5 : Statistics :: Grounding time = 0.049244s, Solving time = 0.008339s, Total time = 0.057583s
6 : Statistics :: Grounding time = 0.051142s, Solving time = 0.009230s, Total time = 0.060372s
7 : Statistics :: Grounding time = 0.053979s, Solving time = 0.010455s, Total time = 0.064434s
8 : Statistics :: Grounding time = 0.053096s, Solving time = 0.009999s, Total time = 0.063095s
9 : Statistics :: Grounding time = 0.056602s, Solving time = 0.011056s, Total time = 0.067658s
10 : Statistics :: Grounding time = 0.056064s, Solving time = 0.011381s, Total time = 0.067445s
11 : Statistics :: Grounding time = 0.058744s, Solving time = 0.012989s, Total time = 0.071733s
12 : Statistics :: Grounding time = 0.066892s, Solving time = 0.015248s, Total time = 0.082140s
13 : Statistics :: Grounding time = 0.067681s, Solving time = 0.016651s, Total time = 0.084331s
14 : Statistics :: Grounding time = 0.060708s, Solving time = 0.016547s, Total time = 0.077254s
15 : Statistics :: Grounding time = 0.063653s, Solving time = 0.016369s, Total time = 0.080022s
16 : Statistics :: Grounding time = 0.063685s, Solving time = 0.025507s, Total time = 0.089192s
17 : Statistics :: Grounding time = 0.066982s, Solving time = 0.025456s, Total time = 0.092438s
18 : Statistics :: Grounding time = 0.064647s, Solving time = 0.033215s, Total time = 0.097861s
19 : Statistics :: Grounding time = 0.068549s, Solving time = 0.043541s, Total time = 0.112089s
20 : Statistics :: Grounding time = 0.068107s, Solving time = 0.084311s, Total time = 0.152418s
21 : Statistics :: Grounding time = 0.069038s, Solving time = 0.067686s, Total time = 0.136724s
22 : Statistics :: Grounding time = 0.070379s, Solving time = 0.101057s, Total time = 0.171436s
23 : Statistics :: Grounding time = 0.071569s, Solving time = 0.140069s, Total time = 0.211638s
24 : Statistics :: Grounding time = 0.073849s, Solving time = 0.164240s, Total time = 0.238089s
25 : Statistics :: Grounding time = 0.074052s, Solving time = 0.152775s, Total time = 0.226826s

[16-02-2021_16-37-09] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.545908s, Solving time = 1.001570s, Total time = 2.650471s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-37-09] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_2,extended),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),25)

[16-02-2021_16-37-09] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-37-09] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-37-09] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-37-09] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-37-09] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-37-09] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Instantiated.

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Program building started.

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Program building completed.

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding base program parts.

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.016983s.

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving base program parts.

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.003641s.

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental solving started.

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.202220s.

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.008737s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.063845s.

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.005322s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-37-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.066714s.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.006853s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.074441s.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.009964s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.070349s.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.012430s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.073273s.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.015106s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.077461s.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.015473s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.078158s.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.015745s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.079469s.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.015799s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.079017s.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.017229s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.077281s.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.017039s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.081958s.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.017943s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.083902s.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.025182s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-37-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.085940s.

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.025559s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.086305s.

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.023927s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.089140s.

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.035432s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.091966s.

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.029506s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.089778s.

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.030895s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.090431s.

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.053881s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.091918s.

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.053987s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-37-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.096887s.

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.089596s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.094106s.

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.085636s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.110038s.

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.065000s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.096089s.

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Model found:
Model :: Total atoms = 6742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.126634s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental solving completed in 3.072081s because STOP_CON_REACHED.

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.147668s, Solving time = 0.806515s, Total time = 3.072081s
Final Model :: Total atoms = 6742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.202220s, Solving time = 0.008737s, Total time = 0.210957s
2 : Statistics :: Grounding time = 0.063845s, Solving time = 0.005322s, Total time = 0.069167s
3 : Statistics :: Grounding time = 0.066714s, Solving time = 0.006853s, Total time = 0.073567s
4 : Statistics :: Grounding time = 0.074441s, Solving time = 0.009964s, Total time = 0.084405s
5 : Statistics :: Grounding time = 0.070349s, Solving time = 0.012430s, Total time = 0.082778s
6 : Statistics :: Grounding time = 0.073273s, Solving time = 0.015106s, Total time = 0.088379s
7 : Statistics :: Grounding time = 0.077461s, Solving time = 0.015473s, Total time = 0.092934s
8 : Statistics :: Grounding time = 0.078158s, Solving time = 0.015745s, Total time = 0.093902s
9 : Statistics :: Grounding time = 0.079469s, Solving time = 0.015799s, Total time = 0.095268s
10 : Statistics :: Grounding time = 0.079017s, Solving time = 0.017229s, Total time = 0.096245s
11 : Statistics :: Grounding time = 0.077281s, Solving time = 0.017039s, Total time = 0.094321s
12 : Statistics :: Grounding time = 0.081958s, Solving time = 0.017943s, Total time = 0.099900s
13 : Statistics :: Grounding time = 0.083902s, Solving time = 0.025182s, Total time = 0.109084s
14 : Statistics :: Grounding time = 0.085940s, Solving time = 0.025559s, Total time = 0.111498s
15 : Statistics :: Grounding time = 0.086305s, Solving time = 0.023927s, Total time = 0.110232s
16 : Statistics :: Grounding time = 0.089140s, Solving time = 0.035432s, Total time = 0.124572s
17 : Statistics :: Grounding time = 0.091966s, Solving time = 0.029506s, Total time = 0.121472s
18 : Statistics :: Grounding time = 0.089778s, Solving time = 0.030895s, Total time = 0.120673s
19 : Statistics :: Grounding time = 0.090431s, Solving time = 0.053881s, Total time = 0.144312s
20 : Statistics :: Grounding time = 0.091918s, Solving time = 0.053987s, Total time = 0.145905s
21 : Statistics :: Grounding time = 0.096887s, Solving time = 0.089596s, Total time = 0.186483s
22 : Statistics :: Grounding time = 0.094106s, Solving time = 0.085636s, Total time = 0.179742s
23 : Statistics :: Grounding time = 0.110038s, Solving time = 0.065000s, Total time = 0.175038s
24 : Statistics :: Grounding time = 0.096089s, Solving time = 0.126634s, Total time = 0.222723s

[16-02-2021_16-37-12] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 2.147668s, Solving time = 0.806515s, Total time = 3.072081s
Model :: Total atoms = 6742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-37-12] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),24)

[16-02-2021_16-37-12] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.414558s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.650471s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     3.072081s : Steps =    24 : Actions =    24 |  
  ====================================================================  

[16-02-2021_16-37-12] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-37-12] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-37-12] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-37-12] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-37-12] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-37-12] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-37-12] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-37-12] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Instantiated.

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-37-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 24 rules into program part plan_module(step, start).

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 3968 rules into program part state_module(step).

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=24, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 24], range_=IncRange(start=24, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 24, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Program building started.

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Program building completed.

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding base program parts.

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.023986s.

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving base program parts.

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.003358s.

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental solving started.

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 24
End step max = None

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [25]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 24]), ('conformance_module', [25])].

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.323689s.

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.036090s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 24
End step max = None

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 24]), ('conformance_module', [26])].

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.071442s.

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.007430s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 24
End step max = None

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 24]), ('conformance_module', [27])].

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.070372s.

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.008376s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 24
End step max = None

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 24]), ('conformance_module', [28])].

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.072363s.

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.010138s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 24
End step max = None

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 24]), ('conformance_module', [29])].

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.074391s.

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.013120s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 24
End step max = None

[16-02-2021_16-37-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 24]), ('conformance_module', [30])].

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.084647s.

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.015759s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 24
End step max = None

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 24]), ('conformance_module', [31])].

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.081064s.

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.015585s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 24
End step max = None

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 24]), ('conformance_module', [32])].

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.082476s.

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.017929s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 24
End step max = None

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 24]), ('conformance_module', [33])].

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.085595s.

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.017586s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 24
End step max = None

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 24]), ('conformance_module', [34])].

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.086333s.

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.019282s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 24
End step max = None

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 24]), ('conformance_module', [35])].

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.087271s.

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.018955s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 24
End step max = None

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 24]), ('conformance_module', [36])].

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.090181s.

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.019502s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 24
End step max = None

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 24]), ('conformance_module', [37])].

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.091444s.

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.019931s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 24
End step max = None

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 24]), ('conformance_module', [38])].

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.092770s.

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.030083s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 24
End step max = None

[16-02-2021_16-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 24]), ('conformance_module', [39])].

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.098019s.

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.033351s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [16]:
Current step bound = 40
End step min = 24
End step max = None

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 24]), ('conformance_module', [40])].

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.097210s.

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.045896s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [17]:
Current step bound = 41
End step min = 24
End step max = None

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 24]), ('conformance_module', [41])].

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.104008s.

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.046628s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [18]:
Current step bound = 42
End step min = 24
End step max = None

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 24]), ('conformance_module', [42])].

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.096459s.

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.060515s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [19]:
Current step bound = 43
End step min = 24
End step max = None

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 24]), ('conformance_module', [43])].

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.100165s.

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Model found:
Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.079961s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental solving completed in 2.528022s because STOP_CON_REACHED.

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.913886s, Solving time = 0.519476s, Total time = 2.528022s
Final Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.323689s, Solving time = 0.036090s, Total time = 0.359779s
2 : Statistics :: Grounding time = 0.071442s, Solving time = 0.007430s, Total time = 0.078872s
3 : Statistics :: Grounding time = 0.070372s, Solving time = 0.008376s, Total time = 0.078749s
4 : Statistics :: Grounding time = 0.072363s, Solving time = 0.010138s, Total time = 0.082501s
5 : Statistics :: Grounding time = 0.074391s, Solving time = 0.013120s, Total time = 0.087511s
6 : Statistics :: Grounding time = 0.084647s, Solving time = 0.015759s, Total time = 0.100406s
7 : Statistics :: Grounding time = 0.081064s, Solving time = 0.015585s, Total time = 0.096649s
8 : Statistics :: Grounding time = 0.082476s, Solving time = 0.017929s, Total time = 0.100405s
9 : Statistics :: Grounding time = 0.085595s, Solving time = 0.017586s, Total time = 0.103180s
10 : Statistics :: Grounding time = 0.086333s, Solving time = 0.019282s, Total time = 0.105615s
11 : Statistics :: Grounding time = 0.087271s, Solving time = 0.018955s, Total time = 0.106226s
12 : Statistics :: Grounding time = 0.090181s, Solving time = 0.019502s, Total time = 0.109683s
13 : Statistics :: Grounding time = 0.091444s, Solving time = 0.019931s, Total time = 0.111375s
14 : Statistics :: Grounding time = 0.092770s, Solving time = 0.030083s, Total time = 0.122854s
15 : Statistics :: Grounding time = 0.098019s, Solving time = 0.033351s, Total time = 0.131371s
16 : Statistics :: Grounding time = 0.097210s, Solving time = 0.045896s, Total time = 0.143105s
17 : Statistics :: Grounding time = 0.104008s, Solving time = 0.046628s, Total time = 0.150636s
18 : Statistics :: Grounding time = 0.096459s, Solving time = 0.060515s, Total time = 0.156975s
19 : Statistics :: Grounding time = 0.100165s, Solving time = 0.079961s, Total time = 0.180126s

[16-02-2021_16-37-15] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.913886s, Solving time = 0.519476s, Total time = 2.528022s
Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-37-15] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),24)
occurs(1,talos,configure(manipulator_limb_2,extended),25)
occurs(1,talos,configure(manipulator_limb_1,retracted),26)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,configure(manipulator_limb_2,extended),37)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),40)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),41)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),42)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),43)

[16-02-2021_16-37-15] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     2.528022s : Steps =    43 : Actions =    43 |  
  ====================================================================  

[16-02-2021_16-37-15] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-37-15] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-37-15] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-37-15] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-37-15] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-37-15] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-37-15] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-37-15] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Instantiated.

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-37-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Program building started.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Program building completed.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding base program parts.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.021121s.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving base program parts.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.003127s.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental solving started.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.137574s.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.020547s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.054126s.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.006108s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.054490s.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.009109s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.062043s.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.010115s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.059045s.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.010997s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.061442s.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.011049s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.062672s.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.012273s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-37-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.064118s.

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.011747s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.067147s.

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Model found:
Model :: Total atoms = 7581, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.015803s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental solving completed in 0.775328s because STOP_CON_REACHED.

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.643777s, Solving time = 0.110876s, Total time = 0.775328s
Final Model :: Total atoms = 7581, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.137574s, Solving time = 0.020547s, Total time = 0.158121s
2 : Statistics :: Grounding time = 0.054126s, Solving time = 0.006108s, Total time = 0.060234s
3 : Statistics :: Grounding time = 0.054490s, Solving time = 0.009109s, Total time = 0.063600s
4 : Statistics :: Grounding time = 0.062043s, Solving time = 0.010115s, Total time = 0.072158s
5 : Statistics :: Grounding time = 0.059045s, Solving time = 0.010997s, Total time = 0.070042s
6 : Statistics :: Grounding time = 0.061442s, Solving time = 0.011049s, Total time = 0.072491s
7 : Statistics :: Grounding time = 0.062672s, Solving time = 0.012273s, Total time = 0.074945s
8 : Statistics :: Grounding time = 0.064118s, Solving time = 0.011747s, Total time = 0.075865s
9 : Statistics :: Grounding time = 0.067147s, Solving time = 0.015803s, Total time = 0.082950s

[16-02-2021_16-37-17] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.643777s, Solving time = 0.110876s, Total time = 0.775328s
Model :: Total atoms = 7581, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-37-17] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_2,extended),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),25)
occurs(2,talos,release(manipulator_arm_2,(block,5)),26)
occurs(2,talos,release(manipulator_arm_1,(block,3)),27)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),28)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[16-02-2021_16-37-17] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-37-17] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-37-17] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-37-17] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-37-17] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-37-17] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Instantiated.

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> The logic program was extended with 43 rules into program part plan_module(step, start).

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> The logic program was extended with 6932 rules into program part state_module(step).

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=43, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 43], range_=IncRange(start=43, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 43, Max end step = None
Step inc = 1, Step inc init = 45, Stop con = StopCondition.Satisfiable

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Program building started.

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Program building completed.

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding base program parts.

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.029018s.

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving base program parts.

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.003454s.

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental solving started.

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [1]:
Current step bound = 44
End step min = 43
End step max = None

[16-02-2021_16-37-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [44]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 43]), ('conformance_module', [43]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 43]), ('conformance_module', [44])].

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.456281s.

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.057115s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [2]:
Current step bound = 45
End step min = 43
End step max = None

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 43]), ('conformance_module', [45])].

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.078162s.

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.009846s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [3]:
Current step bound = 46
End step min = 43
End step max = None

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 43]), ('conformance_module', [46])].

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.077270s.

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.011424s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [4]:
Current step bound = 47
End step min = 43
End step max = None

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 43]), ('conformance_module', [47])].

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.081720s.

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.015164s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [5]:
Current step bound = 48
End step min = 43
End step max = None

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 43]), ('conformance_module', [48])].

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.085409s.

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Model found:
Model :: Total atoms = 10439, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.019430s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental solving completed in 0.941167s because STOP_CON_REACHED.

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.807860s, Solving time = 0.116433s, Total time = 0.941167s
Final Model :: Total atoms = 10439, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.456281s, Solving time = 0.057115s, Total time = 0.513396s
2 : Statistics :: Grounding time = 0.078162s, Solving time = 0.009846s, Total time = 0.088008s
3 : Statistics :: Grounding time = 0.077270s, Solving time = 0.011424s, Total time = 0.088694s
4 : Statistics :: Grounding time = 0.081720s, Solving time = 0.015164s, Total time = 0.096884s
5 : Statistics :: Grounding time = 0.085409s, Solving time = 0.019430s, Total time = 0.104838s

[16-02-2021_16-37-18] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.807860s, Solving time = 0.116433s, Total time = 0.941167s
Model :: Total atoms = 10439, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-37-18] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),24)
occurs(1,talos,configure(manipulator_limb_2,extended),25)
occurs(1,talos,configure(manipulator_limb_1,retracted),26)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,configure(manipulator_limb_2,extended),37)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),40)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),41)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),42)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),43)
occurs(1,talos,release(manipulator_end_2,(block,5)),44)
occurs(1,talos,release(manipulator_end_1,(block,3)),45)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),46)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),47)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),48)

[16-02-2021_16-37-18] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.775328s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     0.941167s : Steps =    48 : Actions =    48 |  
  ====================================================================  

[16-02-2021_16-37-18] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-37-18] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-37-18] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-37-18] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-37-18] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-37-18] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-37-18] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-37-18] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Instantiated.

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 48 rules into program part plan_module(step, start).

[16-02-2021_16-37-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 7712 rules into program part state_module(step).

[16-02-2021_16-37-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=48, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 48], range_=IncRange(start=48, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 48, Max end step = None
Step inc = 1, Step inc init = 50, Stop con = StopCondition.Satisfiable

[16-02-2021_16-37-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Program building started.

[16-02-2021_16-37-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Program building completed.

[16-02-2021_16-37-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding base program parts.

[16-02-2021_16-37-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.031800s.

[16-02-2021_16-37-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving base program parts.

[16-02-2021_16-37-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.003478s.

[16-02-2021_16-37-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental solving started.

[16-02-2021_16-37-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [1]:
Current step bound = 49
End step min = 48
End step max = None

[16-02-2021_16-37-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [49]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('state_module', [46]), ('conformance_module', [46]), ('state_module', [47]), ('conformance_module', [47]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 48]), ('conformance_module', [48]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 48]), ('conformance_module', [49])].

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.488212s.

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.060880s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [2]:
Current step bound = 50
End step min = 48
End step max = None

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 48]), ('conformance_module', [50])].

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.080225s.

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.009163s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [3]:
Current step bound = 51
End step min = 48
End step max = None

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 48]), ('conformance_module', [51])].

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.079873s.

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.013315s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [4]:
Current step bound = 52
End step min = 48
End step max = None

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 48]), ('conformance_module', [52])].

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.088430s.

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.018117s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [5]:
Current step bound = 53
End step min = 48
End step max = None

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 48]), ('conformance_module', [53])].

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.089130s.

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.016848s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [6]:
Current step bound = 54
End step min = 48
End step max = None

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 48]), ('conformance_module', [54])].

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.092691s.

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.018795s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [7]:
Current step bound = 55
End step min = 48
End step max = None

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 48]), ('conformance_module', [55])].

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.095222s.

[16-02-2021_16-37-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Model found:
Model :: Total atoms = 11788, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.025283s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental solving completed in 1.239783s because STOP_CON_REACHED.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.045583s, Solving time = 0.165877s, Total time = 1.239783s
Final Model :: Total atoms = 11788, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.488212s, Solving time = 0.060880s, Total time = 0.549092s
2 : Statistics :: Grounding time = 0.080225s, Solving time = 0.009163s, Total time = 0.089388s
3 : Statistics :: Grounding time = 0.079873s, Solving time = 0.013315s, Total time = 0.093188s
4 : Statistics :: Grounding time = 0.088430s, Solving time = 0.018117s, Total time = 0.106547s
5 : Statistics :: Grounding time = 0.089130s, Solving time = 0.016848s, Total time = 0.105979s
6 : Statistics :: Grounding time = 0.092691s, Solving time = 0.018795s, Total time = 0.111486s
7 : Statistics :: Grounding time = 0.095222s, Solving time = 0.025283s, Total time = 0.120504s

[16-02-2021_16-37-21] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.045583s, Solving time = 0.165877s, Total time = 1.239783s
Model :: Total atoms = 11788, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-37-21] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),24)
occurs(1,talos,configure(manipulator_limb_2,extended),25)
occurs(1,talos,configure(manipulator_limb_1,retracted),26)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,configure(manipulator_limb_2,extended),37)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),40)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),41)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),42)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),43)
occurs(1,talos,release(manipulator_end_2,(block,5)),44)
occurs(1,talos,release(manipulator_end_1,(block,3)),45)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),46)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),47)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),48)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),49)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),50)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),51)
occurs(1,talos,release(manipulator_end_2,(block,2)),52)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),53)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),54)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),55)

[16-02-2021_16-37-21] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.239783s : Steps =    55 : Actions =    55 |  
  ====================================================================  

[16-02-2021_16-37-21] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-37-21] INFO :: Experiment >> 

      ================================================      
              Initial run 2 : Time 15.893798s               
      ================================================      

[16-02-2021_16-37-21] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-37-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-37-21] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-37-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-37-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-37-21] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Instantiated.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Program building started.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Program building completed.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding base program parts.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.014472s.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving base program parts.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.002310s.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental solving started.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.043036s.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.005132s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.030881s.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.002945s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.031031s.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.004501s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.037458s.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.004852s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.035564s.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.005126s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.037657s.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.006228s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.041141s.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.007210s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.037173s.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.008568s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.037905s.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.011009s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.040273s.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.010404s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.039282s.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.012656s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.041227s.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.015583s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.040027s.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.026731s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.042054s.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.044120s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-37-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.041503s.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.066672s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.079299s.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.112801s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.079401s.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.215695s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.082855s.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Model found:
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.092366s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental solving completed in 1.528605s because STOP_CON_REACHED.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.832240s, Solving time = 0.654908s, Total time = 1.528605s
Final Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.043036s, Solving time = 0.005132s, Total time = 0.048168s
2 : Statistics :: Grounding time = 0.030881s, Solving time = 0.002945s, Total time = 0.033826s
3 : Statistics :: Grounding time = 0.031031s, Solving time = 0.004501s, Total time = 0.035532s
4 : Statistics :: Grounding time = 0.037458s, Solving time = 0.004852s, Total time = 0.042310s
5 : Statistics :: Grounding time = 0.035564s, Solving time = 0.005126s, Total time = 0.040690s
6 : Statistics :: Grounding time = 0.037657s, Solving time = 0.006228s, Total time = 0.043884s
7 : Statistics :: Grounding time = 0.041141s, Solving time = 0.007210s, Total time = 0.048352s
8 : Statistics :: Grounding time = 0.037173s, Solving time = 0.008568s, Total time = 0.045740s
9 : Statistics :: Grounding time = 0.037905s, Solving time = 0.011009s, Total time = 0.048914s
10 : Statistics :: Grounding time = 0.040273s, Solving time = 0.010404s, Total time = 0.050677s
11 : Statistics :: Grounding time = 0.039282s, Solving time = 0.012656s, Total time = 0.051938s
12 : Statistics :: Grounding time = 0.041227s, Solving time = 0.015583s, Total time = 0.056810s
13 : Statistics :: Grounding time = 0.040027s, Solving time = 0.026731s, Total time = 0.066758s
14 : Statistics :: Grounding time = 0.042054s, Solving time = 0.044120s, Total time = 0.086174s
15 : Statistics :: Grounding time = 0.041503s, Solving time = 0.066672s, Total time = 0.108176s
16 : Statistics :: Grounding time = 0.079299s, Solving time = 0.112801s, Total time = 0.192100s
17 : Statistics :: Grounding time = 0.079401s, Solving time = 0.215695s, Total time = 0.295096s
18 : Statistics :: Grounding time = 0.082855s, Solving time = 0.092366s, Total time = 0.175221s

[16-02-2021_16-37-22] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.832240s, Solving time = 0.654908s, Total time = 1.528605s
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-37-22] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_1,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),10)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),11)
occurs(3,talos,release(manipulator_arm_2,(block,3)),12)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[16-02-2021_16-37-22] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-37-22] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-37-22] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-37-22] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-37-22] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-37-22] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Instantiated.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Program building started.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Program building completed.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding base program parts.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.014220s.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving base program parts.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.001931s.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental solving started.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.062002s.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.005023s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.044324s.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.003355s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-37-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.046039s.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.004268s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.045561s.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.006094s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.049251s.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.009017s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.051015s.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.008840s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.053838s.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.010056s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.058489s.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.010020s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.055937s.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.010795s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.056050s.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.010898s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.059028s.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.013346s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.058061s.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.015556s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.061372s.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.019228s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.060243s.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.018144s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.061795s.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.019769s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.060860s.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.023361s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-37-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.064893s.

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.027267s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.063763s.

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.034911s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.067007s.

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.044748s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.067293s.

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.077300s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.068782s.

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.080000s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.070956s.

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.081141s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.071683s.

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.075920s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.072957s.

[16-02-2021_16-37-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.106911s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.077475s.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.128228s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental solving completed in 2.466920s because STOP_CON_REACHED.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.522892s, Solving time = 0.846128s, Total time = 2.466920s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.062002s, Solving time = 0.005023s, Total time = 0.067025s
2 : Statistics :: Grounding time = 0.044324s, Solving time = 0.003355s, Total time = 0.047680s
3 : Statistics :: Grounding time = 0.046039s, Solving time = 0.004268s, Total time = 0.050307s
4 : Statistics :: Grounding time = 0.045561s, Solving time = 0.006094s, Total time = 0.051655s
5 : Statistics :: Grounding time = 0.049251s, Solving time = 0.009017s, Total time = 0.058267s
6 : Statistics :: Grounding time = 0.051015s, Solving time = 0.008840s, Total time = 0.059855s
7 : Statistics :: Grounding time = 0.053838s, Solving time = 0.010056s, Total time = 0.063895s
8 : Statistics :: Grounding time = 0.058489s, Solving time = 0.010020s, Total time = 0.068509s
9 : Statistics :: Grounding time = 0.055937s, Solving time = 0.010795s, Total time = 0.066731s
10 : Statistics :: Grounding time = 0.056050s, Solving time = 0.010898s, Total time = 0.066948s
11 : Statistics :: Grounding time = 0.059028s, Solving time = 0.013346s, Total time = 0.072374s
12 : Statistics :: Grounding time = 0.058061s, Solving time = 0.015556s, Total time = 0.073617s
13 : Statistics :: Grounding time = 0.061372s, Solving time = 0.019228s, Total time = 0.080600s
14 : Statistics :: Grounding time = 0.060243s, Solving time = 0.018144s, Total time = 0.078387s
15 : Statistics :: Grounding time = 0.061795s, Solving time = 0.019769s, Total time = 0.081564s
16 : Statistics :: Grounding time = 0.060860s, Solving time = 0.023361s, Total time = 0.084221s
17 : Statistics :: Grounding time = 0.064893s, Solving time = 0.027267s, Total time = 0.092160s
18 : Statistics :: Grounding time = 0.063763s, Solving time = 0.034911s, Total time = 0.098674s
19 : Statistics :: Grounding time = 0.067007s, Solving time = 0.044748s, Total time = 0.111755s
20 : Statistics :: Grounding time = 0.067293s, Solving time = 0.077300s, Total time = 0.144593s
21 : Statistics :: Grounding time = 0.068782s, Solving time = 0.080000s, Total time = 0.148782s
22 : Statistics :: Grounding time = 0.070956s, Solving time = 0.081141s, Total time = 0.152097s
23 : Statistics :: Grounding time = 0.071683s, Solving time = 0.075920s, Total time = 0.147602s
24 : Statistics :: Grounding time = 0.072957s, Solving time = 0.106911s, Total time = 0.179868s
25 : Statistics :: Grounding time = 0.077475s, Solving time = 0.128228s, Total time = 0.205704s

[16-02-2021_16-37-25] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.522892s, Solving time = 0.846128s, Total time = 2.466920s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-37-25] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),7)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_1,retracted),13)
occurs(2,talos,configure(manipulator_arm_2,extended),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_1,(block,5)),25)

[16-02-2021_16-37-25] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-37-25] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-37-25] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-37-25] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-37-25] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-37-25] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Instantiated.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Program building started.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Program building completed.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding base program parts.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.016511s.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving base program parts.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.002567s.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental solving started.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.184878s.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.008720s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.063057s.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.005449s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.064209s.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.006819s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.065083s.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.009979s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.068774s.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.012100s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-37-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.071872s.

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.013523s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.074848s.

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.014890s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.082873s.

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.016016s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.080998s.

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.016205s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.078366s.

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.017243s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.079261s.

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.017504s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.081821s.

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.017702s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.083540s.

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.023175s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.086758s.

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.027734s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.087301s.

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.027981s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-37-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.085552s.

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.024483s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.088031s.

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.037025s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.088963s.

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.044224s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.090878s.

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.054211s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.091114s.

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.051082s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.092444s.

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.085467s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.095269s.

[16-02-2021_16-37-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Model found:
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.054512s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental solving completed in 2.590806s because STOP_CON_REACHED.

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.902402s, Solving time = 0.588610s, Total time = 2.590806s
Final Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.184878s, Solving time = 0.008720s, Total time = 0.193598s
2 : Statistics :: Grounding time = 0.063057s, Solving time = 0.005449s, Total time = 0.068506s
3 : Statistics :: Grounding time = 0.064209s, Solving time = 0.006819s, Total time = 0.071028s
4 : Statistics :: Grounding time = 0.065083s, Solving time = 0.009979s, Total time = 0.075061s
5 : Statistics :: Grounding time = 0.068774s, Solving time = 0.012100s, Total time = 0.080875s
6 : Statistics :: Grounding time = 0.071872s, Solving time = 0.013523s, Total time = 0.085395s
7 : Statistics :: Grounding time = 0.074848s, Solving time = 0.014890s, Total time = 0.089738s
8 : Statistics :: Grounding time = 0.082873s, Solving time = 0.016016s, Total time = 0.098889s
9 : Statistics :: Grounding time = 0.080998s, Solving time = 0.016205s, Total time = 0.097203s
10 : Statistics :: Grounding time = 0.078366s, Solving time = 0.017243s, Total time = 0.095609s
11 : Statistics :: Grounding time = 0.079261s, Solving time = 0.017504s, Total time = 0.096765s
12 : Statistics :: Grounding time = 0.081821s, Solving time = 0.017702s, Total time = 0.099523s
13 : Statistics :: Grounding time = 0.083540s, Solving time = 0.023175s, Total time = 0.106715s
14 : Statistics :: Grounding time = 0.086758s, Solving time = 0.027734s, Total time = 0.114492s
15 : Statistics :: Grounding time = 0.087301s, Solving time = 0.027981s, Total time = 0.115282s
16 : Statistics :: Grounding time = 0.085552s, Solving time = 0.024483s, Total time = 0.110035s
17 : Statistics :: Grounding time = 0.088031s, Solving time = 0.037025s, Total time = 0.125056s
18 : Statistics :: Grounding time = 0.088963s, Solving time = 0.044224s, Total time = 0.133187s
19 : Statistics :: Grounding time = 0.090878s, Solving time = 0.054211s, Total time = 0.145089s
20 : Statistics :: Grounding time = 0.091114s, Solving time = 0.051082s, Total time = 0.142196s
21 : Statistics :: Grounding time = 0.092444s, Solving time = 0.085467s, Total time = 0.177912s
22 : Statistics :: Grounding time = 0.095269s, Solving time = 0.054512s, Total time = 0.149782s

[16-02-2021_16-37-28] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.902402s, Solving time = 0.588610s, Total time = 2.590806s
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-37-28] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),22)

[16-02-2021_16-37-28] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.528605s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.466920s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     2.590806s : Steps =    22 : Actions =    22 |  
  ====================================================================  

[16-02-2021_16-37-28] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-37-28] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-37-28] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-37-28] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-37-28] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-37-28] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-37-28] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-37-28] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Instantiated.

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 22 rules into program part plan_module(step, start).

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 3656 rules into program part state_module(step).

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=22, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 22], range_=IncRange(start=22, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 22, Max end step = None
Step inc = 1, Step inc init = 24, Stop con = StopCondition.Satisfiable

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Program building started.

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Program building completed.

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding base program parts.

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.022930s.

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving base program parts.

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.003655s.

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental solving started.

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [1]:
Current step bound = 23
End step min = 22
End step max = None

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [23]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 22]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 22]), ('conformance_module', [23])].

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.313484s.

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.032350s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [2]:
Current step bound = 24
End step min = 22
End step max = None

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 22]), ('conformance_module', [24])].

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.070873s.

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.007480s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [3]:
Current step bound = 25
End step min = 22
End step max = None

[16-02-2021_16-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 22]), ('conformance_module', [25])].

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.069791s.

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.008766s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [4]:
Current step bound = 26
End step min = 22
End step max = None

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 22]), ('conformance_module', [26])].

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.072342s.

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.010472s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [5]:
Current step bound = 27
End step min = 22
End step max = None

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 22]), ('conformance_module', [27])].

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.073048s.

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.014370s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [6]:
Current step bound = 28
End step min = 22
End step max = None

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 22]), ('conformance_module', [28])].

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.078695s.

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.014825s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [7]:
Current step bound = 29
End step min = 22
End step max = None

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 22]), ('conformance_module', [29])].

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.076972s.

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.015190s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [8]:
Current step bound = 30
End step min = 22
End step max = None

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 22]), ('conformance_module', [30])].

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.083033s.

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.017004s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [9]:
Current step bound = 31
End step min = 22
End step max = None

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 22]), ('conformance_module', [31])].

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.085025s.

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.016944s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [10]:
Current step bound = 32
End step min = 22
End step max = None

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 22]), ('conformance_module', [32])].

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.087068s.

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.018905s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [11]:
Current step bound = 33
End step min = 22
End step max = None

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 22]), ('conformance_module', [33])].

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.088100s.

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.019513s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [12]:
Current step bound = 34
End step min = 22
End step max = None

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 22]), ('conformance_module', [34])].

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.090940s.

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.020711s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [13]:
Current step bound = 35
End step min = 22
End step max = None

[16-02-2021_16-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 22]), ('conformance_module', [35])].

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.096676s.

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.021386s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [14]:
Current step bound = 36
End step min = 22
End step max = None

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 22]), ('conformance_module', [36])].

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.092061s.

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.027296s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [15]:
Current step bound = 37
End step min = 22
End step max = None

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 22]), ('conformance_module', [37])].

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.100013s.

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.039653s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [16]:
Current step bound = 38
End step min = 22
End step max = None

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 22]), ('conformance_module', [38])].

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.095955s.

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.043104s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [17]:
Current step bound = 39
End step min = 22
End step max = None

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 22]), ('conformance_module', [39])].

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.099277s.

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.059836s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [18]:
Current step bound = 40
End step min = 22
End step max = None

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 22]), ('conformance_module', [40])].

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.103361s.

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.056710s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [19]:
Current step bound = 41
End step min = 22
End step max = None

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 22]), ('conformance_module', [41])].

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.116032s.

[16-02-2021_16-37-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Model found:
Model :: Total atoms = 9422, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.145696s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental solving completed in 2.598865s because STOP_CON_REACHED.

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.915677s, Solving time = 0.593867s, Total time = 2.598865s
Final Model :: Total atoms = 9422, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.313484s, Solving time = 0.032350s, Total time = 0.345834s
2 : Statistics :: Grounding time = 0.070873s, Solving time = 0.007480s, Total time = 0.078353s
3 : Statistics :: Grounding time = 0.069791s, Solving time = 0.008766s, Total time = 0.078557s
4 : Statistics :: Grounding time = 0.072342s, Solving time = 0.010472s, Total time = 0.082814s
5 : Statistics :: Grounding time = 0.073048s, Solving time = 0.014370s, Total time = 0.087418s
6 : Statistics :: Grounding time = 0.078695s, Solving time = 0.014825s, Total time = 0.093520s
7 : Statistics :: Grounding time = 0.076972s, Solving time = 0.015190s, Total time = 0.092162s
8 : Statistics :: Grounding time = 0.083033s, Solving time = 0.017004s, Total time = 0.100038s
9 : Statistics :: Grounding time = 0.085025s, Solving time = 0.016944s, Total time = 0.101969s
10 : Statistics :: Grounding time = 0.087068s, Solving time = 0.018905s, Total time = 0.105973s
11 : Statistics :: Grounding time = 0.088100s, Solving time = 0.019513s, Total time = 0.107613s
12 : Statistics :: Grounding time = 0.090940s, Solving time = 0.020711s, Total time = 0.111651s
13 : Statistics :: Grounding time = 0.096676s, Solving time = 0.021386s, Total time = 0.118062s
14 : Statistics :: Grounding time = 0.092061s, Solving time = 0.027296s, Total time = 0.119358s
15 : Statistics :: Grounding time = 0.100013s, Solving time = 0.039653s, Total time = 0.139666s
16 : Statistics :: Grounding time = 0.095955s, Solving time = 0.043104s, Total time = 0.139059s
17 : Statistics :: Grounding time = 0.099277s, Solving time = 0.059836s, Total time = 0.159113s
18 : Statistics :: Grounding time = 0.103361s, Solving time = 0.056710s, Total time = 0.160071s
19 : Statistics :: Grounding time = 0.116032s, Solving time = 0.145696s, Total time = 0.261728s

[16-02-2021_16-37-31] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.915677s, Solving time = 0.593867s, Total time = 2.598865s
Model :: Total atoms = 9422, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-37-31] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,configure(manipulator_limb_2,extended),35)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),36)
occurs(1,talos,release(manipulator_end_2,(block,6)),37)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),38)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),39)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),40)
occurs(1,talos,release(manipulator_end_1,(block,5)),41)

[16-02-2021_16-37-31] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     2.598865s : Steps =    41 : Actions =    41 |  
  ====================================================================  

[16-02-2021_16-37-31] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-37-31] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-37-31] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-37-31] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-37-31] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-37-31] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-37-31] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-37-31] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Instantiated.

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Program building started.

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Program building completed.

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding base program parts.

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.022865s.

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving base program parts.

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.002489s.

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental solving started.

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.143430s.

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.022218s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.056217s.

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.006431s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.055335s.

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.008329s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.059772s.

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.010297s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.061439s.

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.011024s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.067509s.

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.010744s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.066551s.

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.015529s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.072131s.

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.012137s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.068318s.

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Model found:
Model :: Total atoms = 7577, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.015782s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental solving completed in 0.808993s because STOP_CON_REACHED.

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.673566s, Solving time = 0.114980s, Total time = 0.808993s
Final Model :: Total atoms = 7577, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.143430s, Solving time = 0.022218s, Total time = 0.165648s
2 : Statistics :: Grounding time = 0.056217s, Solving time = 0.006431s, Total time = 0.062648s
3 : Statistics :: Grounding time = 0.055335s, Solving time = 0.008329s, Total time = 0.063664s
4 : Statistics :: Grounding time = 0.059772s, Solving time = 0.010297s, Total time = 0.070069s
5 : Statistics :: Grounding time = 0.061439s, Solving time = 0.011024s, Total time = 0.072462s
6 : Statistics :: Grounding time = 0.067509s, Solving time = 0.010744s, Total time = 0.078253s
7 : Statistics :: Grounding time = 0.066551s, Solving time = 0.015529s, Total time = 0.082080s
8 : Statistics :: Grounding time = 0.072131s, Solving time = 0.012137s, Total time = 0.084268s
9 : Statistics :: Grounding time = 0.068318s, Solving time = 0.015782s, Total time = 0.084100s

[16-02-2021_16-37-32] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.673566s, Solving time = 0.114980s, Total time = 0.808993s
Model :: Total atoms = 7577, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-37-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),7)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_1,retracted),13)
occurs(2,talos,configure(manipulator_arm_2,extended),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_1,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),26)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),27)
occurs(2,talos,release(manipulator_arm_2,(block,3)),28)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[16-02-2021_16-37-32] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-37-32] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-37-32] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-37-32] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-37-32] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-37-32] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Instantiated.

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 41 rules into program part plan_module(step, start).

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 6620 rules into program part state_module(step).

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=41, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 41], range_=IncRange(start=41, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 41, Max end step = None
Step inc = 1, Step inc init = 43, Stop con = StopCondition.Satisfiable

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Program building started.

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Program building completed.

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding base program parts.

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.029238s.

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving base program parts.

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.003099s.

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental solving started.

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [1]:
Current step bound = 42
End step min = 41
End step max = None

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [42]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 41]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 41]), ('conformance_module', [42])].

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.474205s.

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.057939s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [2]:
Current step bound = 43
End step min = 41
End step max = None

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 41]), ('conformance_module', [43])].

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.085285s.

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.008163s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [3]:
Current step bound = 44
End step min = 41
End step max = None

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 41]), ('conformance_module', [44])].

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.092840s.

[16-02-2021_16-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[16-02-2021_16-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.011188s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [4]:
Current step bound = 45
End step min = 41
End step max = None

[16-02-2021_16-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 41]), ('conformance_module', [45])].

[16-02-2021_16-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.086377s.

[16-02-2021_16-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[16-02-2021_16-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.016262s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [5]:
Current step bound = 46
End step min = 41
End step max = None

[16-02-2021_16-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 41]), ('conformance_module', [46])].

[16-02-2021_16-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.213774s.

[16-02-2021_16-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[16-02-2021_16-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Model found:
Model :: Total atoms = 10114, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.018212s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental solving completed in 1.114467s because STOP_CON_REACHED.

[16-02-2021_16-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.981718s, Solving time = 0.114863s, Total time = 1.114467s
Final Model :: Total atoms = 10114, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.474205s, Solving time = 0.057939s, Total time = 0.532144s
2 : Statistics :: Grounding time = 0.085285s, Solving time = 0.008163s, Total time = 0.093447s
3 : Statistics :: Grounding time = 0.092840s, Solving time = 0.011188s, Total time = 0.104027s
4 : Statistics :: Grounding time = 0.086377s, Solving time = 0.016262s, Total time = 0.102639s
5 : Statistics :: Grounding time = 0.213774s, Solving time = 0.018212s, Total time = 0.231987s

[16-02-2021_16-37-34] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.981718s, Solving time = 0.114863s, Total time = 1.114467s
Model :: Total atoms = 10114, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-37-34] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,configure(manipulator_limb_2,extended),35)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),36)
occurs(1,talos,release(manipulator_end_2,(block,6)),37)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),38)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),39)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),40)
occurs(1,talos,release(manipulator_end_1,(block,5)),41)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),42)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),43)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),44)
occurs(1,talos,release(manipulator_end_2,(block,3)),45)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),46)

[16-02-2021_16-37-34] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.808993s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     1.114467s : Steps =    46 : Actions =    46 |  
  ====================================================================  

[16-02-2021_16-37-34] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-37-34] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-37-34] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-37-34] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-37-34] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-37-34] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-37-34] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-37-34] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Instantiated.

[16-02-2021_16-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 46 rules into program part plan_module(step, start).

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 7400 rules into program part state_module(step).

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=46, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 46], range_=IncRange(start=46, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 46, Max end step = None
Step inc = 1, Step inc init = 48, Stop con = StopCondition.Satisfiable

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Program building started.

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Program building completed.

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding base program parts.

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.031883s.

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving base program parts.

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.003697s.

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental solving started.

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [1]:
Current step bound = 47
End step min = 46
End step max = None

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [47]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 46]), ('conformance_module', [46]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 46]), ('conformance_module', [47])].

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.474342s.

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.058321s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [2]:
Current step bound = 48
End step min = 46
End step max = None

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 46]), ('conformance_module', [48])].

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.089060s.

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.008855s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [3]:
Current step bound = 49
End step min = 46
End step max = None

[16-02-2021_16-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 46]), ('conformance_module', [49])].

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.080671s.

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.013029s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [4]:
Current step bound = 50
End step min = 46
End step max = None

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 46]), ('conformance_module', [50])].

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.083155s.

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.016388s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [5]:
Current step bound = 51
End step min = 46
End step max = None

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 46]), ('conformance_module', [51])].

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.089138s.

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.016578s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [6]:
Current step bound = 52
End step min = 46
End step max = None

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 46]), ('conformance_module', [52])].

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.094217s.

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.018240s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [7]:
Current step bound = 53
End step min = 46
End step max = None

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 46]), ('conformance_module', [53])].

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.091947s.

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.020987s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [8]:
Current step bound = 54
End step min = 46
End step max = None

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 46]), ('conformance_module', [54])].

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.095267s.

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.021540s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [9]:
Current step bound = 55
End step min = 46
End step max = None

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 46]), ('conformance_module', [55])].

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.095931s.

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.026343s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [10]:
Current step bound = 56
End step min = 46
End step max = None

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 46]), ('conformance_module', [56])].

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.098609s.

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.027999s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [11]:
Current step bound = 57
End step min = 46
End step max = None

[16-02-2021_16-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 46]), ('conformance_module', [57])].

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.099084s.

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.032678s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [12]:
Current step bound = 58
End step min = 46
End step max = None

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 46]), ('conformance_module', [58])].

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.100165s.

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.040520s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [13]:
Current step bound = 59
End step min = 46
End step max = None

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 46]), ('conformance_module', [59])].

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.104210s.

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.037447s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [14]:
Current step bound = 60
End step min = 46
End step max = None

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 46]), ('conformance_module', [60])].

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.104086s.

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.057681s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [15]:
Current step bound = 61
End step min = 46
End step max = None

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 46]), ('conformance_module', [61])].

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.107551s.

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.078171s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [16]:
Current step bound = 62
End step min = 46
End step max = None

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 46]), ('conformance_module', [62])].

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.108934s.

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.141944s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [17]:
Current step bound = 63
End step min = 46
End step max = None

[16-02-2021_16-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 46]), ('conformance_module', [63])].

[16-02-2021_16-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.109673s.

[16-02-2021_16-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.228412s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [18]:
Current step bound = 64
End step min = 46
End step max = None

[16-02-2021_16-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 46]), ('conformance_module', [64])].

[16-02-2021_16-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.116435s.

[16-02-2021_16-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.363903s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [19]:
Current step bound = 65
End step min = 46
End step max = None

[16-02-2021_16-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 46]), ('conformance_module', [65])].

[16-02-2021_16-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.114034s.

[16-02-2021_16-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.541233s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [20]:
Current step bound = 66
End step min = 46
End step max = None

[16-02-2021_16-37-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 46]), ('conformance_module', [66])].

[16-02-2021_16-37-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.116521s.

[16-02-2021_16-37-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.865018s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [21]:
Current step bound = 67
End step min = 46
End step max = None

[16-02-2021_16-37-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 46]), ('conformance_module', [67])].

[16-02-2021_16-37-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.117201s.

[16-02-2021_16-37-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 1.307001s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [22]:
Current step bound = 68
End step min = 46
End step max = None

[16-02-2021_16-37-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 46]), ('conformance_module', [68])].

[16-02-2021_16-37-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.120338s.

[16-02-2021_16-37-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 2.271229s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [23]:
Current step bound = 69
End step min = 46
End step max = None

[16-02-2021_16-37-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 46]), ('conformance_module', [69])].

[16-02-2021_16-37-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.196552s.

[16-02-2021_16-37-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 3.349970s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [24]:
Current step bound = 70
End step min = 46
End step max = None

[16-02-2021_16-37-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 46]), ('conformance_module', [70])].

[16-02-2021_16-37-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.128506s.

[16-02-2021_16-37-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 3.981800s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [25]:
Current step bound = 71
End step min = 46
End step max = None

[16-02-2021_16-37-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 46]), ('conformance_module', [71])].

[16-02-2021_16-37-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.127499s.

[16-02-2021_16-37-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Model found:
Model :: Total atoms = 14765, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.972900s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental solving completed in 17.824157s because STOP_CON_REACHED.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 3.095011s, Solving time = 14.501883s, Total time = 17.824157s
Final Model :: Total atoms = 14765, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.474342s, Solving time = 0.058321s, Total time = 0.532663s
2 : Statistics :: Grounding time = 0.089060s, Solving time = 0.008855s, Total time = 0.097915s
3 : Statistics :: Grounding time = 0.080671s, Solving time = 0.013029s, Total time = 0.093701s
4 : Statistics :: Grounding time = 0.083155s, Solving time = 0.016388s, Total time = 0.099543s
5 : Statistics :: Grounding time = 0.089138s, Solving time = 0.016578s, Total time = 0.105716s
6 : Statistics :: Grounding time = 0.094217s, Solving time = 0.018240s, Total time = 0.112457s
7 : Statistics :: Grounding time = 0.091947s, Solving time = 0.020987s, Total time = 0.112934s
8 : Statistics :: Grounding time = 0.095267s, Solving time = 0.021540s, Total time = 0.116807s
9 : Statistics :: Grounding time = 0.095931s, Solving time = 0.026343s, Total time = 0.122274s
10 : Statistics :: Grounding time = 0.098609s, Solving time = 0.027999s, Total time = 0.126608s
11 : Statistics :: Grounding time = 0.099084s, Solving time = 0.032678s, Total time = 0.131763s
12 : Statistics :: Grounding time = 0.100165s, Solving time = 0.040520s, Total time = 0.140685s
13 : Statistics :: Grounding time = 0.104210s, Solving time = 0.037447s, Total time = 0.141657s
14 : Statistics :: Grounding time = 0.104086s, Solving time = 0.057681s, Total time = 0.161767s
15 : Statistics :: Grounding time = 0.107551s, Solving time = 0.078171s, Total time = 0.185722s
16 : Statistics :: Grounding time = 0.108934s, Solving time = 0.141944s, Total time = 0.250878s
17 : Statistics :: Grounding time = 0.109673s, Solving time = 0.228412s, Total time = 0.338085s
18 : Statistics :: Grounding time = 0.116435s, Solving time = 0.363903s, Total time = 0.480338s
19 : Statistics :: Grounding time = 0.114034s, Solving time = 0.541233s, Total time = 0.655267s
20 : Statistics :: Grounding time = 0.116521s, Solving time = 0.865018s, Total time = 0.981539s
21 : Statistics :: Grounding time = 0.117201s, Solving time = 1.307001s, Total time = 1.424202s
22 : Statistics :: Grounding time = 0.120338s, Solving time = 2.271229s, Total time = 2.391567s
23 : Statistics :: Grounding time = 0.196552s, Solving time = 3.349970s, Total time = 3.546522s
24 : Statistics :: Grounding time = 0.128506s, Solving time = 3.981800s, Total time = 4.110306s
25 : Statistics :: Grounding time = 0.127499s, Solving time = 0.972900s, Total time = 1.100399s

[16-02-2021_16-37-53] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 3.095011s, Solving time = 14.501883s, Total time = 17.824157s
Model :: Total atoms = 14765, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-37-53] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,configure(manipulator_limb_2,extended),35)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),36)
occurs(1,talos,release(manipulator_end_2,(block,6)),37)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),38)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),39)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),40)
occurs(1,talos,release(manipulator_end_1,(block,5)),41)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),42)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),43)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),44)
occurs(1,talos,release(manipulator_end_2,(block,3)),45)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),46)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,1)),47)
occurs(1,talos,release(manipulator_end_1,(block,4)),48)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),49)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),51)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,2)),52)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),53)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),54)
occurs(1,talos,release(manipulator_end_2,(block,6)),55)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),56)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),57)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),58)
occurs(1,talos,release(manipulator_end_1,(block,5)),59)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),60)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),61)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),62)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),63)
occurs(1,talos,release(manipulator_end_2,(block,3)),64)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),65)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),66)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),67)
occurs(1,talos,release(manipulator_end_2,(block,2)),68)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),69)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),70)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),71)

[16-02-2021_16-37-53] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =    17.824157s : Steps =    71 : Actions =    71 |  
  ====================================================================  

[16-02-2021_16-37-53] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-37-53] INFO :: Experiment >> 

      ================================================      
            Experimental run 1 : Time 32.148764s            
      ================================================      

[16-02-2021_16-37-53] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-37-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-37-53] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-37-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-37-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-37-53] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Instantiated.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Program building started.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Program building completed.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding base program parts.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.013895s.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving base program parts.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.002135s.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Incremental solving started.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.039618s.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.005176s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.030680s.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.002912s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.030861s.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.003989s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.034910s.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.004916s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.035062s.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.005580s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.036258s.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.006271s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.038669s.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.006929s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.037441s.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.008443s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.042286s.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.011325s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.040215s.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.011970s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.042792s.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.014493s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.041102s.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.020271s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-37-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.041158s.

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.029788s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.045114s.

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.045616s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.045986s.

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.069235s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.079387s.

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.112920s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.080687s.

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.158792s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.083793s.

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.099606s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Incremental solving completed in 1.502469s because STOP_CON_REACHED.

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.839913s, Solving time = 0.620367s, Total time = 1.502469s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039618s, Solving time = 0.005176s, Total time = 0.044794s
2 : Statistics :: Grounding time = 0.030680s, Solving time = 0.002912s, Total time = 0.033592s
3 : Statistics :: Grounding time = 0.030861s, Solving time = 0.003989s, Total time = 0.034850s
4 : Statistics :: Grounding time = 0.034910s, Solving time = 0.004916s, Total time = 0.039826s
5 : Statistics :: Grounding time = 0.035062s, Solving time = 0.005580s, Total time = 0.040642s
6 : Statistics :: Grounding time = 0.036258s, Solving time = 0.006271s, Total time = 0.042528s
7 : Statistics :: Grounding time = 0.038669s, Solving time = 0.006929s, Total time = 0.045598s
8 : Statistics :: Grounding time = 0.037441s, Solving time = 0.008443s, Total time = 0.045885s
9 : Statistics :: Grounding time = 0.042286s, Solving time = 0.011325s, Total time = 0.053611s
10 : Statistics :: Grounding time = 0.040215s, Solving time = 0.011970s, Total time = 0.052184s
11 : Statistics :: Grounding time = 0.042792s, Solving time = 0.014493s, Total time = 0.057285s
12 : Statistics :: Grounding time = 0.041102s, Solving time = 0.020271s, Total time = 0.061373s
13 : Statistics :: Grounding time = 0.041158s, Solving time = 0.029788s, Total time = 0.070946s
14 : Statistics :: Grounding time = 0.045114s, Solving time = 0.045616s, Total time = 0.090730s
15 : Statistics :: Grounding time = 0.045986s, Solving time = 0.069235s, Total time = 0.115221s
16 : Statistics :: Grounding time = 0.079387s, Solving time = 0.112920s, Total time = 0.192306s
17 : Statistics :: Grounding time = 0.080687s, Solving time = 0.158792s, Total time = 0.239479s
18 : Statistics :: Grounding time = 0.083793s, Solving time = 0.099606s, Total time = 0.183399s

[16-02-2021_16-37-54] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.839913s, Solving time = 0.620367s, Total time = 1.502469s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-37-54] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_1,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),10)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[16-02-2021_16-37-54] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-37-54] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-37-54] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-37-54] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-37-54] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-37-54] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Instantiated.

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Program building started.

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Program building completed.

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding base program parts.

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.014871s.

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving base program parts.

[16-02-2021_16-37-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.001996s.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Incremental solving started.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.063676s.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.005997s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.047385s.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.004211s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.045650s.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.005029s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.045220s.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.006707s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.049221s.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.008147s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.050076s.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.008938s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.053330s.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.010166s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.052212s.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.009793s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.056068s.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.010968s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.054596s.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.010807s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.064325s.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.013385s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.059149s.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.015409s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.062657s.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.016131s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.060767s.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.018333s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-37-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.066139s.

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.018985s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.062948s.

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.020767s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.065495s.

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.029783s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.066550s.

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.034543s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.073658s.

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.046596s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.068885s.

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.071903s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.069511s.

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.107338s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.071522s.

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.106659s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.072833s.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.094102s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.073204s.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.126473s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.073812s.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.110432s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Incremental solving completed in 2.560634s because STOP_CON_REACHED.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.543762s, Solving time = 0.913597s, Total time = 2.560634s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.063676s, Solving time = 0.005997s, Total time = 0.069673s
2 : Statistics :: Grounding time = 0.047385s, Solving time = 0.004211s, Total time = 0.051596s
3 : Statistics :: Grounding time = 0.045650s, Solving time = 0.005029s, Total time = 0.050679s
4 : Statistics :: Grounding time = 0.045220s, Solving time = 0.006707s, Total time = 0.051927s
5 : Statistics :: Grounding time = 0.049221s, Solving time = 0.008147s, Total time = 0.057368s
6 : Statistics :: Grounding time = 0.050076s, Solving time = 0.008938s, Total time = 0.059015s
7 : Statistics :: Grounding time = 0.053330s, Solving time = 0.010166s, Total time = 0.063496s
8 : Statistics :: Grounding time = 0.052212s, Solving time = 0.009793s, Total time = 0.062005s
9 : Statistics :: Grounding time = 0.056068s, Solving time = 0.010968s, Total time = 0.067036s
10 : Statistics :: Grounding time = 0.054596s, Solving time = 0.010807s, Total time = 0.065403s
11 : Statistics :: Grounding time = 0.064325s, Solving time = 0.013385s, Total time = 0.077711s
12 : Statistics :: Grounding time = 0.059149s, Solving time = 0.015409s, Total time = 0.074558s
13 : Statistics :: Grounding time = 0.062657s, Solving time = 0.016131s, Total time = 0.078787s
14 : Statistics :: Grounding time = 0.060767s, Solving time = 0.018333s, Total time = 0.079100s
15 : Statistics :: Grounding time = 0.066139s, Solving time = 0.018985s, Total time = 0.085124s
16 : Statistics :: Grounding time = 0.062948s, Solving time = 0.020767s, Total time = 0.083715s
17 : Statistics :: Grounding time = 0.065495s, Solving time = 0.029783s, Total time = 0.095278s
18 : Statistics :: Grounding time = 0.066550s, Solving time = 0.034543s, Total time = 0.101093s
19 : Statistics :: Grounding time = 0.073658s, Solving time = 0.046596s, Total time = 0.120254s
20 : Statistics :: Grounding time = 0.068885s, Solving time = 0.071903s, Total time = 0.140788s
21 : Statistics :: Grounding time = 0.069511s, Solving time = 0.107338s, Total time = 0.176849s
22 : Statistics :: Grounding time = 0.071522s, Solving time = 0.106659s, Total time = 0.178181s
23 : Statistics :: Grounding time = 0.072833s, Solving time = 0.094102s, Total time = 0.166935s
24 : Statistics :: Grounding time = 0.073204s, Solving time = 0.126473s, Total time = 0.199677s
25 : Statistics :: Grounding time = 0.073812s, Solving time = 0.110432s, Total time = 0.184244s

[16-02-2021_16-37-57] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.543762s, Solving time = 0.913597s, Total time = 2.560634s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-37-57] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),13)
occurs(2,talos,configure(manipulator_arm_2,retracted),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_1,(block,5)),25)

[16-02-2021_16-37-57] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-37-57] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-37-57] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-37-57] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-37-57] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-37-57] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Instantiated.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Program building started.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Program building completed.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding base program parts.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.016760s.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving base program parts.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.002481s.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Incremental solving started.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.184583s.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.008156s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.063570s.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.005349s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.071391s.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.007059s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.067621s.

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.010340s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.068352s.

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.012198s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.072084s.

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.013255s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.075362s.

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.014275s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.077925s.

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.015191s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.083996s.

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.015824s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.086587s.

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.016390s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.080569s.

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.017724s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.083060s.

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.017829s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.092263s.

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.021348s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.092078s.

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.024389s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.086434s.

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.025351s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.086877s.

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.027401s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.090088s.

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.067954s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.090239s.

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.035831s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.087904s.

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.032494s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.089823s.

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.054027s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.096986s.

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.067324s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.091201s.

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Model found:
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.069286s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Incremental solving completed in 2.622056s because STOP_CON_REACHED.

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.935753s, Solving time = 0.581476s, Total time = 2.622056s
Final Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.184583s, Solving time = 0.008156s, Total time = 0.192739s
2 : Statistics :: Grounding time = 0.063570s, Solving time = 0.005349s, Total time = 0.068919s
3 : Statistics :: Grounding time = 0.071391s, Solving time = 0.007059s, Total time = 0.078450s
4 : Statistics :: Grounding time = 0.067621s, Solving time = 0.010340s, Total time = 0.077962s
5 : Statistics :: Grounding time = 0.068352s, Solving time = 0.012198s, Total time = 0.080551s
6 : Statistics :: Grounding time = 0.072084s, Solving time = 0.013255s, Total time = 0.085339s
7 : Statistics :: Grounding time = 0.075362s, Solving time = 0.014275s, Total time = 0.089637s
8 : Statistics :: Grounding time = 0.077925s, Solving time = 0.015191s, Total time = 0.093116s
9 : Statistics :: Grounding time = 0.083996s, Solving time = 0.015824s, Total time = 0.099820s
10 : Statistics :: Grounding time = 0.086587s, Solving time = 0.016390s, Total time = 0.102977s
11 : Statistics :: Grounding time = 0.080569s, Solving time = 0.017724s, Total time = 0.098293s
12 : Statistics :: Grounding time = 0.083060s, Solving time = 0.017829s, Total time = 0.100888s
13 : Statistics :: Grounding time = 0.092263s, Solving time = 0.021348s, Total time = 0.113611s
14 : Statistics :: Grounding time = 0.092078s, Solving time = 0.024389s, Total time = 0.116467s
15 : Statistics :: Grounding time = 0.086434s, Solving time = 0.025351s, Total time = 0.111785s
16 : Statistics :: Grounding time = 0.086877s, Solving time = 0.027401s, Total time = 0.114278s
17 : Statistics :: Grounding time = 0.090088s, Solving time = 0.067954s, Total time = 0.158042s
18 : Statistics :: Grounding time = 0.090239s, Solving time = 0.035831s, Total time = 0.126070s
19 : Statistics :: Grounding time = 0.087904s, Solving time = 0.032494s, Total time = 0.120398s
20 : Statistics :: Grounding time = 0.089823s, Solving time = 0.054027s, Total time = 0.143849s
21 : Statistics :: Grounding time = 0.096986s, Solving time = 0.067324s, Total time = 0.164310s
22 : Statistics :: Grounding time = 0.091201s, Solving time = 0.069286s, Total time = 0.160487s

[16-02-2021_16-38-00] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.935753s, Solving time = 0.581476s, Total time = 2.622056s
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-38-00] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)

[16-02-2021_16-38-00] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.502469s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.560634s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     2.622056s : Steps =    22 : Actions =    22 |  
  ====================================================================  

[16-02-2021_16-38-00] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-38-00] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-38-00] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-38-00] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-38-00] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-38-00] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-38-00] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-38-00] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Instantiated.

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> The logic program was extended with 22 rules into program part plan_module(step, start).

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> The logic program was extended with 3656 rules into program part state_module(step).

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=22, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 22], range_=IncRange(start=22, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 22, Max end step = None
Step inc = 1, Step inc init = 24, Stop con = StopCondition.Satisfiable

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Program building started.

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Program building completed.

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding base program parts.

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.022834s.

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving base program parts.

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.003396s.

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Incremental solving started.

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [1]:
Current step bound = 23
End step min = 22
End step max = None

[16-02-2021_16-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [23]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 22]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 22]), ('conformance_module', [23])].

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.320008s.

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.034013s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [2]:
Current step bound = 24
End step min = 22
End step max = None

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 22]), ('conformance_module', [24])].

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.072529s.

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.006978s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [3]:
Current step bound = 25
End step min = 22
End step max = None

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 22]), ('conformance_module', [25])].

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.069327s.

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.008477s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [4]:
Current step bound = 26
End step min = 22
End step max = None

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 22]), ('conformance_module', [26])].

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.072716s.

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.010315s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [5]:
Current step bound = 27
End step min = 22
End step max = None

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 22]), ('conformance_module', [27])].

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.072574s.

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.012554s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [6]:
Current step bound = 28
End step min = 22
End step max = None

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 22]), ('conformance_module', [28])].

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.077091s.

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.015699s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [7]:
Current step bound = 29
End step min = 22
End step max = None

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 22]), ('conformance_module', [29])].

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.085813s.

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.015612s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [8]:
Current step bound = 30
End step min = 22
End step max = None

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 22]), ('conformance_module', [30])].

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.082706s.

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.017367s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [9]:
Current step bound = 31
End step min = 22
End step max = None

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 22]), ('conformance_module', [31])].

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.084641s.

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.017543s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [10]:
Current step bound = 32
End step min = 22
End step max = None

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 22]), ('conformance_module', [32])].

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.086106s.

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.018785s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [11]:
Current step bound = 33
End step min = 22
End step max = None

[16-02-2021_16-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 22]), ('conformance_module', [33])].

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.093413s.

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.019346s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [12]:
Current step bound = 34
End step min = 22
End step max = None

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 22]), ('conformance_module', [34])].

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.089307s.

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.020383s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [13]:
Current step bound = 35
End step min = 22
End step max = None

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 22]), ('conformance_module', [35])].

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.090587s.

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.020449s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [14]:
Current step bound = 36
End step min = 22
End step max = None

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 22]), ('conformance_module', [36])].

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.091896s.

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.022556s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [15]:
Current step bound = 37
End step min = 22
End step max = None

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 22]), ('conformance_module', [37])].

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.092950s.

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.021094s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [16]:
Current step bound = 38
End step min = 22
End step max = None

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 22]), ('conformance_module', [38])].

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.094941s.

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.023118s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [17]:
Current step bound = 39
End step min = 22
End step max = None

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 22]), ('conformance_module', [39])].

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.117482s.

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.032169s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [18]:
Current step bound = 40
End step min = 22
End step max = None

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 22]), ('conformance_module', [40])].

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.098326s.

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.034432s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [19]:
Current step bound = 41
End step min = 22
End step max = None

[16-02-2021_16-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 22]), ('conformance_module', [41])].

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.106587s.

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.062167s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [20]:
Current step bound = 42
End step min = 22
End step max = None

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 22]), ('conformance_module', [42])].

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.100575s.

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.072713s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [21]:
Current step bound = 43
End step min = 22
End step max = None

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 22]), ('conformance_module', [43])].

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.099894s.

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.085525s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [22]:
Current step bound = 44
End step min = 22
End step max = None

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 22]), ('conformance_module', [44])].

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.101198s.

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.137373s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [23]:
Current step bound = 45
End step min = 22
End step max = None

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 22]), ('conformance_module', [45])].

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.101622s.

[16-02-2021_16-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.177251s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [24]:
Current step bound = 46
End step min = 22
End step max = None

[16-02-2021_16-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 22]), ('conformance_module', [46])].

[16-02-2021_16-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.106415s.

[16-02-2021_16-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.216516s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [25]:
Current step bound = 47
End step min = 22
End step max = None

[16-02-2021_16-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 22]), ('conformance_module', [47])].

[16-02-2021_16-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.104401s.

[16-02-2021_16-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[16-02-2021_16-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Model found:
Model :: Total atoms = 10448, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.120965s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Incremental solving completed in 3.912668s because STOP_CON_REACHED.

[16-02-2021_16-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.535940s, Solving time = 1.226796s, Total time = 3.912668s
Final Model :: Total atoms = 10448, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.320008s, Solving time = 0.034013s, Total time = 0.354021s
2 : Statistics :: Grounding time = 0.072529s, Solving time = 0.006978s, Total time = 0.079507s
3 : Statistics :: Grounding time = 0.069327s, Solving time = 0.008477s, Total time = 0.077805s
4 : Statistics :: Grounding time = 0.072716s, Solving time = 0.010315s, Total time = 0.083031s
5 : Statistics :: Grounding time = 0.072574s, Solving time = 0.012554s, Total time = 0.085128s
6 : Statistics :: Grounding time = 0.077091s, Solving time = 0.015699s, Total time = 0.092791s
7 : Statistics :: Grounding time = 0.085813s, Solving time = 0.015612s, Total time = 0.101425s
8 : Statistics :: Grounding time = 0.082706s, Solving time = 0.017367s, Total time = 0.100073s
9 : Statistics :: Grounding time = 0.084641s, Solving time = 0.017543s, Total time = 0.102184s
10 : Statistics :: Grounding time = 0.086106s, Solving time = 0.018785s, Total time = 0.104891s
11 : Statistics :: Grounding time = 0.093413s, Solving time = 0.019346s, Total time = 0.112759s
12 : Statistics :: Grounding time = 0.089307s, Solving time = 0.020383s, Total time = 0.109690s
13 : Statistics :: Grounding time = 0.090587s, Solving time = 0.020449s, Total time = 0.111035s
14 : Statistics :: Grounding time = 0.091896s, Solving time = 0.022556s, Total time = 0.114452s
15 : Statistics :: Grounding time = 0.092950s, Solving time = 0.021094s, Total time = 0.114044s
16 : Statistics :: Grounding time = 0.094941s, Solving time = 0.023118s, Total time = 0.118059s
17 : Statistics :: Grounding time = 0.117482s, Solving time = 0.032169s, Total time = 0.149652s
18 : Statistics :: Grounding time = 0.098326s, Solving time = 0.034432s, Total time = 0.132758s
19 : Statistics :: Grounding time = 0.106587s, Solving time = 0.062167s, Total time = 0.168754s
20 : Statistics :: Grounding time = 0.100575s, Solving time = 0.072713s, Total time = 0.173288s
21 : Statistics :: Grounding time = 0.099894s, Solving time = 0.085525s, Total time = 0.185418s
22 : Statistics :: Grounding time = 0.101198s, Solving time = 0.137373s, Total time = 0.238572s
23 : Statistics :: Grounding time = 0.101622s, Solving time = 0.177251s, Total time = 0.278874s
24 : Statistics :: Grounding time = 0.106415s, Solving time = 0.216516s, Total time = 0.322931s
25 : Statistics :: Grounding time = 0.104401s, Solving time = 0.120965s, Total time = 0.225366s

[16-02-2021_16-38-04] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 2.535940s, Solving time = 1.226796s, Total time = 3.912668s
Model :: Total atoms = 10448, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-38-04] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,configure(manipulator_limb_1,retracted),24)
occurs(1,talos,move((store_room,0)),25)
occurs(1,talos,configure(manipulator_limb_1,extended),26)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),27)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,configure(manipulator_limb_2,extended),30)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),31)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),32)
occurs(1,talos,configure(manipulator_limb_2,retracted),33)
occurs(1,talos,move((store_room,1)),34)
occurs(1,talos,move((hallway,0)),35)
occurs(1,talos,move((hallway,1)),36)
occurs(1,talos,move((hallway,2)),37)
occurs(1,talos,move((puzzle_room,0)),38)
occurs(1,talos,move((puzzle_room,1)),39)
occurs(1,talos,configure(manipulator_limb_2,extended),40)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),41)
occurs(1,talos,configure(manipulator_limb_1,extended),42)
occurs(1,talos,release(manipulator_end_2,(block,6)),43)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),44)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),45)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),46)
occurs(1,talos,release(manipulator_end_1,(block,5)),47)

[16-02-2021_16-38-04] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     3.912668s : Steps =    47 : Actions =    47 |  
  ====================================================================  

[16-02-2021_16-38-04] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-38-04] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-38-04] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-38-04] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-38-04] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-38-04] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-38-04] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-38-04] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Instantiated.

[16-02-2021_16-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Program building started.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Program building completed.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding base program parts.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.021328s.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving base program parts.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.003085s.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Incremental solving started.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.135739s.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.019762s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.053536s.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.006160s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.058940s.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.008235s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.057226s.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.009561s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.059673s.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.010947s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.061321s.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.010988s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.064795s.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.011870s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.071977s.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.011370s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.065239s.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Model found:
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.015503s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Incremental solving completed in 0.778245s because STOP_CON_REACHED.

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.649774s, Solving time = 0.107482s, Total time = 0.778245s
Final Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.135739s, Solving time = 0.019762s, Total time = 0.155501s
2 : Statistics :: Grounding time = 0.053536s, Solving time = 0.006160s, Total time = 0.059696s
3 : Statistics :: Grounding time = 0.058940s, Solving time = 0.008235s, Total time = 0.067176s
4 : Statistics :: Grounding time = 0.057226s, Solving time = 0.009561s, Total time = 0.066788s
5 : Statistics :: Grounding time = 0.059673s, Solving time = 0.010947s, Total time = 0.070620s
6 : Statistics :: Grounding time = 0.061321s, Solving time = 0.010988s, Total time = 0.072308s
7 : Statistics :: Grounding time = 0.064795s, Solving time = 0.011870s, Total time = 0.076665s
8 : Statistics :: Grounding time = 0.071977s, Solving time = 0.011370s, Total time = 0.083347s
9 : Statistics :: Grounding time = 0.065239s, Solving time = 0.015503s, Total time = 0.080742s

[16-02-2021_16-38-05] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.649774s, Solving time = 0.107482s, Total time = 0.778245s
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-38-06] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),13)
occurs(2,talos,configure(manipulator_arm_2,retracted),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_1,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),26)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),27)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),28)
occurs(2,talos,release(manipulator_arm_2,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[16-02-2021_16-38-06] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-38-06] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-38-06] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-38-06] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-38-06] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-38-06] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-38-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Instantiated.

[16-02-2021_16-38-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-38-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-38-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> The logic program was extended with 47 rules into program part plan_module(step, start).

[16-02-2021_16-38-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> The logic program was extended with 7556 rules into program part state_module(step).

[16-02-2021_16-38-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=47, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 47], range_=IncRange(start=47, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 47, Max end step = None
Step inc = 1, Step inc init = 49, Stop con = StopCondition.Satisfiable

[16-02-2021_16-38-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Program building started.

[16-02-2021_16-38-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Program building completed.

[16-02-2021_16-38-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding base program parts.

[16-02-2021_16-38-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.031436s.

[16-02-2021_16-38-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving base program parts.

[16-02-2021_16-38-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.003550s.

[16-02-2021_16-38-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Incremental solving started.

[16-02-2021_16-38-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [1]:
Current step bound = 48
End step min = 47
End step max = None

[16-02-2021_16-38-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [48]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('state_module', [46]), ('conformance_module', [46]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 47]), ('conformance_module', [47]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 47]), ('conformance_module', [48])].

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.476202s.

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.059213s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [2]:
Current step bound = 49
End step min = 47
End step max = None

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 47]), ('conformance_module', [49])].

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.078793s.

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.009724s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [3]:
Current step bound = 50
End step min = 47
End step max = None

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 47]), ('conformance_module', [50])].

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.078697s.

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.012630s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [4]:
Current step bound = 51
End step min = 47
End step max = None

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 47]), ('conformance_module', [51])].

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.084331s.

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.015163s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [5]:
Current step bound = 52
End step min = 47
End step max = None

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 47]), ('conformance_module', [52])].

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.084153s.

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Model found:
Model :: Total atoms = 11079, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.018248s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Incremental solving completed in 0.970338s because STOP_CON_REACHED.

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.833612s, Solving time = 0.118528s, Total time = 0.970338s
Final Model :: Total atoms = 11079, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.476202s, Solving time = 0.059213s, Total time = 0.535414s
2 : Statistics :: Grounding time = 0.078793s, Solving time = 0.009724s, Total time = 0.088517s
3 : Statistics :: Grounding time = 0.078697s, Solving time = 0.012630s, Total time = 0.091328s
4 : Statistics :: Grounding time = 0.084331s, Solving time = 0.015163s, Total time = 0.099494s
5 : Statistics :: Grounding time = 0.084153s, Solving time = 0.018248s, Total time = 0.102400s

[16-02-2021_16-38-07] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.833612s, Solving time = 0.118528s, Total time = 0.970338s
Model :: Total atoms = 11079, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-38-07] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,configure(manipulator_limb_1,retracted),24)
occurs(1,talos,move((store_room,0)),25)
occurs(1,talos,configure(manipulator_limb_1,extended),26)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),27)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,configure(manipulator_limb_2,extended),30)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),31)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),32)
occurs(1,talos,configure(manipulator_limb_2,retracted),33)
occurs(1,talos,move((store_room,1)),34)
occurs(1,talos,move((hallway,0)),35)
occurs(1,talos,move((hallway,1)),36)
occurs(1,talos,move((hallway,2)),37)
occurs(1,talos,move((puzzle_room,0)),38)
occurs(1,talos,move((puzzle_room,1)),39)
occurs(1,talos,configure(manipulator_limb_2,extended),40)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),41)
occurs(1,talos,configure(manipulator_limb_1,extended),42)
occurs(1,talos,release(manipulator_end_2,(block,6)),43)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),44)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),45)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),46)
occurs(1,talos,release(manipulator_end_1,(block,5)),47)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),48)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),49)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),50)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),51)
occurs(1,talos,release(manipulator_end_2,(block,3)),52)

[16-02-2021_16-38-07] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.778245s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     0.970338s : Steps =    52 : Actions =    52 |  
  ====================================================================  

[16-02-2021_16-38-07] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-38-07] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-38-07] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-38-07] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-38-07] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-38-07] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-38-07] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-38-07] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Instantiated.

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> The logic program was extended with 52 rules into program part plan_module(step, start).

[16-02-2021_16-38-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> The logic program was extended with 8336 rules into program part state_module(step).

[16-02-2021_16-38-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=52, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 52], range_=IncRange(start=52, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 52, Max end step = None
Step inc = 1, Step inc init = 54, Stop con = StopCondition.Satisfiable

[16-02-2021_16-38-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Program building started.

[16-02-2021_16-38-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Program building completed.

[16-02-2021_16-38-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding base program parts.

[16-02-2021_16-38-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.031834s.

[16-02-2021_16-38-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving base program parts.

[16-02-2021_16-38-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.003357s.

[16-02-2021_16-38-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Incremental solving started.

[16-02-2021_16-38-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [1]:
Current step bound = 53
End step min = 52
End step max = None

[16-02-2021_16-38-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [53]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('state_module', [46]), ('conformance_module', [46]), ('state_module', [47]), ('conformance_module', [47]), ('state_module', [48]), ('conformance_module', [48]), ('state_module', [49]), ('conformance_module', [49]), ('state_module', [50]), ('conformance_module', [50]), ('state_module', [51]), ('conformance_module', [51]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 52]), ('conformance_module', [52]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 52]), ('conformance_module', [53])].

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.514574s.

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.066127s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [2]:
Current step bound = 54
End step min = 52
End step max = None

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 52]), ('conformance_module', [54])].

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.081485s.

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.009423s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [3]:
Current step bound = 55
End step min = 52
End step max = None

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 52]), ('conformance_module', [55])].

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.082675s.

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.013452s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [4]:
Current step bound = 56
End step min = 52
End step max = None

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 52]), ('conformance_module', [56])].

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.086414s.

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.016937s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [5]:
Current step bound = 57
End step min = 52
End step max = None

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 52]), ('conformance_module', [57])].

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.088856s.

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.016727s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [6]:
Current step bound = 58
End step min = 52
End step max = None

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 52]), ('conformance_module', [58])].

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.092670s.

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.017938s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [7]:
Current step bound = 59
End step min = 52
End step max = None

[16-02-2021_16-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 52]), ('conformance_module', [59])].

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.098927s.

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.021798s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [8]:
Current step bound = 60
End step min = 52
End step max = None

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 52]), ('conformance_module', [60])].

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.097987s.

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.023488s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [9]:
Current step bound = 61
End step min = 52
End step max = None

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 52]), ('conformance_module', [61])].

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.095697s.

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.026112s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [10]:
Current step bound = 62
End step min = 52
End step max = None

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 52]), ('conformance_module', [62])].

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.097358s.

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.032222s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [11]:
Current step bound = 63
End step min = 52
End step max = None

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 52]), ('conformance_module', [63])].

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.100449s.

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.036866s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [12]:
Current step bound = 64
End step min = 52
End step max = None

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 52]), ('conformance_module', [64])].

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.100411s.

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.049420s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [13]:
Current step bound = 65
End step min = 52
End step max = None

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 52]), ('conformance_module', [65])].

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.103875s.

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.043123s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [14]:
Current step bound = 66
End step min = 52
End step max = None

[16-02-2021_16-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 52]), ('conformance_module', [66])].

[16-02-2021_16-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.103640s.

[16-02-2021_16-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.051966s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [15]:
Current step bound = 67
End step min = 52
End step max = None

[16-02-2021_16-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 52]), ('conformance_module', [67])].

[16-02-2021_16-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.107638s.

[16-02-2021_16-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.066843s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [16]:
Current step bound = 68
End step min = 52
End step max = None

[16-02-2021_16-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 52]), ('conformance_module', [68])].

[16-02-2021_16-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.109001s.

[16-02-2021_16-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.134148s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [17]:
Current step bound = 69
End step min = 52
End step max = None

[16-02-2021_16-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 52]), ('conformance_module', [69])].

[16-02-2021_16-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.113930s.

[16-02-2021_16-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.255223s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [18]:
Current step bound = 70
End step min = 52
End step max = None

[16-02-2021_16-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 52]), ('conformance_module', [70])].

[16-02-2021_16-38-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.110344s.

[16-02-2021_16-38-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.412814s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [19]:
Current step bound = 71
End step min = 52
End step max = None

[16-02-2021_16-38-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 52]), ('conformance_module', [71])].

[16-02-2021_16-38-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.113229s.

[16-02-2021_16-38-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.691395s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [20]:
Current step bound = 72
End step min = 52
End step max = None

[16-02-2021_16-38-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [72]), ('domain_rules', [72]), ('state_module', [72]), ('plan_module', [72, 52]), ('conformance_module', [72])].

[16-02-2021_16-38-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.124274s.

[16-02-2021_16-38-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 1.119136s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [21]:
Current step bound = 73
End step min = 52
End step max = None

[16-02-2021_16-38-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [73]), ('domain_rules', [73]), ('state_module', [73]), ('plan_module', [73, 52]), ('conformance_module', [73])].

[16-02-2021_16-38-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.118130s.

[16-02-2021_16-38-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 1.726120s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [22]:
Current step bound = 74
End step min = 52
End step max = None

[16-02-2021_16-38-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [74]), ('domain_rules', [74]), ('state_module', [74]), ('plan_module', [74, 52]), ('conformance_module', [74])].

[16-02-2021_16-38-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.119192s.

[16-02-2021_16-38-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 2.091809s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [23]:
Current step bound = 75
End step min = 52
End step max = None

[16-02-2021_16-38-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [75]), ('domain_rules', [75]), ('state_module', [75]), ('plan_module', [75, 52]), ('conformance_module', [75])].

[16-02-2021_16-38-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.120200s.

[16-02-2021_16-38-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 3.421096s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [24]:
Current step bound = 76
End step min = 52
End step max = None

[16-02-2021_16-38-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [76]), ('domain_rules', [76]), ('state_module', [76]), ('plan_module', [76, 52]), ('conformance_module', [76])].

[16-02-2021_16-38-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.122587s.

[16-02-2021_16-38-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 4.671716s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [25]:
Current step bound = 77
End step min = 52
End step max = None

[16-02-2021_16-38-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [77]), ('domain_rules', [77]), ('state_module', [77]), ('plan_module', [77, 52]), ('conformance_module', [77])].

[16-02-2021_16-38-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.139056s.

[16-02-2021_16-38-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[16-02-2021_16-38-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Model found:
Model :: Total atoms = 15727, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-38-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.792846s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-38-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Incremental solving completed in 19.121508s because STOP_CON_REACHED.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 3.074434s, Solving time = 15.812103s, Total time = 19.121508s
Final Model :: Total atoms = 15727, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.514574s, Solving time = 0.066127s, Total time = 0.580701s
2 : Statistics :: Grounding time = 0.081485s, Solving time = 0.009423s, Total time = 0.090908s
3 : Statistics :: Grounding time = 0.082675s, Solving time = 0.013452s, Total time = 0.096127s
4 : Statistics :: Grounding time = 0.086414s, Solving time = 0.016937s, Total time = 0.103351s
5 : Statistics :: Grounding time = 0.088856s, Solving time = 0.016727s, Total time = 0.105583s
6 : Statistics :: Grounding time = 0.092670s, Solving time = 0.017938s, Total time = 0.110608s
7 : Statistics :: Grounding time = 0.098927s, Solving time = 0.021798s, Total time = 0.120724s
8 : Statistics :: Grounding time = 0.097987s, Solving time = 0.023488s, Total time = 0.121475s
9 : Statistics :: Grounding time = 0.095697s, Solving time = 0.026112s, Total time = 0.121809s
10 : Statistics :: Grounding time = 0.097358s, Solving time = 0.032222s, Total time = 0.129580s
11 : Statistics :: Grounding time = 0.100449s, Solving time = 0.036866s, Total time = 0.137315s
12 : Statistics :: Grounding time = 0.100411s, Solving time = 0.049420s, Total time = 0.149831s
13 : Statistics :: Grounding time = 0.103875s, Solving time = 0.043123s, Total time = 0.146998s
14 : Statistics :: Grounding time = 0.103640s, Solving time = 0.051966s, Total time = 0.155606s
15 : Statistics :: Grounding time = 0.107638s, Solving time = 0.066843s, Total time = 0.174481s
16 : Statistics :: Grounding time = 0.109001s, Solving time = 0.134148s, Total time = 0.243149s
17 : Statistics :: Grounding time = 0.113930s, Solving time = 0.255223s, Total time = 0.369153s
18 : Statistics :: Grounding time = 0.110344s, Solving time = 0.412814s, Total time = 0.523159s
19 : Statistics :: Grounding time = 0.113229s, Solving time = 0.691395s, Total time = 0.804624s
20 : Statistics :: Grounding time = 0.124274s, Solving time = 1.119136s, Total time = 1.243410s
21 : Statistics :: Grounding time = 0.118130s, Solving time = 1.726120s, Total time = 1.844250s
22 : Statistics :: Grounding time = 0.119192s, Solving time = 2.091809s, Total time = 2.211001s
23 : Statistics :: Grounding time = 0.120200s, Solving time = 3.421096s, Total time = 3.541296s
24 : Statistics :: Grounding time = 0.122587s, Solving time = 4.671716s, Total time = 4.794303s
25 : Statistics :: Grounding time = 0.139056s, Solving time = 0.792846s, Total time = 0.931902s

[16-02-2021_16-38-28] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 3.074434s, Solving time = 15.812103s, Total time = 19.121508s
Model :: Total atoms = 15727, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-38-28] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,configure(manipulator_limb_1,retracted),24)
occurs(1,talos,move((store_room,0)),25)
occurs(1,talos,configure(manipulator_limb_1,extended),26)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),27)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,configure(manipulator_limb_2,extended),30)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),31)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),32)
occurs(1,talos,configure(manipulator_limb_2,retracted),33)
occurs(1,talos,move((store_room,1)),34)
occurs(1,talos,move((hallway,0)),35)
occurs(1,talos,move((hallway,1)),36)
occurs(1,talos,move((hallway,2)),37)
occurs(1,talos,move((puzzle_room,0)),38)
occurs(1,talos,move((puzzle_room,1)),39)
occurs(1,talos,configure(manipulator_limb_2,extended),40)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),41)
occurs(1,talos,configure(manipulator_limb_1,extended),42)
occurs(1,talos,release(manipulator_end_2,(block,6)),43)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),44)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),45)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),46)
occurs(1,talos,release(manipulator_end_1,(block,5)),47)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),48)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),49)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),50)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),51)
occurs(1,talos,release(manipulator_end_2,(block,3)),52)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),53)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,1)),54)
occurs(1,talos,release(manipulator_end_1,(block,4)),55)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),56)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),57)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,2)),58)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),59)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),60)
occurs(1,talos,release(manipulator_end_2,(block,6)),61)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),62)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),63)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),64)
occurs(1,talos,release(manipulator_end_1,(block,5)),65)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),66)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),67)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),68)
occurs(1,talos,release(manipulator_end_2,(block,3)),69)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),70)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),71)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),72)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),73)
occurs(1,talos,release(manipulator_end_2,(block,2)),74)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),75)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),76)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),77)

[16-02-2021_16-38-28] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =    19.121508s : Steps =    77 : Actions =    77 |  
  ====================================================================  

[16-02-2021_16-38-28] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-38-28] INFO :: Experiment >> 

      ================================================      
            Experimental run 2 : Time 34.833862s            
      ================================================      

[16-02-2021_16-38-28] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-38-28] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-38-28] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-38-28] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-38-28] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-38-28] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Instantiated.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Program building started.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Program building completed.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding base program parts.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.013827s.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving base program parts.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.002856s.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Incremental solving started.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.040100s.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.004996s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.033002s.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.003594s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.030985s.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.004480s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.035479s.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.005712s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.034569s.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.005809s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.036364s.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.006555s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.038565s.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.006962s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.037509s.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.008775s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.038415s.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.011947s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.040562s.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.011609s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.039409s.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.013788s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.041424s.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.021958s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.040982s.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.031353s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.042326s.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.046655s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-38-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.043032s.

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.056565s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.081392s.

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.092747s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.085227s.

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.197820s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.083662s.

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.199969s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Incremental solving completed in 1.614686s because STOP_CON_REACHED.

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.836832s, Solving time = 0.734150s, Total time = 1.614686s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.040100s, Solving time = 0.004996s, Total time = 0.045096s
2 : Statistics :: Grounding time = 0.033002s, Solving time = 0.003594s, Total time = 0.036596s
3 : Statistics :: Grounding time = 0.030985s, Solving time = 0.004480s, Total time = 0.035465s
4 : Statistics :: Grounding time = 0.035479s, Solving time = 0.005712s, Total time = 0.041190s
5 : Statistics :: Grounding time = 0.034569s, Solving time = 0.005809s, Total time = 0.040378s
6 : Statistics :: Grounding time = 0.036364s, Solving time = 0.006555s, Total time = 0.042919s
7 : Statistics :: Grounding time = 0.038565s, Solving time = 0.006962s, Total time = 0.045527s
8 : Statistics :: Grounding time = 0.037509s, Solving time = 0.008775s, Total time = 0.046285s
9 : Statistics :: Grounding time = 0.038415s, Solving time = 0.011947s, Total time = 0.050361s
10 : Statistics :: Grounding time = 0.040562s, Solving time = 0.011609s, Total time = 0.052171s
11 : Statistics :: Grounding time = 0.039409s, Solving time = 0.013788s, Total time = 0.053198s
12 : Statistics :: Grounding time = 0.041424s, Solving time = 0.021958s, Total time = 0.063382s
13 : Statistics :: Grounding time = 0.040982s, Solving time = 0.031353s, Total time = 0.072335s
14 : Statistics :: Grounding time = 0.042326s, Solving time = 0.046655s, Total time = 0.088981s
15 : Statistics :: Grounding time = 0.043032s, Solving time = 0.056565s, Total time = 0.099597s
16 : Statistics :: Grounding time = 0.081392s, Solving time = 0.092747s, Total time = 0.174139s
17 : Statistics :: Grounding time = 0.085227s, Solving time = 0.197820s, Total time = 0.283047s
18 : Statistics :: Grounding time = 0.083662s, Solving time = 0.199969s, Total time = 0.283630s

[16-02-2021_16-38-29] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.836832s, Solving time = 0.734150s, Total time = 1.614686s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-38-29] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[16-02-2021_16-38-29] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-38-29] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-38-29] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-38-29] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-38-29] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-38-29] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Instantiated.

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Program building started.

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Program building completed.

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding base program parts.

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.015006s.

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving base program parts.

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.001891s.

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Incremental solving started.

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.068197s.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.005784s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.047440s.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.004309s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.049896s.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.005030s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.045048s.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.006840s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.049019s.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.008335s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.049677s.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.008999s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.053255s.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.010058s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.053883s.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.010450s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.056384s.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.011461s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.057174s.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.010776s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.058530s.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.013301s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.060506s.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.015875s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.062242s.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.017785s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.061676s.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.019384s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.063057s.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.020001s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.065743s.

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.021781s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.065605s.

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.027814s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.065925s.

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.030089s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.068188s.

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.040974s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.073929s.

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.061011s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.074925s.

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.072398s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.071827s.

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.086720s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.072191s.

[16-02-2021_16-38-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.114984s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.075732s.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.111384s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.074313s.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.146048s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Incremental solving completed in 2.541085s because STOP_CON_REACHED.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.559366s, Solving time = 0.883481s, Total time = 2.541085s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.068197s, Solving time = 0.005784s, Total time = 0.073981s
2 : Statistics :: Grounding time = 0.047440s, Solving time = 0.004309s, Total time = 0.051749s
3 : Statistics :: Grounding time = 0.049896s, Solving time = 0.005030s, Total time = 0.054926s
4 : Statistics :: Grounding time = 0.045048s, Solving time = 0.006840s, Total time = 0.051888s
5 : Statistics :: Grounding time = 0.049019s, Solving time = 0.008335s, Total time = 0.057354s
6 : Statistics :: Grounding time = 0.049677s, Solving time = 0.008999s, Total time = 0.058677s
7 : Statistics :: Grounding time = 0.053255s, Solving time = 0.010058s, Total time = 0.063313s
8 : Statistics :: Grounding time = 0.053883s, Solving time = 0.010450s, Total time = 0.064333s
9 : Statistics :: Grounding time = 0.056384s, Solving time = 0.011461s, Total time = 0.067845s
10 : Statistics :: Grounding time = 0.057174s, Solving time = 0.010776s, Total time = 0.067950s
11 : Statistics :: Grounding time = 0.058530s, Solving time = 0.013301s, Total time = 0.071831s
12 : Statistics :: Grounding time = 0.060506s, Solving time = 0.015875s, Total time = 0.076380s
13 : Statistics :: Grounding time = 0.062242s, Solving time = 0.017785s, Total time = 0.080027s
14 : Statistics :: Grounding time = 0.061676s, Solving time = 0.019384s, Total time = 0.081060s
15 : Statistics :: Grounding time = 0.063057s, Solving time = 0.020001s, Total time = 0.083058s
16 : Statistics :: Grounding time = 0.065743s, Solving time = 0.021781s, Total time = 0.087523s
17 : Statistics :: Grounding time = 0.065605s, Solving time = 0.027814s, Total time = 0.093419s
18 : Statistics :: Grounding time = 0.065925s, Solving time = 0.030089s, Total time = 0.096014s
19 : Statistics :: Grounding time = 0.068188s, Solving time = 0.040974s, Total time = 0.109161s
20 : Statistics :: Grounding time = 0.073929s, Solving time = 0.061011s, Total time = 0.134940s
21 : Statistics :: Grounding time = 0.074925s, Solving time = 0.072398s, Total time = 0.147323s
22 : Statistics :: Grounding time = 0.071827s, Solving time = 0.086720s, Total time = 0.158547s
23 : Statistics :: Grounding time = 0.072191s, Solving time = 0.114984s, Total time = 0.187175s
24 : Statistics :: Grounding time = 0.075732s, Solving time = 0.111384s, Total time = 0.187116s
25 : Statistics :: Grounding time = 0.074313s, Solving time = 0.146048s, Total time = 0.220361s

[16-02-2021_16-38-32] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.559366s, Solving time = 0.883481s, Total time = 2.541085s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-38-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_2,retracted),13)
occurs(2,talos,configure(manipulator_arm_1,extended),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_2,(block,5)),25)

[16-02-2021_16-38-32] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-38-32] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-38-32] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-38-32] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-38-32] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-38-32] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Instantiated.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Program building started.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Program building completed.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding base program parts.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.017040s.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving base program parts.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.002818s.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Incremental solving started.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.183333s.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.009075s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.063260s.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.006022s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.063097s.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.007180s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.067208s.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.010309s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-38-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.069239s.

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.015529s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.077292s.

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.013636s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.073640s.

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.014497s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.076953s.

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.015515s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.077614s.

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.016553s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.079131s.

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.017056s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.080062s.

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.017781s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.082939s.

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.018453s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.083252s.

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.021678s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.085168s.

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.024899s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-38-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.089001s.

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.026756s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.088773s.

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.026674s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.089465s.

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.033151s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.090514s.

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.039924s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.092701s.

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.063380s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.093231s.

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.070691s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.094431s.

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.056664s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.096275s.

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Model found:
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.098995s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Incremental solving completed in 2.645454s because STOP_CON_REACHED.

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.913619s, Solving time = 0.627232s, Total time = 2.645454s
Final Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.183333s, Solving time = 0.009075s, Total time = 0.192408s
2 : Statistics :: Grounding time = 0.063260s, Solving time = 0.006022s, Total time = 0.069282s
3 : Statistics :: Grounding time = 0.063097s, Solving time = 0.007180s, Total time = 0.070277s
4 : Statistics :: Grounding time = 0.067208s, Solving time = 0.010309s, Total time = 0.077517s
5 : Statistics :: Grounding time = 0.069239s, Solving time = 0.015529s, Total time = 0.084768s
6 : Statistics :: Grounding time = 0.077292s, Solving time = 0.013636s, Total time = 0.090927s
7 : Statistics :: Grounding time = 0.073640s, Solving time = 0.014497s, Total time = 0.088137s
8 : Statistics :: Grounding time = 0.076953s, Solving time = 0.015515s, Total time = 0.092468s
9 : Statistics :: Grounding time = 0.077614s, Solving time = 0.016553s, Total time = 0.094167s
10 : Statistics :: Grounding time = 0.079131s, Solving time = 0.017056s, Total time = 0.096187s
11 : Statistics :: Grounding time = 0.080062s, Solving time = 0.017781s, Total time = 0.097842s
12 : Statistics :: Grounding time = 0.082939s, Solving time = 0.018453s, Total time = 0.101392s
13 : Statistics :: Grounding time = 0.083252s, Solving time = 0.021678s, Total time = 0.104929s
14 : Statistics :: Grounding time = 0.085168s, Solving time = 0.024899s, Total time = 0.110067s
15 : Statistics :: Grounding time = 0.089001s, Solving time = 0.026756s, Total time = 0.115757s
16 : Statistics :: Grounding time = 0.088773s, Solving time = 0.026674s, Total time = 0.115447s
17 : Statistics :: Grounding time = 0.089465s, Solving time = 0.033151s, Total time = 0.122615s
18 : Statistics :: Grounding time = 0.090514s, Solving time = 0.039924s, Total time = 0.130438s
19 : Statistics :: Grounding time = 0.092701s, Solving time = 0.063380s, Total time = 0.156081s
20 : Statistics :: Grounding time = 0.093231s, Solving time = 0.070691s, Total time = 0.163922s
21 : Statistics :: Grounding time = 0.094431s, Solving time = 0.056664s, Total time = 0.151095s
22 : Statistics :: Grounding time = 0.096275s, Solving time = 0.098995s, Total time = 0.195270s

[16-02-2021_16-38-35] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.913619s, Solving time = 0.627232s, Total time = 2.645454s
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-38-35] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),22)

[16-02-2021_16-38-35] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.614686s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.541085s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     2.645454s : Steps =    22 : Actions =    22 |  
  ====================================================================  

[16-02-2021_16-38-35] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-38-35] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-38-35] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-38-35] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-38-35] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-38-35] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-38-35] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-38-35] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Instantiated.

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> The logic program was extended with 22 rules into program part plan_module(step, start).

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> The logic program was extended with 3656 rules into program part state_module(step).

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=22, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 22], range_=IncRange(start=22, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 22, Max end step = None
Step inc = 1, Step inc init = 24, Stop con = StopCondition.Satisfiable

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Program building started.

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Program building completed.

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding base program parts.

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.023264s.

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving base program parts.

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.003813s.

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Incremental solving started.

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [1]:
Current step bound = 23
End step min = 22
End step max = None

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [23]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 22]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 22]), ('conformance_module', [23])].

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.315607s.

[16-02-2021_16-38-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.032370s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [2]:
Current step bound = 24
End step min = 22
End step max = None

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 22]), ('conformance_module', [24])].

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.075958s.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.006610s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [3]:
Current step bound = 25
End step min = 22
End step max = None

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 22]), ('conformance_module', [25])].

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.069818s.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.008510s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [4]:
Current step bound = 26
End step min = 22
End step max = None

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 22]), ('conformance_module', [26])].

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.071928s.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.010204s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [5]:
Current step bound = 27
End step min = 22
End step max = None

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 22]), ('conformance_module', [27])].

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.073546s.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.012871s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [6]:
Current step bound = 28
End step min = 22
End step max = None

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 22]), ('conformance_module', [28])].

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.081730s.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.014503s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [7]:
Current step bound = 29
End step min = 22
End step max = None

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 22]), ('conformance_module', [29])].

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.077233s.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.015166s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [8]:
Current step bound = 30
End step min = 22
End step max = None

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 22]), ('conformance_module', [30])].

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.083378s.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.016560s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [9]:
Current step bound = 31
End step min = 22
End step max = None

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 22]), ('conformance_module', [31])].

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.083782s.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.016796s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [10]:
Current step bound = 32
End step min = 22
End step max = None

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 22]), ('conformance_module', [32])].

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.086236s.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.018827s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [11]:
Current step bound = 33
End step min = 22
End step max = None

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 22]), ('conformance_module', [33])].

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.087291s.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.018677s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [12]:
Current step bound = 34
End step min = 22
End step max = None

[16-02-2021_16-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 22]), ('conformance_module', [34])].

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.088951s.

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.019597s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [13]:
Current step bound = 35
End step min = 22
End step max = None

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 22]), ('conformance_module', [35])].

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.093832s.

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.022200s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [14]:
Current step bound = 36
End step min = 22
End step max = None

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 22]), ('conformance_module', [36])].

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.091302s.

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.027226s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [15]:
Current step bound = 37
End step min = 22
End step max = None

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 22]), ('conformance_module', [37])].

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.093760s.

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.032534s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [16]:
Current step bound = 38
End step min = 22
End step max = None

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 22]), ('conformance_module', [38])].

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.094645s.

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.039890s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [17]:
Current step bound = 39
End step min = 22
End step max = None

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 22]), ('conformance_module', [39])].

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.095721s.

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.052645s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [18]:
Current step bound = 40
End step min = 22
End step max = None

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 22]), ('conformance_module', [40])].

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.096442s.

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.064787s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [19]:
Current step bound = 41
End step min = 22
End step max = None

[16-02-2021_16-38-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 22]), ('conformance_module', [41])].

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.098200s.

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Model found:
Model :: Total atoms = 9422, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.082756s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Incremental solving completed in 2.491895s because STOP_CON_REACHED.

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.882625s, Solving time = 0.516545s, Total time = 2.491895s
Final Model :: Total atoms = 9422, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.315607s, Solving time = 0.032370s, Total time = 0.347977s
2 : Statistics :: Grounding time = 0.075958s, Solving time = 0.006610s, Total time = 0.082568s
3 : Statistics :: Grounding time = 0.069818s, Solving time = 0.008510s, Total time = 0.078328s
4 : Statistics :: Grounding time = 0.071928s, Solving time = 0.010204s, Total time = 0.082132s
5 : Statistics :: Grounding time = 0.073546s, Solving time = 0.012871s, Total time = 0.086418s
6 : Statistics :: Grounding time = 0.081730s, Solving time = 0.014503s, Total time = 0.096233s
7 : Statistics :: Grounding time = 0.077233s, Solving time = 0.015166s, Total time = 0.092400s
8 : Statistics :: Grounding time = 0.083378s, Solving time = 0.016560s, Total time = 0.099939s
9 : Statistics :: Grounding time = 0.083782s, Solving time = 0.016796s, Total time = 0.100578s
10 : Statistics :: Grounding time = 0.086236s, Solving time = 0.018827s, Total time = 0.105064s
11 : Statistics :: Grounding time = 0.087291s, Solving time = 0.018677s, Total time = 0.105967s
12 : Statistics :: Grounding time = 0.088951s, Solving time = 0.019597s, Total time = 0.108547s
13 : Statistics :: Grounding time = 0.093832s, Solving time = 0.022200s, Total time = 0.116032s
14 : Statistics :: Grounding time = 0.091302s, Solving time = 0.027226s, Total time = 0.118529s
15 : Statistics :: Grounding time = 0.093760s, Solving time = 0.032534s, Total time = 0.126294s
16 : Statistics :: Grounding time = 0.094645s, Solving time = 0.039890s, Total time = 0.134535s
17 : Statistics :: Grounding time = 0.095721s, Solving time = 0.052645s, Total time = 0.148366s
18 : Statistics :: Grounding time = 0.096442s, Solving time = 0.064787s, Total time = 0.161230s
19 : Statistics :: Grounding time = 0.098200s, Solving time = 0.082756s, Total time = 0.180956s

[16-02-2021_16-38-38] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.882625s, Solving time = 0.516545s, Total time = 2.491895s
Model :: Total atoms = 9422, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-38-38] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,configure(manipulator_limb_2,retracted),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),38)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),39)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),40)
occurs(1,talos,release(manipulator_end_2,(block,5)),41)

[16-02-2021_16-38-38] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     2.491895s : Steps =    41 : Actions =    41 |  
  ====================================================================  

[16-02-2021_16-38-38] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-38-38] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-38-38] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-38-38] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-38-38] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-38-38] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-38-38] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-38-38] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Instantiated.

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Program building started.

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Program building completed.

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding base program parts.

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.021671s.

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving base program parts.

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.002944s.

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Incremental solving started.

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.134410s.

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.019378s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.055990s.

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.006668s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.058145s.

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.008208s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.058397s.

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.009726s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.058649s.

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.013892s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.062521s.

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.011358s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.061315s.

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.011936s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.063570s.

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.011989s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.064532s.

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Model found:
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.016605s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Incremental solving completed in 0.825846s because STOP_CON_REACHED.

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.639199s, Solving time = 0.112703s, Total time = 0.825846s
Final Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.134410s, Solving time = 0.019378s, Total time = 0.153788s
2 : Statistics :: Grounding time = 0.055990s, Solving time = 0.006668s, Total time = 0.062658s
3 : Statistics :: Grounding time = 0.058145s, Solving time = 0.008208s, Total time = 0.066353s
4 : Statistics :: Grounding time = 0.058397s, Solving time = 0.009726s, Total time = 0.068123s
5 : Statistics :: Grounding time = 0.058649s, Solving time = 0.013892s, Total time = 0.072541s
6 : Statistics :: Grounding time = 0.062521s, Solving time = 0.011358s, Total time = 0.073879s
7 : Statistics :: Grounding time = 0.061315s, Solving time = 0.011936s, Total time = 0.073251s
8 : Statistics :: Grounding time = 0.063570s, Solving time = 0.011989s, Total time = 0.075559s
9 : Statistics :: Grounding time = 0.064532s, Solving time = 0.016605s, Total time = 0.081137s

[16-02-2021_16-38-39] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.639199s, Solving time = 0.112703s, Total time = 0.825846s
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-38-39] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_2,retracted),13)
occurs(2,talos,configure(manipulator_arm_1,extended),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_2,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),26)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),27)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),28)
occurs(2,talos,release(manipulator_arm_1,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[16-02-2021_16-38-39] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-38-39] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-38-39] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-38-39] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-38-39] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-38-39] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Instantiated.

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> The logic program was extended with 41 rules into program part plan_module(step, start).

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> The logic program was extended with 6620 rules into program part state_module(step).

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=41, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 41], range_=IncRange(start=41, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 41, Max end step = None
Step inc = 1, Step inc init = 43, Stop con = StopCondition.Satisfiable

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Program building started.

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Program building completed.

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding base program parts.

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.028261s.

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving base program parts.

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.002844s.

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Incremental solving started.

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [1]:
Current step bound = 42
End step min = 41
End step max = None

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [42]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 41]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 41]), ('conformance_module', [42])].

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.434569s.

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.052594s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [2]:
Current step bound = 43
End step min = 41
End step max = None

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 41]), ('conformance_module', [43])].

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.075771s.

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.008852s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [3]:
Current step bound = 44
End step min = 41
End step max = None

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 41]), ('conformance_module', [44])].

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.076671s.

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.012185s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [4]:
Current step bound = 45
End step min = 41
End step max = None

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 41]), ('conformance_module', [45])].

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.081396s.

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.014700s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [5]:
Current step bound = 46
End step min = 41
End step max = None

[16-02-2021_16-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 41]), ('conformance_module', [46])].

[16-02-2021_16-38-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.082910s.

[16-02-2021_16-38-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[16-02-2021_16-38-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Model found:
Model :: Total atoms = 10113, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-38-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.019649s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-38-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Incremental solving completed in 0.907740s because STOP_CON_REACHED.

[16-02-2021_16-38-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.779578s, Solving time = 0.110825s, Total time = 0.907740s
Final Model :: Total atoms = 10113, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-38-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.434569s, Solving time = 0.052594s, Total time = 0.487163s
2 : Statistics :: Grounding time = 0.075771s, Solving time = 0.008852s, Total time = 0.084623s
3 : Statistics :: Grounding time = 0.076671s, Solving time = 0.012185s, Total time = 0.088856s
4 : Statistics :: Grounding time = 0.081396s, Solving time = 0.014700s, Total time = 0.096096s
5 : Statistics :: Grounding time = 0.082910s, Solving time = 0.019649s, Total time = 0.102559s

[16-02-2021_16-38-41] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.779578s, Solving time = 0.110825s, Total time = 0.907740s
Model :: Total atoms = 10113, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-38-41] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,configure(manipulator_limb_2,retracted),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),38)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),39)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),40)
occurs(1,talos,release(manipulator_end_2,(block,5)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),43)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),44)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),45)
occurs(1,talos,release(manipulator_end_1,(block,3)),46)

[16-02-2021_16-38-41] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.825846s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     0.907740s : Steps =    46 : Actions =    46 |  
  ====================================================================  

[16-02-2021_16-38-41] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-38-41] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-38-41] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-38-41] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-38-41] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-38-41] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-38-41] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-38-41] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-38-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Instantiated.

[16-02-2021_16-38-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-38-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-38-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-38-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> The logic program was extended with 46 rules into program part plan_module(step, start).

[16-02-2021_16-38-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> The logic program was extended with 7400 rules into program part state_module(step).

[16-02-2021_16-38-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=46, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 46], range_=IncRange(start=46, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 46, Max end step = None
Step inc = 1, Step inc init = 48, Stop con = StopCondition.Satisfiable

[16-02-2021_16-38-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Program building started.

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Program building completed.

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding base program parts.

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.029875s.

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving base program parts.

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.003555s.

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Incremental solving started.

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [1]:
Current step bound = 47
End step min = 46
End step max = None

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [47]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 46]), ('conformance_module', [46]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 46]), ('conformance_module', [47])].

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.471637s.

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.057846s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [2]:
Current step bound = 48
End step min = 46
End step max = None

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 46]), ('conformance_module', [48])].

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.078621s.

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.009215s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [3]:
Current step bound = 49
End step min = 46
End step max = None

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 46]), ('conformance_module', [49])].

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.079120s.

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.013543s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [4]:
Current step bound = 50
End step min = 46
End step max = None

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 46]), ('conformance_module', [50])].

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.084806s.

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.016760s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [5]:
Current step bound = 51
End step min = 46
End step max = None

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 46]), ('conformance_module', [51])].

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.086833s.

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.015888s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [6]:
Current step bound = 52
End step min = 46
End step max = None

[16-02-2021_16-38-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 46]), ('conformance_module', [52])].

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.089881s.

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.018189s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [7]:
Current step bound = 53
End step min = 46
End step max = None

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 46]), ('conformance_module', [53])].

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.093511s.

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.025365s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [8]:
Current step bound = 54
End step min = 46
End step max = None

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 46]), ('conformance_module', [54])].

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.093212s.

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.020766s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [9]:
Current step bound = 55
End step min = 46
End step max = None

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 46]), ('conformance_module', [55])].

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.098488s.

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.024766s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [10]:
Current step bound = 56
End step min = 46
End step max = None

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 46]), ('conformance_module', [56])].

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.097292s.

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.024999s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [11]:
Current step bound = 57
End step min = 46
End step max = None

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 46]), ('conformance_module', [57])].

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.096901s.

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.026876s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [12]:
Current step bound = 58
End step min = 46
End step max = None

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 46]), ('conformance_module', [58])].

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.100380s.

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.032238s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [13]:
Current step bound = 59
End step min = 46
End step max = None

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 46]), ('conformance_module', [59])].

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.101224s.

[16-02-2021_16-38-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.037970s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [14]:
Current step bound = 60
End step min = 46
End step max = None

[16-02-2021_16-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 46]), ('conformance_module', [60])].

[16-02-2021_16-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.102667s.

[16-02-2021_16-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.058757s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [15]:
Current step bound = 61
End step min = 46
End step max = None

[16-02-2021_16-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 46]), ('conformance_module', [61])].

[16-02-2021_16-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.110180s.

[16-02-2021_16-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.098703s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [16]:
Current step bound = 62
End step min = 46
End step max = None

[16-02-2021_16-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 46]), ('conformance_module', [62])].

[16-02-2021_16-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.105123s.

[16-02-2021_16-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.146823s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [17]:
Current step bound = 63
End step min = 46
End step max = None

[16-02-2021_16-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 46]), ('conformance_module', [63])].

[16-02-2021_16-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.105331s.

[16-02-2021_16-38-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.277492s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [18]:
Current step bound = 64
End step min = 46
End step max = None

[16-02-2021_16-38-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 46]), ('conformance_module', [64])].

[16-02-2021_16-38-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.122552s.

[16-02-2021_16-38-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.433232s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [19]:
Current step bound = 65
End step min = 46
End step max = None

[16-02-2021_16-38-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 46]), ('conformance_module', [65])].

[16-02-2021_16-38-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.116257s.

[16-02-2021_16-38-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.495881s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [20]:
Current step bound = 66
End step min = 46
End step max = None

[16-02-2021_16-38-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 46]), ('conformance_module', [66])].

[16-02-2021_16-38-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.127727s.

[16-02-2021_16-38-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.769902s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [21]:
Current step bound = 67
End step min = 46
End step max = None

[16-02-2021_16-38-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 46]), ('conformance_module', [67])].

[16-02-2021_16-38-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.122818s.

[16-02-2021_16-38-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 1.312763s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [22]:
Current step bound = 68
End step min = 46
End step max = None

[16-02-2021_16-38-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 46]), ('conformance_module', [68])].

[16-02-2021_16-38-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.120482s.

[16-02-2021_16-38-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 1.935321s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [23]:
Current step bound = 69
End step min = 46
End step max = None

[16-02-2021_16-38-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 46]), ('conformance_module', [69])].

[16-02-2021_16-38-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.115816s.

[16-02-2021_16-38-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 2.511544s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [24]:
Current step bound = 70
End step min = 46
End step max = None

[16-02-2021_16-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 46]), ('conformance_module', [70])].

[16-02-2021_16-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.118266s.

[16-02-2021_16-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 3.358823s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [25]:
Current step bound = 71
End step min = 46
End step max = None

[16-02-2021_16-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 46]), ('conformance_module', [71])].

[16-02-2021_16-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.120749s.

[16-02-2021_16-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Model found:
Model :: Total atoms = 14745, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.625181s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Incremental solving completed in 15.559526s because STOP_CON_REACHED.

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.989749s, Solving time = 12.352397s, Total time = 15.559526s
Final Model :: Total atoms = 14745, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.471637s, Solving time = 0.057846s, Total time = 0.529482s
2 : Statistics :: Grounding time = 0.078621s, Solving time = 0.009215s, Total time = 0.087836s
3 : Statistics :: Grounding time = 0.079120s, Solving time = 0.013543s, Total time = 0.092663s
4 : Statistics :: Grounding time = 0.084806s, Solving time = 0.016760s, Total time = 0.101566s
5 : Statistics :: Grounding time = 0.086833s, Solving time = 0.015888s, Total time = 0.102720s
6 : Statistics :: Grounding time = 0.089881s, Solving time = 0.018189s, Total time = 0.108070s
7 : Statistics :: Grounding time = 0.093511s, Solving time = 0.025365s, Total time = 0.118876s
8 : Statistics :: Grounding time = 0.093212s, Solving time = 0.020766s, Total time = 0.113978s
9 : Statistics :: Grounding time = 0.098488s, Solving time = 0.024766s, Total time = 0.123254s
10 : Statistics :: Grounding time = 0.097292s, Solving time = 0.024999s, Total time = 0.122291s
11 : Statistics :: Grounding time = 0.096901s, Solving time = 0.026876s, Total time = 0.123777s
12 : Statistics :: Grounding time = 0.100380s, Solving time = 0.032238s, Total time = 0.132617s
13 : Statistics :: Grounding time = 0.101224s, Solving time = 0.037970s, Total time = 0.139193s
14 : Statistics :: Grounding time = 0.102667s, Solving time = 0.058757s, Total time = 0.161425s
15 : Statistics :: Grounding time = 0.110180s, Solving time = 0.098703s, Total time = 0.208883s
16 : Statistics :: Grounding time = 0.105123s, Solving time = 0.146823s, Total time = 0.251946s
17 : Statistics :: Grounding time = 0.105331s, Solving time = 0.277492s, Total time = 0.382823s
18 : Statistics :: Grounding time = 0.122552s, Solving time = 0.433232s, Total time = 0.555785s
19 : Statistics :: Grounding time = 0.116257s, Solving time = 0.495881s, Total time = 0.612138s
20 : Statistics :: Grounding time = 0.127727s, Solving time = 0.769902s, Total time = 0.897628s
21 : Statistics :: Grounding time = 0.122818s, Solving time = 1.312763s, Total time = 1.435581s
22 : Statistics :: Grounding time = 0.120482s, Solving time = 1.935321s, Total time = 2.055803s
23 : Statistics :: Grounding time = 0.115816s, Solving time = 2.511544s, Total time = 2.627360s
24 : Statistics :: Grounding time = 0.118266s, Solving time = 3.358823s, Total time = 3.477090s
25 : Statistics :: Grounding time = 0.120749s, Solving time = 0.625181s, Total time = 0.745929s

[16-02-2021_16-38-57] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.989749s, Solving time = 12.352397s, Total time = 15.559526s
Model :: Total atoms = 14745, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-38-57] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,configure(manipulator_limb_2,retracted),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),38)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),39)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),40)
occurs(1,talos,release(manipulator_end_2,(block,5)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),43)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),44)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),45)
occurs(1,talos,release(manipulator_end_1,(block,3)),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),47)
occurs(1,talos,put(manipulator_end_2,(block,4),puzzle_room_table_left),48)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),49)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,1)),50)
occurs(1,talos,release(manipulator_end_1,(block,5)),51)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),52)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),53)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),54)
occurs(1,talos,release(manipulator_end_1,(block,3)),55)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),56)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),57)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),58)
occurs(1,talos,release(manipulator_end_1,(block,2)),59)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),60)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),61)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),62)
occurs(1,talos,release(manipulator_end_1,(block,6)),63)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),64)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),65)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),66)
occurs(1,talos,release(manipulator_end_1,(block,5)),67)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),68)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),69)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),70)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),71)

[16-02-2021_16-38-57] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =    15.559526s : Steps =    71 : Actions =    71 |  
  ====================================================================  

[16-02-2021_16-38-57] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-38-57] INFO :: Experiment >> 

      ================================================      
            Experimental run 3 : Time 29.677056s            
      ================================================      

[16-02-2021_16-38-57] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-38-57] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-38-57] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-38-57] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-38-57] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-38-57] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Instantiated.

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Program building started.

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Program building completed.

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding base program parts.

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.013644s.

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving base program parts.

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.002693s.

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Incremental solving started.

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.039478s.

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.005765s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.031543s.

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.003214s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.031649s.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.004530s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.036734s.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.005247s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.035098s.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.005328s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.036753s.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.006652s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.038465s.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.007293s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.037649s.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.008399s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.037932s.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.010494s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.040656s.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.011455s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.039884s.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.012875s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.041158s.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.015602s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.040555s.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.024180s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.041686s.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.043313s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.045607s.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.064942s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.076487s.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.103508s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.080976s.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.159234s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.082964s.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.101480s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Incremental solving completed in 1.467466s because STOP_CON_REACHED.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.828919s, Solving time = 0.596203s, Total time = 1.467466s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039478s, Solving time = 0.005765s, Total time = 0.045243s
2 : Statistics :: Grounding time = 0.031543s, Solving time = 0.003214s, Total time = 0.034756s
3 : Statistics :: Grounding time = 0.031649s, Solving time = 0.004530s, Total time = 0.036179s
4 : Statistics :: Grounding time = 0.036734s, Solving time = 0.005247s, Total time = 0.041981s
5 : Statistics :: Grounding time = 0.035098s, Solving time = 0.005328s, Total time = 0.040426s
6 : Statistics :: Grounding time = 0.036753s, Solving time = 0.006652s, Total time = 0.043406s
7 : Statistics :: Grounding time = 0.038465s, Solving time = 0.007293s, Total time = 0.045758s
8 : Statistics :: Grounding time = 0.037649s, Solving time = 0.008399s, Total time = 0.046048s
9 : Statistics :: Grounding time = 0.037932s, Solving time = 0.010494s, Total time = 0.048426s
10 : Statistics :: Grounding time = 0.040656s, Solving time = 0.011455s, Total time = 0.052111s
11 : Statistics :: Grounding time = 0.039884s, Solving time = 0.012875s, Total time = 0.052758s
12 : Statistics :: Grounding time = 0.041158s, Solving time = 0.015602s, Total time = 0.056760s
13 : Statistics :: Grounding time = 0.040555s, Solving time = 0.024180s, Total time = 0.064735s
14 : Statistics :: Grounding time = 0.041686s, Solving time = 0.043313s, Total time = 0.084999s
15 : Statistics :: Grounding time = 0.045607s, Solving time = 0.064942s, Total time = 0.110549s
16 : Statistics :: Grounding time = 0.076487s, Solving time = 0.103508s, Total time = 0.179995s
17 : Statistics :: Grounding time = 0.080976s, Solving time = 0.159234s, Total time = 0.240210s
18 : Statistics :: Grounding time = 0.082964s, Solving time = 0.101480s, Total time = 0.184444s

[16-02-2021_16-38-59] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.828919s, Solving time = 0.596203s, Total time = 1.467466s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-38-59] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[16-02-2021_16-38-59] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-38-59] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-38-59] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-38-59] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-38-59] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-38-59] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Instantiated.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Program building started.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Program building completed.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding base program parts.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.014608s.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving base program parts.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.002159s.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Incremental solving started.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.062549s.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.005442s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.044753s.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.003706s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.046211s.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.004588s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.046208s.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.006737s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.051166s.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.008006s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.050490s.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.008682s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.053843s.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.009945s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.054165s.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.010141s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.056608s.

[16-02-2021_16-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.011088s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.058947s.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.010890s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.059267s.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.013239s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.059599s.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.014743s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.065999s.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.016839s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.061701s.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.019398s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.063406s.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.019458s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.064526s.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.022388s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.065454s.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.028565s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.069496s.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.030009s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.067435s.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.043438s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.067935s.

[16-02-2021_16-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.070290s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.069142s.

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.063125s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.071799s.

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.073240s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.071262s.

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.093934s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.072592s.

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.144097s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.073814s.

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.137118s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Incremental solving completed in 2.516736s because STOP_CON_REACHED.

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.542976s, Solving time = 0.871264s, Total time = 2.516736s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.062549s, Solving time = 0.005442s, Total time = 0.067991s
2 : Statistics :: Grounding time = 0.044753s, Solving time = 0.003706s, Total time = 0.048459s
3 : Statistics :: Grounding time = 0.046211s, Solving time = 0.004588s, Total time = 0.050799s
4 : Statistics :: Grounding time = 0.046208s, Solving time = 0.006737s, Total time = 0.052945s
5 : Statistics :: Grounding time = 0.051166s, Solving time = 0.008006s, Total time = 0.059172s
6 : Statistics :: Grounding time = 0.050490s, Solving time = 0.008682s, Total time = 0.059172s
7 : Statistics :: Grounding time = 0.053843s, Solving time = 0.009945s, Total time = 0.063788s
8 : Statistics :: Grounding time = 0.054165s, Solving time = 0.010141s, Total time = 0.064306s
9 : Statistics :: Grounding time = 0.056608s, Solving time = 0.011088s, Total time = 0.067696s
10 : Statistics :: Grounding time = 0.058947s, Solving time = 0.010890s, Total time = 0.069837s
11 : Statistics :: Grounding time = 0.059267s, Solving time = 0.013239s, Total time = 0.072505s
12 : Statistics :: Grounding time = 0.059599s, Solving time = 0.014743s, Total time = 0.074342s
13 : Statistics :: Grounding time = 0.065999s, Solving time = 0.016839s, Total time = 0.082839s
14 : Statistics :: Grounding time = 0.061701s, Solving time = 0.019398s, Total time = 0.081099s
15 : Statistics :: Grounding time = 0.063406s, Solving time = 0.019458s, Total time = 0.082864s
16 : Statistics :: Grounding time = 0.064526s, Solving time = 0.022388s, Total time = 0.086914s
17 : Statistics :: Grounding time = 0.065454s, Solving time = 0.028565s, Total time = 0.094019s
18 : Statistics :: Grounding time = 0.069496s, Solving time = 0.030009s, Total time = 0.099505s
19 : Statistics :: Grounding time = 0.067435s, Solving time = 0.043438s, Total time = 0.110873s
20 : Statistics :: Grounding time = 0.067935s, Solving time = 0.070290s, Total time = 0.138226s
21 : Statistics :: Grounding time = 0.069142s, Solving time = 0.063125s, Total time = 0.132267s
22 : Statistics :: Grounding time = 0.071799s, Solving time = 0.073240s, Total time = 0.145040s
23 : Statistics :: Grounding time = 0.071262s, Solving time = 0.093934s, Total time = 0.165196s
24 : Statistics :: Grounding time = 0.072592s, Solving time = 0.144097s, Total time = 0.216689s
25 : Statistics :: Grounding time = 0.073814s, Solving time = 0.137118s, Total time = 0.210932s

[16-02-2021_16-39-01] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.542976s, Solving time = 0.871264s, Total time = 2.516736s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-39-01] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_1,retracted),13)
occurs(2,talos,configure(manipulator_arm_2,extended),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_2,(block,5)),25)

[16-02-2021_16-39-02] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-39-02] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-39-02] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-39-02] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-39-02] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-39-02] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Instantiated.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Program building started.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Program building completed.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding base program parts.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.016934s.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving base program parts.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.002805s.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Incremental solving started.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.185851s.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.009278s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.063258s.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.005851s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.061874s.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.006937s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.066440s.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.010105s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.069022s.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.012461s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.074620s.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.013084s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.080602s.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.014879s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.078721s.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.015344s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.078425s.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.015871s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.080075s.

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.017338s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.088571s.

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.017292s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.082330s.

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.020562s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.085032s.

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.021576s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.085488s.

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.024697s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.088292s.

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.027505s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.088330s.

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.029334s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.091313s.

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.033212s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.091370s.

[16-02-2021_16-39-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.041012s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.089952s.

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.039075s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.092346s.

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.068627s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.094287s.

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.070344s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.094888s.

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Model found:
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.096935s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Incremental solving completed in 2.643388s because STOP_CON_REACHED.

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.928021s, Solving time = 0.614124s, Total time = 2.643388s
Final Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.185851s, Solving time = 0.009278s, Total time = 0.195129s
2 : Statistics :: Grounding time = 0.063258s, Solving time = 0.005851s, Total time = 0.069109s
3 : Statistics :: Grounding time = 0.061874s, Solving time = 0.006937s, Total time = 0.068812s
4 : Statistics :: Grounding time = 0.066440s, Solving time = 0.010105s, Total time = 0.076545s
5 : Statistics :: Grounding time = 0.069022s, Solving time = 0.012461s, Total time = 0.081483s
6 : Statistics :: Grounding time = 0.074620s, Solving time = 0.013084s, Total time = 0.087704s
7 : Statistics :: Grounding time = 0.080602s, Solving time = 0.014879s, Total time = 0.095481s
8 : Statistics :: Grounding time = 0.078721s, Solving time = 0.015344s, Total time = 0.094065s
9 : Statistics :: Grounding time = 0.078425s, Solving time = 0.015871s, Total time = 0.094296s
10 : Statistics :: Grounding time = 0.080075s, Solving time = 0.017338s, Total time = 0.097412s
11 : Statistics :: Grounding time = 0.088571s, Solving time = 0.017292s, Total time = 0.105863s
12 : Statistics :: Grounding time = 0.082330s, Solving time = 0.020562s, Total time = 0.102891s
13 : Statistics :: Grounding time = 0.085032s, Solving time = 0.021576s, Total time = 0.106608s
14 : Statistics :: Grounding time = 0.085488s, Solving time = 0.024697s, Total time = 0.110185s
15 : Statistics :: Grounding time = 0.088292s, Solving time = 0.027505s, Total time = 0.115797s
16 : Statistics :: Grounding time = 0.088330s, Solving time = 0.029334s, Total time = 0.117665s
17 : Statistics :: Grounding time = 0.091313s, Solving time = 0.033212s, Total time = 0.124525s
18 : Statistics :: Grounding time = 0.091370s, Solving time = 0.041012s, Total time = 0.132382s
19 : Statistics :: Grounding time = 0.089952s, Solving time = 0.039075s, Total time = 0.129027s
20 : Statistics :: Grounding time = 0.092346s, Solving time = 0.068627s, Total time = 0.160973s
21 : Statistics :: Grounding time = 0.094287s, Solving time = 0.070344s, Total time = 0.164632s
22 : Statistics :: Grounding time = 0.094888s, Solving time = 0.096935s, Total time = 0.191823s

[16-02-2021_16-39-04] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.928021s, Solving time = 0.614124s, Total time = 2.643388s
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-39-04] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),22)

[16-02-2021_16-39-04] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.467466s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.516736s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     2.643388s : Steps =    22 : Actions =    22 |  
  ====================================================================  

[16-02-2021_16-39-04] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-39-04] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-39-04] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-39-04] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-39-04] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-39-04] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-39-04] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-39-04] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Instantiated.

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> The logic program was extended with 22 rules into program part plan_module(step, start).

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> The logic program was extended with 3656 rules into program part state_module(step).

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=22, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 22], range_=IncRange(start=22, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 22, Max end step = None
Step inc = 1, Step inc init = 24, Stop con = StopCondition.Satisfiable

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Program building started.

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Program building completed.

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding base program parts.

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.023161s.

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving base program parts.

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.003661s.

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Incremental solving started.

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [1]:
Current step bound = 23
End step min = 22
End step max = None

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [23]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 22]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 22]), ('conformance_module', [23])].

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.314577s.

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.032675s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [2]:
Current step bound = 24
End step min = 22
End step max = None

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 22]), ('conformance_module', [24])].

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.070226s.

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.006932s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [3]:
Current step bound = 25
End step min = 22
End step max = None

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 22]), ('conformance_module', [25])].

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.070607s.

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.008596s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [4]:
Current step bound = 26
End step min = 22
End step max = None

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 22]), ('conformance_module', [26])].

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.076278s.

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.009845s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [5]:
Current step bound = 27
End step min = 22
End step max = None

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 22]), ('conformance_module', [27])].

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.075555s.

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.012982s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [6]:
Current step bound = 28
End step min = 22
End step max = None

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 22]), ('conformance_module', [28])].

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.077093s.

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.014707s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [7]:
Current step bound = 29
End step min = 22
End step max = None

[16-02-2021_16-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 22]), ('conformance_module', [29])].

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.077548s.

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.015925s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [8]:
Current step bound = 30
End step min = 22
End step max = None

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 22]), ('conformance_module', [30])].

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.080951s.

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.016715s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [9]:
Current step bound = 31
End step min = 22
End step max = None

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 22]), ('conformance_module', [31])].

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.084508s.

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.017339s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [10]:
Current step bound = 32
End step min = 22
End step max = None

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 22]), ('conformance_module', [32])].

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.086125s.

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.019255s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [11]:
Current step bound = 33
End step min = 22
End step max = None

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 22]), ('conformance_module', [33])].

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.088508s.

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.019294s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [12]:
Current step bound = 34
End step min = 22
End step max = None

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 22]), ('conformance_module', [34])].

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.088930s.

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.020427s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [13]:
Current step bound = 35
End step min = 22
End step max = None

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 22]), ('conformance_module', [35])].

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.093496s.

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.022218s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [14]:
Current step bound = 36
End step min = 22
End step max = None

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 22]), ('conformance_module', [36])].

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.094481s.

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.028134s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [15]:
Current step bound = 37
End step min = 22
End step max = None

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 22]), ('conformance_module', [37])].

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.094513s.

[16-02-2021_16-39-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.038872s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [16]:
Current step bound = 38
End step min = 22
End step max = None

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 22]), ('conformance_module', [38])].

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.095077s.

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.043542s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [17]:
Current step bound = 39
End step min = 22
End step max = None

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 22]), ('conformance_module', [39])].

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.094036s.

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.038172s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [18]:
Current step bound = 40
End step min = 22
End step max = None

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 22]), ('conformance_module', [40])].

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.096284s.

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.080127s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [19]:
Current step bound = 41
End step min = 22
End step max = None

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 22]), ('conformance_module', [41])].

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.099017s.

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Model found:
Model :: Total atoms = 9422, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.076814s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Incremental solving completed in 2.499818s because STOP_CON_REACHED.

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.880972s, Solving time = 0.526232s, Total time = 2.499818s
Final Model :: Total atoms = 9422, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.314577s, Solving time = 0.032675s, Total time = 0.347252s
2 : Statistics :: Grounding time = 0.070226s, Solving time = 0.006932s, Total time = 0.077158s
3 : Statistics :: Grounding time = 0.070607s, Solving time = 0.008596s, Total time = 0.079202s
4 : Statistics :: Grounding time = 0.076278s, Solving time = 0.009845s, Total time = 0.086123s
5 : Statistics :: Grounding time = 0.075555s, Solving time = 0.012982s, Total time = 0.088537s
6 : Statistics :: Grounding time = 0.077093s, Solving time = 0.014707s, Total time = 0.091800s
7 : Statistics :: Grounding time = 0.077548s, Solving time = 0.015925s, Total time = 0.093473s
8 : Statistics :: Grounding time = 0.080951s, Solving time = 0.016715s, Total time = 0.097667s
9 : Statistics :: Grounding time = 0.084508s, Solving time = 0.017339s, Total time = 0.101847s
10 : Statistics :: Grounding time = 0.086125s, Solving time = 0.019255s, Total time = 0.105380s
11 : Statistics :: Grounding time = 0.088508s, Solving time = 0.019294s, Total time = 0.107802s
12 : Statistics :: Grounding time = 0.088930s, Solving time = 0.020427s, Total time = 0.109357s
13 : Statistics :: Grounding time = 0.093496s, Solving time = 0.022218s, Total time = 0.115714s
14 : Statistics :: Grounding time = 0.094481s, Solving time = 0.028134s, Total time = 0.122615s
15 : Statistics :: Grounding time = 0.094513s, Solving time = 0.038872s, Total time = 0.133385s
16 : Statistics :: Grounding time = 0.095077s, Solving time = 0.043542s, Total time = 0.138620s
17 : Statistics :: Grounding time = 0.094036s, Solving time = 0.038172s, Total time = 0.132208s
18 : Statistics :: Grounding time = 0.096284s, Solving time = 0.080127s, Total time = 0.176411s
19 : Statistics :: Grounding time = 0.099017s, Solving time = 0.076814s, Total time = 0.175831s

[16-02-2021_16-39-07] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.880972s, Solving time = 0.526232s, Total time = 2.499818s
Model :: Total atoms = 9422, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-39-07] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),38)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),39)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),40)
occurs(1,talos,release(manipulator_end_2,(block,5)),41)

[16-02-2021_16-39-07] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     2.499818s : Steps =    41 : Actions =    41 |  
  ====================================================================  

[16-02-2021_16-39-07] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-39-07] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-39-07] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-39-07] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-39-07] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-39-07] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-39-07] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-39-07] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Instantiated.

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Program building started.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Program building completed.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding base program parts.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.021674s.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving base program parts.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.002185s.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Incremental solving started.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.134668s.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.019454s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.053291s.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.006053s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.054479s.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.008685s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.056756s.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.009327s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.057619s.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.011164s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.063169s.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.011419s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.062555s.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.011955s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.067369s.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.012037s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.065053s.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Model found:
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.016669s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Incremental solving completed in 0.766544s because STOP_CON_REACHED.

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.636633s, Solving time = 0.108948s, Total time = 0.766544s
Final Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.134668s, Solving time = 0.019454s, Total time = 0.154121s
2 : Statistics :: Grounding time = 0.053291s, Solving time = 0.006053s, Total time = 0.059344s
3 : Statistics :: Grounding time = 0.054479s, Solving time = 0.008685s, Total time = 0.063164s
4 : Statistics :: Grounding time = 0.056756s, Solving time = 0.009327s, Total time = 0.066083s
5 : Statistics :: Grounding time = 0.057619s, Solving time = 0.011164s, Total time = 0.068783s
6 : Statistics :: Grounding time = 0.063169s, Solving time = 0.011419s, Total time = 0.074588s
7 : Statistics :: Grounding time = 0.062555s, Solving time = 0.011955s, Total time = 0.074510s
8 : Statistics :: Grounding time = 0.067369s, Solving time = 0.012037s, Total time = 0.079407s
9 : Statistics :: Grounding time = 0.065053s, Solving time = 0.016669s, Total time = 0.081722s

[16-02-2021_16-39-08] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.636633s, Solving time = 0.108948s, Total time = 0.766544s
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-39-08] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_1,retracted),13)
occurs(2,talos,configure(manipulator_arm_2,extended),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_2,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),26)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),27)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),28)
occurs(2,talos,release(manipulator_arm_1,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[16-02-2021_16-39-08] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-39-08] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-39-08] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-39-08] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-39-08] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-39-08] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-39-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Instantiated.

[16-02-2021_16-39-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-39-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-39-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> The logic program was extended with 41 rules into program part plan_module(step, start).

[16-02-2021_16-39-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> The logic program was extended with 6620 rules into program part state_module(step).

[16-02-2021_16-39-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=41, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 41], range_=IncRange(start=41, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 41, Max end step = None
Step inc = 1, Step inc init = 43, Stop con = StopCondition.Satisfiable

[16-02-2021_16-39-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Program building started.

[16-02-2021_16-39-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Program building completed.

[16-02-2021_16-39-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding base program parts.

[16-02-2021_16-39-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.029014s.

[16-02-2021_16-39-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving base program parts.

[16-02-2021_16-39-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.003472s.

[16-02-2021_16-39-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Incremental solving started.

[16-02-2021_16-39-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [1]:
Current step bound = 42
End step min = 41
End step max = None

[16-02-2021_16-39-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [42]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 41]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 41]), ('conformance_module', [42])].

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.453795s.

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.052454s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [2]:
Current step bound = 43
End step min = 41
End step max = None

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 41]), ('conformance_module', [43])].

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.075780s.

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.008703s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [3]:
Current step bound = 44
End step min = 41
End step max = None

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 41]), ('conformance_module', [44])].

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.074520s.

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.011443s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [4]:
Current step bound = 45
End step min = 41
End step max = None

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 41]), ('conformance_module', [45])].

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.087656s.

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.014644s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [5]:
Current step bound = 46
End step min = 41
End step max = None

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 41]), ('conformance_module', [46])].

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.084468s.

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Model found:
Model :: Total atoms = 10113, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.018232s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Incremental solving completed in 0.931640s because STOP_CON_REACHED.

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.805231s, Solving time = 0.108949s, Total time = 0.931640s
Final Model :: Total atoms = 10113, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.453795s, Solving time = 0.052454s, Total time = 0.506248s
2 : Statistics :: Grounding time = 0.075780s, Solving time = 0.008703s, Total time = 0.084482s
3 : Statistics :: Grounding time = 0.074520s, Solving time = 0.011443s, Total time = 0.085963s
4 : Statistics :: Grounding time = 0.087656s, Solving time = 0.014644s, Total time = 0.102300s
5 : Statistics :: Grounding time = 0.084468s, Solving time = 0.018232s, Total time = 0.102700s

[16-02-2021_16-39-10] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.805231s, Solving time = 0.108949s, Total time = 0.931640s
Model :: Total atoms = 10113, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-39-10] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),38)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),39)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),40)
occurs(1,talos,release(manipulator_end_2,(block,5)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),43)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),44)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),45)
occurs(1,talos,release(manipulator_end_1,(block,3)),46)

[16-02-2021_16-39-10] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.766544s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     0.931640s : Steps =    46 : Actions =    46 |  
  ====================================================================  

[16-02-2021_16-39-10] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-39-10] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-39-10] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-39-10] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-39-10] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-39-10] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-39-10] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-39-10] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Instantiated.

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-39-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> The logic program was extended with 46 rules into program part plan_module(step, start).

[16-02-2021_16-39-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> The logic program was extended with 7400 rules into program part state_module(step).

[16-02-2021_16-39-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=46, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 46], range_=IncRange(start=46, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 46, Max end step = None
Step inc = 1, Step inc init = 48, Stop con = StopCondition.Satisfiable

[16-02-2021_16-39-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Program building started.

[16-02-2021_16-39-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Program building completed.

[16-02-2021_16-39-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding base program parts.

[16-02-2021_16-39-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.030919s.

[16-02-2021_16-39-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving base program parts.

[16-02-2021_16-39-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.003645s.

[16-02-2021_16-39-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Incremental solving started.

[16-02-2021_16-39-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [1]:
Current step bound = 47
End step min = 46
End step max = None

[16-02-2021_16-39-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [47]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 46]), ('conformance_module', [46]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 46]), ('conformance_module', [47])].

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.472861s.

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.057192s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [2]:
Current step bound = 48
End step min = 46
End step max = None

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 46]), ('conformance_module', [48])].

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.077559s.

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.008879s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [3]:
Current step bound = 49
End step min = 46
End step max = None

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 46]), ('conformance_module', [49])].

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.078178s.

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.013066s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [4]:
Current step bound = 50
End step min = 46
End step max = None

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 46]), ('conformance_module', [50])].

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.084334s.

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.015468s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [5]:
Current step bound = 51
End step min = 46
End step max = None

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 46]), ('conformance_module', [51])].

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.086344s.

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.016434s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [6]:
Current step bound = 52
End step min = 46
End step max = None

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 46]), ('conformance_module', [52])].

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.088961s.

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.018312s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [7]:
Current step bound = 53
End step min = 46
End step max = None

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 46]), ('conformance_module', [53])].

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.091225s.

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.021951s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [8]:
Current step bound = 54
End step min = 46
End step max = None

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 46]), ('conformance_module', [54])].

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.095057s.

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.022905s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [9]:
Current step bound = 55
End step min = 46
End step max = None

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 46]), ('conformance_module', [55])].

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.095206s.

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.022763s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [10]:
Current step bound = 56
End step min = 46
End step max = None

[16-02-2021_16-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 46]), ('conformance_module', [56])].

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.095306s.

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.024620s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [11]:
Current step bound = 57
End step min = 46
End step max = None

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 46]), ('conformance_module', [57])].

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.097546s.

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.030381s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [12]:
Current step bound = 58
End step min = 46
End step max = None

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 46]), ('conformance_module', [58])].

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.098137s.

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.030544s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [13]:
Current step bound = 59
End step min = 46
End step max = None

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 46]), ('conformance_module', [59])].

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.099669s.

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.039595s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [14]:
Current step bound = 60
End step min = 46
End step max = None

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 46]), ('conformance_module', [60])].

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.102895s.

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.058242s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [15]:
Current step bound = 61
End step min = 46
End step max = None

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 46]), ('conformance_module', [61])].

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.105169s.

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.096715s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [16]:
Current step bound = 62
End step min = 46
End step max = None

[16-02-2021_16-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 46]), ('conformance_module', [62])].

[16-02-2021_16-39-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.106320s.

[16-02-2021_16-39-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.138427s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [17]:
Current step bound = 63
End step min = 46
End step max = None

[16-02-2021_16-39-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 46]), ('conformance_module', [63])].

[16-02-2021_16-39-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.106860s.

[16-02-2021_16-39-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.176541s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [18]:
Current step bound = 64
End step min = 46
End step max = None

[16-02-2021_16-39-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 46]), ('conformance_module', [64])].

[16-02-2021_16-39-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.109348s.

[16-02-2021_16-39-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.344577s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [19]:
Current step bound = 65
End step min = 46
End step max = None

[16-02-2021_16-39-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 46]), ('conformance_module', [65])].

[16-02-2021_16-39-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.110308s.

[16-02-2021_16-39-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.613796s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [20]:
Current step bound = 66
End step min = 46
End step max = None

[16-02-2021_16-39-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 46]), ('conformance_module', [66])].

[16-02-2021_16-39-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.109695s.

[16-02-2021_16-39-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.792892s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [21]:
Current step bound = 67
End step min = 46
End step max = None

[16-02-2021_16-39-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 46]), ('conformance_module', [67])].

[16-02-2021_16-39-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.113986s.

[16-02-2021_16-39-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 1.224575s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [22]:
Current step bound = 68
End step min = 46
End step max = None

[16-02-2021_16-39-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 46]), ('conformance_module', [68])].

[16-02-2021_16-39-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.124289s.

[16-02-2021_16-39-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 1.673621s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [23]:
Current step bound = 69
End step min = 46
End step max = None

[16-02-2021_16-39-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 46]), ('conformance_module', [69])].

[16-02-2021_16-39-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.117531s.

[16-02-2021_16-39-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 2.371231s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [24]:
Current step bound = 70
End step min = 46
End step max = None

[16-02-2021_16-39-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 46]), ('conformance_module', [70])].

[16-02-2021_16-39-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.118562s.

[16-02-2021_16-39-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 3.892609s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [25]:
Current step bound = 71
End step min = 46
End step max = None

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 46]), ('conformance_module', [71])].

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.131966s.

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Model found:
Model :: Total atoms = 14769, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.122559s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Incremental solving completed in 14.992258s because STOP_CON_REACHED.

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.948233s, Solving time = 11.831541s, Total time = 14.992258s
Final Model :: Total atoms = 14769, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.472861s, Solving time = 0.057192s, Total time = 0.530053s
2 : Statistics :: Grounding time = 0.077559s, Solving time = 0.008879s, Total time = 0.086439s
3 : Statistics :: Grounding time = 0.078178s, Solving time = 0.013066s, Total time = 0.091243s
4 : Statistics :: Grounding time = 0.084334s, Solving time = 0.015468s, Total time = 0.099802s
5 : Statistics :: Grounding time = 0.086344s, Solving time = 0.016434s, Total time = 0.102778s
6 : Statistics :: Grounding time = 0.088961s, Solving time = 0.018312s, Total time = 0.107272s
7 : Statistics :: Grounding time = 0.091225s, Solving time = 0.021951s, Total time = 0.113176s
8 : Statistics :: Grounding time = 0.095057s, Solving time = 0.022905s, Total time = 0.117963s
9 : Statistics :: Grounding time = 0.095206s, Solving time = 0.022763s, Total time = 0.117969s
10 : Statistics :: Grounding time = 0.095306s, Solving time = 0.024620s, Total time = 0.119925s
11 : Statistics :: Grounding time = 0.097546s, Solving time = 0.030381s, Total time = 0.127927s
12 : Statistics :: Grounding time = 0.098137s, Solving time = 0.030544s, Total time = 0.128682s
13 : Statistics :: Grounding time = 0.099669s, Solving time = 0.039595s, Total time = 0.139264s
14 : Statistics :: Grounding time = 0.102895s, Solving time = 0.058242s, Total time = 0.161137s
15 : Statistics :: Grounding time = 0.105169s, Solving time = 0.096715s, Total time = 0.201885s
16 : Statistics :: Grounding time = 0.106320s, Solving time = 0.138427s, Total time = 0.244747s
17 : Statistics :: Grounding time = 0.106860s, Solving time = 0.176541s, Total time = 0.283401s
18 : Statistics :: Grounding time = 0.109348s, Solving time = 0.344577s, Total time = 0.453925s
19 : Statistics :: Grounding time = 0.110308s, Solving time = 0.613796s, Total time = 0.724105s
20 : Statistics :: Grounding time = 0.109695s, Solving time = 0.792892s, Total time = 0.902586s
21 : Statistics :: Grounding time = 0.113986s, Solving time = 1.224575s, Total time = 1.338562s
22 : Statistics :: Grounding time = 0.124289s, Solving time = 1.673621s, Total time = 1.797911s
23 : Statistics :: Grounding time = 0.117531s, Solving time = 2.371231s, Total time = 2.488761s
24 : Statistics :: Grounding time = 0.118562s, Solving time = 3.892609s, Total time = 4.011171s
25 : Statistics :: Grounding time = 0.131966s, Solving time = 0.122559s, Total time = 0.254525s

[16-02-2021_16-39-26] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.948233s, Solving time = 11.831541s, Total time = 14.992258s
Model :: Total atoms = 14769, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-39-26] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),38)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),39)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),40)
occurs(1,talos,release(manipulator_end_2,(block,5)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),43)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),44)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),45)
occurs(1,talos,release(manipulator_end_1,(block,3)),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),47)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),48)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),49)
occurs(1,talos,put(manipulator_end_2,(block,4),puzzle_room_table_left),50)
occurs(1,talos,release(manipulator_end_1,(block,3)),51)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),52)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),53)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),54)
occurs(1,talos,release(manipulator_end_2,(block,4)),55)
occurs(1,talos,release(manipulator_end_1,(block,2)),56)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),57)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),58)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),59)
occurs(1,talos,put(manipulator_end_1,(block,5),puzzle_room_table_right),60)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),61)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),62)
occurs(1,talos,release(manipulator_end_2,(block,6)),63)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),64)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),65)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),66)
occurs(1,talos,release(manipulator_end_1,(block,5)),67)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),68)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),69)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),70)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),71)

[16-02-2021_16-39-26] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =    14.992258s : Steps =    71 : Actions =    71 |  
  ====================================================================  

[16-02-2021_16-39-26] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-39-26] INFO :: Experiment >> 

      ================================================      
            Experimental run 4 : Time 28.967132s            
      ================================================      

[16-02-2021_16-39-26] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-39-26] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-39-26] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-39-26] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-39-26] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-39-26] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Instantiated.

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Program building started.

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Program building completed.

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding base program parts.

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.013813s.

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving base program parts.

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.001981s.

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Incremental solving started.

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.039988s.

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.005096s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.032077s.

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.003137s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.032345s.

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.004184s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.035377s.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.005205s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.035713s.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.005332s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.037472s.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.006491s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.042438s.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.006904s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.039625s.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.008104s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.039610s.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.010068s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.040937s.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.010155s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.041106s.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.013870s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.044951s.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.019345s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.041953s.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.031371s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.046701s.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.047155s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.044089s.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.076765s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.082107s.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.162797s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.081164s.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.294763s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.086728s.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.067546s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Incremental solving completed in 1.683723s because STOP_CON_REACHED.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.858193s, Solving time = 0.780269s, Total time = 1.683723s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039988s, Solving time = 0.005096s, Total time = 0.045084s
2 : Statistics :: Grounding time = 0.032077s, Solving time = 0.003137s, Total time = 0.035213s
3 : Statistics :: Grounding time = 0.032345s, Solving time = 0.004184s, Total time = 0.036529s
4 : Statistics :: Grounding time = 0.035377s, Solving time = 0.005205s, Total time = 0.040582s
5 : Statistics :: Grounding time = 0.035713s, Solving time = 0.005332s, Total time = 0.041045s
6 : Statistics :: Grounding time = 0.037472s, Solving time = 0.006491s, Total time = 0.043963s
7 : Statistics :: Grounding time = 0.042438s, Solving time = 0.006904s, Total time = 0.049342s
8 : Statistics :: Grounding time = 0.039625s, Solving time = 0.008104s, Total time = 0.047729s
9 : Statistics :: Grounding time = 0.039610s, Solving time = 0.010068s, Total time = 0.049679s
10 : Statistics :: Grounding time = 0.040937s, Solving time = 0.010155s, Total time = 0.051092s
11 : Statistics :: Grounding time = 0.041106s, Solving time = 0.013870s, Total time = 0.054976s
12 : Statistics :: Grounding time = 0.044951s, Solving time = 0.019345s, Total time = 0.064296s
13 : Statistics :: Grounding time = 0.041953s, Solving time = 0.031371s, Total time = 0.073323s
14 : Statistics :: Grounding time = 0.046701s, Solving time = 0.047155s, Total time = 0.093856s
15 : Statistics :: Grounding time = 0.044089s, Solving time = 0.076765s, Total time = 0.120854s
16 : Statistics :: Grounding time = 0.082107s, Solving time = 0.162797s, Total time = 0.244904s
17 : Statistics :: Grounding time = 0.081164s, Solving time = 0.294763s, Total time = 0.375927s
18 : Statistics :: Grounding time = 0.086728s, Solving time = 0.067546s, Total time = 0.154273s

[16-02-2021_16-39-28] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.858193s, Solving time = 0.780269s, Total time = 1.683723s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-39-28] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),7)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),10)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[16-02-2021_16-39-28] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-39-28] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-39-28] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-39-28] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-39-28] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-39-28] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Instantiated.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Program building started.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Program building completed.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding base program parts.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.016193s.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving base program parts.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.002121s.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Incremental solving started.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.065547s.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.005303s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.048387s.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.004022s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.047644s.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.004726s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.047434s.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.006862s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.050594s.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.008331s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.058535s.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.009593s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.055011s.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.010058s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.055522s.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.010322s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.065888s.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.010728s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.056956s.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.011145s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.063879s.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.013402s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.062434s.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.015518s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.061110s.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.016603s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.064795s.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.017923s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.063809s.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.018937s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.063233s.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.020174s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.065330s.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.027753s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.065203s.

[16-02-2021_16-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.035064s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.068459s.

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.041966s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.072358s.

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.063491s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.069304s.

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.079726s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.071231s.

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.068278s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.071838s.

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.119249s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.073060s.

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.103769s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.074480s.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.088894s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Incremental solving completed in 2.491515s because STOP_CON_REACHED.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.578235s, Solving time = 0.813958s, Total time = 2.491515s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.065547s, Solving time = 0.005303s, Total time = 0.070850s
2 : Statistics :: Grounding time = 0.048387s, Solving time = 0.004022s, Total time = 0.052409s
3 : Statistics :: Grounding time = 0.047644s, Solving time = 0.004726s, Total time = 0.052369s
4 : Statistics :: Grounding time = 0.047434s, Solving time = 0.006862s, Total time = 0.054297s
5 : Statistics :: Grounding time = 0.050594s, Solving time = 0.008331s, Total time = 0.058925s
6 : Statistics :: Grounding time = 0.058535s, Solving time = 0.009593s, Total time = 0.068128s
7 : Statistics :: Grounding time = 0.055011s, Solving time = 0.010058s, Total time = 0.065069s
8 : Statistics :: Grounding time = 0.055522s, Solving time = 0.010322s, Total time = 0.065843s
9 : Statistics :: Grounding time = 0.065888s, Solving time = 0.010728s, Total time = 0.076616s
10 : Statistics :: Grounding time = 0.056956s, Solving time = 0.011145s, Total time = 0.068101s
11 : Statistics :: Grounding time = 0.063879s, Solving time = 0.013402s, Total time = 0.077281s
12 : Statistics :: Grounding time = 0.062434s, Solving time = 0.015518s, Total time = 0.077953s
13 : Statistics :: Grounding time = 0.061110s, Solving time = 0.016603s, Total time = 0.077712s
14 : Statistics :: Grounding time = 0.064795s, Solving time = 0.017923s, Total time = 0.082718s
15 : Statistics :: Grounding time = 0.063809s, Solving time = 0.018937s, Total time = 0.082747s
16 : Statistics :: Grounding time = 0.063233s, Solving time = 0.020174s, Total time = 0.083408s
17 : Statistics :: Grounding time = 0.065330s, Solving time = 0.027753s, Total time = 0.093083s
18 : Statistics :: Grounding time = 0.065203s, Solving time = 0.035064s, Total time = 0.100267s
19 : Statistics :: Grounding time = 0.068459s, Solving time = 0.041966s, Total time = 0.110425s
20 : Statistics :: Grounding time = 0.072358s, Solving time = 0.063491s, Total time = 0.135848s
21 : Statistics :: Grounding time = 0.069304s, Solving time = 0.079726s, Total time = 0.149030s
22 : Statistics :: Grounding time = 0.071231s, Solving time = 0.068278s, Total time = 0.139509s
23 : Statistics :: Grounding time = 0.071838s, Solving time = 0.119249s, Total time = 0.191087s
24 : Statistics :: Grounding time = 0.073060s, Solving time = 0.103769s, Total time = 0.176829s
25 : Statistics :: Grounding time = 0.074480s, Solving time = 0.088894s, Total time = 0.163374s

[16-02-2021_16-39-31] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.578235s, Solving time = 0.813958s, Total time = 2.491515s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-39-31] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),7)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_2,retracted),13)
occurs(2,talos,configure(manipulator_arm_1,extended),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_1,(block,6)),21)
occurs(2,talos,configure(manipulator_arm_2,extended),22)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),23)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),24)
occurs(2,talos,release(manipulator_arm_2,(block,5)),25)

[16-02-2021_16-39-31] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-39-31] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-39-31] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-39-31] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-39-31] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-39-31] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Instantiated.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Program building started.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Program building completed.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding base program parts.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.016539s.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving base program parts.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.002796s.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Incremental solving started.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.184323s.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.008145s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.065138s.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.005926s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.063517s.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.007096s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.066325s.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.010162s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.070751s.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.012498s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.072512s.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.013447s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.074499s.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.014340s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.082111s.

[16-02-2021_16-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.014775s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.078698s.

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.015791s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.084142s.

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.017444s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.081148s.

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.018123s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.081897s.

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.018106s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.087791s.

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.022084s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.082759s.

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.026462s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.087700s.

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.030198s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.087929s.

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.026865s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.087854s.

[16-02-2021_16-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.034493s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.090166s.

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.034801s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.089881s.

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.040454s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.091130s.

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.045693s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.103423s.

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.060806s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.094186s.

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Model found:
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.109876s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Incremental solving completed in 2.608610s because STOP_CON_REACHED.

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.924422s, Solving time = 0.590384s, Total time = 2.608610s
Final Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.184323s, Solving time = 0.008145s, Total time = 0.192468s
2 : Statistics :: Grounding time = 0.065138s, Solving time = 0.005926s, Total time = 0.071065s
3 : Statistics :: Grounding time = 0.063517s, Solving time = 0.007096s, Total time = 0.070613s
4 : Statistics :: Grounding time = 0.066325s, Solving time = 0.010162s, Total time = 0.076487s
5 : Statistics :: Grounding time = 0.070751s, Solving time = 0.012498s, Total time = 0.083250s
6 : Statistics :: Grounding time = 0.072512s, Solving time = 0.013447s, Total time = 0.085960s
7 : Statistics :: Grounding time = 0.074499s, Solving time = 0.014340s, Total time = 0.088840s
8 : Statistics :: Grounding time = 0.082111s, Solving time = 0.014775s, Total time = 0.096886s
9 : Statistics :: Grounding time = 0.078698s, Solving time = 0.015791s, Total time = 0.094489s
10 : Statistics :: Grounding time = 0.084142s, Solving time = 0.017444s, Total time = 0.101587s
11 : Statistics :: Grounding time = 0.081148s, Solving time = 0.018123s, Total time = 0.099271s
12 : Statistics :: Grounding time = 0.081897s, Solving time = 0.018106s, Total time = 0.100003s
13 : Statistics :: Grounding time = 0.087791s, Solving time = 0.022084s, Total time = 0.109875s
14 : Statistics :: Grounding time = 0.082759s, Solving time = 0.026462s, Total time = 0.109221s
15 : Statistics :: Grounding time = 0.087700s, Solving time = 0.030198s, Total time = 0.117898s
16 : Statistics :: Grounding time = 0.087929s, Solving time = 0.026865s, Total time = 0.114794s
17 : Statistics :: Grounding time = 0.087854s, Solving time = 0.034493s, Total time = 0.122347s
18 : Statistics :: Grounding time = 0.090166s, Solving time = 0.034801s, Total time = 0.124967s
19 : Statistics :: Grounding time = 0.089881s, Solving time = 0.040454s, Total time = 0.130335s
20 : Statistics :: Grounding time = 0.091130s, Solving time = 0.045693s, Total time = 0.136823s
21 : Statistics :: Grounding time = 0.103423s, Solving time = 0.060806s, Total time = 0.164229s
22 : Statistics :: Grounding time = 0.094186s, Solving time = 0.109876s, Total time = 0.204062s

[16-02-2021_16-39-33] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.924422s, Solving time = 0.590384s, Total time = 2.608610s
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-39-33] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),22)

[16-02-2021_16-39-33] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.683723s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.491515s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     2.608610s : Steps =    22 : Actions =    22 |  
  ====================================================================  

[16-02-2021_16-39-33] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-39-33] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-39-33] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-39-33] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-39-33] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-39-33] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-39-33] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-39-33] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Instantiated.

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> The logic program was extended with 22 rules into program part plan_module(step, start).

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> The logic program was extended with 3656 rules into program part state_module(step).

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=22, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 22], range_=IncRange(start=22, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 22, Max end step = None
Step inc = 1, Step inc init = 24, Stop con = StopCondition.Satisfiable

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Program building started.

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Program building completed.

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding base program parts.

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.023365s.

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving base program parts.

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.003648s.

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Incremental solving started.

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [1]:
Current step bound = 23
End step min = 22
End step max = None

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [23]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 22]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 22]), ('conformance_module', [23])].

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.317951s.

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.033048s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [2]:
Current step bound = 24
End step min = 22
End step max = None

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 22]), ('conformance_module', [24])].

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.069610s.

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.006722s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [3]:
Current step bound = 25
End step min = 22
End step max = None

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 22]), ('conformance_module', [25])].

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.069293s.

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.007932s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [4]:
Current step bound = 26
End step min = 22
End step max = None

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 22]), ('conformance_module', [26])].

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.072604s.

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.009875s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [5]:
Current step bound = 27
End step min = 22
End step max = None

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 22]), ('conformance_module', [27])].

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.075188s.

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.012737s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [6]:
Current step bound = 28
End step min = 22
End step max = None

[16-02-2021_16-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 22]), ('conformance_module', [28])].

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.078656s.

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.014695s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [7]:
Current step bound = 29
End step min = 22
End step max = None

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 22]), ('conformance_module', [29])].

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.077176s.

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.015088s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [8]:
Current step bound = 30
End step min = 22
End step max = None

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 22]), ('conformance_module', [30])].

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.082152s.

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.017131s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [9]:
Current step bound = 31
End step min = 22
End step max = None

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 22]), ('conformance_module', [31])].

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.087652s.

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.017664s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [10]:
Current step bound = 32
End step min = 22
End step max = None

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 22]), ('conformance_module', [32])].

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.089152s.

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.019430s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [11]:
Current step bound = 33
End step min = 22
End step max = None

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 22]), ('conformance_module', [33])].

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.087389s.

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.018770s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [12]:
Current step bound = 34
End step min = 22
End step max = None

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 22]), ('conformance_module', [34])].

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.088946s.

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.020140s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [13]:
Current step bound = 35
End step min = 22
End step max = None

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 22]), ('conformance_module', [35])].

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.091333s.

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.021274s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [14]:
Current step bound = 36
End step min = 22
End step max = None

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 22]), ('conformance_module', [36])].

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.092677s.

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.029427s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [15]:
Current step bound = 37
End step min = 22
End step max = None

[16-02-2021_16-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 22]), ('conformance_module', [37])].

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.093784s.

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.035823s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [16]:
Current step bound = 38
End step min = 22
End step max = None

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 22]), ('conformance_module', [38])].

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.095351s.

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.041030s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [17]:
Current step bound = 39
End step min = 22
End step max = None

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 22]), ('conformance_module', [39])].

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.096142s.

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.044679s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [18]:
Current step bound = 40
End step min = 22
End step max = None

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 22]), ('conformance_module', [40])].

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.103015s.

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.050248s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [19]:
Current step bound = 41
End step min = 22
End step max = None

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 22]), ('conformance_module', [41])].

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.100710s.

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Model found:
Model :: Total atoms = 9423, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.079770s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Incremental solving completed in 2.486680s because STOP_CON_REACHED.

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.892149s, Solving time = 0.499131s, Total time = 2.486680s
Final Model :: Total atoms = 9423, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.317951s, Solving time = 0.033048s, Total time = 0.350999s
2 : Statistics :: Grounding time = 0.069610s, Solving time = 0.006722s, Total time = 0.076333s
3 : Statistics :: Grounding time = 0.069293s, Solving time = 0.007932s, Total time = 0.077225s
4 : Statistics :: Grounding time = 0.072604s, Solving time = 0.009875s, Total time = 0.082479s
5 : Statistics :: Grounding time = 0.075188s, Solving time = 0.012737s, Total time = 0.087925s
6 : Statistics :: Grounding time = 0.078656s, Solving time = 0.014695s, Total time = 0.093351s
7 : Statistics :: Grounding time = 0.077176s, Solving time = 0.015088s, Total time = 0.092264s
8 : Statistics :: Grounding time = 0.082152s, Solving time = 0.017131s, Total time = 0.099283s
9 : Statistics :: Grounding time = 0.087652s, Solving time = 0.017664s, Total time = 0.105316s
10 : Statistics :: Grounding time = 0.089152s, Solving time = 0.019430s, Total time = 0.108582s
11 : Statistics :: Grounding time = 0.087389s, Solving time = 0.018770s, Total time = 0.106160s
12 : Statistics :: Grounding time = 0.088946s, Solving time = 0.020140s, Total time = 0.109086s
13 : Statistics :: Grounding time = 0.091333s, Solving time = 0.021274s, Total time = 0.112607s
14 : Statistics :: Grounding time = 0.092677s, Solving time = 0.029427s, Total time = 0.122104s
15 : Statistics :: Grounding time = 0.093784s, Solving time = 0.035823s, Total time = 0.129608s
16 : Statistics :: Grounding time = 0.095351s, Solving time = 0.041030s, Total time = 0.136380s
17 : Statistics :: Grounding time = 0.096142s, Solving time = 0.044679s, Total time = 0.140820s
18 : Statistics :: Grounding time = 0.103015s, Solving time = 0.050248s, Total time = 0.153264s
19 : Statistics :: Grounding time = 0.100710s, Solving time = 0.079770s, Total time = 0.180480s

[16-02-2021_16-39-36] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.892149s, Solving time = 0.499131s, Total time = 2.486680s
Model :: Total atoms = 9423, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-39-36] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,configure(manipulator_limb_1,extended),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),38)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),39)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),40)
occurs(1,talos,release(manipulator_end_2,(block,5)),41)

[16-02-2021_16-39-36] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     2.486680s : Steps =    41 : Actions =    41 |  
  ====================================================================  

[16-02-2021_16-39-36] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-39-36] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-39-36] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-39-36] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-39-36] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-39-36] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-39-36] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-39-36] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Instantiated.

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Program building started.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Program building completed.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding base program parts.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.021597s.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving base program parts.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.002905s.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Incremental solving started.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.135311s.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.019404s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.053519s.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.007221s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.055177s.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.008983s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.056937s.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.009719s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.059743s.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.011107s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.066538s.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.011512s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.061769s.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.012366s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.065258s.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.012297s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.070787s.

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Model found:
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.015746s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Incremental solving completed in 0.778155s because STOP_CON_REACHED.

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.646635s, Solving time = 0.111261s, Total time = 0.778155s
Final Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.135311s, Solving time = 0.019404s, Total time = 0.154715s
2 : Statistics :: Grounding time = 0.053519s, Solving time = 0.007221s, Total time = 0.060740s
3 : Statistics :: Grounding time = 0.055177s, Solving time = 0.008983s, Total time = 0.064160s
4 : Statistics :: Grounding time = 0.056937s, Solving time = 0.009719s, Total time = 0.066656s
5 : Statistics :: Grounding time = 0.059743s, Solving time = 0.011107s, Total time = 0.070850s
6 : Statistics :: Grounding time = 0.066538s, Solving time = 0.011512s, Total time = 0.078050s
7 : Statistics :: Grounding time = 0.061769s, Solving time = 0.012366s, Total time = 0.074135s
8 : Statistics :: Grounding time = 0.065258s, Solving time = 0.012297s, Total time = 0.077555s
9 : Statistics :: Grounding time = 0.070787s, Solving time = 0.015746s, Total time = 0.086533s

[16-02-2021_16-39-38] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.646635s, Solving time = 0.111261s, Total time = 0.778155s
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-39-38] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),7)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_2,retracted),13)
occurs(2,talos,configure(manipulator_arm_1,extended),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_1,(block,6)),21)
occurs(2,talos,configure(manipulator_arm_2,extended),22)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),23)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),24)
occurs(2,talos,release(manipulator_arm_2,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),26)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),27)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),28)
occurs(2,talos,release(manipulator_arm_2,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[16-02-2021_16-39-38] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-39-38] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-39-38] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-39-38] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-39-38] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-39-38] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Instantiated.

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> The logic program was extended with 41 rules into program part plan_module(step, start).

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> The logic program was extended with 6620 rules into program part state_module(step).

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=41, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 41], range_=IncRange(start=41, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 41, Max end step = None
Step inc = 1, Step inc init = 43, Stop con = StopCondition.Satisfiable

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Program building started.

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Program building completed.

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding base program parts.

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.028232s.

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving base program parts.

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.003746s.

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Incremental solving started.

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [1]:
Current step bound = 42
End step min = 41
End step max = None

[16-02-2021_16-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [42]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 41]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 41]), ('conformance_module', [42])].

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.435123s.

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.052900s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [2]:
Current step bound = 43
End step min = 41
End step max = None

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 41]), ('conformance_module', [43])].

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.076697s.

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.009058s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [3]:
Current step bound = 44
End step min = 41
End step max = None

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 41]), ('conformance_module', [44])].

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.078981s.

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.012431s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [4]:
Current step bound = 45
End step min = 41
End step max = None

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 41]), ('conformance_module', [45])].

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.087792s.

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.014802s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [5]:
Current step bound = 46
End step min = 41
End step max = None

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 41]), ('conformance_module', [46])].

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.083749s.

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Model found:
Model :: Total atoms = 10113, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.017515s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Incremental solving completed in 0.918532s because STOP_CON_REACHED.

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.790574s, Solving time = 0.110453s, Total time = 0.918532s
Final Model :: Total atoms = 10113, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.435123s, Solving time = 0.052900s, Total time = 0.488023s
2 : Statistics :: Grounding time = 0.076697s, Solving time = 0.009058s, Total time = 0.085755s
3 : Statistics :: Grounding time = 0.078981s, Solving time = 0.012431s, Total time = 0.091412s
4 : Statistics :: Grounding time = 0.087792s, Solving time = 0.014802s, Total time = 0.102594s
5 : Statistics :: Grounding time = 0.083749s, Solving time = 0.017515s, Total time = 0.101265s

[16-02-2021_16-39-39] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.790574s, Solving time = 0.110453s, Total time = 0.918532s
Model :: Total atoms = 10113, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-39-39] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,configure(manipulator_limb_1,extended),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),38)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),39)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),40)
occurs(1,talos,release(manipulator_end_2,(block,5)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),43)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),44)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),45)
occurs(1,talos,release(manipulator_end_2,(block,3)),46)

[16-02-2021_16-39-39] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.778155s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     0.918532s : Steps =    46 : Actions =    46 |  
  ====================================================================  

[16-02-2021_16-39-39] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-39-39] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-39-39] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-39-39] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-39-39] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-39-39] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-39-39] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-39-39] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Instantiated.

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-39-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> The logic program was extended with 46 rules into program part plan_module(step, start).

[16-02-2021_16-39-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> The logic program was extended with 7400 rules into program part state_module(step).

[16-02-2021_16-39-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=46, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 46], range_=IncRange(start=46, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 46, Max end step = None
Step inc = 1, Step inc init = 48, Stop con = StopCondition.Satisfiable

[16-02-2021_16-39-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Program building started.

[16-02-2021_16-39-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Program building completed.

[16-02-2021_16-39-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding base program parts.

[16-02-2021_16-39-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.031130s.

[16-02-2021_16-39-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving base program parts.

[16-02-2021_16-39-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.003517s.

[16-02-2021_16-39-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Incremental solving started.

[16-02-2021_16-39-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [1]:
Current step bound = 47
End step min = 46
End step max = None

[16-02-2021_16-39-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [47]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 46]), ('conformance_module', [46]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 46]), ('conformance_module', [47])].

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.460104s.

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.058039s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [2]:
Current step bound = 48
End step min = 46
End step max = None

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 46]), ('conformance_module', [48])].

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.079111s.

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.009243s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [3]:
Current step bound = 49
End step min = 46
End step max = None

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 46]), ('conformance_module', [49])].

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.079123s.

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.013180s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [4]:
Current step bound = 50
End step min = 46
End step max = None

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 46]), ('conformance_module', [50])].

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.090349s.

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.016742s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [5]:
Current step bound = 51
End step min = 46
End step max = None

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 46]), ('conformance_module', [51])].

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.090806s.

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.016574s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [6]:
Current step bound = 52
End step min = 46
End step max = None

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 46]), ('conformance_module', [52])].

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.089553s.

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.018628s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [7]:
Current step bound = 53
End step min = 46
End step max = None

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 46]), ('conformance_module', [53])].

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.091159s.

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.022333s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [8]:
Current step bound = 54
End step min = 46
End step max = None

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 46]), ('conformance_module', [54])].

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.092111s.

[16-02-2021_16-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.022889s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [9]:
Current step bound = 55
End step min = 46
End step max = None

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 46]), ('conformance_module', [55])].

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.094383s.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.030739s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [10]:
Current step bound = 56
End step min = 46
End step max = None

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 46]), ('conformance_module', [56])].

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.097638s.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.036116s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [11]:
Current step bound = 57
End step min = 46
End step max = None

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 46]), ('conformance_module', [57])].

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.100169s.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Model found:
Model :: Total atoms = 12209, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.046673s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Incremental solving completed in 1.743373s because STOP_CON_REACHED.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.395635s, Solving time = 0.294672s, Total time = 1.743373s
Final Model :: Total atoms = 12209, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.460104s, Solving time = 0.058039s, Total time = 0.518143s
2 : Statistics :: Grounding time = 0.079111s, Solving time = 0.009243s, Total time = 0.088354s
3 : Statistics :: Grounding time = 0.079123s, Solving time = 0.013180s, Total time = 0.092302s
4 : Statistics :: Grounding time = 0.090349s, Solving time = 0.016742s, Total time = 0.107091s
5 : Statistics :: Grounding time = 0.090806s, Solving time = 0.016574s, Total time = 0.107379s
6 : Statistics :: Grounding time = 0.089553s, Solving time = 0.018628s, Total time = 0.108181s
7 : Statistics :: Grounding time = 0.091159s, Solving time = 0.022333s, Total time = 0.113491s
8 : Statistics :: Grounding time = 0.092111s, Solving time = 0.022889s, Total time = 0.115001s
9 : Statistics :: Grounding time = 0.094383s, Solving time = 0.030739s, Total time = 0.125122s
10 : Statistics :: Grounding time = 0.097638s, Solving time = 0.036116s, Total time = 0.133753s
11 : Statistics :: Grounding time = 0.100169s, Solving time = 0.046673s, Total time = 0.146842s

[16-02-2021_16-39-42] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.395635s, Solving time = 0.294672s, Total time = 1.743373s
Model :: Total atoms = 12209, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-39-42] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,configure(manipulator_limb_1,extended),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),38)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),39)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),40)
occurs(1,talos,release(manipulator_end_2,(block,5)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),43)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),44)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),45)
occurs(1,talos,release(manipulator_end_2,(block,3)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),48)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),49)
occurs(1,talos,release(manipulator_end_2,(block,3)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),52)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),53)
occurs(1,talos,release(manipulator_end_2,(block,2)),54)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),55)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),56)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),57)

[16-02-2021_16-39-42] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.743373s : Steps =    57 : Actions =    57 |  
  ====================================================================  

[16-02-2021_16-39-42] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-39-42] INFO :: Experiment >> 

      ================================================      
            Experimental run 5 : Time 15.769409s            
      ================================================      

[16-02-2021_16-39-42] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-39-42] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-39-42] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-39-42] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-39-42] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-39-42] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Instantiated.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Program building started.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Program building completed.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding base program parts.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.014334s.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving base program parts.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.003102s.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Incremental solving started.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.039412s.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.004978s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.032610s.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.002996s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.033775s.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.004445s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.034822s.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.004859s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.035186s.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.005643s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.037093s.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.006622s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.038450s.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.007124s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.037507s.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.009026s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-39-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.041580s.

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.010121s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.043647s.

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.012080s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.039514s.

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.015238s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.041295s.

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.022123s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.040670s.

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.029018s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.042055s.

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.047146s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.043131s.

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.071349s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.080803s.

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.128076s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.081950s.

[16-02-2021_16-39-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.200117s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.084059s.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Model found:
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.080694s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Incremental solving completed in 1.551862s because STOP_CON_REACHED.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.841891s, Solving time = 0.664759s, Total time = 1.551862s
Final Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039412s, Solving time = 0.004978s, Total time = 0.044390s
2 : Statistics :: Grounding time = 0.032610s, Solving time = 0.002996s, Total time = 0.035606s
3 : Statistics :: Grounding time = 0.033775s, Solving time = 0.004445s, Total time = 0.038219s
4 : Statistics :: Grounding time = 0.034822s, Solving time = 0.004859s, Total time = 0.039681s
5 : Statistics :: Grounding time = 0.035186s, Solving time = 0.005643s, Total time = 0.040829s
6 : Statistics :: Grounding time = 0.037093s, Solving time = 0.006622s, Total time = 0.043716s
7 : Statistics :: Grounding time = 0.038450s, Solving time = 0.007124s, Total time = 0.045574s
8 : Statistics :: Grounding time = 0.037507s, Solving time = 0.009026s, Total time = 0.046533s
9 : Statistics :: Grounding time = 0.041580s, Solving time = 0.010121s, Total time = 0.051701s
10 : Statistics :: Grounding time = 0.043647s, Solving time = 0.012080s, Total time = 0.055727s
11 : Statistics :: Grounding time = 0.039514s, Solving time = 0.015238s, Total time = 0.054752s
12 : Statistics :: Grounding time = 0.041295s, Solving time = 0.022123s, Total time = 0.063418s
13 : Statistics :: Grounding time = 0.040670s, Solving time = 0.029018s, Total time = 0.069688s
14 : Statistics :: Grounding time = 0.042055s, Solving time = 0.047146s, Total time = 0.089201s
15 : Statistics :: Grounding time = 0.043131s, Solving time = 0.071349s, Total time = 0.114480s
16 : Statistics :: Grounding time = 0.080803s, Solving time = 0.128076s, Total time = 0.208878s
17 : Statistics :: Grounding time = 0.081950s, Solving time = 0.200117s, Total time = 0.282067s
18 : Statistics :: Grounding time = 0.084059s, Solving time = 0.080694s, Total time = 0.164753s

[16-02-2021_16-39-44] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.841891s, Solving time = 0.664759s, Total time = 1.551862s
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-39-44] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),8)
occurs(3,talos,release(manipulator_arm_1,(block,3)),9)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),10)
occurs(3,talos,release(manipulator_arm_2,(block,5)),11)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),12)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[16-02-2021_16-39-44] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-39-44] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-39-44] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-39-44] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-39-44] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-39-44] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Instantiated.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Program building started.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Program building completed.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding base program parts.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.014423s.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving base program parts.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.002834s.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Incremental solving started.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.064791s.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.006132s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.043936s.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.004403s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.048835s.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.004458s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.046207s.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.007180s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.049835s.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.008471s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.055519s.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.009167s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.053962s.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.010261s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.056914s.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.009950s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.056955s.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.010732s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.056928s.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.011232s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.059692s.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.012755s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-39-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.060655s.

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.013987s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.061337s.

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.015684s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.061414s.

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.014908s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.062608s.

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.018303s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.066205s.

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.019765s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.066145s.

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.024883s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.066453s.

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.041342s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.073221s.

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.040901s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.067029s.

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.054284s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.069240s.

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.048440s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-39-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.071545s.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.083415s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.071708s.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.081380s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.073004s.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Model found:
Model :: Total atoms = 6031, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.073823s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Incremental solving completed in 2.203255s because STOP_CON_REACHED.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.478561s, Solving time = 0.628691s, Total time = 2.203255s
Final Model :: Total atoms = 6031, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.064791s, Solving time = 0.006132s, Total time = 0.070922s
2 : Statistics :: Grounding time = 0.043936s, Solving time = 0.004403s, Total time = 0.048339s
3 : Statistics :: Grounding time = 0.048835s, Solving time = 0.004458s, Total time = 0.053293s
4 : Statistics :: Grounding time = 0.046207s, Solving time = 0.007180s, Total time = 0.053387s
5 : Statistics :: Grounding time = 0.049835s, Solving time = 0.008471s, Total time = 0.058306s
6 : Statistics :: Grounding time = 0.055519s, Solving time = 0.009167s, Total time = 0.064686s
7 : Statistics :: Grounding time = 0.053962s, Solving time = 0.010261s, Total time = 0.064223s
8 : Statistics :: Grounding time = 0.056914s, Solving time = 0.009950s, Total time = 0.066864s
9 : Statistics :: Grounding time = 0.056955s, Solving time = 0.010732s, Total time = 0.067688s
10 : Statistics :: Grounding time = 0.056928s, Solving time = 0.011232s, Total time = 0.068160s
11 : Statistics :: Grounding time = 0.059692s, Solving time = 0.012755s, Total time = 0.072447s
12 : Statistics :: Grounding time = 0.060655s, Solving time = 0.013987s, Total time = 0.074642s
13 : Statistics :: Grounding time = 0.061337s, Solving time = 0.015684s, Total time = 0.077021s
14 : Statistics :: Grounding time = 0.061414s, Solving time = 0.014908s, Total time = 0.076323s
15 : Statistics :: Grounding time = 0.062608s, Solving time = 0.018303s, Total time = 0.080911s
16 : Statistics :: Grounding time = 0.066205s, Solving time = 0.019765s, Total time = 0.085970s
17 : Statistics :: Grounding time = 0.066145s, Solving time = 0.024883s, Total time = 0.091028s
18 : Statistics :: Grounding time = 0.066453s, Solving time = 0.041342s, Total time = 0.107795s
19 : Statistics :: Grounding time = 0.073221s, Solving time = 0.040901s, Total time = 0.114123s
20 : Statistics :: Grounding time = 0.067029s, Solving time = 0.054284s, Total time = 0.121313s
21 : Statistics :: Grounding time = 0.069240s, Solving time = 0.048440s, Total time = 0.117680s
22 : Statistics :: Grounding time = 0.071545s, Solving time = 0.083415s, Total time = 0.154960s
23 : Statistics :: Grounding time = 0.071708s, Solving time = 0.081380s, Total time = 0.153089s
24 : Statistics :: Grounding time = 0.073004s, Solving time = 0.073823s, Total time = 0.146827s

[16-02-2021_16-39-46] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.478561s, Solving time = 0.628691s, Total time = 2.203255s
Model :: Total atoms = 6031, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-39-46] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_1,retracted),13)
occurs(2,talos,configure(manipulator_arm_2,extended),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_1,(block,6)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),22)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),23)
occurs(2,talos,release(manipulator_arm_1,(block,3)),24)

[16-02-2021_16-39-46] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-39-46] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-39-46] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 24

[16-02-2021_16-39-46] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-39-46] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-39-46] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Instantiated.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Program building started.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Program building completed.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding base program parts.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.017599s.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving base program parts.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.002907s.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Incremental solving started.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.191034s.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.009034s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.062903s.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.005817s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.063352s.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.007194s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.066485s.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.010297s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.068519s.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.013000s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.074015s.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.013592s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.074633s.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.014614s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.077351s.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.015112s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.078128s.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.015688s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.078238s.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.016898s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.083064s.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.018425s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.082854s.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.017889s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.084664s.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.021624s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.085403s.

[16-02-2021_16-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.025106s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.091561s.

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.025914s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.088003s.

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.034798s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.088726s.

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.030296s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.091346s.

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.043164s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.090856s.

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.058122s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.092738s.

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.051435s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.092273s.

[16-02-2021_16-39-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.076044s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.093018s.

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Model found:
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.081753s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Incremental solving completed in 2.634663s because STOP_CON_REACHED.

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.916762s, Solving time = 0.608723s, Total time = 2.634663s
Final Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.191034s, Solving time = 0.009034s, Total time = 0.200067s
2 : Statistics :: Grounding time = 0.062903s, Solving time = 0.005817s, Total time = 0.068721s
3 : Statistics :: Grounding time = 0.063352s, Solving time = 0.007194s, Total time = 0.070545s
4 : Statistics :: Grounding time = 0.066485s, Solving time = 0.010297s, Total time = 0.076782s
5 : Statistics :: Grounding time = 0.068519s, Solving time = 0.013000s, Total time = 0.081519s
6 : Statistics :: Grounding time = 0.074015s, Solving time = 0.013592s, Total time = 0.087607s
7 : Statistics :: Grounding time = 0.074633s, Solving time = 0.014614s, Total time = 0.089247s
8 : Statistics :: Grounding time = 0.077351s, Solving time = 0.015112s, Total time = 0.092463s
9 : Statistics :: Grounding time = 0.078128s, Solving time = 0.015688s, Total time = 0.093816s
10 : Statistics :: Grounding time = 0.078238s, Solving time = 0.016898s, Total time = 0.095136s
11 : Statistics :: Grounding time = 0.083064s, Solving time = 0.018425s, Total time = 0.101489s
12 : Statistics :: Grounding time = 0.082854s, Solving time = 0.017889s, Total time = 0.100743s
13 : Statistics :: Grounding time = 0.084664s, Solving time = 0.021624s, Total time = 0.106287s
14 : Statistics :: Grounding time = 0.085403s, Solving time = 0.025106s, Total time = 0.110509s
15 : Statistics :: Grounding time = 0.091561s, Solving time = 0.025914s, Total time = 0.117476s
16 : Statistics :: Grounding time = 0.088003s, Solving time = 0.034798s, Total time = 0.122801s
17 : Statistics :: Grounding time = 0.088726s, Solving time = 0.030296s, Total time = 0.119022s
18 : Statistics :: Grounding time = 0.091346s, Solving time = 0.043164s, Total time = 0.134511s
19 : Statistics :: Grounding time = 0.090856s, Solving time = 0.058122s, Total time = 0.148978s
20 : Statistics :: Grounding time = 0.092738s, Solving time = 0.051435s, Total time = 0.144173s
21 : Statistics :: Grounding time = 0.092273s, Solving time = 0.076044s, Total time = 0.168317s
22 : Statistics :: Grounding time = 0.093018s, Solving time = 0.081753s, Total time = 0.174770s

[16-02-2021_16-39-49] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.916762s, Solving time = 0.608723s, Total time = 2.634663s
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-39-49] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),22)

[16-02-2021_16-39-49] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.551862s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.203255s : Steps =    24 : Actions =    24 |  
  | Level 1 : Time =     2.634663s : Steps =    22 : Actions =    22 |  
  ====================================================================  

[16-02-2021_16-39-49] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-39-49] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-39-49] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-39-49] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-39-49] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 12

[16-02-2021_16-39-49] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-39-49] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 24

[16-02-2021_16-39-49] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Instantiated.

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> The logic program was extended with 24 rules into program part conformance_module(step).

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> The logic program was extended with 22 rules into program part plan_module(step, start).

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> The logic program was extended with 3656 rules into program part state_module(step).

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=22, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 22], range_=IncRange(start=22, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 22, Max end step = None
Step inc = 1, Step inc init = 24, Stop con = StopCondition.Satisfiable

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Program building started.

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Program building completed.

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding base program parts.

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.024151s.

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving base program parts.

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.003500s.

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Incremental solving started.

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [1]:
Current step bound = 23
End step min = 22
End step max = None

[16-02-2021_16-39-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [23]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 22]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 22]), ('conformance_module', [23])].

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.309840s.

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.032533s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [2]:
Current step bound = 24
End step min = 22
End step max = None

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 22]), ('conformance_module', [24])].

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.070929s.

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.006691s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [3]:
Current step bound = 25
End step min = 22
End step max = None

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 22]), ('conformance_module', [25])].

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.069754s.

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.008521s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [4]:
Current step bound = 26
End step min = 22
End step max = None

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 22]), ('conformance_module', [26])].

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.072599s.

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.010009s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [5]:
Current step bound = 27
End step min = 22
End step max = None

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 22]), ('conformance_module', [27])].

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.072366s.

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.012473s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [6]:
Current step bound = 28
End step min = 22
End step max = None

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 22]), ('conformance_module', [28])].

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.076446s.

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.014046s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [7]:
Current step bound = 29
End step min = 22
End step max = None

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 22]), ('conformance_module', [29])].

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.077569s.

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.015133s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [8]:
Current step bound = 30
End step min = 22
End step max = None

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 22]), ('conformance_module', [30])].

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.093475s.

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.016950s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [9]:
Current step bound = 31
End step min = 22
End step max = None

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 22]), ('conformance_module', [31])].

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.088692s.

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.017305s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [10]:
Current step bound = 32
End step min = 22
End step max = None

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 22]), ('conformance_module', [32])].

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.085487s.

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.018459s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [11]:
Current step bound = 33
End step min = 22
End step max = None

[16-02-2021_16-39-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 22]), ('conformance_module', [33])].

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.086917s.

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.018433s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [12]:
Current step bound = 34
End step min = 22
End step max = None

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 22]), ('conformance_module', [34])].

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.088876s.

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.019250s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [13]:
Current step bound = 35
End step min = 22
End step max = None

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 22]), ('conformance_module', [35])].

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.089826s.

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.027839s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [14]:
Current step bound = 36
End step min = 22
End step max = None

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 22]), ('conformance_module', [36])].

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.092372s.

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.035209s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [15]:
Current step bound = 37
End step min = 22
End step max = None

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 22]), ('conformance_module', [37])].

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.095763s.

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.051717s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [16]:
Current step bound = 38
End step min = 22
End step max = None

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 22]), ('conformance_module', [38])].

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.097280s.

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.049741s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [17]:
Current step bound = 39
End step min = 22
End step max = None

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 22]), ('conformance_module', [39])].

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.095782s.

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.066340s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [18]:
Current step bound = 40
End step min = 22
End step max = None

[16-02-2021_16-39-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 22]), ('conformance_module', [40])].

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.094921s.

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Model found:
Model :: Total atoms = 9252, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.082863s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Incremental solving completed in 2.378560s because STOP_CON_REACHED.

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.783046s, Solving time = 0.507012s, Total time = 2.378560s
Final Model :: Total atoms = 9252, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.309840s, Solving time = 0.032533s, Total time = 0.342373s
2 : Statistics :: Grounding time = 0.070929s, Solving time = 0.006691s, Total time = 0.077620s
3 : Statistics :: Grounding time = 0.069754s, Solving time = 0.008521s, Total time = 0.078274s
4 : Statistics :: Grounding time = 0.072599s, Solving time = 0.010009s, Total time = 0.082609s
5 : Statistics :: Grounding time = 0.072366s, Solving time = 0.012473s, Total time = 0.084839s
6 : Statistics :: Grounding time = 0.076446s, Solving time = 0.014046s, Total time = 0.090493s
7 : Statistics :: Grounding time = 0.077569s, Solving time = 0.015133s, Total time = 0.092702s
8 : Statistics :: Grounding time = 0.093475s, Solving time = 0.016950s, Total time = 0.110425s
9 : Statistics :: Grounding time = 0.088692s, Solving time = 0.017305s, Total time = 0.105996s
10 : Statistics :: Grounding time = 0.085487s, Solving time = 0.018459s, Total time = 0.103946s
11 : Statistics :: Grounding time = 0.086917s, Solving time = 0.018433s, Total time = 0.105349s
12 : Statistics :: Grounding time = 0.088876s, Solving time = 0.019250s, Total time = 0.108127s
13 : Statistics :: Grounding time = 0.089826s, Solving time = 0.027839s, Total time = 0.117665s
14 : Statistics :: Grounding time = 0.092372s, Solving time = 0.035209s, Total time = 0.127582s
15 : Statistics :: Grounding time = 0.095763s, Solving time = 0.051717s, Total time = 0.147480s
16 : Statistics :: Grounding time = 0.097280s, Solving time = 0.049741s, Total time = 0.147021s
17 : Statistics :: Grounding time = 0.095782s, Solving time = 0.066340s, Total time = 0.162122s
18 : Statistics :: Grounding time = 0.094921s, Solving time = 0.082863s, Total time = 0.177784s

[16-02-2021_16-39-52] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.783046s, Solving time = 0.507012s, Total time = 2.378560s
Model :: Total atoms = 9252, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-39-52] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),35)
occurs(1,talos,release(manipulator_end_1,(block,6)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),38)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),39)
occurs(1,talos,release(manipulator_end_1,(block,3)),40)

[16-02-2021_16-39-52] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     2.378560s : Steps =    40 : Actions =    40 |  
  ====================================================================  

[16-02-2021_16-39-52] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-39-52] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-39-52] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-39-52] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-39-52] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-39-52] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-39-52] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-39-52] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Instantiated.

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> The logic program was extended with 24 rules into program part plan_module(step, start).

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> The logic program was extended with 3608 rules into program part state_module(step).

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=24, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 24], range_=IncRange(start=24, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 24, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Program building started.

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Program building completed.

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding base program parts.

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.021314s.

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving base program parts.

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.003556s.

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Incremental solving started.

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 24
End step max = None

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [25]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 24]), ('conformance_module', [25])].

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.147590s.

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.017888s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 24
End step max = None

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 24]), ('conformance_module', [26])].

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.052015s.

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.006242s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 24
End step max = None

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 24]), ('conformance_module', [27])].

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.054509s.

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.008418s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 24
End step max = None

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 24]), ('conformance_module', [28])].

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.057845s.

[16-02-2021_16-39-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.010625s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 24
End step max = None

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 24]), ('conformance_module', [29])].

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.058152s.

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.010918s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 24
End step max = None

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 24]), ('conformance_module', [30])].

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.060658s.

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.011035s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 24
End step max = None

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 24]), ('conformance_module', [31])].

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.062734s.

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.011773s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 24
End step max = None

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 24]), ('conformance_module', [32])].

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.063215s.

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.011850s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 24
End step max = None

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 24]), ('conformance_module', [33])].

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.063971s.

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.012915s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 24
End step max = None

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 24]), ('conformance_module', [34])].

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.066951s.

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Model found:
Model :: Total atoms = 7604, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.016696s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Incremental solving completed in 0.854694s because STOP_CON_REACHED.

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.708952s, Solving time = 0.121917s, Total time = 0.854694s
Final Model :: Total atoms = 7604, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.147590s, Solving time = 0.017888s, Total time = 0.165478s
2 : Statistics :: Grounding time = 0.052015s, Solving time = 0.006242s, Total time = 0.058257s
3 : Statistics :: Grounding time = 0.054509s, Solving time = 0.008418s, Total time = 0.062927s
4 : Statistics :: Grounding time = 0.057845s, Solving time = 0.010625s, Total time = 0.068469s
5 : Statistics :: Grounding time = 0.058152s, Solving time = 0.010918s, Total time = 0.069070s
6 : Statistics :: Grounding time = 0.060658s, Solving time = 0.011035s, Total time = 0.071693s
7 : Statistics :: Grounding time = 0.062734s, Solving time = 0.011773s, Total time = 0.074506s
8 : Statistics :: Grounding time = 0.063215s, Solving time = 0.011850s, Total time = 0.075065s
9 : Statistics :: Grounding time = 0.063971s, Solving time = 0.012915s, Total time = 0.076886s
10 : Statistics :: Grounding time = 0.066951s, Solving time = 0.016696s, Total time = 0.083647s

[16-02-2021_16-39-53] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.708952s, Solving time = 0.121917s, Total time = 0.854694s
Model :: Total atoms = 7604, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-39-53] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_1,retracted),13)
occurs(2,talos,configure(manipulator_arm_2,extended),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_1,(block,6)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),22)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),23)
occurs(2,talos,release(manipulator_arm_1,(block,3)),24)
occurs(2,talos,configure(manipulator_arm_2,extended),25)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),26)
occurs(2,talos,release(manipulator_arm_2,(block,5)),27)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),28)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[16-02-2021_16-39-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-39-53] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 24

[16-02-2021_16-39-53] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 10

[16-02-2021_16-39-53] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-39-53] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-39-53] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Instantiated.

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-39-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> The logic program was extended with 40 rules into program part plan_module(step, start).

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> The logic program was extended with 6464 rules into program part state_module(step).

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=40, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 40], range_=IncRange(start=40, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 40, Max end step = None
Step inc = 1, Step inc init = 42, Stop con = StopCondition.Satisfiable

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Program building started.

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Program building completed.

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding base program parts.

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.028020s.

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving base program parts.

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.003517s.

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Incremental solving started.

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [1]:
Current step bound = 41
End step min = 40
End step max = None

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [41]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 40]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 40]), ('conformance_module', [41])].

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.432902s.

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.054444s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [2]:
Current step bound = 42
End step min = 40
End step max = None

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 40]), ('conformance_module', [42])].

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.075834s.

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.008293s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [3]:
Current step bound = 43
End step min = 40
End step max = None

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 40]), ('conformance_module', [43])].

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.075924s.

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.012370s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [4]:
Current step bound = 44
End step min = 40
End step max = None

[16-02-2021_16-39-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 40]), ('conformance_module', [44])].

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.080953s.

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.014478s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [5]:
Current step bound = 45
End step min = 40
End step max = None

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 40]), ('conformance_module', [45])].

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.084633s.

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.016326s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [6]:
Current step bound = 46
End step min = 40
End step max = None

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 40]), ('conformance_module', [46])].

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.085940s.

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Model found:
Model :: Total atoms = 10127, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.019934s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Incremental solving completed in 1.013981s because STOP_CON_REACHED.

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.864205s, Solving time = 0.129363s, Total time = 1.013981s
Final Model :: Total atoms = 10127, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.432902s, Solving time = 0.054444s, Total time = 0.487345s
2 : Statistics :: Grounding time = 0.075834s, Solving time = 0.008293s, Total time = 0.084127s
3 : Statistics :: Grounding time = 0.075924s, Solving time = 0.012370s, Total time = 0.088294s
4 : Statistics :: Grounding time = 0.080953s, Solving time = 0.014478s, Total time = 0.095431s
5 : Statistics :: Grounding time = 0.084633s, Solving time = 0.016326s, Total time = 0.100958s
6 : Statistics :: Grounding time = 0.085940s, Solving time = 0.019934s, Total time = 0.105874s

[16-02-2021_16-39-55] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.864205s, Solving time = 0.129363s, Total time = 1.013981s
Model :: Total atoms = 10127, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-39-55] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),35)
occurs(1,talos,release(manipulator_end_1,(block,6)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),38)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),39)
occurs(1,talos,release(manipulator_end_1,(block,3)),40)
occurs(1,talos,configure(manipulator_limb_2,extended),41)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),42)
occurs(1,talos,release(manipulator_end_2,(block,5)),43)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),44)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),45)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),46)

[16-02-2021_16-39-55] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.854694s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     1.013981s : Steps =    46 : Actions =    46 |  
  ====================================================================  

[16-02-2021_16-39-55] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-39-55] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-39-55] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-39-55] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-39-55] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-39-55] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-39-55] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-39-55] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Instantiated.

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> The logic program was extended with 46 rules into program part plan_module(step, start).

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> The logic program was extended with 7400 rules into program part state_module(step).

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=46, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 46], range_=IncRange(start=46, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 46, Max end step = None
Step inc = 1, Step inc init = 48, Stop con = StopCondition.Satisfiable

[16-02-2021_16-39-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Program building started.

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Program building completed.

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding base program parts.

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.030707s.

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving base program parts.

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.003745s.

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Incremental solving started.

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [1]:
Current step bound = 47
End step min = 46
End step max = None

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [47]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 46]), ('conformance_module', [46]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 46]), ('conformance_module', [47])].

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.468733s.

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.060680s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [2]:
Current step bound = 48
End step min = 46
End step max = None

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 46]), ('conformance_module', [48])].

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.080642s.

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.009456s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [3]:
Current step bound = 49
End step min = 46
End step max = None

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 46]), ('conformance_module', [49])].

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.080586s.

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.012963s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [4]:
Current step bound = 50
End step min = 46
End step max = None

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 46]), ('conformance_module', [50])].

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.084890s.

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.016480s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [5]:
Current step bound = 51
End step min = 46
End step max = None

[16-02-2021_16-39-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 46]), ('conformance_module', [51])].

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.094068s.

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.016594s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [6]:
Current step bound = 52
End step min = 46
End step max = None

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 46]), ('conformance_module', [52])].

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.089513s.

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.019101s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [7]:
Current step bound = 53
End step min = 46
End step max = None

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 46]), ('conformance_module', [53])].

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.091167s.

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.022566s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [8]:
Current step bound = 54
End step min = 46
End step max = None

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 46]), ('conformance_module', [54])].

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.092821s.

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.021203s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [9]:
Current step bound = 55
End step min = 46
End step max = None

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 46]), ('conformance_module', [55])].

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.094267s.

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.024820s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [10]:
Current step bound = 56
End step min = 46
End step max = None

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 46]), ('conformance_module', [56])].

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.097815s.

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.027125s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [11]:
Current step bound = 57
End step min = 46
End step max = None

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 46]), ('conformance_module', [57])].

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.101450s.

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.032673s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [12]:
Current step bound = 58
End step min = 46
End step max = None

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 46]), ('conformance_module', [58])].

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.097691s.

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.033622s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [13]:
Current step bound = 59
End step min = 46
End step max = None

[16-02-2021_16-39-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 46]), ('conformance_module', [59])].

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.099419s.

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.051250s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [14]:
Current step bound = 60
End step min = 46
End step max = None

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 46]), ('conformance_module', [60])].

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.102624s.

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.067683s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [15]:
Current step bound = 61
End step min = 46
End step max = None

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 46]), ('conformance_module', [61])].

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.103432s.

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.108332s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [16]:
Current step bound = 62
End step min = 46
End step max = None

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 46]), ('conformance_module', [62])].

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.105687s.

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.166979s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [17]:
Current step bound = 63
End step min = 46
End step max = None

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 46]), ('conformance_module', [63])].

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.108909s.

[16-02-2021_16-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-39-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.201378s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [18]:
Current step bound = 64
End step min = 46
End step max = None

[16-02-2021_16-39-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 46]), ('conformance_module', [64])].

[16-02-2021_16-39-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.107705s.

[16-02-2021_16-39-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-39-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.294405s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-39-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [19]:
Current step bound = 65
End step min = 46
End step max = None

[16-02-2021_16-39-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 46]), ('conformance_module', [65])].

[16-02-2021_16-39-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.110536s.

[16-02-2021_16-39-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-40-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.449890s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [20]:
Current step bound = 66
End step min = 46
End step max = None

[16-02-2021_16-40-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 46]), ('conformance_module', [66])].

[16-02-2021_16-40-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.111997s.

[16-02-2021_16-40-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-40-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.727138s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [21]:
Current step bound = 67
End step min = 46
End step max = None

[16-02-2021_16-40-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 46]), ('conformance_module', [67])].

[16-02-2021_16-40-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.114249s.

[16-02-2021_16-40-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-40-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.916651s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [22]:
Current step bound = 68
End step min = 46
End step max = None

[16-02-2021_16-40-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 46]), ('conformance_module', [68])].

[16-02-2021_16-40-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.114995s.

[16-02-2021_16-40-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-40-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 1.723723s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [23]:
Current step bound = 69
End step min = 46
End step max = None

[16-02-2021_16-40-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 46]), ('conformance_module', [69])].

[16-02-2021_16-40-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.116044s.

[16-02-2021_16-40-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-40-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 2.285620s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [24]:
Current step bound = 70
End step min = 46
End step max = None

[16-02-2021_16-40-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 46]), ('conformance_module', [70])].

[16-02-2021_16-40-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.117009s.

[16-02-2021_16-40-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-40-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 3.779353s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [25]:
Current step bound = 71
End step min = 46
End step max = None

[16-02-2021_16-40-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 46]), ('conformance_module', [71])].

[16-02-2021_16-40-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.125098s.

[16-02-2021_16-40-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[16-02-2021_16-40-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Model found:
Model :: Total atoms = 14771, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-40-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.413992s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-40-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Incremental solving completed in 14.647699s because STOP_CON_REACHED.

[16-02-2021_16-40-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.942054s, Solving time = 11.487422s, Total time = 14.647699s
Final Model :: Total atoms = 14771, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-40-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.468733s, Solving time = 0.060680s, Total time = 0.529413s
2 : Statistics :: Grounding time = 0.080642s, Solving time = 0.009456s, Total time = 0.090098s
3 : Statistics :: Grounding time = 0.080586s, Solving time = 0.012963s, Total time = 0.093549s
4 : Statistics :: Grounding time = 0.084890s, Solving time = 0.016480s, Total time = 0.101369s
5 : Statistics :: Grounding time = 0.094068s, Solving time = 0.016594s, Total time = 0.110662s
6 : Statistics :: Grounding time = 0.089513s, Solving time = 0.019101s, Total time = 0.108614s
7 : Statistics :: Grounding time = 0.091167s, Solving time = 0.022566s, Total time = 0.113733s
8 : Statistics :: Grounding time = 0.092821s, Solving time = 0.021203s, Total time = 0.114024s
9 : Statistics :: Grounding time = 0.094267s, Solving time = 0.024820s, Total time = 0.119087s
10 : Statistics :: Grounding time = 0.097815s, Solving time = 0.027125s, Total time = 0.124940s
11 : Statistics :: Grounding time = 0.101450s, Solving time = 0.032673s, Total time = 0.134123s
12 : Statistics :: Grounding time = 0.097691s, Solving time = 0.033622s, Total time = 0.131313s
13 : Statistics :: Grounding time = 0.099419s, Solving time = 0.051250s, Total time = 0.150669s
14 : Statistics :: Grounding time = 0.102624s, Solving time = 0.067683s, Total time = 0.170307s
15 : Statistics :: Grounding time = 0.103432s, Solving time = 0.108332s, Total time = 0.211764s
16 : Statistics :: Grounding time = 0.105687s, Solving time = 0.166979s, Total time = 0.272666s
17 : Statistics :: Grounding time = 0.108909s, Solving time = 0.201378s, Total time = 0.310287s
18 : Statistics :: Grounding time = 0.107705s, Solving time = 0.294405s, Total time = 0.402110s
19 : Statistics :: Grounding time = 0.110536s, Solving time = 0.449890s, Total time = 0.560426s
20 : Statistics :: Grounding time = 0.111997s, Solving time = 0.727138s, Total time = 0.839135s
21 : Statistics :: Grounding time = 0.114249s, Solving time = 0.916651s, Total time = 1.030900s
22 : Statistics :: Grounding time = 0.114995s, Solving time = 1.723723s, Total time = 1.838718s
23 : Statistics :: Grounding time = 0.116044s, Solving time = 2.285620s, Total time = 2.401664s
24 : Statistics :: Grounding time = 0.117009s, Solving time = 3.779353s, Total time = 3.896363s
25 : Statistics :: Grounding time = 0.125098s, Solving time = 0.413992s, Total time = 0.539090s

[16-02-2021_16-40-10] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.942054s, Solving time = 11.487422s, Total time = 14.647699s
Model :: Total atoms = 14771, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-40-10] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),35)
occurs(1,talos,release(manipulator_end_1,(block,6)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),38)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),39)
occurs(1,talos,release(manipulator_end_1,(block,3)),40)
occurs(1,talos,configure(manipulator_limb_2,extended),41)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),42)
occurs(1,talos,release(manipulator_end_2,(block,5)),43)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),44)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),45)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),47)
occurs(1,talos,put(manipulator_end_2,(block,4),puzzle_room_table_right),48)
occurs(1,talos,release(manipulator_end_2,(block,4)),49)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),50)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),51)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),52)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),53)
occurs(1,talos,put(manipulator_end_1,(block,5),puzzle_room_table_left),54)
occurs(1,talos,release(manipulator_end_2,(block,3)),55)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),56)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),57)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),58)
occurs(1,talos,release(manipulator_end_2,(block,6)),59)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),60)
occurs(1,talos,release(manipulator_end_1,(block,5)),61)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),62)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),63)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),64)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),65)
occurs(1,talos,release(manipulator_end_1,(block,2)),66)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),67)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),68)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),69)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),70)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),71)

[16-02-2021_16-40-11] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =    14.647699s : Steps =    71 : Actions =    71 |  
  ====================================================================  

[16-02-2021_16-40-11] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-40-11] INFO :: Experiment >> 

      ================================================      
            Experimental run 6 : Time 28.451642s            
      ================================================      

[16-02-2021_16-40-11] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-40-11] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-40-11] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-40-11] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-40-11] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-40-11] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Instantiated.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Program building started.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Program building completed.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding base program parts.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.014023s.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving base program parts.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.002162s.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Incremental solving started.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.039933s.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.004926s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.031702s.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.002994s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.031349s.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.003947s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.036160s.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.005568s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.035392s.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.005256s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.036910s.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.006247s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.037691s.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.007078s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.042307s.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.008275s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.042565s.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.009773s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.040330s.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.010662s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.039468s.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.014147s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.041915s.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.016862s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.041105s.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.025465s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.042086s.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.042986s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.042361s.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.078984s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.076712s.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.110631s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.080039s.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.207767s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.087778s.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Model found:
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.072172s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Incremental solving completed in 1.520789s because STOP_CON_REACHED.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.839825s, Solving time = 0.635902s, Total time = 1.520789s
Final Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039933s, Solving time = 0.004926s, Total time = 0.044859s
2 : Statistics :: Grounding time = 0.031702s, Solving time = 0.002994s, Total time = 0.034697s
3 : Statistics :: Grounding time = 0.031349s, Solving time = 0.003947s, Total time = 0.035297s
4 : Statistics :: Grounding time = 0.036160s, Solving time = 0.005568s, Total time = 0.041728s
5 : Statistics :: Grounding time = 0.035392s, Solving time = 0.005256s, Total time = 0.040648s
6 : Statistics :: Grounding time = 0.036910s, Solving time = 0.006247s, Total time = 0.043157s
7 : Statistics :: Grounding time = 0.037691s, Solving time = 0.007078s, Total time = 0.044768s
8 : Statistics :: Grounding time = 0.042307s, Solving time = 0.008275s, Total time = 0.050582s
9 : Statistics :: Grounding time = 0.042565s, Solving time = 0.009773s, Total time = 0.052339s
10 : Statistics :: Grounding time = 0.040330s, Solving time = 0.010662s, Total time = 0.050992s
11 : Statistics :: Grounding time = 0.039468s, Solving time = 0.014147s, Total time = 0.053615s
12 : Statistics :: Grounding time = 0.041915s, Solving time = 0.016862s, Total time = 0.058776s
13 : Statistics :: Grounding time = 0.041105s, Solving time = 0.025465s, Total time = 0.066570s
14 : Statistics :: Grounding time = 0.042086s, Solving time = 0.042986s, Total time = 0.085072s
15 : Statistics :: Grounding time = 0.042361s, Solving time = 0.078984s, Total time = 0.121345s
16 : Statistics :: Grounding time = 0.076712s, Solving time = 0.110631s, Total time = 0.187343s
17 : Statistics :: Grounding time = 0.080039s, Solving time = 0.207767s, Total time = 0.287806s
18 : Statistics :: Grounding time = 0.087778s, Solving time = 0.072172s, Total time = 0.159950s

[16-02-2021_16-40-12] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.839825s, Solving time = 0.635902s, Total time = 1.520789s
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-40-12] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),8)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),9)
occurs(3,talos,release(manipulator_arm_1,(block,3)),10)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),11)
occurs(3,talos,release(manipulator_arm_2,(block,5)),12)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[16-02-2021_16-40-12] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-40-12] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-40-12] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-40-12] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-40-12] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-40-12] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Instantiated.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Program building started.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Program building completed.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding base program parts.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.016549s.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving base program parts.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.002111s.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Incremental solving started.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.063102s.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.005980s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.043605s.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.004616s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.045899s.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.004987s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.045699s.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.006921s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-40-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.049717s.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.008215s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.049448s.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.009020s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.053423s.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.009757s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.054242s.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.010398s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.058719s.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.011105s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.059771s.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.010922s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.059687s.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.013157s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.060157s.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.013723s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.062789s.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.015887s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.061745s.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.014260s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.067052s.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.018535s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.061324s.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.020949s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.070819s.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.025348s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.065963s.

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.036829s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.065692s.

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.047339s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.068399s.

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.059025s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.071350s.

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.085546s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.080740s.

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.086830s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.074304s.

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.139014s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.079916s.

[16-02-2021_16-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.124293s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.079418s.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.187078s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Incremental solving completed in 2.643968s because STOP_CON_REACHED.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.569527s, Solving time = 0.971847s, Total time = 2.643968s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.063102s, Solving time = 0.005980s, Total time = 0.069083s
2 : Statistics :: Grounding time = 0.043605s, Solving time = 0.004616s, Total time = 0.048221s
3 : Statistics :: Grounding time = 0.045899s, Solving time = 0.004987s, Total time = 0.050885s
4 : Statistics :: Grounding time = 0.045699s, Solving time = 0.006921s, Total time = 0.052620s
5 : Statistics :: Grounding time = 0.049717s, Solving time = 0.008215s, Total time = 0.057932s
6 : Statistics :: Grounding time = 0.049448s, Solving time = 0.009020s, Total time = 0.058468s
7 : Statistics :: Grounding time = 0.053423s, Solving time = 0.009757s, Total time = 0.063180s
8 : Statistics :: Grounding time = 0.054242s, Solving time = 0.010398s, Total time = 0.064639s
9 : Statistics :: Grounding time = 0.058719s, Solving time = 0.011105s, Total time = 0.069823s
10 : Statistics :: Grounding time = 0.059771s, Solving time = 0.010922s, Total time = 0.070694s
11 : Statistics :: Grounding time = 0.059687s, Solving time = 0.013157s, Total time = 0.072844s
12 : Statistics :: Grounding time = 0.060157s, Solving time = 0.013723s, Total time = 0.073880s
13 : Statistics :: Grounding time = 0.062789s, Solving time = 0.015887s, Total time = 0.078676s
14 : Statistics :: Grounding time = 0.061745s, Solving time = 0.014260s, Total time = 0.076005s
15 : Statistics :: Grounding time = 0.067052s, Solving time = 0.018535s, Total time = 0.085586s
16 : Statistics :: Grounding time = 0.061324s, Solving time = 0.020949s, Total time = 0.082273s
17 : Statistics :: Grounding time = 0.070819s, Solving time = 0.025348s, Total time = 0.096167s
18 : Statistics :: Grounding time = 0.065963s, Solving time = 0.036829s, Total time = 0.102792s
19 : Statistics :: Grounding time = 0.065692s, Solving time = 0.047339s, Total time = 0.113032s
20 : Statistics :: Grounding time = 0.068399s, Solving time = 0.059025s, Total time = 0.127424s
21 : Statistics :: Grounding time = 0.071350s, Solving time = 0.085546s, Total time = 0.156896s
22 : Statistics :: Grounding time = 0.080740s, Solving time = 0.086830s, Total time = 0.167570s
23 : Statistics :: Grounding time = 0.074304s, Solving time = 0.139014s, Total time = 0.213318s
24 : Statistics :: Grounding time = 0.079916s, Solving time = 0.124293s, Total time = 0.204209s
25 : Statistics :: Grounding time = 0.079418s, Solving time = 0.187078s, Total time = 0.266495s

[16-02-2021_16-40-15] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.569527s, Solving time = 0.971847s, Total time = 2.643968s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-40-15] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),14)
occurs(2,talos,configure(manipulator_arm_2,retracted),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),24)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),25)

[16-02-2021_16-40-15] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-40-15] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-40-15] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-40-15] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-40-15] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-40-15] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Instantiated.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Program building started.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Program building completed.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding base program parts.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.016793s.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving base program parts.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.002810s.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Incremental solving started.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.185431s.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.009116s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.064601s.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.005571s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.063921s.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.006724s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.067600s.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.009954s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.068764s.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.012354s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-40-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.072534s.

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.013493s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.075872s.

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.015184s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.077924s.

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.015026s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.077839s.

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.015266s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.084659s.

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.016572s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.080550s.

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.017498s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.082015s.

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.017598s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.089476s.

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.021674s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.085747s.

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.024166s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.093451s.

[16-02-2021_16-40-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.026535s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.087357s.

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.029398s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.091489s.

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.025614s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.098927s.

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.051527s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.092825s.

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.038422s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.092136s.

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.063715s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.096013s.

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.070271s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.093757s.

[16-02-2021_16-40-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.081931s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.094527s.

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.065960s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.095756s.

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Model found:
Model :: Total atoms = 6742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.155041s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Incremental solving completed in 3.070376s because STOP_CON_REACHED.

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.129963s, Solving time = 0.811420s, Total time = 3.070376s
Final Model :: Total atoms = 6742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.185431s, Solving time = 0.009116s, Total time = 0.194547s
2 : Statistics :: Grounding time = 0.064601s, Solving time = 0.005571s, Total time = 0.070172s
3 : Statistics :: Grounding time = 0.063921s, Solving time = 0.006724s, Total time = 0.070644s
4 : Statistics :: Grounding time = 0.067600s, Solving time = 0.009954s, Total time = 0.077553s
5 : Statistics :: Grounding time = 0.068764s, Solving time = 0.012354s, Total time = 0.081118s
6 : Statistics :: Grounding time = 0.072534s, Solving time = 0.013493s, Total time = 0.086027s
7 : Statistics :: Grounding time = 0.075872s, Solving time = 0.015184s, Total time = 0.091055s
8 : Statistics :: Grounding time = 0.077924s, Solving time = 0.015026s, Total time = 0.092951s
9 : Statistics :: Grounding time = 0.077839s, Solving time = 0.015266s, Total time = 0.093105s
10 : Statistics :: Grounding time = 0.084659s, Solving time = 0.016572s, Total time = 0.101231s
11 : Statistics :: Grounding time = 0.080550s, Solving time = 0.017498s, Total time = 0.098048s
12 : Statistics :: Grounding time = 0.082015s, Solving time = 0.017598s, Total time = 0.099613s
13 : Statistics :: Grounding time = 0.089476s, Solving time = 0.021674s, Total time = 0.111150s
14 : Statistics :: Grounding time = 0.085747s, Solving time = 0.024166s, Total time = 0.109913s
15 : Statistics :: Grounding time = 0.093451s, Solving time = 0.026535s, Total time = 0.119986s
16 : Statistics :: Grounding time = 0.087357s, Solving time = 0.029398s, Total time = 0.116754s
17 : Statistics :: Grounding time = 0.091489s, Solving time = 0.025614s, Total time = 0.117103s
18 : Statistics :: Grounding time = 0.098927s, Solving time = 0.051527s, Total time = 0.150455s
19 : Statistics :: Grounding time = 0.092825s, Solving time = 0.038422s, Total time = 0.131247s
20 : Statistics :: Grounding time = 0.092136s, Solving time = 0.063715s, Total time = 0.155852s
21 : Statistics :: Grounding time = 0.096013s, Solving time = 0.070271s, Total time = 0.166284s
22 : Statistics :: Grounding time = 0.093757s, Solving time = 0.081931s, Total time = 0.175688s
23 : Statistics :: Grounding time = 0.094527s, Solving time = 0.065960s, Total time = 0.160487s
24 : Statistics :: Grounding time = 0.095756s, Solving time = 0.155041s, Total time = 0.250797s

[16-02-2021_16-40-18] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 2.129963s, Solving time = 0.811420s, Total time = 3.070376s
Model :: Total atoms = 6742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-40-18] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),24)

[16-02-2021_16-40-18] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.520789s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.643968s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     3.070376s : Steps =    24 : Actions =    24 |  
  ====================================================================  

[16-02-2021_16-40-18] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-40-18] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-40-18] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-40-18] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-40-18] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-40-18] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-40-18] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-40-18] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Instantiated.

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> The logic program was extended with 24 rules into program part plan_module(step, start).

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> The logic program was extended with 3968 rules into program part state_module(step).

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=24, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 24], range_=IncRange(start=24, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 24, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Program building started.

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Program building completed.

[16-02-2021_16-40-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding base program parts.

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.023466s.

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving base program parts.

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.003711s.

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Incremental solving started.

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 24
End step max = None

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [25]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 24]), ('conformance_module', [25])].

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.316605s.

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.034895s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 24
End step max = None

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 24]), ('conformance_module', [26])].

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.074402s.

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.007570s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 24
End step max = None

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 24]), ('conformance_module', [27])].

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.070761s.

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.008688s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 24
End step max = None

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 24]), ('conformance_module', [28])].

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.072203s.

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.010585s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 24
End step max = None

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 24]), ('conformance_module', [29])].

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.071127s.

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.012628s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 24
End step max = None

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 24]), ('conformance_module', [30])].

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.078000s.

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.014773s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 24
End step max = None

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 24]), ('conformance_module', [31])].

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.078324s.

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.015559s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 24
End step max = None

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 24]), ('conformance_module', [32])].

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.085257s.

[16-02-2021_16-40-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.017670s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 24
End step max = None

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 24]), ('conformance_module', [33])].

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.084323s.

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.017365s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 24
End step max = None

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 24]), ('conformance_module', [34])].

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.085976s.

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.019485s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 24
End step max = None

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 24]), ('conformance_module', [35])].

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.088161s.

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.018776s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 24
End step max = None

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 24]), ('conformance_module', [36])].

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.093368s.

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.022653s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 24
End step max = None

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 24]), ('conformance_module', [37])].

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.096162s.

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.020307s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 24
End step max = None

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 24]), ('conformance_module', [38])].

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.091994s.

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.024675s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 24
End step max = None

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 24]), ('conformance_module', [39])].

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.094625s.

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.038258s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [16]:
Current step bound = 40
End step min = 24
End step max = None

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 24]), ('conformance_module', [40])].

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.096528s.

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.041367s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [17]:
Current step bound = 41
End step min = 24
End step max = None

[16-02-2021_16-40-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 24]), ('conformance_module', [41])].

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.096602s.

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.044410s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [18]:
Current step bound = 42
End step min = 24
End step max = None

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 24]), ('conformance_module', [42])].

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.096390s.

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.050008s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [19]:
Current step bound = 43
End step min = 24
End step max = None

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 24]), ('conformance_module', [43])].

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.099916s.

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Model found:
Model :: Total atoms = 9743, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.071464s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Incremental solving completed in 2.481265s because STOP_CON_REACHED.

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.894188s, Solving time = 0.494848s, Total time = 2.481265s
Final Model :: Total atoms = 9743, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.316605s, Solving time = 0.034895s, Total time = 0.351500s
2 : Statistics :: Grounding time = 0.074402s, Solving time = 0.007570s, Total time = 0.081972s
3 : Statistics :: Grounding time = 0.070761s, Solving time = 0.008688s, Total time = 0.079449s
4 : Statistics :: Grounding time = 0.072203s, Solving time = 0.010585s, Total time = 0.082788s
5 : Statistics :: Grounding time = 0.071127s, Solving time = 0.012628s, Total time = 0.083755s
6 : Statistics :: Grounding time = 0.078000s, Solving time = 0.014773s, Total time = 0.092773s
7 : Statistics :: Grounding time = 0.078324s, Solving time = 0.015559s, Total time = 0.093883s
8 : Statistics :: Grounding time = 0.085257s, Solving time = 0.017670s, Total time = 0.102927s
9 : Statistics :: Grounding time = 0.084323s, Solving time = 0.017365s, Total time = 0.101688s
10 : Statistics :: Grounding time = 0.085976s, Solving time = 0.019485s, Total time = 0.105461s
11 : Statistics :: Grounding time = 0.088161s, Solving time = 0.018776s, Total time = 0.106936s
12 : Statistics :: Grounding time = 0.093368s, Solving time = 0.022653s, Total time = 0.116021s
13 : Statistics :: Grounding time = 0.096162s, Solving time = 0.020307s, Total time = 0.116468s
14 : Statistics :: Grounding time = 0.091994s, Solving time = 0.024675s, Total time = 0.116670s
15 : Statistics :: Grounding time = 0.094625s, Solving time = 0.038258s, Total time = 0.132883s
16 : Statistics :: Grounding time = 0.096528s, Solving time = 0.041367s, Total time = 0.137895s
17 : Statistics :: Grounding time = 0.096602s, Solving time = 0.044410s, Total time = 0.141012s
18 : Statistics :: Grounding time = 0.096390s, Solving time = 0.050008s, Total time = 0.146398s
19 : Statistics :: Grounding time = 0.099916s, Solving time = 0.071464s, Total time = 0.171380s

[16-02-2021_16-40-21] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.894188s, Solving time = 0.494848s, Total time = 2.481265s
Model :: Total atoms = 9743, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-40-21] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),24)
occurs(1,talos,configure(manipulator_limb_1,extended),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),26)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),27)
occurs(1,talos,configure(manipulator_limb_2,retracted),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,configure(manipulator_limb_2,extended),37)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),40)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),41)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),42)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),43)

[16-02-2021_16-40-21] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     2.481265s : Steps =    43 : Actions =    43 |  
  ====================================================================  

[16-02-2021_16-40-21] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-40-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-40-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-40-21] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-40-21] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-40-21] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-40-21] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-40-21] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Instantiated.

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-40-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Program building started.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Program building completed.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding base program parts.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.021672s.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving base program parts.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.002883s.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Incremental solving started.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.141672s.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.020356s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.053398s.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.006332s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.053468s.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.008574s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.057743s.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.010368s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.057669s.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.010659s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.068371s.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.011706s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.062411s.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.012221s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.064041s.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.012250s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.063884s.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Model found:
Model :: Total atoms = 7581, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.015114s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Incremental solving completed in 0.775381s because STOP_CON_REACHED.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.644328s, Solving time = 0.110464s, Total time = 0.775381s
Final Model :: Total atoms = 7581, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.141672s, Solving time = 0.020356s, Total time = 0.162028s
2 : Statistics :: Grounding time = 0.053398s, Solving time = 0.006332s, Total time = 0.059731s
3 : Statistics :: Grounding time = 0.053468s, Solving time = 0.008574s, Total time = 0.062042s
4 : Statistics :: Grounding time = 0.057743s, Solving time = 0.010368s, Total time = 0.068111s
5 : Statistics :: Grounding time = 0.057669s, Solving time = 0.010659s, Total time = 0.068328s
6 : Statistics :: Grounding time = 0.068371s, Solving time = 0.011706s, Total time = 0.080077s
7 : Statistics :: Grounding time = 0.062411s, Solving time = 0.012221s, Total time = 0.074631s
8 : Statistics :: Grounding time = 0.064041s, Solving time = 0.012250s, Total time = 0.076291s
9 : Statistics :: Grounding time = 0.063884s, Solving time = 0.015114s, Total time = 0.078998s

[16-02-2021_16-40-22] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.644328s, Solving time = 0.110464s, Total time = 0.775381s
Model :: Total atoms = 7581, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-40-22] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),14)
occurs(2,talos,configure(manipulator_arm_2,retracted),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),24)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),25)
occurs(2,talos,release(manipulator_arm_1,(block,3)),26)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),27)
occurs(2,talos,release(manipulator_arm_2,(block,5)),28)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[16-02-2021_16-40-22] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-40-22] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-40-22] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-40-22] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-40-22] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-40-22] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Instantiated.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-40-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> The logic program was extended with 43 rules into program part plan_module(step, start).

[16-02-2021_16-40-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> The logic program was extended with 6932 rules into program part state_module(step).

[16-02-2021_16-40-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=43, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 43], range_=IncRange(start=43, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 43, Max end step = None
Step inc = 1, Step inc init = 45, Stop con = StopCondition.Satisfiable

[16-02-2021_16-40-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Program building started.

[16-02-2021_16-40-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Program building completed.

[16-02-2021_16-40-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding base program parts.

[16-02-2021_16-40-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.029523s.

[16-02-2021_16-40-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving base program parts.

[16-02-2021_16-40-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.003395s.

[16-02-2021_16-40-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Incremental solving started.

[16-02-2021_16-40-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [1]:
Current step bound = 44
End step min = 43
End step max = None

[16-02-2021_16-40-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [44]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 43]), ('conformance_module', [43]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 43]), ('conformance_module', [44])].

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.447868s.

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.054413s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [2]:
Current step bound = 45
End step min = 43
End step max = None

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 43]), ('conformance_module', [45])].

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.079033s.

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.008967s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [3]:
Current step bound = 46
End step min = 43
End step max = None

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 43]), ('conformance_module', [46])].

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.083697s.

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.010813s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [4]:
Current step bound = 47
End step min = 43
End step max = None

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 43]), ('conformance_module', [47])].

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.081384s.

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.015102s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [5]:
Current step bound = 48
End step min = 43
End step max = None

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 43]), ('conformance_module', [48])].

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.091357s.

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Model found:
Model :: Total atoms = 10436, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.022592s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Incremental solving completed in 0.945825s because STOP_CON_REACHED.

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.812862s, Solving time = 0.115280s, Total time = 0.945825s
Final Model :: Total atoms = 10436, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.447868s, Solving time = 0.054413s, Total time = 0.502281s
2 : Statistics :: Grounding time = 0.079033s, Solving time = 0.008967s, Total time = 0.088000s
3 : Statistics :: Grounding time = 0.083697s, Solving time = 0.010813s, Total time = 0.094509s
4 : Statistics :: Grounding time = 0.081384s, Solving time = 0.015102s, Total time = 0.096486s
5 : Statistics :: Grounding time = 0.091357s, Solving time = 0.022592s, Total time = 0.113948s

[16-02-2021_16-40-24] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.812862s, Solving time = 0.115280s, Total time = 0.945825s
Model :: Total atoms = 10436, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-40-24] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),24)
occurs(1,talos,configure(manipulator_limb_1,extended),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),26)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),27)
occurs(1,talos,configure(manipulator_limb_2,retracted),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,configure(manipulator_limb_2,extended),37)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),40)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),41)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),42)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),43)
occurs(1,talos,release(manipulator_end_1,(block,3)),44)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),45)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),46)
occurs(1,talos,release(manipulator_end_2,(block,5)),47)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),48)

[16-02-2021_16-40-24] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.775381s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     0.945825s : Steps =    48 : Actions =    48 |  
  ====================================================================  

[16-02-2021_16-40-24] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-40-24] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-40-24] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-40-24] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-40-24] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-40-24] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-40-24] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-40-24] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Instantiated.

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-40-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> The logic program was extended with 48 rules into program part plan_module(step, start).

[16-02-2021_16-40-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> The logic program was extended with 7712 rules into program part state_module(step).

[16-02-2021_16-40-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=48, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 48], range_=IncRange(start=48, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 48, Max end step = None
Step inc = 1, Step inc init = 50, Stop con = StopCondition.Satisfiable

[16-02-2021_16-40-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Program building started.

[16-02-2021_16-40-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Program building completed.

[16-02-2021_16-40-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding base program parts.

[16-02-2021_16-40-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.030348s.

[16-02-2021_16-40-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving base program parts.

[16-02-2021_16-40-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.003537s.

[16-02-2021_16-40-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Incremental solving started.

[16-02-2021_16-40-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [1]:
Current step bound = 49
End step min = 48
End step max = None

[16-02-2021_16-40-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [49]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('state_module', [46]), ('conformance_module', [46]), ('state_module', [47]), ('conformance_module', [47]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 48]), ('conformance_module', [48]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 48]), ('conformance_module', [49])].

[16-02-2021_16-40-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.486370s.

[16-02-2021_16-40-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.061129s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [2]:
Current step bound = 50
End step min = 48
End step max = None

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 48]), ('conformance_module', [50])].

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.078297s.

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.009001s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [3]:
Current step bound = 51
End step min = 48
End step max = None

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 48]), ('conformance_module', [51])].

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.079466s.

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.013436s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [4]:
Current step bound = 52
End step min = 48
End step max = None

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 48]), ('conformance_module', [52])].

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.085352s.

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.016578s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [5]:
Current step bound = 53
End step min = 48
End step max = None

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 48]), ('conformance_module', [53])].

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.087758s.

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.016586s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [6]:
Current step bound = 54
End step min = 48
End step max = None

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 48]), ('conformance_module', [54])].

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.089777s.

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.020823s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [7]:
Current step bound = 55
End step min = 48
End step max = None

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 48]), ('conformance_module', [55])].

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.095143s.

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.022445s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [8]:
Current step bound = 56
End step min = 48
End step max = None

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 48]), ('conformance_module', [56])].

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.096486s.

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.023221s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [9]:
Current step bound = 57
End step min = 48
End step max = None

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 48]), ('conformance_module', [57])].

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.095288s.

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.024843s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [10]:
Current step bound = 58
End step min = 48
End step max = None

[16-02-2021_16-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 48]), ('conformance_module', [58])].

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.097014s.

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.027706s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [11]:
Current step bound = 59
End step min = 48
End step max = None

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 48]), ('conformance_module', [59])].

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.098030s.

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.031251s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [12]:
Current step bound = 60
End step min = 48
End step max = None

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 48]), ('conformance_module', [60])].

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.099420s.

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.033215s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [13]:
Current step bound = 61
End step min = 48
End step max = None

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 48]), ('conformance_module', [61])].

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.101552s.

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.043001s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [14]:
Current step bound = 62
End step min = 48
End step max = None

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 48]), ('conformance_module', [62])].

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.106507s.

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.061973s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [15]:
Current step bound = 63
End step min = 48
End step max = None

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 48]), ('conformance_module', [63])].

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.105262s.

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.083834s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [16]:
Current step bound = 64
End step min = 48
End step max = None

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 48]), ('conformance_module', [64])].

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.107930s.

[16-02-2021_16-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.180112s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [17]:
Current step bound = 65
End step min = 48
End step max = None

[16-02-2021_16-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 48]), ('conformance_module', [65])].

[16-02-2021_16-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.111824s.

[16-02-2021_16-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.312722s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [18]:
Current step bound = 66
End step min = 48
End step max = None

[16-02-2021_16-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 48]), ('conformance_module', [66])].

[16-02-2021_16-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.110814s.

[16-02-2021_16-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.695659s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [19]:
Current step bound = 67
End step min = 48
End step max = None

[16-02-2021_16-40-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 48]), ('conformance_module', [67])].

[16-02-2021_16-40-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.112218s.

[16-02-2021_16-40-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.973160s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [20]:
Current step bound = 68
End step min = 48
End step max = None

[16-02-2021_16-40-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 48]), ('conformance_module', [68])].

[16-02-2021_16-40-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.117240s.

[16-02-2021_16-40-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 1.475892s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [21]:
Current step bound = 69
End step min = 48
End step max = None

[16-02-2021_16-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 48]), ('conformance_module', [69])].

[16-02-2021_16-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.113984s.

[16-02-2021_16-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[16-02-2021_16-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Model found:
Model :: Total atoms = 14350, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.616866s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Incremental solving completed in 7.406282s because STOP_CON_REACHED.

[16-02-2021_16-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.506079s, Solving time = 4.746990s, Total time = 7.406282s
Final Model :: Total atoms = 14350, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.486370s, Solving time = 0.061129s, Total time = 0.547499s
2 : Statistics :: Grounding time = 0.078297s, Solving time = 0.009001s, Total time = 0.087297s
3 : Statistics :: Grounding time = 0.079466s, Solving time = 0.013436s, Total time = 0.092902s
4 : Statistics :: Grounding time = 0.085352s, Solving time = 0.016578s, Total time = 0.101931s
5 : Statistics :: Grounding time = 0.087758s, Solving time = 0.016586s, Total time = 0.104344s
6 : Statistics :: Grounding time = 0.089777s, Solving time = 0.020823s, Total time = 0.110600s
7 : Statistics :: Grounding time = 0.095143s, Solving time = 0.022445s, Total time = 0.117588s
8 : Statistics :: Grounding time = 0.096486s, Solving time = 0.023221s, Total time = 0.119707s
9 : Statistics :: Grounding time = 0.095288s, Solving time = 0.024843s, Total time = 0.120130s
10 : Statistics :: Grounding time = 0.097014s, Solving time = 0.027706s, Total time = 0.124720s
11 : Statistics :: Grounding time = 0.098030s, Solving time = 0.031251s, Total time = 0.129281s
12 : Statistics :: Grounding time = 0.099420s, Solving time = 0.033215s, Total time = 0.132635s
13 : Statistics :: Grounding time = 0.101552s, Solving time = 0.043001s, Total time = 0.144553s
14 : Statistics :: Grounding time = 0.106507s, Solving time = 0.061973s, Total time = 0.168480s
15 : Statistics :: Grounding time = 0.105262s, Solving time = 0.083834s, Total time = 0.189096s
16 : Statistics :: Grounding time = 0.107930s, Solving time = 0.180112s, Total time = 0.288042s
17 : Statistics :: Grounding time = 0.111824s, Solving time = 0.312722s, Total time = 0.424546s
18 : Statistics :: Grounding time = 0.110814s, Solving time = 0.695659s, Total time = 0.806473s
19 : Statistics :: Grounding time = 0.112218s, Solving time = 0.973160s, Total time = 1.085378s
20 : Statistics :: Grounding time = 0.117240s, Solving time = 1.475892s, Total time = 1.593132s
21 : Statistics :: Grounding time = 0.113984s, Solving time = 0.616866s, Total time = 0.730850s

[16-02-2021_16-40-32] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.506079s, Solving time = 4.746990s, Total time = 7.406282s
Model :: Total atoms = 14350, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-40-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),24)
occurs(1,talos,configure(manipulator_limb_1,extended),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),26)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),27)
occurs(1,talos,configure(manipulator_limb_2,retracted),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,configure(manipulator_limb_2,extended),37)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),40)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),41)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),42)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),43)
occurs(1,talos,release(manipulator_end_1,(block,3)),44)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),45)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),46)
occurs(1,talos,release(manipulator_end_2,(block,5)),47)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),48)
occurs(1,talos,put(manipulator_end_1,(block,4),puzzle_room_table_left),49)
occurs(1,talos,release(manipulator_end_1,(block,4)),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),51)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),52)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),53)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),54)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),55)
occurs(1,talos,release(manipulator_end_2,(block,2)),56)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),57)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,2)),58)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),59)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),60)
occurs(1,talos,release(manipulator_end_2,(block,6)),61)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),62)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),63)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),64)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),65)
occurs(1,talos,release(manipulator_end_1,(block,5)),66)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),67)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),68)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),69)

[16-02-2021_16-40-33] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     7.406282s : Steps =    69 : Actions =    69 |  
  ====================================================================  

[16-02-2021_16-40-33] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-40-33] INFO :: Experiment >> 

      ================================================      
            Experimental run 7 : Time 22.015090s            
      ================================================      

[16-02-2021_16-40-33] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-40-33] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-40-33] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-40-33] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-40-33] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-40-33] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Instantiated.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Program building started.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Program building completed.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding base program parts.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.014025s.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving base program parts.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.002113s.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Incremental solving started.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.039794s.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.005908s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.030932s.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.003638s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.031492s.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.004480s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.033876s.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.005489s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.034513s.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.005723s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.036378s.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.006698s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.038202s.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.007260s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.037150s.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.008321s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.039095s.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.011267s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.040249s.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.011035s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.044859s.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.014233s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.040763s.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.020478s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.041554s.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.031247s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.042765s.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.043521s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.041980s.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.072519s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.077573s.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.117126s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.080906s.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.231236s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.083861s.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.067730s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Incremental solving completed in 1.545135s because STOP_CON_REACHED.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.829967s, Solving time = 0.670021s, Total time = 1.545135s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039794s, Solving time = 0.005908s, Total time = 0.045703s
2 : Statistics :: Grounding time = 0.030932s, Solving time = 0.003638s, Total time = 0.034570s
3 : Statistics :: Grounding time = 0.031492s, Solving time = 0.004480s, Total time = 0.035972s
4 : Statistics :: Grounding time = 0.033876s, Solving time = 0.005489s, Total time = 0.039365s
5 : Statistics :: Grounding time = 0.034513s, Solving time = 0.005723s, Total time = 0.040236s
6 : Statistics :: Grounding time = 0.036378s, Solving time = 0.006698s, Total time = 0.043076s
7 : Statistics :: Grounding time = 0.038202s, Solving time = 0.007260s, Total time = 0.045462s
8 : Statistics :: Grounding time = 0.037150s, Solving time = 0.008321s, Total time = 0.045471s
9 : Statistics :: Grounding time = 0.039095s, Solving time = 0.011267s, Total time = 0.050361s
10 : Statistics :: Grounding time = 0.040249s, Solving time = 0.011035s, Total time = 0.051284s
11 : Statistics :: Grounding time = 0.044859s, Solving time = 0.014233s, Total time = 0.059091s
12 : Statistics :: Grounding time = 0.040763s, Solving time = 0.020478s, Total time = 0.061241s
13 : Statistics :: Grounding time = 0.041554s, Solving time = 0.031247s, Total time = 0.072801s
14 : Statistics :: Grounding time = 0.042765s, Solving time = 0.043521s, Total time = 0.086287s
15 : Statistics :: Grounding time = 0.041980s, Solving time = 0.072519s, Total time = 0.114499s
16 : Statistics :: Grounding time = 0.077573s, Solving time = 0.117126s, Total time = 0.194699s
17 : Statistics :: Grounding time = 0.080906s, Solving time = 0.231236s, Total time = 0.312142s
18 : Statistics :: Grounding time = 0.083861s, Solving time = 0.067730s, Total time = 0.151591s

[16-02-2021_16-40-34] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.829967s, Solving time = 0.670021s, Total time = 1.545135s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-40-34] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),7)
occurs(3,talos,release(manipulator_arm_1,(block,5)),8)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),9)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),10)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),11)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[16-02-2021_16-40-34] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-40-34] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-40-34] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-40-34] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-40-34] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-40-34] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Instantiated.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Program building started.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Program building completed.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding base program parts.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.015148s.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving base program parts.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.002016s.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Incremental solving started.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.069267s.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.005659s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.043270s.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.003515s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.046730s.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.005256s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.045259s.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.006286s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.049662s.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.008159s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.050713s.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.008889s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.054236s.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.010066s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.054808s.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.010314s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.057881s.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.010627s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.057717s.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.011386s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.059409s.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.013328s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.059483s.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.015906s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.061663s.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.016617s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.061541s.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.020434s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.065030s.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.020105s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.067814s.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.021201s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.064912s.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.026536s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.071462s.

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.025105s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.065437s.

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.032480s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.068075s.

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.044166s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.069490s.

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.078605s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.070061s.

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.084922s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.070425s.

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.084831s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.073536s.

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.122044s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.074683s.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.111030s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Incremental solving completed in 2.448725s because STOP_CON_REACHED.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.547714s, Solving time = 0.799485s, Total time = 2.448725s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.069267s, Solving time = 0.005659s, Total time = 0.074927s
2 : Statistics :: Grounding time = 0.043270s, Solving time = 0.003515s, Total time = 0.046785s
3 : Statistics :: Grounding time = 0.046730s, Solving time = 0.005256s, Total time = 0.051987s
4 : Statistics :: Grounding time = 0.045259s, Solving time = 0.006286s, Total time = 0.051545s
5 : Statistics :: Grounding time = 0.049662s, Solving time = 0.008159s, Total time = 0.057822s
6 : Statistics :: Grounding time = 0.050713s, Solving time = 0.008889s, Total time = 0.059602s
7 : Statistics :: Grounding time = 0.054236s, Solving time = 0.010066s, Total time = 0.064302s
8 : Statistics :: Grounding time = 0.054808s, Solving time = 0.010314s, Total time = 0.065122s
9 : Statistics :: Grounding time = 0.057881s, Solving time = 0.010627s, Total time = 0.068508s
10 : Statistics :: Grounding time = 0.057717s, Solving time = 0.011386s, Total time = 0.069103s
11 : Statistics :: Grounding time = 0.059409s, Solving time = 0.013328s, Total time = 0.072737s
12 : Statistics :: Grounding time = 0.059483s, Solving time = 0.015906s, Total time = 0.075389s
13 : Statistics :: Grounding time = 0.061663s, Solving time = 0.016617s, Total time = 0.078279s
14 : Statistics :: Grounding time = 0.061541s, Solving time = 0.020434s, Total time = 0.081975s
15 : Statistics :: Grounding time = 0.065030s, Solving time = 0.020105s, Total time = 0.085136s
16 : Statistics :: Grounding time = 0.067814s, Solving time = 0.021201s, Total time = 0.089015s
17 : Statistics :: Grounding time = 0.064912s, Solving time = 0.026536s, Total time = 0.091448s
18 : Statistics :: Grounding time = 0.071462s, Solving time = 0.025105s, Total time = 0.096568s
19 : Statistics :: Grounding time = 0.065437s, Solving time = 0.032480s, Total time = 0.097917s
20 : Statistics :: Grounding time = 0.068075s, Solving time = 0.044166s, Total time = 0.112241s
21 : Statistics :: Grounding time = 0.069490s, Solving time = 0.078605s, Total time = 0.148096s
22 : Statistics :: Grounding time = 0.070061s, Solving time = 0.084922s, Total time = 0.154983s
23 : Statistics :: Grounding time = 0.070425s, Solving time = 0.084831s, Total time = 0.155256s
24 : Statistics :: Grounding time = 0.073536s, Solving time = 0.122044s, Total time = 0.195580s
25 : Statistics :: Grounding time = 0.074683s, Solving time = 0.111030s, Total time = 0.185713s

[16-02-2021_16-40-37] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.547714s, Solving time = 0.799485s, Total time = 2.448725s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-40-37] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),7)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_2,extended),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),20)
occurs(2,talos,configure(manipulator_arm_1,extended),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),23)
occurs(2,talos,release(manipulator_arm_1,(block,5)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),25)

[16-02-2021_16-40-37] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-40-37] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-40-37] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-40-37] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-40-37] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-40-37] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Instantiated.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Program building started.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Program building completed.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding base program parts.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.017034s.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving base program parts.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.002746s.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Incremental solving started.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.186251s.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.008981s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.063264s.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.005192s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.063697s.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.007163s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.066238s.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.010091s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.078402s.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.013316s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.072808s.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.012837s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.079660s.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.014360s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.077644s.

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.015083s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.077279s.

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.015632s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.079996s.

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.017077s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.081684s.

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.017124s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.082275s.

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.018115s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.084488s.

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.021646s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.085392s.

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.030441s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.091809s.

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.026607s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.086985s.

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.027579s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-40-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.088610s.

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.032429s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.090530s.

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.034632s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.090356s.

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.054901s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.093236s.

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.062480s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.092715s.

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.091214s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.098601s.

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Model found:
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.102553s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Incremental solving completed in 2.666918s because STOP_CON_REACHED.

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.928952s, Solving time = 0.642198s, Total time = 2.666918s
Final Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.186251s, Solving time = 0.008981s, Total time = 0.195231s
2 : Statistics :: Grounding time = 0.063264s, Solving time = 0.005192s, Total time = 0.068455s
3 : Statistics :: Grounding time = 0.063697s, Solving time = 0.007163s, Total time = 0.070860s
4 : Statistics :: Grounding time = 0.066238s, Solving time = 0.010091s, Total time = 0.076329s
5 : Statistics :: Grounding time = 0.078402s, Solving time = 0.013316s, Total time = 0.091718s
6 : Statistics :: Grounding time = 0.072808s, Solving time = 0.012837s, Total time = 0.085645s
7 : Statistics :: Grounding time = 0.079660s, Solving time = 0.014360s, Total time = 0.094020s
8 : Statistics :: Grounding time = 0.077644s, Solving time = 0.015083s, Total time = 0.092726s
9 : Statistics :: Grounding time = 0.077279s, Solving time = 0.015632s, Total time = 0.092910s
10 : Statistics :: Grounding time = 0.079996s, Solving time = 0.017077s, Total time = 0.097073s
11 : Statistics :: Grounding time = 0.081684s, Solving time = 0.017124s, Total time = 0.098808s
12 : Statistics :: Grounding time = 0.082275s, Solving time = 0.018115s, Total time = 0.100390s
13 : Statistics :: Grounding time = 0.084488s, Solving time = 0.021646s, Total time = 0.106134s
14 : Statistics :: Grounding time = 0.085392s, Solving time = 0.030441s, Total time = 0.115833s
15 : Statistics :: Grounding time = 0.091809s, Solving time = 0.026607s, Total time = 0.118416s
16 : Statistics :: Grounding time = 0.086985s, Solving time = 0.027579s, Total time = 0.114564s
17 : Statistics :: Grounding time = 0.088610s, Solving time = 0.032429s, Total time = 0.121040s
18 : Statistics :: Grounding time = 0.090530s, Solving time = 0.034632s, Total time = 0.125162s
19 : Statistics :: Grounding time = 0.090356s, Solving time = 0.054901s, Total time = 0.145256s
20 : Statistics :: Grounding time = 0.093236s, Solving time = 0.062480s, Total time = 0.155715s
21 : Statistics :: Grounding time = 0.092715s, Solving time = 0.091214s, Total time = 0.183929s
22 : Statistics :: Grounding time = 0.098601s, Solving time = 0.102553s, Total time = 0.201155s

[16-02-2021_16-40-39] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.928952s, Solving time = 0.642198s, Total time = 2.666918s
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-40-39] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),22)

[16-02-2021_16-40-40] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.545135s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.448725s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     2.666918s : Steps =    22 : Actions =    22 |  
  ====================================================================  

[16-02-2021_16-40-40] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-40-40] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-40-40] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-40-40] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-40-40] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-40-40] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-40-40] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-40-40] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Instantiated.

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> The logic program was extended with 22 rules into program part plan_module(step, start).

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> The logic program was extended with 3656 rules into program part state_module(step).

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=22, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 22], range_=IncRange(start=22, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 22, Max end step = None
Step inc = 1, Step inc init = 24, Stop con = StopCondition.Satisfiable

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Program building started.

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Program building completed.

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding base program parts.

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.022980s.

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving base program parts.

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.003424s.

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Incremental solving started.

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [1]:
Current step bound = 23
End step min = 22
End step max = None

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [23]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 22]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 22]), ('conformance_module', [23])].

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.313195s.

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.036326s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [2]:
Current step bound = 24
End step min = 22
End step max = None

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 22]), ('conformance_module', [24])].

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.073261s.

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.006886s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [3]:
Current step bound = 25
End step min = 22
End step max = None

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 22]), ('conformance_module', [25])].

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.069308s.

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.008474s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [4]:
Current step bound = 26
End step min = 22
End step max = None

[16-02-2021_16-40-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 22]), ('conformance_module', [26])].

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.072441s.

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.009960s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [5]:
Current step bound = 27
End step min = 22
End step max = None

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 22]), ('conformance_module', [27])].

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.074166s.

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.012529s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [6]:
Current step bound = 28
End step min = 22
End step max = None

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 22]), ('conformance_module', [28])].

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.082236s.

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.014090s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [7]:
Current step bound = 29
End step min = 22
End step max = None

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 22]), ('conformance_module', [29])].

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.078932s.

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.016123s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [8]:
Current step bound = 30
End step min = 22
End step max = None

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 22]), ('conformance_module', [30])].

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.081999s.

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.017164s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [9]:
Current step bound = 31
End step min = 22
End step max = None

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 22]), ('conformance_module', [31])].

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.084015s.

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.017448s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [10]:
Current step bound = 32
End step min = 22
End step max = None

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 22]), ('conformance_module', [32])].

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.093071s.

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.019179s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [11]:
Current step bound = 33
End step min = 22
End step max = None

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 22]), ('conformance_module', [33])].

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.088870s.

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.018994s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [12]:
Current step bound = 34
End step min = 22
End step max = None

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 22]), ('conformance_module', [34])].

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.093587s.

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.019751s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [13]:
Current step bound = 35
End step min = 22
End step max = None

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 22]), ('conformance_module', [35])].

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.091312s.

[16-02-2021_16-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.022383s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [14]:
Current step bound = 36
End step min = 22
End step max = None

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 22]), ('conformance_module', [36])].

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.092978s.

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.029660s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [15]:
Current step bound = 37
End step min = 22
End step max = None

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 22]), ('conformance_module', [37])].

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.098903s.

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.035001s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [16]:
Current step bound = 38
End step min = 22
End step max = None

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 22]), ('conformance_module', [38])].

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.095191s.

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.037990s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [17]:
Current step bound = 39
End step min = 22
End step max = None

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 22]), ('conformance_module', [39])].

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.100445s.

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.047792s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [18]:
Current step bound = 40
End step min = 22
End step max = None

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 22]), ('conformance_module', [40])].

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.097096s.

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.049900s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [19]:
Current step bound = 41
End step min = 22
End step max = None

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 22]), ('conformance_module', [41])].

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.101011s.

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Model found:
Model :: Total atoms = 9424, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.087647s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Incremental solving completed in 2.503999s because STOP_CON_REACHED.

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.904996s, Solving time = 0.510719s, Total time = 2.503999s
Final Model :: Total atoms = 9424, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.313195s, Solving time = 0.036326s, Total time = 0.349520s
2 : Statistics :: Grounding time = 0.073261s, Solving time = 0.006886s, Total time = 0.080147s
3 : Statistics :: Grounding time = 0.069308s, Solving time = 0.008474s, Total time = 0.077782s
4 : Statistics :: Grounding time = 0.072441s, Solving time = 0.009960s, Total time = 0.082401s
5 : Statistics :: Grounding time = 0.074166s, Solving time = 0.012529s, Total time = 0.086695s
6 : Statistics :: Grounding time = 0.082236s, Solving time = 0.014090s, Total time = 0.096326s
7 : Statistics :: Grounding time = 0.078932s, Solving time = 0.016123s, Total time = 0.095055s
8 : Statistics :: Grounding time = 0.081999s, Solving time = 0.017164s, Total time = 0.099163s
9 : Statistics :: Grounding time = 0.084015s, Solving time = 0.017448s, Total time = 0.101463s
10 : Statistics :: Grounding time = 0.093071s, Solving time = 0.019179s, Total time = 0.112250s
11 : Statistics :: Grounding time = 0.088870s, Solving time = 0.018994s, Total time = 0.107864s
12 : Statistics :: Grounding time = 0.093587s, Solving time = 0.019751s, Total time = 0.113338s
13 : Statistics :: Grounding time = 0.091312s, Solving time = 0.022383s, Total time = 0.113695s
14 : Statistics :: Grounding time = 0.092978s, Solving time = 0.029660s, Total time = 0.122638s
15 : Statistics :: Grounding time = 0.098903s, Solving time = 0.035001s, Total time = 0.133904s
16 : Statistics :: Grounding time = 0.095191s, Solving time = 0.037990s, Total time = 0.133180s
17 : Statistics :: Grounding time = 0.100445s, Solving time = 0.047792s, Total time = 0.148236s
18 : Statistics :: Grounding time = 0.097096s, Solving time = 0.049900s, Total time = 0.146996s
19 : Statistics :: Grounding time = 0.101011s, Solving time = 0.087647s, Total time = 0.188658s

[16-02-2021_16-40-42] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.904996s, Solving time = 0.510719s, Total time = 2.503999s
Model :: Total atoms = 9424, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-40-43] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),25)
occurs(1,talos,configure(manipulator_limb_2,retracted),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,configure(manipulator_limb_2,extended),35)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),36)
occurs(1,talos,release(manipulator_end_2,(block,6)),37)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),38)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),39)
occurs(1,talos,release(manipulator_end_1,(block,5)),40)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),41)

[16-02-2021_16-40-43] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     2.503999s : Steps =    41 : Actions =    41 |  
  ====================================================================  

[16-02-2021_16-40-43] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-40-43] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-40-43] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-40-43] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-40-43] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-40-43] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-40-43] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-40-43] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Instantiated.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Program building started.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Program building completed.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding base program parts.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.021618s.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving base program parts.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.003129s.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Incremental solving started.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.134954s.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving started.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.019381s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.053265s.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving started.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.006549s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.053579s.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving started.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.008647s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.060388s.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving started.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.009540s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.062541s.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving started.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.011137s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.069071s.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving started.

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.011013s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-40-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.064636s.

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving started.

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.011960s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.064706s.

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving started.

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.012161s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.063081s.

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving started.

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Model found:
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.015231s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Incremental solving completed in 0.777757s because STOP_CON_REACHED.

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.647839s, Solving time = 0.108748s, Total time = 0.777757s
Final Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.134954s, Solving time = 0.019381s, Total time = 0.154335s
2 : Statistics :: Grounding time = 0.053265s, Solving time = 0.006549s, Total time = 0.059814s
3 : Statistics :: Grounding time = 0.053579s, Solving time = 0.008647s, Total time = 0.062226s
4 : Statistics :: Grounding time = 0.060388s, Solving time = 0.009540s, Total time = 0.069928s
5 : Statistics :: Grounding time = 0.062541s, Solving time = 0.011137s, Total time = 0.073677s
6 : Statistics :: Grounding time = 0.069071s, Solving time = 0.011013s, Total time = 0.080084s
7 : Statistics :: Grounding time = 0.064636s, Solving time = 0.011960s, Total time = 0.076597s
8 : Statistics :: Grounding time = 0.064706s, Solving time = 0.012161s, Total time = 0.076867s
9 : Statistics :: Grounding time = 0.063081s, Solving time = 0.015231s, Total time = 0.078312s

[16-02-2021_16-40-44] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.647839s, Solving time = 0.108748s, Total time = 0.777757s
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-40-44] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),7)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_2,extended),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),20)
occurs(2,talos,configure(manipulator_arm_1,extended),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),23)
occurs(2,talos,release(manipulator_arm_1,(block,5)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),25)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),26)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),27)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),28)
occurs(2,talos,release(manipulator_arm_2,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[16-02-2021_16-40-44] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-40-44] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-40-44] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-40-44] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-40-44] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-40-44] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Instantiated.

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> The logic program was extended with 41 rules into program part plan_module(step, start).

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> The logic program was extended with 6620 rules into program part state_module(step).

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=41, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 41], range_=IncRange(start=41, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 41, Max end step = None
Step inc = 1, Step inc init = 43, Stop con = StopCondition.Satisfiable

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Program building started.

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Program building completed.

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding base program parts.

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding completed in 0.029445s.

[16-02-2021_16-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving base program parts.

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving completed in 0.003682s.

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Incremental solving started.

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Beginning Incremental call [1]:
Current step bound = 42
End step min = 41
End step max = None

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding program parts: [('check', [42]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 41]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 41]), ('conformance_module', [42])].

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding completed in 0.423414s.

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving started.

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving completed in 0.051004s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Beginning Incremental call [2]:
Current step bound = 43
End step min = 41
End step max = None

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 41]), ('conformance_module', [43])].

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding completed in 0.078747s.

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving started.

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving completed in 0.008823s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Beginning Incremental call [3]:
Current step bound = 44
End step min = 41
End step max = None

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 41]), ('conformance_module', [44])].

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding completed in 0.075755s.

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving started.

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving completed in 0.011624s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Beginning Incremental call [4]:
Current step bound = 45
End step min = 41
End step max = None

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 41]), ('conformance_module', [45])].

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding completed in 0.080988s.

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving started.

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving completed in 0.014501s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Beginning Incremental call [5]:
Current step bound = 46
End step min = 41
End step max = None

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 41]), ('conformance_module', [46])].

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding completed in 0.082920s.

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving started.

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Model found:
Model :: Total atoms = 10115, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving completed in 0.020685s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Incremental solving completed in 0.898351s because STOP_CON_REACHED.

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.771267s, Solving time = 0.110320s, Total time = 0.898351s
Final Model :: Total atoms = 10115, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.423414s, Solving time = 0.051004s, Total time = 0.474418s
2 : Statistics :: Grounding time = 0.078747s, Solving time = 0.008823s, Total time = 0.087570s
3 : Statistics :: Grounding time = 0.075755s, Solving time = 0.011624s, Total time = 0.087379s
4 : Statistics :: Grounding time = 0.080988s, Solving time = 0.014501s, Total time = 0.095489s
5 : Statistics :: Grounding time = 0.082920s, Solving time = 0.020685s, Total time = 0.103605s

[16-02-2021_16-40-45] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.771267s, Solving time = 0.110320s, Total time = 0.898351s
Model :: Total atoms = 10115, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-40-45] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),25)
occurs(1,talos,configure(manipulator_limb_2,retracted),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,configure(manipulator_limb_2,extended),35)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),36)
occurs(1,talos,release(manipulator_end_2,(block,6)),37)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),38)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),39)
occurs(1,talos,release(manipulator_end_1,(block,5)),40)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),41)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),42)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),43)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),44)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),45)
occurs(1,talos,release(manipulator_end_2,(block,3)),46)

[16-02-2021_16-40-45] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.777757s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     0.898351s : Steps =    46 : Actions =    46 |  
  ====================================================================  

[16-02-2021_16-40-45] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-40-45] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-40-45] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-40-45] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-40-45] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-40-45] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-40-45] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-40-45] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Instantiated.

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-40-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-40-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> The logic program was extended with 46 rules into program part plan_module(step, start).

[16-02-2021_16-40-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> The logic program was extended with 7400 rules into program part state_module(step).

[16-02-2021_16-40-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=46, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 46], range_=IncRange(start=46, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 46, Max end step = None
Step inc = 1, Step inc init = 48, Stop con = StopCondition.Satisfiable

[16-02-2021_16-40-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Program building started.

[16-02-2021_16-40-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Program building completed.

[16-02-2021_16-40-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding base program parts.

[16-02-2021_16-40-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.029547s.

[16-02-2021_16-40-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving base program parts.

[16-02-2021_16-40-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.003575s.

[16-02-2021_16-40-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Incremental solving started.

[16-02-2021_16-40-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [1]:
Current step bound = 47
End step min = 46
End step max = None

[16-02-2021_16-40-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [47]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 46]), ('conformance_module', [46]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 46]), ('conformance_module', [47])].

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.478182s.

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.058825s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [2]:
Current step bound = 48
End step min = 46
End step max = None

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 46]), ('conformance_module', [48])].

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.077738s.

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.009861s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [3]:
Current step bound = 49
End step min = 46
End step max = None

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 46]), ('conformance_module', [49])].

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.083037s.

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.013122s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [4]:
Current step bound = 50
End step min = 46
End step max = None

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 46]), ('conformance_module', [50])].

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.084479s.

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.016378s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [5]:
Current step bound = 51
End step min = 46
End step max = None

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 46]), ('conformance_module', [51])].

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.087189s.

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.016389s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [6]:
Current step bound = 52
End step min = 46
End step max = None

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 46]), ('conformance_module', [52])].

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.103100s.

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.018680s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [7]:
Current step bound = 53
End step min = 46
End step max = None

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 46]), ('conformance_module', [53])].

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.107034s.

[16-02-2021_16-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.023715s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [8]:
Current step bound = 54
End step min = 46
End step max = None

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 46]), ('conformance_module', [54])].

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.106299s.

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.022606s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [9]:
Current step bound = 55
End step min = 46
End step max = None

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 46]), ('conformance_module', [55])].

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.095889s.

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.027309s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [10]:
Current step bound = 56
End step min = 46
End step max = None

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 46]), ('conformance_module', [56])].

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.105039s.

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.030877s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [11]:
Current step bound = 57
End step min = 46
End step max = None

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 46]), ('conformance_module', [57])].

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.103190s.

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.033648s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [12]:
Current step bound = 58
End step min = 46
End step max = None

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 46]), ('conformance_module', [58])].

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.100247s.

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.038159s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [13]:
Current step bound = 59
End step min = 46
End step max = None

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 46]), ('conformance_module', [59])].

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.100154s.

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.040965s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [14]:
Current step bound = 60
End step min = 46
End step max = None

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 46]), ('conformance_module', [60])].

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.104890s.

[16-02-2021_16-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.053664s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [15]:
Current step bound = 61
End step min = 46
End step max = None

[16-02-2021_16-40-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 46]), ('conformance_module', [61])].

[16-02-2021_16-40-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.103999s.

[16-02-2021_16-40-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.079723s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [16]:
Current step bound = 62
End step min = 46
End step max = None

[16-02-2021_16-40-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 46]), ('conformance_module', [62])].

[16-02-2021_16-40-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.111262s.

[16-02-2021_16-40-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.138252s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [17]:
Current step bound = 63
End step min = 46
End step max = None

[16-02-2021_16-40-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 46]), ('conformance_module', [63])].

[16-02-2021_16-40-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.106080s.

[16-02-2021_16-40-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.258513s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [18]:
Current step bound = 64
End step min = 46
End step max = None

[16-02-2021_16-40-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 46]), ('conformance_module', [64])].

[16-02-2021_16-40-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.111762s.

[16-02-2021_16-40-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.475455s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [19]:
Current step bound = 65
End step min = 46
End step max = None

[16-02-2021_16-40-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 46]), ('conformance_module', [65])].

[16-02-2021_16-40-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.111766s.

[16-02-2021_16-40-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.660644s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [20]:
Current step bound = 66
End step min = 46
End step max = None

[16-02-2021_16-40-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 46]), ('conformance_module', [66])].

[16-02-2021_16-40-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.111592s.

[16-02-2021_16-40-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 1.086325s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [21]:
Current step bound = 67
End step min = 46
End step max = None

[16-02-2021_16-40-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 46]), ('conformance_module', [67])].

[16-02-2021_16-40-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.112838s.

[16-02-2021_16-40-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 1.453401s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [22]:
Current step bound = 68
End step min = 46
End step max = None

[16-02-2021_16-40-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 46]), ('conformance_module', [68])].

[16-02-2021_16-40-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.120288s.

[16-02-2021_16-40-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 1.456417s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [23]:
Current step bound = 69
End step min = 46
End step max = None

[16-02-2021_16-40-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 46]), ('conformance_module', [69])].

[16-02-2021_16-40-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.116160s.

[16-02-2021_16-40-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-40-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 2.491670s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-40-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [24]:
Current step bound = 70
End step min = 46
End step max = None

[16-02-2021_16-40-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 46]), ('conformance_module', [70])].

[16-02-2021_16-40-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.119674s.

[16-02-2021_16-40-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-41-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 3.927077s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [25]:
Current step bound = 71
End step min = 46
End step max = None

[16-02-2021_16-41-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 46]), ('conformance_module', [71])].

[16-02-2021_16-41-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.121355s.

[16-02-2021_16-41-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Model found:
Model :: Total atoms = 14767, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.722624s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Incremental solving completed in 16.398329s because STOP_CON_REACHED.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 3.012789s, Solving time = 13.157874s, Total time = 16.398329s
Final Model :: Total atoms = 14767, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.478182s, Solving time = 0.058825s, Total time = 0.537007s
2 : Statistics :: Grounding time = 0.077738s, Solving time = 0.009861s, Total time = 0.087599s
3 : Statistics :: Grounding time = 0.083037s, Solving time = 0.013122s, Total time = 0.096159s
4 : Statistics :: Grounding time = 0.084479s, Solving time = 0.016378s, Total time = 0.100857s
5 : Statistics :: Grounding time = 0.087189s, Solving time = 0.016389s, Total time = 0.103578s
6 : Statistics :: Grounding time = 0.103100s, Solving time = 0.018680s, Total time = 0.121780s
7 : Statistics :: Grounding time = 0.107034s, Solving time = 0.023715s, Total time = 0.130748s
8 : Statistics :: Grounding time = 0.106299s, Solving time = 0.022606s, Total time = 0.128905s
9 : Statistics :: Grounding time = 0.095889s, Solving time = 0.027309s, Total time = 0.123198s
10 : Statistics :: Grounding time = 0.105039s, Solving time = 0.030877s, Total time = 0.135916s
11 : Statistics :: Grounding time = 0.103190s, Solving time = 0.033648s, Total time = 0.136838s
12 : Statistics :: Grounding time = 0.100247s, Solving time = 0.038159s, Total time = 0.138406s
13 : Statistics :: Grounding time = 0.100154s, Solving time = 0.040965s, Total time = 0.141119s
14 : Statistics :: Grounding time = 0.104890s, Solving time = 0.053664s, Total time = 0.158555s
15 : Statistics :: Grounding time = 0.103999s, Solving time = 0.079723s, Total time = 0.183722s
16 : Statistics :: Grounding time = 0.111262s, Solving time = 0.138252s, Total time = 0.249514s
17 : Statistics :: Grounding time = 0.106080s, Solving time = 0.258513s, Total time = 0.364592s
18 : Statistics :: Grounding time = 0.111762s, Solving time = 0.475455s, Total time = 0.587217s
19 : Statistics :: Grounding time = 0.111766s, Solving time = 0.660644s, Total time = 0.772410s
20 : Statistics :: Grounding time = 0.111592s, Solving time = 1.086325s, Total time = 1.197917s
21 : Statistics :: Grounding time = 0.112838s, Solving time = 1.453401s, Total time = 1.566239s
22 : Statistics :: Grounding time = 0.120288s, Solving time = 1.456417s, Total time = 1.576705s
23 : Statistics :: Grounding time = 0.116160s, Solving time = 2.491670s, Total time = 2.607830s
24 : Statistics :: Grounding time = 0.119674s, Solving time = 3.927077s, Total time = 4.046751s
25 : Statistics :: Grounding time = 0.121355s, Solving time = 0.722624s, Total time = 0.843979s

[16-02-2021_16-41-03] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 3.012789s, Solving time = 13.157874s, Total time = 16.398329s
Model :: Total atoms = 14767, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-41-03] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),25)
occurs(1,talos,configure(manipulator_limb_2,retracted),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,configure(manipulator_limb_2,extended),35)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),36)
occurs(1,talos,release(manipulator_end_2,(block,6)),37)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),38)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),39)
occurs(1,talos,release(manipulator_end_1,(block,5)),40)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),41)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),42)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),43)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),44)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),45)
occurs(1,talos,release(manipulator_end_2,(block,3)),46)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,1)),47)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),48)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),49)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),50)
occurs(1,talos,release(manipulator_end_2,(block,3)),51)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),52)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),53)
occurs(1,talos,release(manipulator_end_1,(block,4)),54)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),55)
occurs(1,talos,release(manipulator_end_2,(block,2)),56)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),57)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),58)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),59)
occurs(1,talos,put(manipulator_end_1,(block,5),puzzle_room_table_left),60)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),61)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),62)
occurs(1,talos,release(manipulator_end_2,(block,6)),63)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),64)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),65)
occurs(1,talos,release(manipulator_end_1,(block,5)),66)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),67)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),68)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),69)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),70)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),71)

[16-02-2021_16-41-03] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =    16.398329s : Steps =    71 : Actions =    71 |  
  ====================================================================  

[16-02-2021_16-41-03] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-41-03] INFO :: Experiment >> 

      ================================================      
            Experimental run 8 : Time 30.306610s            
      ================================================      

[16-02-2021_16-41-03] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-41-03] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-41-03] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-41-03] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-41-03] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-41-03] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Instantiated.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Program building started.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Program building completed.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding base program parts.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.014001s.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving base program parts.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.002155s.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Incremental solving started.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.039976s.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.005795s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.030969s.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.003402s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.031132s.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.004633s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.034488s.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.005223s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.036933s.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.005566s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.038869s.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.006462s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.038253s.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.007052s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.037377s.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.007883s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.038515s.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.010933s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.041383s.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.011956s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.039738s.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.015303s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.041063s.

[16-02-2021_16-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.021528s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.045784s.

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.028783s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.042479s.

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.046332s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.042742s.

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.077636s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.076168s.

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.127068s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.079584s.

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.255521s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.083669s.

[16-02-2021_16-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.069576s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Incremental solving completed in 1.589840s because STOP_CON_REACHED.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.833123s, Solving time = 0.712807s, Total time = 1.589840s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039976s, Solving time = 0.005795s, Total time = 0.045771s
2 : Statistics :: Grounding time = 0.030969s, Solving time = 0.003402s, Total time = 0.034371s
3 : Statistics :: Grounding time = 0.031132s, Solving time = 0.004633s, Total time = 0.035765s
4 : Statistics :: Grounding time = 0.034488s, Solving time = 0.005223s, Total time = 0.039711s
5 : Statistics :: Grounding time = 0.036933s, Solving time = 0.005566s, Total time = 0.042499s
6 : Statistics :: Grounding time = 0.038869s, Solving time = 0.006462s, Total time = 0.045332s
7 : Statistics :: Grounding time = 0.038253s, Solving time = 0.007052s, Total time = 0.045305s
8 : Statistics :: Grounding time = 0.037377s, Solving time = 0.007883s, Total time = 0.045261s
9 : Statistics :: Grounding time = 0.038515s, Solving time = 0.010933s, Total time = 0.049448s
10 : Statistics :: Grounding time = 0.041383s, Solving time = 0.011956s, Total time = 0.053339s
11 : Statistics :: Grounding time = 0.039738s, Solving time = 0.015303s, Total time = 0.055040s
12 : Statistics :: Grounding time = 0.041063s, Solving time = 0.021528s, Total time = 0.062591s
13 : Statistics :: Grounding time = 0.045784s, Solving time = 0.028783s, Total time = 0.074567s
14 : Statistics :: Grounding time = 0.042479s, Solving time = 0.046332s, Total time = 0.088811s
15 : Statistics :: Grounding time = 0.042742s, Solving time = 0.077636s, Total time = 0.120378s
16 : Statistics :: Grounding time = 0.076168s, Solving time = 0.127068s, Total time = 0.203236s
17 : Statistics :: Grounding time = 0.079584s, Solving time = 0.255521s, Total time = 0.335105s
18 : Statistics :: Grounding time = 0.083669s, Solving time = 0.069576s, Total time = 0.153245s

[16-02-2021_16-41-05] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.833123s, Solving time = 0.712807s, Total time = 1.589840s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-41-05] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[16-02-2021_16-41-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-41-05] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-41-05] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-41-05] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-41-05] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-41-05] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Instantiated.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Program building started.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Program building completed.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding base program parts.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.014871s.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving base program parts.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.002092s.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Incremental solving started.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.063418s.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.005352s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.049498s.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.003998s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.046130s.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.005254s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.045629s.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.006924s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.052500s.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.008424s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.054511s.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.008857s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.053678s.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.009529s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.061065s.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.010010s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.056198s.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.010325s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.056381s.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.010937s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.060010s.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.013666s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.058595s.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.015032s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.061284s.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.016712s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.061517s.

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.019057s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.063756s.

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.019491s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.063640s.

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.021460s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.064984s.

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.025363s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.072238s.

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.039998s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.070047s.

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.048699s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.069326s.

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.067260s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.069734s.

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.075113s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.071848s.

[16-02-2021_16-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.122456s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.071160s.

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.114690s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.072702s.

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.130443s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.075743s.

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.177963s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Incremental solving completed in 2.648597s because STOP_CON_REACHED.

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.560464s, Solving time = 0.989105s, Total time = 2.648597s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.063418s, Solving time = 0.005352s, Total time = 0.068771s
2 : Statistics :: Grounding time = 0.049498s, Solving time = 0.003998s, Total time = 0.053497s
3 : Statistics :: Grounding time = 0.046130s, Solving time = 0.005254s, Total time = 0.051384s
4 : Statistics :: Grounding time = 0.045629s, Solving time = 0.006924s, Total time = 0.052554s
5 : Statistics :: Grounding time = 0.052500s, Solving time = 0.008424s, Total time = 0.060924s
6 : Statistics :: Grounding time = 0.054511s, Solving time = 0.008857s, Total time = 0.063368s
7 : Statistics :: Grounding time = 0.053678s, Solving time = 0.009529s, Total time = 0.063208s
8 : Statistics :: Grounding time = 0.061065s, Solving time = 0.010010s, Total time = 0.071076s
9 : Statistics :: Grounding time = 0.056198s, Solving time = 0.010325s, Total time = 0.066523s
10 : Statistics :: Grounding time = 0.056381s, Solving time = 0.010937s, Total time = 0.067317s
11 : Statistics :: Grounding time = 0.060010s, Solving time = 0.013666s, Total time = 0.073676s
12 : Statistics :: Grounding time = 0.058595s, Solving time = 0.015032s, Total time = 0.073627s
13 : Statistics :: Grounding time = 0.061284s, Solving time = 0.016712s, Total time = 0.077996s
14 : Statistics :: Grounding time = 0.061517s, Solving time = 0.019057s, Total time = 0.080575s
15 : Statistics :: Grounding time = 0.063756s, Solving time = 0.019491s, Total time = 0.083247s
16 : Statistics :: Grounding time = 0.063640s, Solving time = 0.021460s, Total time = 0.085099s
17 : Statistics :: Grounding time = 0.064984s, Solving time = 0.025363s, Total time = 0.090347s
18 : Statistics :: Grounding time = 0.072238s, Solving time = 0.039998s, Total time = 0.112236s
19 : Statistics :: Grounding time = 0.070047s, Solving time = 0.048699s, Total time = 0.118746s
20 : Statistics :: Grounding time = 0.069326s, Solving time = 0.067260s, Total time = 0.136586s
21 : Statistics :: Grounding time = 0.069734s, Solving time = 0.075113s, Total time = 0.144847s
22 : Statistics :: Grounding time = 0.071848s, Solving time = 0.122456s, Total time = 0.194304s
23 : Statistics :: Grounding time = 0.071160s, Solving time = 0.114690s, Total time = 0.185850s
24 : Statistics :: Grounding time = 0.072702s, Solving time = 0.130443s, Total time = 0.203145s
25 : Statistics :: Grounding time = 0.075743s, Solving time = 0.177963s, Total time = 0.253706s

[16-02-2021_16-41-07] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.560464s, Solving time = 0.989105s, Total time = 2.648597s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-41-07] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_2,(block,5)),25)

[16-02-2021_16-41-07] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-41-07] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-41-07] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-41-07] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-41-07] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-41-07] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Instantiated.

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Program building started.

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Program building completed.

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding base program parts.

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.016905s.

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving base program parts.

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.002915s.

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Incremental solving started.

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.188339s.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.008466s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.063418s.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.005393s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.064613s.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.006631s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.067741s.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.010077s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.070845s.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.012134s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.072145s.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.016436s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.076526s.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.014553s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.078466s.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.015342s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.077330s.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.016711s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.079081s.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.016471s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.080143s.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.017725s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.080896s.

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.017473s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.086202s.

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.024148s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.086092s.

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.025379s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.087577s.

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.027457s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.091325s.

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.026719s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.088868s.

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.030396s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.089930s.

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.043256s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.090830s.

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.055854s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-41-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.091235s.

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Model found:
Model :: Total atoms = 6058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.048639s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Incremental solving completed in 2.253895s because STOP_CON_REACHED.

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.728508s, Solving time = 0.442176s, Total time = 2.253895s
Final Model :: Total atoms = 6058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.188339s, Solving time = 0.008466s, Total time = 0.196805s
2 : Statistics :: Grounding time = 0.063418s, Solving time = 0.005393s, Total time = 0.068811s
3 : Statistics :: Grounding time = 0.064613s, Solving time = 0.006631s, Total time = 0.071243s
4 : Statistics :: Grounding time = 0.067741s, Solving time = 0.010077s, Total time = 0.077818s
5 : Statistics :: Grounding time = 0.070845s, Solving time = 0.012134s, Total time = 0.082978s
6 : Statistics :: Grounding time = 0.072145s, Solving time = 0.016436s, Total time = 0.088581s
7 : Statistics :: Grounding time = 0.076526s, Solving time = 0.014553s, Total time = 0.091078s
8 : Statistics :: Grounding time = 0.078466s, Solving time = 0.015342s, Total time = 0.093808s
9 : Statistics :: Grounding time = 0.077330s, Solving time = 0.016711s, Total time = 0.094041s
10 : Statistics :: Grounding time = 0.079081s, Solving time = 0.016471s, Total time = 0.095552s
11 : Statistics :: Grounding time = 0.080143s, Solving time = 0.017725s, Total time = 0.097868s
12 : Statistics :: Grounding time = 0.080896s, Solving time = 0.017473s, Total time = 0.098369s
13 : Statistics :: Grounding time = 0.086202s, Solving time = 0.024148s, Total time = 0.110350s
14 : Statistics :: Grounding time = 0.086092s, Solving time = 0.025379s, Total time = 0.111472s
15 : Statistics :: Grounding time = 0.087577s, Solving time = 0.027457s, Total time = 0.115034s
16 : Statistics :: Grounding time = 0.091325s, Solving time = 0.026719s, Total time = 0.118044s
17 : Statistics :: Grounding time = 0.088868s, Solving time = 0.030396s, Total time = 0.119264s
18 : Statistics :: Grounding time = 0.089930s, Solving time = 0.043256s, Total time = 0.133186s
19 : Statistics :: Grounding time = 0.090830s, Solving time = 0.055854s, Total time = 0.146685s
20 : Statistics :: Grounding time = 0.091235s, Solving time = 0.048639s, Total time = 0.139875s

[16-02-2021_16-41-10] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.728508s, Solving time = 0.442176s, Total time = 2.253895s
Model :: Total atoms = 6058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-41-10] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,configure(manipulator_limb_1,extended),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)

[16-02-2021_16-41-10] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.589840s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.648597s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     2.253895s : Steps =    20 : Actions =    20 |  
  ====================================================================  

[16-02-2021_16-41-10] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-41-10] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-41-10] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-41-10] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-41-10] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-41-10] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-41-10] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-41-10] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Instantiated.

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> The logic program was extended with 20 rules into program part plan_module(step, start).

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> The logic program was extended with 3344 rules into program part state_module(step).

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=20, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 20], range_=IncRange(start=20, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 20, Max end step = None
Step inc = 1, Step inc init = 22, Stop con = StopCondition.Satisfiable

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Program building started.

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Program building completed.

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding base program parts.

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.022623s.

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving base program parts.

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.003544s.

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Incremental solving started.

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [1]:
Current step bound = 21
End step min = 20
End step max = None

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [21]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 20]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 20]), ('conformance_module', [21])].

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.302125s.

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.032675s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [2]:
Current step bound = 22
End step min = 20
End step max = None

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 20]), ('conformance_module', [22])].

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.074940s.

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.007081s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [3]:
Current step bound = 23
End step min = 20
End step max = None

[16-02-2021_16-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 20]), ('conformance_module', [23])].

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.068252s.

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.008115s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [4]:
Current step bound = 24
End step min = 20
End step max = None

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 20]), ('conformance_module', [24])].

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.072371s.

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.009961s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [5]:
Current step bound = 25
End step min = 20
End step max = None

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 20]), ('conformance_module', [25])].

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.073701s.

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.015258s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [6]:
Current step bound = 26
End step min = 20
End step max = None

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 20]), ('conformance_module', [26])].

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.076390s.

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.014304s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [7]:
Current step bound = 27
End step min = 20
End step max = None

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 20]), ('conformance_module', [27])].

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.076541s.

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.016200s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [8]:
Current step bound = 28
End step min = 20
End step max = None

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 20]), ('conformance_module', [28])].

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.082781s.

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.019240s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [9]:
Current step bound = 29
End step min = 20
End step max = None

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 20]), ('conformance_module', [29])].

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.085187s.

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.017474s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [10]:
Current step bound = 30
End step min = 20
End step max = None

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 20]), ('conformance_module', [30])].

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.086196s.

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.018848s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [11]:
Current step bound = 31
End step min = 20
End step max = None

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 20]), ('conformance_module', [31])].

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.087604s.

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.018332s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [12]:
Current step bound = 32
End step min = 20
End step max = None

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 20]), ('conformance_module', [32])].

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.089773s.

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.019140s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [13]:
Current step bound = 33
End step min = 20
End step max = None

[16-02-2021_16-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 20]), ('conformance_module', [33])].

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.102878s.

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.021166s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [14]:
Current step bound = 34
End step min = 20
End step max = None

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 20]), ('conformance_module', [34])].

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.096348s.

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.021372s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [15]:
Current step bound = 35
End step min = 20
End step max = None

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 20]), ('conformance_module', [35])].

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.099582s.

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.021127s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [16]:
Current step bound = 36
End step min = 20
End step max = None

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 20]), ('conformance_module', [36])].

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.096477s.

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.022522s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [17]:
Current step bound = 37
End step min = 20
End step max = None

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 20]), ('conformance_module', [37])].

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.103661s.

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.032564s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [18]:
Current step bound = 38
End step min = 20
End step max = None

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 20]), ('conformance_module', [38])].

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.096562s.

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.035559s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [19]:
Current step bound = 39
End step min = 20
End step max = None

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 20]), ('conformance_module', [39])].

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.098765s.

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.060838s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [20]:
Current step bound = 40
End step min = 20
End step max = None

[16-02-2021_16-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 20]), ('conformance_module', [40])].

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.100949s.

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.033387s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [21]:
Current step bound = 41
End step min = 20
End step max = None

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 20]), ('conformance_module', [41])].

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.100424s.

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.067433s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [22]:
Current step bound = 42
End step min = 20
End step max = None

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 20]), ('conformance_module', [42])].

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.099911s.

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.115329s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [23]:
Current step bound = 43
End step min = 20
End step max = None

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 20]), ('conformance_module', [43])].

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.106119s.

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.075435s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [24]:
Current step bound = 44
End step min = 20
End step max = None

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 20]), ('conformance_module', [44])].

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.103071s.

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.101990s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [25]:
Current step bound = 45
End step min = 20
End step max = None

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 20]), ('conformance_module', [45])].

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.105941s.

[16-02-2021_16-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Model found:
Model :: Total atoms = 10125, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.135069s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Incremental solving completed in 3.593150s because STOP_CON_REACHED.

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.509171s, Solving time = 0.943963s, Total time = 3.593150s
Final Model :: Total atoms = 10125, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.302125s, Solving time = 0.032675s, Total time = 0.334800s
2 : Statistics :: Grounding time = 0.074940s, Solving time = 0.007081s, Total time = 0.082021s
3 : Statistics :: Grounding time = 0.068252s, Solving time = 0.008115s, Total time = 0.076367s
4 : Statistics :: Grounding time = 0.072371s, Solving time = 0.009961s, Total time = 0.082331s
5 : Statistics :: Grounding time = 0.073701s, Solving time = 0.015258s, Total time = 0.088959s
6 : Statistics :: Grounding time = 0.076390s, Solving time = 0.014304s, Total time = 0.090693s
7 : Statistics :: Grounding time = 0.076541s, Solving time = 0.016200s, Total time = 0.092741s
8 : Statistics :: Grounding time = 0.082781s, Solving time = 0.019240s, Total time = 0.102020s
9 : Statistics :: Grounding time = 0.085187s, Solving time = 0.017474s, Total time = 0.102661s
10 : Statistics :: Grounding time = 0.086196s, Solving time = 0.018848s, Total time = 0.105044s
11 : Statistics :: Grounding time = 0.087604s, Solving time = 0.018332s, Total time = 0.105936s
12 : Statistics :: Grounding time = 0.089773s, Solving time = 0.019140s, Total time = 0.108913s
13 : Statistics :: Grounding time = 0.102878s, Solving time = 0.021166s, Total time = 0.124044s
14 : Statistics :: Grounding time = 0.096348s, Solving time = 0.021372s, Total time = 0.117720s
15 : Statistics :: Grounding time = 0.099582s, Solving time = 0.021127s, Total time = 0.120709s
16 : Statistics :: Grounding time = 0.096477s, Solving time = 0.022522s, Total time = 0.118998s
17 : Statistics :: Grounding time = 0.103661s, Solving time = 0.032564s, Total time = 0.136225s
18 : Statistics :: Grounding time = 0.096562s, Solving time = 0.035559s, Total time = 0.132121s
19 : Statistics :: Grounding time = 0.098765s, Solving time = 0.060838s, Total time = 0.159603s
20 : Statistics :: Grounding time = 0.100949s, Solving time = 0.033387s, Total time = 0.134336s
21 : Statistics :: Grounding time = 0.100424s, Solving time = 0.067433s, Total time = 0.167857s
22 : Statistics :: Grounding time = 0.099911s, Solving time = 0.115329s, Total time = 0.215241s
23 : Statistics :: Grounding time = 0.106119s, Solving time = 0.075435s, Total time = 0.181554s
24 : Statistics :: Grounding time = 0.103071s, Solving time = 0.101990s, Total time = 0.205061s
25 : Statistics :: Grounding time = 0.105941s, Solving time = 0.135069s, Total time = 0.241010s

[16-02-2021_16-41-14] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 2.509171s, Solving time = 0.943963s, Total time = 3.593150s
Model :: Total atoms = 10125, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-41-14] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,configure(manipulator_limb_1,extended),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_2,retracted),21)
occurs(1,talos,configure(manipulator_limb_1,retracted),22)
occurs(1,talos,move((store_room,0)),23)
occurs(1,talos,configure(manipulator_limb_1,extended),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_2,extended),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),29)
occurs(1,talos,configure(manipulator_limb_2,retracted),30)
occurs(1,talos,configure(manipulator_limb_1,retracted),31)
occurs(1,talos,move((store_room,1)),32)
occurs(1,talos,move((hallway,0)),33)
occurs(1,talos,move((hallway,1)),34)
occurs(1,talos,move((hallway,2)),35)
occurs(1,talos,move((puzzle_room,0)),36)
occurs(1,talos,move((puzzle_room,1)),37)
occurs(1,talos,configure(manipulator_limb_1,extended),38)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),39)
occurs(1,talos,configure(manipulator_limb_2,extended),40)
occurs(1,talos,release(manipulator_end_1,(block,6)),41)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),43)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),44)
occurs(1,talos,release(manipulator_end_2,(block,5)),45)

[16-02-2021_16-41-14] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     3.593150s : Steps =    45 : Actions =    45 |  
  ====================================================================  

[16-02-2021_16-41-14] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-41-14] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-41-14] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-41-14] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-41-14] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-41-14] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-41-14] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-41-14] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Instantiated.

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Program building started.

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Program building completed.

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding base program parts.

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding completed in 0.021418s.

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving base program parts.

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving completed in 0.002364s.

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Incremental solving started.

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding completed in 0.135300s.

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving started.

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving completed in 0.019363s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding completed in 0.052967s.

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving started.

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving completed in 0.006690s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding completed in 0.054397s.

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving started.

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving completed in 0.008862s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding completed in 0.058507s.

[16-02-2021_16-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving started.

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving completed in 0.009556s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding completed in 0.063219s.

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving started.

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving completed in 0.010765s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding completed in 0.061654s.

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving started.

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving completed in 0.011365s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding completed in 0.063276s.

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving started.

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving completed in 0.012381s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding completed in 0.064995s.

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving started.

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving completed in 0.012232s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding completed in 0.064348s.

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving started.

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Model found:
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving completed in 0.015456s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Incremental solving completed in 0.769801s because STOP_CON_REACHED.

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.640081s, Solving time = 0.109035s, Total time = 0.769801s
Final Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.135300s, Solving time = 0.019363s, Total time = 0.154664s
2 : Statistics :: Grounding time = 0.052967s, Solving time = 0.006690s, Total time = 0.059657s
3 : Statistics :: Grounding time = 0.054397s, Solving time = 0.008862s, Total time = 0.063259s
4 : Statistics :: Grounding time = 0.058507s, Solving time = 0.009556s, Total time = 0.068063s
5 : Statistics :: Grounding time = 0.063219s, Solving time = 0.010765s, Total time = 0.073984s
6 : Statistics :: Grounding time = 0.061654s, Solving time = 0.011365s, Total time = 0.073019s
7 : Statistics :: Grounding time = 0.063276s, Solving time = 0.012381s, Total time = 0.075657s
8 : Statistics :: Grounding time = 0.064995s, Solving time = 0.012232s, Total time = 0.077227s
9 : Statistics :: Grounding time = 0.064348s, Solving time = 0.015456s, Total time = 0.079804s

[16-02-2021_16-41-15] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.640081s, Solving time = 0.109035s, Total time = 0.769801s
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-41-15] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_2,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),26)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),27)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),28)
occurs(2,talos,release(manipulator_arm_1,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[16-02-2021_16-41-15] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-41-15] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-41-15] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-41-15] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-41-15] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-41-15] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Instantiated.

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-41-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> The logic program was extended with 45 rules into program part plan_module(step, start).

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> The logic program was extended with 7244 rules into program part state_module(step).

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=45, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 45], range_=IncRange(start=45, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 45, Max end step = None
Step inc = 1, Step inc init = 47, Stop con = StopCondition.Satisfiable

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Program building started.

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Program building completed.

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding base program parts.

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding completed in 0.029753s.

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving base program parts.

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving completed in 0.003515s.

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Incremental solving started.

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Beginning Incremental call [1]:
Current step bound = 46
End step min = 45
End step max = None

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding program parts: [('check', [46]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 45]), ('conformance_module', [45]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 45]), ('conformance_module', [46])].

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding completed in 0.463211s.

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving started.

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving completed in 0.056957s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Beginning Incremental call [2]:
Current step bound = 47
End step min = 45
End step max = None

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 45]), ('conformance_module', [47])].

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding completed in 0.078477s.

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving started.

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving completed in 0.008964s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Beginning Incremental call [3]:
Current step bound = 48
End step min = 45
End step max = None

[16-02-2021_16-41-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 45]), ('conformance_module', [48])].

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding completed in 0.077643s.

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving started.

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving completed in 0.012099s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Beginning Incremental call [4]:
Current step bound = 49
End step min = 45
End step max = None

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 45]), ('conformance_module', [49])].

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding completed in 0.085308s.

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving started.

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving completed in 0.015195s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Beginning Incremental call [5]:
Current step bound = 50
End step min = 45
End step max = None

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 45]), ('conformance_module', [50])].

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding completed in 0.085276s.

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving started.

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Model found:
Model :: Total atoms = 10757, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving completed in 0.018162s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Incremental solving completed in 0.953056s because STOP_CON_REACHED.

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.819668s, Solving time = 0.114892s, Total time = 0.953056s
Final Model :: Total atoms = 10757, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.463211s, Solving time = 0.056957s, Total time = 0.520168s
2 : Statistics :: Grounding time = 0.078477s, Solving time = 0.008964s, Total time = 0.087442s
3 : Statistics :: Grounding time = 0.077643s, Solving time = 0.012099s, Total time = 0.089742s
4 : Statistics :: Grounding time = 0.085308s, Solving time = 0.015195s, Total time = 0.100503s
5 : Statistics :: Grounding time = 0.085276s, Solving time = 0.018162s, Total time = 0.103438s

[16-02-2021_16-41-17] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.819668s, Solving time = 0.114892s, Total time = 0.953056s
Model :: Total atoms = 10757, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-41-17] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,configure(manipulator_limb_1,extended),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_2,retracted),21)
occurs(1,talos,configure(manipulator_limb_1,retracted),22)
occurs(1,talos,move((store_room,0)),23)
occurs(1,talos,configure(manipulator_limb_1,extended),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_2,extended),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),29)
occurs(1,talos,configure(manipulator_limb_2,retracted),30)
occurs(1,talos,configure(manipulator_limb_1,retracted),31)
occurs(1,talos,move((store_room,1)),32)
occurs(1,talos,move((hallway,0)),33)
occurs(1,talos,move((hallway,1)),34)
occurs(1,talos,move((hallway,2)),35)
occurs(1,talos,move((puzzle_room,0)),36)
occurs(1,talos,move((puzzle_room,1)),37)
occurs(1,talos,configure(manipulator_limb_1,extended),38)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),39)
occurs(1,talos,configure(manipulator_limb_2,extended),40)
occurs(1,talos,release(manipulator_end_1,(block,6)),41)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),43)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),44)
occurs(1,talos,release(manipulator_end_2,(block,5)),45)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),46)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),47)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),48)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),49)
occurs(1,talos,release(manipulator_end_1,(block,3)),50)

[16-02-2021_16-41-17] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.769801s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     0.953056s : Steps =    50 : Actions =    50 |  
  ====================================================================  

[16-02-2021_16-41-17] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-41-17] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-41-17] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-41-17] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-41-17] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-41-17] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-41-17] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-41-17] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Instantiated.

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-41-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> The logic program was extended with 50 rules into program part plan_module(step, start).

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> The logic program was extended with 8024 rules into program part state_module(step).

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=50, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 50], range_=IncRange(start=50, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 50, Max end step = None
Step inc = 1, Step inc init = 52, Stop con = StopCondition.Satisfiable

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Program building started.

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Program building completed.

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding base program parts.

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.031933s.

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving base program parts.

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.003511s.

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Incremental solving started.

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [1]:
Current step bound = 51
End step min = 50
End step max = None

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [51]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('state_module', [46]), ('conformance_module', [46]), ('state_module', [47]), ('conformance_module', [47]), ('state_module', [48]), ('conformance_module', [48]), ('state_module', [49]), ('conformance_module', [49]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 50]), ('conformance_module', [50]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 50]), ('conformance_module', [51])].

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.509026s.

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.062032s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [2]:
Current step bound = 52
End step min = 50
End step max = None

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 50]), ('conformance_module', [52])].

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.080433s.

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.009892s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [3]:
Current step bound = 53
End step min = 50
End step max = None

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 50]), ('conformance_module', [53])].

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.078281s.

[16-02-2021_16-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.012873s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [4]:
Current step bound = 54
End step min = 50
End step max = None

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 50]), ('conformance_module', [54])].

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.086788s.

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.016641s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [5]:
Current step bound = 55
End step min = 50
End step max = None

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 50]), ('conformance_module', [55])].

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.090844s.

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.017150s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [6]:
Current step bound = 56
End step min = 50
End step max = None

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 50]), ('conformance_module', [56])].

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.092400s.

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.019430s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [7]:
Current step bound = 57
End step min = 50
End step max = None

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 50]), ('conformance_module', [57])].

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.093428s.

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.024109s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [8]:
Current step bound = 58
End step min = 50
End step max = None

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 50]), ('conformance_module', [58])].

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.096267s.

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.027641s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [9]:
Current step bound = 59
End step min = 50
End step max = None

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 50]), ('conformance_module', [59])].

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.096863s.

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.027520s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [10]:
Current step bound = 60
End step min = 50
End step max = None

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 50]), ('conformance_module', [60])].

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.096510s.

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.033463s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [11]:
Current step bound = 61
End step min = 50
End step max = None

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 50]), ('conformance_module', [61])].

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.099638s.

[16-02-2021_16-41-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Model found:
Model :: Total atoms = 12853, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.046847s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Incremental solving completed in 1.809019s because STOP_CON_REACHED.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.452410s, Solving time = 0.301109s, Total time = 1.809019s
Final Model :: Total atoms = 12853, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.509026s, Solving time = 0.062032s, Total time = 0.571057s
2 : Statistics :: Grounding time = 0.080433s, Solving time = 0.009892s, Total time = 0.090325s
3 : Statistics :: Grounding time = 0.078281s, Solving time = 0.012873s, Total time = 0.091154s
4 : Statistics :: Grounding time = 0.086788s, Solving time = 0.016641s, Total time = 0.103429s
5 : Statistics :: Grounding time = 0.090844s, Solving time = 0.017150s, Total time = 0.107993s
6 : Statistics :: Grounding time = 0.092400s, Solving time = 0.019430s, Total time = 0.111830s
7 : Statistics :: Grounding time = 0.093428s, Solving time = 0.024109s, Total time = 0.117537s
8 : Statistics :: Grounding time = 0.096267s, Solving time = 0.027641s, Total time = 0.123908s
9 : Statistics :: Grounding time = 0.096863s, Solving time = 0.027520s, Total time = 0.124382s
10 : Statistics :: Grounding time = 0.096510s, Solving time = 0.033463s, Total time = 0.129974s
11 : Statistics :: Grounding time = 0.099638s, Solving time = 0.046847s, Total time = 0.146485s

[16-02-2021_16-41-20] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.452410s, Solving time = 0.301109s, Total time = 1.809019s
Model :: Total atoms = 12853, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-41-20] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,configure(manipulator_limb_1,extended),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_2,retracted),21)
occurs(1,talos,configure(manipulator_limb_1,retracted),22)
occurs(1,talos,move((store_room,0)),23)
occurs(1,talos,configure(manipulator_limb_1,extended),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_2,extended),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),29)
occurs(1,talos,configure(manipulator_limb_2,retracted),30)
occurs(1,talos,configure(manipulator_limb_1,retracted),31)
occurs(1,talos,move((store_room,1)),32)
occurs(1,talos,move((hallway,0)),33)
occurs(1,talos,move((hallway,1)),34)
occurs(1,talos,move((hallway,2)),35)
occurs(1,talos,move((puzzle_room,0)),36)
occurs(1,talos,move((puzzle_room,1)),37)
occurs(1,talos,configure(manipulator_limb_1,extended),38)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),39)
occurs(1,talos,configure(manipulator_limb_2,extended),40)
occurs(1,talos,release(manipulator_end_1,(block,6)),41)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),43)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),44)
occurs(1,talos,release(manipulator_end_2,(block,5)),45)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),46)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),47)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),48)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),49)
occurs(1,talos,release(manipulator_end_1,(block,3)),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),51)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),52)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),53)
occurs(1,talos,release(manipulator_end_1,(block,3)),54)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),55)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),56)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),57)
occurs(1,talos,release(manipulator_end_1,(block,2)),58)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),59)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),60)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),61)

[16-02-2021_16-41-20] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.809019s : Steps =    61 : Actions =    61 |  
  ====================================================================  

[16-02-2021_16-41-20] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-41-20] INFO :: Experiment >> 

      ================================================      
            Experimental run 9 : Time 16.817261s            
      ================================================      

[16-02-2021_16-41-20] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-41-20] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-41-20] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-41-20] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-41-20] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-41-20] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Instantiated.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Program building started.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Program building completed.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding base program parts.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.013772s.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving base program parts.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.002815s.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Incremental solving started.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.039072s.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.005513s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.030824s.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.003855s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.030806s.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.004670s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.034437s.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.005426s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.035036s.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.005485s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.036487s.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.006578s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.038104s.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.006711s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.039801s.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.009472s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.038690s.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.009939s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.040083s.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.011688s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.039943s.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.016282s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.040811s.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.020044s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.040919s.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.032776s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.043348s.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.046198s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-41-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.042670s.

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.091821s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.078283s.

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.137858s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.080748s.

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.275244s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.088652s.

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.030357s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Incremental solving completed in 1.599519s because STOP_CON_REACHED.

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.832485s, Solving time = 0.722731s, Total time = 1.599519s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039072s, Solving time = 0.005513s, Total time = 0.044585s
2 : Statistics :: Grounding time = 0.030824s, Solving time = 0.003855s, Total time = 0.034679s
3 : Statistics :: Grounding time = 0.030806s, Solving time = 0.004670s, Total time = 0.035476s
4 : Statistics :: Grounding time = 0.034437s, Solving time = 0.005426s, Total time = 0.039863s
5 : Statistics :: Grounding time = 0.035036s, Solving time = 0.005485s, Total time = 0.040522s
6 : Statistics :: Grounding time = 0.036487s, Solving time = 0.006578s, Total time = 0.043065s
7 : Statistics :: Grounding time = 0.038104s, Solving time = 0.006711s, Total time = 0.044815s
8 : Statistics :: Grounding time = 0.039801s, Solving time = 0.009472s, Total time = 0.049273s
9 : Statistics :: Grounding time = 0.038690s, Solving time = 0.009939s, Total time = 0.048629s
10 : Statistics :: Grounding time = 0.040083s, Solving time = 0.011688s, Total time = 0.051771s
11 : Statistics :: Grounding time = 0.039943s, Solving time = 0.016282s, Total time = 0.056225s
12 : Statistics :: Grounding time = 0.040811s, Solving time = 0.020044s, Total time = 0.060855s
13 : Statistics :: Grounding time = 0.040919s, Solving time = 0.032776s, Total time = 0.073695s
14 : Statistics :: Grounding time = 0.043348s, Solving time = 0.046198s, Total time = 0.089546s
15 : Statistics :: Grounding time = 0.042670s, Solving time = 0.091821s, Total time = 0.134491s
16 : Statistics :: Grounding time = 0.078283s, Solving time = 0.137858s, Total time = 0.216141s
17 : Statistics :: Grounding time = 0.080748s, Solving time = 0.275244s, Total time = 0.355992s
18 : Statistics :: Grounding time = 0.088652s, Solving time = 0.030357s, Total time = 0.119008s

[16-02-2021_16-41-21] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.832485s, Solving time = 0.722731s, Total time = 1.599519s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-41-21] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),7)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[16-02-2021_16-41-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-41-21] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-41-21] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-41-21] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-41-21] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-41-21] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Instantiated.

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Program building started.

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Program building completed.

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding base program parts.

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.014681s.

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving base program parts.

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.003283s.

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Incremental solving started.

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.061933s.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.005238s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.047838s.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.006424s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.046128s.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.005148s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.044725s.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.006877s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.051329s.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.008344s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.049980s.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.008730s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.054339s.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.010211s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.056235s.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.010088s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.056524s.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.010315s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.056722s.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.011197s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.060891s.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.013552s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.060215s.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.014355s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.061798s.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.017494s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.062034s.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.016549s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.062943s.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.017428s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.072473s.

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.020530s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.065511s.

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.023728s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.065174s.

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.029229s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.066801s.

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.055156s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.069893s.

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.061642s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.070102s.

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.078417s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.071106s.

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.074652s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.071767s.

[16-02-2021_16-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.145235s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.073698s.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.138842s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.075547s.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.134100s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Incremental solving completed in 2.577964s because STOP_CON_REACHED.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.550386s, Solving time = 0.926766s, Total time = 2.577964s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.061933s, Solving time = 0.005238s, Total time = 0.067171s
2 : Statistics :: Grounding time = 0.047838s, Solving time = 0.006424s, Total time = 0.054262s
3 : Statistics :: Grounding time = 0.046128s, Solving time = 0.005148s, Total time = 0.051276s
4 : Statistics :: Grounding time = 0.044725s, Solving time = 0.006877s, Total time = 0.051602s
5 : Statistics :: Grounding time = 0.051329s, Solving time = 0.008344s, Total time = 0.059673s
6 : Statistics :: Grounding time = 0.049980s, Solving time = 0.008730s, Total time = 0.058710s
7 : Statistics :: Grounding time = 0.054339s, Solving time = 0.010211s, Total time = 0.064550s
8 : Statistics :: Grounding time = 0.056235s, Solving time = 0.010088s, Total time = 0.066323s
9 : Statistics :: Grounding time = 0.056524s, Solving time = 0.010315s, Total time = 0.066839s
10 : Statistics :: Grounding time = 0.056722s, Solving time = 0.011197s, Total time = 0.067919s
11 : Statistics :: Grounding time = 0.060891s, Solving time = 0.013552s, Total time = 0.074443s
12 : Statistics :: Grounding time = 0.060215s, Solving time = 0.014355s, Total time = 0.074569s
13 : Statistics :: Grounding time = 0.061798s, Solving time = 0.017494s, Total time = 0.079292s
14 : Statistics :: Grounding time = 0.062034s, Solving time = 0.016549s, Total time = 0.078582s
15 : Statistics :: Grounding time = 0.062943s, Solving time = 0.017428s, Total time = 0.080371s
16 : Statistics :: Grounding time = 0.072473s, Solving time = 0.020530s, Total time = 0.093003s
17 : Statistics :: Grounding time = 0.065511s, Solving time = 0.023728s, Total time = 0.089239s
18 : Statistics :: Grounding time = 0.065174s, Solving time = 0.029229s, Total time = 0.094403s
19 : Statistics :: Grounding time = 0.066801s, Solving time = 0.055156s, Total time = 0.121957s
20 : Statistics :: Grounding time = 0.069893s, Solving time = 0.061642s, Total time = 0.131534s
21 : Statistics :: Grounding time = 0.070102s, Solving time = 0.078417s, Total time = 0.148519s
22 : Statistics :: Grounding time = 0.071106s, Solving time = 0.074652s, Total time = 0.145759s
23 : Statistics :: Grounding time = 0.071767s, Solving time = 0.145235s, Total time = 0.217002s
24 : Statistics :: Grounding time = 0.073698s, Solving time = 0.138842s, Total time = 0.212540s
25 : Statistics :: Grounding time = 0.075547s, Solving time = 0.134100s, Total time = 0.209646s

[16-02-2021_16-41-24] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.550386s, Solving time = 0.926766s, Total time = 2.577964s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-41-24] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),7)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),14)
occurs(2,talos,configure(manipulator_arm_1,retracted),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),23)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),24)
occurs(2,talos,release(manipulator_arm_2,(block,5)),25)

[16-02-2021_16-41-24] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-41-24] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-41-24] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-41-24] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-41-24] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-41-24] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Instantiated.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Program building started.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Program building completed.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding base program parts.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.016579s.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving base program parts.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.002600s.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Incremental solving started.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.186019s.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.008337s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.063726s.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.005283s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.064663s.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.007028s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.067302s.

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.010129s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.068442s.

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.012094s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.071994s.

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.013374s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.073528s.

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.014257s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.077762s.

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.015401s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.081073s.

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.016542s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.079601s.

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.016781s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.084907s.

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.018196s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.082007s.

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.017754s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.083367s.

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.021500s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-41-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.085530s.

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.026929s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.088508s.

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.026735s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.094137s.

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.025886s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.096691s.

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.031670s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.090633s.

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.034017s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.092195s.

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.038967s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.094210s.

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.043522s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.101577s.

[16-02-2021_16-41-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.108761s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.101552s.

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Model found:
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.117299s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Incremental solving completed in 2.678504s because STOP_CON_REACHED.

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.946004s, Solving time = 0.633061s, Total time = 2.678504s
Final Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.186019s, Solving time = 0.008337s, Total time = 0.194356s
2 : Statistics :: Grounding time = 0.063726s, Solving time = 0.005283s, Total time = 0.069010s
3 : Statistics :: Grounding time = 0.064663s, Solving time = 0.007028s, Total time = 0.071690s
4 : Statistics :: Grounding time = 0.067302s, Solving time = 0.010129s, Total time = 0.077431s
5 : Statistics :: Grounding time = 0.068442s, Solving time = 0.012094s, Total time = 0.080536s
6 : Statistics :: Grounding time = 0.071994s, Solving time = 0.013374s, Total time = 0.085367s
7 : Statistics :: Grounding time = 0.073528s, Solving time = 0.014257s, Total time = 0.087785s
8 : Statistics :: Grounding time = 0.077762s, Solving time = 0.015401s, Total time = 0.093163s
9 : Statistics :: Grounding time = 0.081073s, Solving time = 0.016542s, Total time = 0.097615s
10 : Statistics :: Grounding time = 0.079601s, Solving time = 0.016781s, Total time = 0.096382s
11 : Statistics :: Grounding time = 0.084907s, Solving time = 0.018196s, Total time = 0.103104s
12 : Statistics :: Grounding time = 0.082007s, Solving time = 0.017754s, Total time = 0.099761s
13 : Statistics :: Grounding time = 0.083367s, Solving time = 0.021500s, Total time = 0.104867s
14 : Statistics :: Grounding time = 0.085530s, Solving time = 0.026929s, Total time = 0.112459s
15 : Statistics :: Grounding time = 0.088508s, Solving time = 0.026735s, Total time = 0.115243s
16 : Statistics :: Grounding time = 0.094137s, Solving time = 0.025886s, Total time = 0.120023s
17 : Statistics :: Grounding time = 0.096691s, Solving time = 0.031670s, Total time = 0.128361s
18 : Statistics :: Grounding time = 0.090633s, Solving time = 0.034017s, Total time = 0.124650s
19 : Statistics :: Grounding time = 0.092195s, Solving time = 0.038967s, Total time = 0.131162s
20 : Statistics :: Grounding time = 0.094210s, Solving time = 0.043522s, Total time = 0.137731s
21 : Statistics :: Grounding time = 0.101577s, Solving time = 0.108761s, Total time = 0.210338s
22 : Statistics :: Grounding time = 0.101552s, Solving time = 0.117299s, Total time = 0.218851s

[16-02-2021_16-41-27] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.946004s, Solving time = 0.633061s, Total time = 2.678504s
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-41-27] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),22)

[16-02-2021_16-41-27] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.599519s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.577964s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     2.678504s : Steps =    22 : Actions =    22 |  
  ====================================================================  

[16-02-2021_16-41-27] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-41-27] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-41-27] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-41-27] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-41-27] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-41-27] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-41-27] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-41-27] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Instantiated.

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> The logic program was extended with 22 rules into program part plan_module(step, start).

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> The logic program was extended with 3656 rules into program part state_module(step).

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=22, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 22], range_=IncRange(start=22, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 22, Max end step = None
Step inc = 1, Step inc init = 24, Stop con = StopCondition.Satisfiable

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Program building started.

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Program building completed.

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding base program parts.

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.023028s.

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving base program parts.

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.002933s.

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Incremental solving started.

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [1]:
Current step bound = 23
End step min = 22
End step max = None

[16-02-2021_16-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [23]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 22]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 22]), ('conformance_module', [23])].

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.333919s.

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.031888s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [2]:
Current step bound = 24
End step min = 22
End step max = None

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 22]), ('conformance_module', [24])].

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.075398s.

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.006549s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [3]:
Current step bound = 25
End step min = 22
End step max = None

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 22]), ('conformance_module', [25])].

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.069726s.

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.008555s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [4]:
Current step bound = 26
End step min = 22
End step max = None

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 22]), ('conformance_module', [26])].

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.073038s.

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.009971s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [5]:
Current step bound = 27
End step min = 22
End step max = None

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 22]), ('conformance_module', [27])].

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.076201s.

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.011781s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [6]:
Current step bound = 28
End step min = 22
End step max = None

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 22]), ('conformance_module', [28])].

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.075916s.

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.013856s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [7]:
Current step bound = 29
End step min = 22
End step max = None

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 22]), ('conformance_module', [29])].

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.077123s.

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.015326s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [8]:
Current step bound = 30
End step min = 22
End step max = None

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 22]), ('conformance_module', [30])].

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.090047s.

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.016589s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [9]:
Current step bound = 31
End step min = 22
End step max = None

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 22]), ('conformance_module', [31])].

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.083939s.

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.017391s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [10]:
Current step bound = 32
End step min = 22
End step max = None

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 22]), ('conformance_module', [32])].

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.085318s.

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.018955s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [11]:
Current step bound = 33
End step min = 22
End step max = None

[16-02-2021_16-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 22]), ('conformance_module', [33])].

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.086051s.

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.018295s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [12]:
Current step bound = 34
End step min = 22
End step max = None

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 22]), ('conformance_module', [34])].

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.088140s.

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.019316s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [13]:
Current step bound = 35
End step min = 22
End step max = None

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 22]), ('conformance_module', [35])].

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.117028s.

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.020869s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [14]:
Current step bound = 36
End step min = 22
End step max = None

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 22]), ('conformance_module', [36])].

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.093315s.

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.022636s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [15]:
Current step bound = 37
End step min = 22
End step max = None

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 22]), ('conformance_module', [37])].

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.094043s.

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.048566s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [16]:
Current step bound = 38
End step min = 22
End step max = None

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 22]), ('conformance_module', [38])].

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.100349s.

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.037852s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [17]:
Current step bound = 39
End step min = 22
End step max = None

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 22]), ('conformance_module', [39])].

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.094058s.

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.049862s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [18]:
Current step bound = 40
End step min = 22
End step max = None

[16-02-2021_16-41-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 22]), ('conformance_module', [40])].

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.094645s.

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.047941s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [19]:
Current step bound = 41
End step min = 22
End step max = None

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 22]), ('conformance_module', [41])].

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.094389s.

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Model found:
Model :: Total atoms = 9423, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.052990s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Incremental solving completed in 2.489898s because STOP_CON_REACHED.

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.925673s, Solving time = 0.472121s, Total time = 2.489898s
Final Model :: Total atoms = 9423, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.333919s, Solving time = 0.031888s, Total time = 0.365807s
2 : Statistics :: Grounding time = 0.075398s, Solving time = 0.006549s, Total time = 0.081946s
3 : Statistics :: Grounding time = 0.069726s, Solving time = 0.008555s, Total time = 0.078282s
4 : Statistics :: Grounding time = 0.073038s, Solving time = 0.009971s, Total time = 0.083009s
5 : Statistics :: Grounding time = 0.076201s, Solving time = 0.011781s, Total time = 0.087982s
6 : Statistics :: Grounding time = 0.075916s, Solving time = 0.013856s, Total time = 0.089772s
7 : Statistics :: Grounding time = 0.077123s, Solving time = 0.015326s, Total time = 0.092449s
8 : Statistics :: Grounding time = 0.090047s, Solving time = 0.016589s, Total time = 0.106637s
9 : Statistics :: Grounding time = 0.083939s, Solving time = 0.017391s, Total time = 0.101330s
10 : Statistics :: Grounding time = 0.085318s, Solving time = 0.018955s, Total time = 0.104273s
11 : Statistics :: Grounding time = 0.086051s, Solving time = 0.018295s, Total time = 0.104346s
12 : Statistics :: Grounding time = 0.088140s, Solving time = 0.019316s, Total time = 0.107456s
13 : Statistics :: Grounding time = 0.117028s, Solving time = 0.020869s, Total time = 0.137897s
14 : Statistics :: Grounding time = 0.093315s, Solving time = 0.022636s, Total time = 0.115952s
15 : Statistics :: Grounding time = 0.094043s, Solving time = 0.048566s, Total time = 0.142609s
16 : Statistics :: Grounding time = 0.100349s, Solving time = 0.037852s, Total time = 0.138201s
17 : Statistics :: Grounding time = 0.094058s, Solving time = 0.049862s, Total time = 0.143920s
18 : Statistics :: Grounding time = 0.094645s, Solving time = 0.047941s, Total time = 0.142586s
19 : Statistics :: Grounding time = 0.094389s, Solving time = 0.052990s, Total time = 0.147380s

[16-02-2021_16-41-30] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.925673s, Solving time = 0.472121s, Total time = 2.489898s
Model :: Total atoms = 9423, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-41-30] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,configure(manipulator_limb_1,extended),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),38)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),39)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),40)
occurs(1,talos,release(manipulator_end_2,(block,5)),41)

[16-02-2021_16-41-30] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     2.489898s : Steps =    41 : Actions =    41 |  
  ====================================================================  

[16-02-2021_16-41-30] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-41-30] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-41-30] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-41-30] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-41-30] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-41-30] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-41-30] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-41-30] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Instantiated.

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Program building started.

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Program building completed.

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding base program parts.

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding completed in 0.021973s.

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving base program parts.

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving completed in 0.002931s.

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Incremental solving started.

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding completed in 0.138973s.

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving started.

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving completed in 0.019568s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-41-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding completed in 0.058996s.

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving started.

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving completed in 0.006456s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding completed in 0.052986s.

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving started.

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving completed in 0.008094s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding completed in 0.057858s.

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving started.

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving completed in 0.009651s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding completed in 0.058848s.

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving started.

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving completed in 0.011279s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding completed in 0.061792s.

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving started.

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving completed in 0.011110s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding completed in 0.062078s.

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving started.

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving completed in 0.012181s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding completed in 0.064855s.

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving started.

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving completed in 0.012821s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding completed in 0.064008s.

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving started.

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Model found:
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving completed in 0.016943s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Incremental solving completed in 0.774645s because STOP_CON_REACHED.

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.642368s, Solving time = 0.111032s, Total time = 0.774645s
Final Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.138973s, Solving time = 0.019568s, Total time = 0.158541s
2 : Statistics :: Grounding time = 0.058996s, Solving time = 0.006456s, Total time = 0.065452s
3 : Statistics :: Grounding time = 0.052986s, Solving time = 0.008094s, Total time = 0.061080s
4 : Statistics :: Grounding time = 0.057858s, Solving time = 0.009651s, Total time = 0.067508s
5 : Statistics :: Grounding time = 0.058848s, Solving time = 0.011279s, Total time = 0.070127s
6 : Statistics :: Grounding time = 0.061792s, Solving time = 0.011110s, Total time = 0.072901s
7 : Statistics :: Grounding time = 0.062078s, Solving time = 0.012181s, Total time = 0.074259s
8 : Statistics :: Grounding time = 0.064855s, Solving time = 0.012821s, Total time = 0.077676s
9 : Statistics :: Grounding time = 0.064008s, Solving time = 0.016943s, Total time = 0.080951s

[16-02-2021_16-41-31] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.642368s, Solving time = 0.111032s, Total time = 0.774645s
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-41-31] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),7)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),14)
occurs(2,talos,configure(manipulator_arm_1,retracted),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),23)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),24)
occurs(2,talos,release(manipulator_arm_2,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),26)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),27)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),28)
occurs(2,talos,release(manipulator_arm_1,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[16-02-2021_16-41-31] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-41-31] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-41-31] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-41-31] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-41-31] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-41-31] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Instantiated.

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-41-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> The logic program was extended with 41 rules into program part plan_module(step, start).

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> The logic program was extended with 6620 rules into program part state_module(step).

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=41, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 41], range_=IncRange(start=41, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 41, Max end step = None
Step inc = 1, Step inc init = 43, Stop con = StopCondition.Satisfiable

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Program building started.

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Program building completed.

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding base program parts.

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding completed in 0.029430s.

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving base program parts.

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving completed in 0.003600s.

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Incremental solving started.

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Beginning Incremental call [1]:
Current step bound = 42
End step min = 41
End step max = None

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding program parts: [('check', [42]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 41]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 41]), ('conformance_module', [42])].

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding completed in 0.439541s.

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving started.

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving completed in 0.052554s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Beginning Incremental call [2]:
Current step bound = 43
End step min = 41
End step max = None

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 41]), ('conformance_module', [43])].

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding completed in 0.076318s.

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving started.

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving completed in 0.008397s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Beginning Incremental call [3]:
Current step bound = 44
End step min = 41
End step max = None

[16-02-2021_16-41-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 41]), ('conformance_module', [44])].

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding completed in 0.077053s.

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving started.

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving completed in 0.011655s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Beginning Incremental call [4]:
Current step bound = 45
End step min = 41
End step max = None

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 41]), ('conformance_module', [45])].

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding completed in 0.080733s.

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving started.

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving completed in 0.014772s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Beginning Incremental call [5]:
Current step bound = 46
End step min = 41
End step max = None

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 41]), ('conformance_module', [46])].

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding completed in 0.082354s.

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving started.

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Model found:
Model :: Total atoms = 10113, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving completed in 0.017572s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Incremental solving completed in 0.911140s because STOP_CON_REACHED.

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.785428s, Solving time = 0.108549s, Total time = 0.911140s
Final Model :: Total atoms = 10113, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.439541s, Solving time = 0.052554s, Total time = 0.492095s
2 : Statistics :: Grounding time = 0.076318s, Solving time = 0.008397s, Total time = 0.084715s
3 : Statistics :: Grounding time = 0.077053s, Solving time = 0.011655s, Total time = 0.088707s
4 : Statistics :: Grounding time = 0.080733s, Solving time = 0.014772s, Total time = 0.095505s
5 : Statistics :: Grounding time = 0.082354s, Solving time = 0.017572s, Total time = 0.099926s

[16-02-2021_16-41-33] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.785428s, Solving time = 0.108549s, Total time = 0.911140s
Model :: Total atoms = 10113, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-41-33] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,configure(manipulator_limb_1,extended),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),38)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),39)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),40)
occurs(1,talos,release(manipulator_end_2,(block,5)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),43)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),44)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),45)
occurs(1,talos,release(manipulator_end_1,(block,3)),46)

[16-02-2021_16-41-33] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.774645s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     0.911140s : Steps =    46 : Actions =    46 |  
  ====================================================================  

[16-02-2021_16-41-33] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-41-33] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-41-33] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-41-33] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-41-33] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-41-33] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-41-33] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-41-33] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Instantiated.

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> The logic program was extended with 46 rules into program part plan_module(step, start).

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> The logic program was extended with 7400 rules into program part state_module(step).

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=46, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 46], range_=IncRange(start=46, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 46, Max end step = None
Step inc = 1, Step inc init = 48, Stop con = StopCondition.Satisfiable

[16-02-2021_16-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Program building started.

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Program building completed.

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding base program parts.

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.029795s.

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving base program parts.

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.003554s.

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Incremental solving started.

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [1]:
Current step bound = 47
End step min = 46
End step max = None

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [47]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 46]), ('conformance_module', [46]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 46]), ('conformance_module', [47])].

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.483703s.

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.058235s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [2]:
Current step bound = 48
End step min = 46
End step max = None

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 46]), ('conformance_module', [48])].

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.085538s.

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.009327s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [3]:
Current step bound = 49
End step min = 46
End step max = None

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 46]), ('conformance_module', [49])].

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.078794s.

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.013732s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [4]:
Current step bound = 50
End step min = 46
End step max = None

[16-02-2021_16-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 46]), ('conformance_module', [50])].

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.083631s.

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.017125s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [5]:
Current step bound = 51
End step min = 46
End step max = None

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 46]), ('conformance_module', [51])].

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.089027s.

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.016786s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [6]:
Current step bound = 52
End step min = 46
End step max = None

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 46]), ('conformance_module', [52])].

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.090767s.

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.018911s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [7]:
Current step bound = 53
End step min = 46
End step max = None

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 46]), ('conformance_module', [53])].

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.088568s.

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.022317s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [8]:
Current step bound = 54
End step min = 46
End step max = None

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 46]), ('conformance_module', [54])].

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.099823s.

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.022702s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [9]:
Current step bound = 55
End step min = 46
End step max = None

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 46]), ('conformance_module', [55])].

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.095370s.

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.024906s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [10]:
Current step bound = 56
End step min = 46
End step max = None

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 46]), ('conformance_module', [56])].

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.097337s.

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.025370s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [11]:
Current step bound = 57
End step min = 46
End step max = None

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 46]), ('conformance_module', [57])].

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.103171s.

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.032205s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [12]:
Current step bound = 58
End step min = 46
End step max = None

[16-02-2021_16-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 46]), ('conformance_module', [58])].

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.099870s.

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.042865s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [13]:
Current step bound = 59
End step min = 46
End step max = None

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 46]), ('conformance_module', [59])].

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.102279s.

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.053607s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [14]:
Current step bound = 60
End step min = 46
End step max = None

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 46]), ('conformance_module', [60])].

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.103945s.

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.073377s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [15]:
Current step bound = 61
End step min = 46
End step max = None

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 46]), ('conformance_module', [61])].

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.105555s.

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.086535s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [16]:
Current step bound = 62
End step min = 46
End step max = None

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 46]), ('conformance_module', [62])].

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.105232s.

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.176243s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [17]:
Current step bound = 63
End step min = 46
End step max = None

[16-02-2021_16-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 46]), ('conformance_module', [63])].

[16-02-2021_16-41-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.108529s.

[16-02-2021_16-41-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.247798s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [18]:
Current step bound = 64
End step min = 46
End step max = None

[16-02-2021_16-41-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 46]), ('conformance_module', [64])].

[16-02-2021_16-41-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.115374s.

[16-02-2021_16-41-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.514579s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [19]:
Current step bound = 65
End step min = 46
End step max = None

[16-02-2021_16-41-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 46]), ('conformance_module', [65])].

[16-02-2021_16-41-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.112495s.

[16-02-2021_16-41-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.734635s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [20]:
Current step bound = 66
End step min = 46
End step max = None

[16-02-2021_16-41-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 46]), ('conformance_module', [66])].

[16-02-2021_16-41-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.110865s.

[16-02-2021_16-41-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 1.168355s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [21]:
Current step bound = 67
End step min = 46
End step max = None

[16-02-2021_16-41-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 46]), ('conformance_module', [67])].

[16-02-2021_16-41-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.112613s.

[16-02-2021_16-41-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 1.613156s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [22]:
Current step bound = 68
End step min = 46
End step max = None

[16-02-2021_16-41-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 46]), ('conformance_module', [68])].

[16-02-2021_16-41-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.114360s.

[16-02-2021_16-41-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 2.558274s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [23]:
Current step bound = 69
End step min = 46
End step max = None

[16-02-2021_16-41-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 46]), ('conformance_module', [69])].

[16-02-2021_16-41-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.118341s.

[16-02-2021_16-41-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 2.852932s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [24]:
Current step bound = 70
End step min = 46
End step max = None

[16-02-2021_16-41-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 46]), ('conformance_module', [70])].

[16-02-2021_16-41-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.120215s.

[16-02-2021_16-41-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 4.660328s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [25]:
Current step bound = 71
End step min = 46
End step max = None

[16-02-2021_16-41-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 46]), ('conformance_module', [71])].

[16-02-2021_16-41-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.134220s.

[16-02-2021_16-41-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Model found:
Model :: Total atoms = 14769, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 1.623235s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Incremental solving completed in 19.890474s because STOP_CON_REACHED.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.989417s, Solving time = 16.671090s, Total time = 19.890474s
Final Model :: Total atoms = 14769, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.483703s, Solving time = 0.058235s, Total time = 0.541938s
2 : Statistics :: Grounding time = 0.085538s, Solving time = 0.009327s, Total time = 0.094865s
3 : Statistics :: Grounding time = 0.078794s, Solving time = 0.013732s, Total time = 0.092526s
4 : Statistics :: Grounding time = 0.083631s, Solving time = 0.017125s, Total time = 0.100756s
5 : Statistics :: Grounding time = 0.089027s, Solving time = 0.016786s, Total time = 0.105812s
6 : Statistics :: Grounding time = 0.090767s, Solving time = 0.018911s, Total time = 0.109678s
7 : Statistics :: Grounding time = 0.088568s, Solving time = 0.022317s, Total time = 0.110885s
8 : Statistics :: Grounding time = 0.099823s, Solving time = 0.022702s, Total time = 0.122524s
9 : Statistics :: Grounding time = 0.095370s, Solving time = 0.024906s, Total time = 0.120276s
10 : Statistics :: Grounding time = 0.097337s, Solving time = 0.025370s, Total time = 0.122706s
11 : Statistics :: Grounding time = 0.103171s, Solving time = 0.032205s, Total time = 0.135376s
12 : Statistics :: Grounding time = 0.099870s, Solving time = 0.042865s, Total time = 0.142735s
13 : Statistics :: Grounding time = 0.102279s, Solving time = 0.053607s, Total time = 0.155885s
14 : Statistics :: Grounding time = 0.103945s, Solving time = 0.073377s, Total time = 0.177322s
15 : Statistics :: Grounding time = 0.105555s, Solving time = 0.086535s, Total time = 0.192090s
16 : Statistics :: Grounding time = 0.105232s, Solving time = 0.176243s, Total time = 0.281476s
17 : Statistics :: Grounding time = 0.108529s, Solving time = 0.247798s, Total time = 0.356327s
18 : Statistics :: Grounding time = 0.115374s, Solving time = 0.514579s, Total time = 0.629953s
19 : Statistics :: Grounding time = 0.112495s, Solving time = 0.734635s, Total time = 0.847130s
20 : Statistics :: Grounding time = 0.110865s, Solving time = 1.168355s, Total time = 1.279221s
21 : Statistics :: Grounding time = 0.112613s, Solving time = 1.613156s, Total time = 1.725770s
22 : Statistics :: Grounding time = 0.114360s, Solving time = 2.558274s, Total time = 2.672635s
23 : Statistics :: Grounding time = 0.118341s, Solving time = 2.852932s, Total time = 2.971273s
24 : Statistics :: Grounding time = 0.120215s, Solving time = 4.660328s, Total time = 4.780543s
25 : Statistics :: Grounding time = 0.134220s, Solving time = 1.623235s, Total time = 1.757455s

[16-02-2021_16-41-54] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.989417s, Solving time = 16.671090s, Total time = 19.890474s
Model :: Total atoms = 14769, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-41-54] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,configure(manipulator_limb_1,extended),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),38)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),39)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),40)
occurs(1,talos,release(manipulator_end_2,(block,5)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),43)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),44)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),45)
occurs(1,talos,release(manipulator_end_1,(block,3)),46)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,1)),47)
occurs(1,talos,release(manipulator_end_2,(block,4)),48)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),49)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),51)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,3)),52)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),53)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),54)
occurs(1,talos,release(manipulator_end_1,(block,6)),55)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),56)
occurs(1,talos,release(manipulator_end_2,(block,5)),57)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),58)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),59)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),60)
occurs(1,talos,release(manipulator_end_2,(block,3)),61)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),62)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),63)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),64)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),65)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),66)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),67)
occurs(1,talos,release(manipulator_end_1,(block,2)),68)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),69)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),70)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),71)

[16-02-2021_16-41-54] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =    19.890474s : Steps =    71 : Actions =    71 |  
  ====================================================================  

[16-02-2021_16-41-54] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-41-54] INFO :: Experiment >> 

      ================================================      
           Experimental run 10 : Time 34.191219s            
      ================================================      

[16-02-2021_16-41-54] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-41-54] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-41-54] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-41-54] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-41-54] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-41-54] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Instantiated.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Program building started.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Program building completed.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding base program parts.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.014510s.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving base program parts.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.002281s.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Incremental solving started.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.040274s.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.005754s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.031275s.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.003457s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.031111s.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.004418s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.034151s.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.005965s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.037090s.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.005813s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.037195s.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.006853s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.038652s.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.007318s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.037392s.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.008598s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.037054s.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.010305s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.040167s.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.011487s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.039687s.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.014615s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.043044s.

[16-02-2021_16-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.019560s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.042369s.

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.029863s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.042568s.

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.051438s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.042343s.

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.068065s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.076620s.

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.109287s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.081107s.

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.223250s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.083792s.

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Model found:
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.115206s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Incremental solving completed in 1.577882s because STOP_CON_REACHED.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.830400s, Solving time = 0.703533s, Total time = 1.577882s
Final Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.040274s, Solving time = 0.005754s, Total time = 0.046028s
2 : Statistics :: Grounding time = 0.031275s, Solving time = 0.003457s, Total time = 0.034732s
3 : Statistics :: Grounding time = 0.031111s, Solving time = 0.004418s, Total time = 0.035529s
4 : Statistics :: Grounding time = 0.034151s, Solving time = 0.005965s, Total time = 0.040116s
5 : Statistics :: Grounding time = 0.037090s, Solving time = 0.005813s, Total time = 0.042903s
6 : Statistics :: Grounding time = 0.037195s, Solving time = 0.006853s, Total time = 0.044048s
7 : Statistics :: Grounding time = 0.038652s, Solving time = 0.007318s, Total time = 0.045971s
8 : Statistics :: Grounding time = 0.037392s, Solving time = 0.008598s, Total time = 0.045990s
9 : Statistics :: Grounding time = 0.037054s, Solving time = 0.010305s, Total time = 0.047359s
10 : Statistics :: Grounding time = 0.040167s, Solving time = 0.011487s, Total time = 0.051653s
11 : Statistics :: Grounding time = 0.039687s, Solving time = 0.014615s, Total time = 0.054302s
12 : Statistics :: Grounding time = 0.043044s, Solving time = 0.019560s, Total time = 0.062604s
13 : Statistics :: Grounding time = 0.042369s, Solving time = 0.029863s, Total time = 0.072231s
14 : Statistics :: Grounding time = 0.042568s, Solving time = 0.051438s, Total time = 0.094006s
15 : Statistics :: Grounding time = 0.042343s, Solving time = 0.068065s, Total time = 0.110408s
16 : Statistics :: Grounding time = 0.076620s, Solving time = 0.109287s, Total time = 0.185907s
17 : Statistics :: Grounding time = 0.081107s, Solving time = 0.223250s, Total time = 0.304357s
18 : Statistics :: Grounding time = 0.083792s, Solving time = 0.115206s, Total time = 0.198998s

[16-02-2021_16-41-56] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.830400s, Solving time = 0.703533s, Total time = 1.577882s
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-41-56] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),8)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),9)
occurs(3,talos,release(manipulator_arm_1,(block,5)),10)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),11)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[16-02-2021_16-41-56] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-41-56] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-41-56] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-41-56] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-41-56] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-41-56] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Instantiated.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Program building started.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Program building completed.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding base program parts.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.014516s.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving base program parts.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.003105s.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Incremental solving started.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.060738s.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.005883s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.043705s.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.004422s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.048378s.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.004794s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.044969s.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.006783s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.050316s.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.008276s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.052586s.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.009650s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.054563s.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.009948s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.053667s.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.010064s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.059104s.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.010933s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.057701s.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.011479s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.060122s.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.013938s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.060067s.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.015504s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.061859s.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.018839s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.061449s.

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.021135s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.062636s.

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.020798s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.066524s.

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.020561s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.067957s.

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.025360s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.064147s.

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.039591s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.070986s.

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.052562s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.068432s.

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.067678s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.069838s.

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.057559s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.071325s.

[16-02-2021_16-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.075905s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.071824s.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.101703s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.073365s.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.125497s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.073917s.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.075957s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Incremental solving completed in 2.458765s because STOP_CON_REACHED.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.544690s, Solving time = 0.817923s, Total time = 2.458765s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.060738s, Solving time = 0.005883s, Total time = 0.066622s
2 : Statistics :: Grounding time = 0.043705s, Solving time = 0.004422s, Total time = 0.048127s
3 : Statistics :: Grounding time = 0.048378s, Solving time = 0.004794s, Total time = 0.053172s
4 : Statistics :: Grounding time = 0.044969s, Solving time = 0.006783s, Total time = 0.051752s
5 : Statistics :: Grounding time = 0.050316s, Solving time = 0.008276s, Total time = 0.058591s
6 : Statistics :: Grounding time = 0.052586s, Solving time = 0.009650s, Total time = 0.062236s
7 : Statistics :: Grounding time = 0.054563s, Solving time = 0.009948s, Total time = 0.064510s
8 : Statistics :: Grounding time = 0.053667s, Solving time = 0.010064s, Total time = 0.063731s
9 : Statistics :: Grounding time = 0.059104s, Solving time = 0.010933s, Total time = 0.070037s
10 : Statistics :: Grounding time = 0.057701s, Solving time = 0.011479s, Total time = 0.069180s
11 : Statistics :: Grounding time = 0.060122s, Solving time = 0.013938s, Total time = 0.074060s
12 : Statistics :: Grounding time = 0.060067s, Solving time = 0.015504s, Total time = 0.075571s
13 : Statistics :: Grounding time = 0.061859s, Solving time = 0.018839s, Total time = 0.080698s
14 : Statistics :: Grounding time = 0.061449s, Solving time = 0.021135s, Total time = 0.082584s
15 : Statistics :: Grounding time = 0.062636s, Solving time = 0.020798s, Total time = 0.083434s
16 : Statistics :: Grounding time = 0.066524s, Solving time = 0.020561s, Total time = 0.087084s
17 : Statistics :: Grounding time = 0.067957s, Solving time = 0.025360s, Total time = 0.093318s
18 : Statistics :: Grounding time = 0.064147s, Solving time = 0.039591s, Total time = 0.103738s
19 : Statistics :: Grounding time = 0.070986s, Solving time = 0.052562s, Total time = 0.123548s
20 : Statistics :: Grounding time = 0.068432s, Solving time = 0.067678s, Total time = 0.136110s
21 : Statistics :: Grounding time = 0.069838s, Solving time = 0.057559s, Total time = 0.127397s
22 : Statistics :: Grounding time = 0.071325s, Solving time = 0.075905s, Total time = 0.147230s
23 : Statistics :: Grounding time = 0.071824s, Solving time = 0.101703s, Total time = 0.173526s
24 : Statistics :: Grounding time = 0.073365s, Solving time = 0.125497s, Total time = 0.198862s
25 : Statistics :: Grounding time = 0.073917s, Solving time = 0.075957s, Total time = 0.149873s

[16-02-2021_16-41-58] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.544690s, Solving time = 0.817923s, Total time = 2.458765s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-41-58] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),13)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),14)
occurs(2,talos,configure(manipulator_arm_1,retracted),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),25)

[16-02-2021_16-41-58] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-41-58] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-41-58] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-41-58] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-41-58] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-41-58] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Instantiated.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Program building started.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Program building completed.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding base program parts.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.016589s.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving base program parts.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.002582s.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Incremental solving started.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.184116s.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.008885s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.067022s.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.005633s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.067439s.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.006959s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.068582s.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.010867s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.070503s.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.012328s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.072779s.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.013199s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.076107s.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.014541s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.077588s.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.015055s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.080341s.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.016911s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.082380s.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.017449s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.080914s.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.017380s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.082720s.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.017734s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.084369s.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.021875s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.088961s.

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.024488s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.088594s.

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.029344s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.087847s.

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.024516s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.087198s.

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.032243s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.093691s.

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.031517s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.091409s.

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.039901s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.093752s.

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Model found:
Model :: Total atoms = 6058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.077193s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Incremental solving completed in 2.260700s because STOP_CON_REACHED.

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.742905s, Solving time = 0.440600s, Total time = 2.260700s
Final Model :: Total atoms = 6058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.184116s, Solving time = 0.008885s, Total time = 0.193001s
2 : Statistics :: Grounding time = 0.067022s, Solving time = 0.005633s, Total time = 0.072655s
3 : Statistics :: Grounding time = 0.067439s, Solving time = 0.006959s, Total time = 0.074398s
4 : Statistics :: Grounding time = 0.068582s, Solving time = 0.010867s, Total time = 0.079449s
5 : Statistics :: Grounding time = 0.070503s, Solving time = 0.012328s, Total time = 0.082831s
6 : Statistics :: Grounding time = 0.072779s, Solving time = 0.013199s, Total time = 0.085979s
7 : Statistics :: Grounding time = 0.076107s, Solving time = 0.014541s, Total time = 0.090647s
8 : Statistics :: Grounding time = 0.077588s, Solving time = 0.015055s, Total time = 0.092643s
9 : Statistics :: Grounding time = 0.080341s, Solving time = 0.016911s, Total time = 0.097253s
10 : Statistics :: Grounding time = 0.082380s, Solving time = 0.017449s, Total time = 0.099830s
11 : Statistics :: Grounding time = 0.080914s, Solving time = 0.017380s, Total time = 0.098294s
12 : Statistics :: Grounding time = 0.082720s, Solving time = 0.017734s, Total time = 0.100454s
13 : Statistics :: Grounding time = 0.084369s, Solving time = 0.021875s, Total time = 0.106244s
14 : Statistics :: Grounding time = 0.088961s, Solving time = 0.024488s, Total time = 0.113450s
15 : Statistics :: Grounding time = 0.088594s, Solving time = 0.029344s, Total time = 0.117938s
16 : Statistics :: Grounding time = 0.087847s, Solving time = 0.024516s, Total time = 0.112363s
17 : Statistics :: Grounding time = 0.087198s, Solving time = 0.032243s, Total time = 0.119441s
18 : Statistics :: Grounding time = 0.093691s, Solving time = 0.031517s, Total time = 0.125208s
19 : Statistics :: Grounding time = 0.091409s, Solving time = 0.039901s, Total time = 0.131309s
20 : Statistics :: Grounding time = 0.093752s, Solving time = 0.077193s, Total time = 0.170945s

[16-02-2021_16-42-00] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.742905s, Solving time = 0.440600s, Total time = 2.260700s
Model :: Total atoms = 6058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-42-00] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,configure(manipulator_limb_1,extended),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)

[16-02-2021_16-42-00] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.577882s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.458765s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     2.260700s : Steps =    20 : Actions =    20 |  
  ====================================================================  

[16-02-2021_16-42-00] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-42-00] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-42-00] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-42-00] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-42-00] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-42-00] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-42-00] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-42-00] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Instantiated.

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-42-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> The logic program was extended with 20 rules into program part plan_module(step, start).

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> The logic program was extended with 3344 rules into program part state_module(step).

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=20, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 20], range_=IncRange(start=20, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 20, Max end step = None
Step inc = 1, Step inc init = 22, Stop con = StopCondition.Satisfiable

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Program building started.

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Program building completed.

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding base program parts.

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.022299s.

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving base program parts.

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.003499s.

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Incremental solving started.

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [1]:
Current step bound = 21
End step min = 20
End step max = None

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [21]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 20]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 20]), ('conformance_module', [21])].

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.306582s.

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.031508s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [2]:
Current step bound = 22
End step min = 20
End step max = None

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 20]), ('conformance_module', [22])].

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.071953s.

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.007411s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [3]:
Current step bound = 23
End step min = 20
End step max = None

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 20]), ('conformance_module', [23])].

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.069526s.

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.008621s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [4]:
Current step bound = 24
End step min = 20
End step max = None

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 20]), ('conformance_module', [24])].

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.073941s.

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.009900s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [5]:
Current step bound = 25
End step min = 20
End step max = None

[16-02-2021_16-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 20]), ('conformance_module', [25])].

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.071676s.

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.012635s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [6]:
Current step bound = 26
End step min = 20
End step max = None

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 20]), ('conformance_module', [26])].

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.076436s.

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.014861s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [7]:
Current step bound = 27
End step min = 20
End step max = None

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 20]), ('conformance_module', [27])].

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.077743s.

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.015226s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [8]:
Current step bound = 28
End step min = 20
End step max = None

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 20]), ('conformance_module', [28])].

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.083404s.

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.017284s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [9]:
Current step bound = 29
End step min = 20
End step max = None

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 20]), ('conformance_module', [29])].

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.095070s.

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.016657s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [10]:
Current step bound = 30
End step min = 20
End step max = None

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 20]), ('conformance_module', [30])].

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.084069s.

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.018247s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [11]:
Current step bound = 31
End step min = 20
End step max = None

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 20]), ('conformance_module', [31])].

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.093671s.

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.018802s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [12]:
Current step bound = 32
End step min = 20
End step max = None

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 20]), ('conformance_module', [32])].

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.086758s.

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.020006s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [13]:
Current step bound = 33
End step min = 20
End step max = None

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 20]), ('conformance_module', [33])].

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.091732s.

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.021417s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [14]:
Current step bound = 34
End step min = 20
End step max = None

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 20]), ('conformance_module', [34])].

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.091216s.

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.020179s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [15]:
Current step bound = 35
End step min = 20
End step max = None

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 20]), ('conformance_module', [35])].

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.093955s.

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.020923s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [16]:
Current step bound = 36
End step min = 20
End step max = None

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 20]), ('conformance_module', [36])].

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.103989s.

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.022956s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [17]:
Current step bound = 37
End step min = 20
End step max = None

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 20]), ('conformance_module', [37])].

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.105102s.

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.033901s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [18]:
Current step bound = 38
End step min = 20
End step max = None

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 20]), ('conformance_module', [38])].

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.099637s.

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.031378s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [19]:
Current step bound = 39
End step min = 20
End step max = None

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 20]), ('conformance_module', [39])].

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.103077s.

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.043375s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [20]:
Current step bound = 40
End step min = 20
End step max = None

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 20]), ('conformance_module', [40])].

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.102113s.

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.072231s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [21]:
Current step bound = 41
End step min = 20
End step max = None

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 20]), ('conformance_module', [41])].

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.098876s.

[16-02-2021_16-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.064781s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [22]:
Current step bound = 42
End step min = 20
End step max = None

[16-02-2021_16-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 20]), ('conformance_module', [42])].

[16-02-2021_16-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.103231s.

[16-02-2021_16-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.118299s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [23]:
Current step bound = 43
End step min = 20
End step max = None

[16-02-2021_16-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 20]), ('conformance_module', [43])].

[16-02-2021_16-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.102792s.

[16-02-2021_16-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.130461s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [24]:
Current step bound = 44
End step min = 20
End step max = None

[16-02-2021_16-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 20]), ('conformance_module', [44])].

[16-02-2021_16-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.110498s.

[16-02-2021_16-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.149253s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [25]:
Current step bound = 45
End step min = 20
End step max = None

[16-02-2021_16-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 20]), ('conformance_module', [45])].

[16-02-2021_16-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.105932s.

[16-02-2021_16-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Model found:
Model :: Total atoms = 10126, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.224065s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Incremental solving completed in 3.815520s because STOP_CON_REACHED.

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.525279s, Solving time = 1.147876s, Total time = 3.815520s
Final Model :: Total atoms = 10126, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.306582s, Solving time = 0.031508s, Total time = 0.338090s
2 : Statistics :: Grounding time = 0.071953s, Solving time = 0.007411s, Total time = 0.079365s
3 : Statistics :: Grounding time = 0.069526s, Solving time = 0.008621s, Total time = 0.078147s
4 : Statistics :: Grounding time = 0.073941s, Solving time = 0.009900s, Total time = 0.083842s
5 : Statistics :: Grounding time = 0.071676s, Solving time = 0.012635s, Total time = 0.084311s
6 : Statistics :: Grounding time = 0.076436s, Solving time = 0.014861s, Total time = 0.091296s
7 : Statistics :: Grounding time = 0.077743s, Solving time = 0.015226s, Total time = 0.092969s
8 : Statistics :: Grounding time = 0.083404s, Solving time = 0.017284s, Total time = 0.100687s
9 : Statistics :: Grounding time = 0.095070s, Solving time = 0.016657s, Total time = 0.111727s
10 : Statistics :: Grounding time = 0.084069s, Solving time = 0.018247s, Total time = 0.102316s
11 : Statistics :: Grounding time = 0.093671s, Solving time = 0.018802s, Total time = 0.112473s
12 : Statistics :: Grounding time = 0.086758s, Solving time = 0.020006s, Total time = 0.106764s
13 : Statistics :: Grounding time = 0.091732s, Solving time = 0.021417s, Total time = 0.113149s
14 : Statistics :: Grounding time = 0.091216s, Solving time = 0.020179s, Total time = 0.111394s
15 : Statistics :: Grounding time = 0.093955s, Solving time = 0.020923s, Total time = 0.114878s
16 : Statistics :: Grounding time = 0.103989s, Solving time = 0.022956s, Total time = 0.126945s
17 : Statistics :: Grounding time = 0.105102s, Solving time = 0.033901s, Total time = 0.139002s
18 : Statistics :: Grounding time = 0.099637s, Solving time = 0.031378s, Total time = 0.131015s
19 : Statistics :: Grounding time = 0.103077s, Solving time = 0.043375s, Total time = 0.146452s
20 : Statistics :: Grounding time = 0.102113s, Solving time = 0.072231s, Total time = 0.174344s
21 : Statistics :: Grounding time = 0.098876s, Solving time = 0.064781s, Total time = 0.163657s
22 : Statistics :: Grounding time = 0.103231s, Solving time = 0.118299s, Total time = 0.221530s
23 : Statistics :: Grounding time = 0.102792s, Solving time = 0.130461s, Total time = 0.233254s
24 : Statistics :: Grounding time = 0.110498s, Solving time = 0.149253s, Total time = 0.259751s
25 : Statistics :: Grounding time = 0.105932s, Solving time = 0.224065s, Total time = 0.329997s

[16-02-2021_16-42-05] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 2.525279s, Solving time = 1.147876s, Total time = 3.815520s
Model :: Total atoms = 10126, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-42-05] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,configure(manipulator_limb_1,extended),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_2,retracted),21)
occurs(1,talos,configure(manipulator_limb_1,retracted),22)
occurs(1,talos,move((store_room,0)),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,configure(manipulator_limb_1,extended),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),30)
occurs(1,talos,configure(manipulator_limb_1,retracted),31)
occurs(1,talos,move((store_room,1)),32)
occurs(1,talos,move((hallway,0)),33)
occurs(1,talos,move((hallway,1)),34)
occurs(1,talos,move((hallway,2)),35)
occurs(1,talos,move((puzzle_room,0)),36)
occurs(1,talos,move((puzzle_room,1)),37)
occurs(1,talos,configure(manipulator_limb_2,extended),38)
occurs(1,talos,configure(manipulator_limb_1,extended),39)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),40)
occurs(1,talos,release(manipulator_end_2,(block,6)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),43)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),44)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),45)

[16-02-2021_16-42-05] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     3.815520s : Steps =    45 : Actions =    45 |  
  ====================================================================  

[16-02-2021_16-42-05] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-42-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-42-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-42-05] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-42-05] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-42-05] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-42-05] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-42-05] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Instantiated.

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Program building started.

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Program building completed.

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding base program parts.

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding completed in 0.021509s.

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving base program parts.

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving completed in 0.002942s.

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Incremental solving started.

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding completed in 0.135774s.

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving started.

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving completed in 0.020218s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding completed in 0.054489s.

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving started.

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving completed in 0.006774s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-42-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding completed in 0.054104s.

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving started.

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving completed in 0.008754s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding completed in 0.057837s.

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving started.

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving completed in 0.010105s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding completed in 0.059166s.

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving started.

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving completed in 0.011032s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding completed in 0.061825s.

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving started.

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving completed in 0.010965s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding completed in 0.062896s.

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving started.

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving completed in 0.012494s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding completed in 0.064076s.

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving started.

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving completed in 0.012118s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding completed in 0.065337s.

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving started.

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Model found:
Model :: Total atoms = 7583, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving completed in 0.015396s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Incremental solving completed in 0.769272s because STOP_CON_REACHED.

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.637013s, Solving time = 0.110797s, Total time = 0.769272s
Final Model :: Total atoms = 7583, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.135774s, Solving time = 0.020218s, Total time = 0.155992s
2 : Statistics :: Grounding time = 0.054489s, Solving time = 0.006774s, Total time = 0.061263s
3 : Statistics :: Grounding time = 0.054104s, Solving time = 0.008754s, Total time = 0.062859s
4 : Statistics :: Grounding time = 0.057837s, Solving time = 0.010105s, Total time = 0.067942s
5 : Statistics :: Grounding time = 0.059166s, Solving time = 0.011032s, Total time = 0.070199s
6 : Statistics :: Grounding time = 0.061825s, Solving time = 0.010965s, Total time = 0.072790s
7 : Statistics :: Grounding time = 0.062896s, Solving time = 0.012494s, Total time = 0.075389s
8 : Statistics :: Grounding time = 0.064076s, Solving time = 0.012118s, Total time = 0.076194s
9 : Statistics :: Grounding time = 0.065337s, Solving time = 0.015396s, Total time = 0.080732s

[16-02-2021_16-42-06] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.637013s, Solving time = 0.110797s, Total time = 0.769272s
Model :: Total atoms = 7583, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-42-06] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),13)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),14)
occurs(2,talos,configure(manipulator_arm_1,retracted),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),25)
occurs(2,talos,release(manipulator_arm_1,(block,5)),26)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),27)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),28)
occurs(2,talos,release(manipulator_arm_2,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[16-02-2021_16-42-06] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-42-06] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-42-06] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-42-06] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-42-06] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-42-06] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Instantiated.

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> The logic program was extended with 45 rules into program part plan_module(step, start).

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> The logic program was extended with 7244 rules into program part state_module(step).

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=45, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 45], range_=IncRange(start=45, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 45, Max end step = None
Step inc = 1, Step inc init = 47, Stop con = StopCondition.Satisfiable

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Program building started.

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Program building completed.

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding base program parts.

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding completed in 0.029595s.

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving base program parts.

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving completed in 0.003398s.

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Incremental solving started.

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Beginning Incremental call [1]:
Current step bound = 46
End step min = 45
End step max = None

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding program parts: [('check', [46]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 45]), ('conformance_module', [45]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 45]), ('conformance_module', [46])].

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding completed in 0.474896s.

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving started.

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving completed in 0.056763s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Beginning Incremental call [2]:
Current step bound = 47
End step min = 45
End step max = None

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 45]), ('conformance_module', [47])].

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding completed in 0.077735s.

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving started.

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving completed in 0.009359s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Beginning Incremental call [3]:
Current step bound = 48
End step min = 45
End step max = None

[16-02-2021_16-42-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 45]), ('conformance_module', [48])].

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding completed in 0.079314s.

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving started.

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving completed in 0.011777s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Beginning Incremental call [4]:
Current step bound = 49
End step min = 45
End step max = None

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 45]), ('conformance_module', [49])].

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding completed in 0.083074s.

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving started.

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving completed in 0.015525s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Beginning Incremental call [5]:
Current step bound = 50
End step min = 45
End step max = None

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 45]), ('conformance_module', [50])].

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding completed in 0.085161s.

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving started.

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Model found:
Model :: Total atoms = 10757, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving completed in 0.020105s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Incremental solving completed in 0.964037s because STOP_CON_REACHED.

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.829775s, Solving time = 0.116928s, Total time = 0.964037s
Final Model :: Total atoms = 10757, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.474896s, Solving time = 0.056763s, Total time = 0.531659s
2 : Statistics :: Grounding time = 0.077735s, Solving time = 0.009359s, Total time = 0.087094s
3 : Statistics :: Grounding time = 0.079314s, Solving time = 0.011777s, Total time = 0.091092s
4 : Statistics :: Grounding time = 0.083074s, Solving time = 0.015525s, Total time = 0.098599s
5 : Statistics :: Grounding time = 0.085161s, Solving time = 0.020105s, Total time = 0.105266s

[16-02-2021_16-42-08] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.829775s, Solving time = 0.116928s, Total time = 0.964037s
Model :: Total atoms = 10757, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-08] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,configure(manipulator_limb_1,extended),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_2,retracted),21)
occurs(1,talos,configure(manipulator_limb_1,retracted),22)
occurs(1,talos,move((store_room,0)),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,configure(manipulator_limb_1,extended),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),30)
occurs(1,talos,configure(manipulator_limb_1,retracted),31)
occurs(1,talos,move((store_room,1)),32)
occurs(1,talos,move((hallway,0)),33)
occurs(1,talos,move((hallway,1)),34)
occurs(1,talos,move((hallway,2)),35)
occurs(1,talos,move((puzzle_room,0)),36)
occurs(1,talos,move((puzzle_room,1)),37)
occurs(1,talos,configure(manipulator_limb_2,extended),38)
occurs(1,talos,configure(manipulator_limb_1,extended),39)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),40)
occurs(1,talos,release(manipulator_end_2,(block,6)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),43)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),44)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),45)
occurs(1,talos,release(manipulator_end_1,(block,5)),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),47)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),48)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),49)
occurs(1,talos,release(manipulator_end_2,(block,3)),50)

[16-02-2021_16-42-08] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.769272s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     0.964037s : Steps =    50 : Actions =    50 |  
  ====================================================================  

[16-02-2021_16-42-08] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-42-08] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-42-08] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-42-08] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-42-08] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-42-08] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-42-08] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-42-08] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Instantiated.

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-42-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> The logic program was extended with 50 rules into program part plan_module(step, start).

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> The logic program was extended with 8024 rules into program part state_module(step).

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=50, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 50], range_=IncRange(start=50, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 50, Max end step = None
Step inc = 1, Step inc init = 52, Stop con = StopCondition.Satisfiable

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Program building started.

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Program building completed.

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding base program parts.

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.031131s.

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving base program parts.

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.003741s.

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Incremental solving started.

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [1]:
Current step bound = 51
End step min = 50
End step max = None

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [51]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('state_module', [46]), ('conformance_module', [46]), ('state_module', [47]), ('conformance_module', [47]), ('state_module', [48]), ('conformance_module', [48]), ('state_module', [49]), ('conformance_module', [49]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 50]), ('conformance_module', [50]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 50]), ('conformance_module', [51])].

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.500471s.

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.065334s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [2]:
Current step bound = 52
End step min = 50
End step max = None

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 50]), ('conformance_module', [52])].

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.080466s.

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.010193s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [3]:
Current step bound = 53
End step min = 50
End step max = None

[16-02-2021_16-42-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 50]), ('conformance_module', [53])].

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.081487s.

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.013400s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [4]:
Current step bound = 54
End step min = 50
End step max = None

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 50]), ('conformance_module', [54])].

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.086561s.

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.018299s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [5]:
Current step bound = 55
End step min = 50
End step max = None

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 50]), ('conformance_module', [55])].

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.092045s.

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.017797s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [6]:
Current step bound = 56
End step min = 50
End step max = None

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 50]), ('conformance_module', [56])].

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.092037s.

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.019184s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [7]:
Current step bound = 57
End step min = 50
End step max = None

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 50]), ('conformance_module', [57])].

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.098245s.

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.022186s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [8]:
Current step bound = 58
End step min = 50
End step max = None

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 50]), ('conformance_module', [58])].

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.094017s.

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.023582s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [9]:
Current step bound = 59
End step min = 50
End step max = None

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 50]), ('conformance_module', [59])].

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.101267s.

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.029352s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [10]:
Current step bound = 60
End step min = 50
End step max = None

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 50]), ('conformance_module', [60])].

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.103942s.

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.036861s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [11]:
Current step bound = 61
End step min = 50
End step max = None

[16-02-2021_16-42-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 50]), ('conformance_module', [61])].

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.096550s.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Model found:
Model :: Total atoms = 12853, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.030327s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Incremental solving completed in 1.803523s because STOP_CON_REACHED.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.458219s, Solving time = 0.290257s, Total time = 1.803523s
Final Model :: Total atoms = 12853, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.500471s, Solving time = 0.065334s, Total time = 0.565805s
2 : Statistics :: Grounding time = 0.080466s, Solving time = 0.010193s, Total time = 0.090660s
3 : Statistics :: Grounding time = 0.081487s, Solving time = 0.013400s, Total time = 0.094886s
4 : Statistics :: Grounding time = 0.086561s, Solving time = 0.018299s, Total time = 0.104859s
5 : Statistics :: Grounding time = 0.092045s, Solving time = 0.017797s, Total time = 0.109842s
6 : Statistics :: Grounding time = 0.092037s, Solving time = 0.019184s, Total time = 0.111221s
7 : Statistics :: Grounding time = 0.098245s, Solving time = 0.022186s, Total time = 0.120432s
8 : Statistics :: Grounding time = 0.094017s, Solving time = 0.023582s, Total time = 0.117599s
9 : Statistics :: Grounding time = 0.101267s, Solving time = 0.029352s, Total time = 0.130619s
10 : Statistics :: Grounding time = 0.103942s, Solving time = 0.036861s, Total time = 0.140803s
11 : Statistics :: Grounding time = 0.096550s, Solving time = 0.030327s, Total time = 0.126877s

[16-02-2021_16-42-11] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.458219s, Solving time = 0.290257s, Total time = 1.803523s
Model :: Total atoms = 12853, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-42-11] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,configure(manipulator_limb_1,extended),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_2,retracted),21)
occurs(1,talos,configure(manipulator_limb_1,retracted),22)
occurs(1,talos,move((store_room,0)),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,configure(manipulator_limb_1,extended),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),30)
occurs(1,talos,configure(manipulator_limb_1,retracted),31)
occurs(1,talos,move((store_room,1)),32)
occurs(1,talos,move((hallway,0)),33)
occurs(1,talos,move((hallway,1)),34)
occurs(1,talos,move((hallway,2)),35)
occurs(1,talos,move((puzzle_room,0)),36)
occurs(1,talos,move((puzzle_room,1)),37)
occurs(1,talos,configure(manipulator_limb_2,extended),38)
occurs(1,talos,configure(manipulator_limb_1,extended),39)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),40)
occurs(1,talos,release(manipulator_end_2,(block,6)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),43)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),44)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),45)
occurs(1,talos,release(manipulator_end_1,(block,5)),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),47)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),48)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),49)
occurs(1,talos,release(manipulator_end_2,(block,3)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),52)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),53)
occurs(1,talos,release(manipulator_end_2,(block,3)),54)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),55)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),56)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),57)
occurs(1,talos,release(manipulator_end_2,(block,2)),58)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),59)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),60)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),61)

[16-02-2021_16-42-11] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.803523s : Steps =    61 : Actions =    61 |  
  ====================================================================  

[16-02-2021_16-42-11] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-42-11] INFO :: Experiment >> 

      ================================================      
           Experimental run 11 : Time 16.839694s            
      ================================================      

[16-02-2021_16-42-11] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-42-11] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-42-11] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-42-11] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-42-11] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-42-11] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Instantiated.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Program building started.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Program building completed.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding base program parts.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.015852s.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving base program parts.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.002088s.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Incremental solving started.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.039403s.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.004879s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.033738s.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.003561s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.031230s.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.004745s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.038570s.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.005316s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.034748s.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.005634s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.036245s.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.006554s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.037951s.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.007137s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.037580s.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.008427s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.037282s.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.011152s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.042633s.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.010710s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.042682s.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.012317s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.041283s.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.019172s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.040752s.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.030322s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.040749s.

[16-02-2021_16-42-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.042771s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.041858s.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.063848s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.077069s.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.104649s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.090749s.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.183016s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.083629s.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Model found:
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.051160s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Incremental solving completed in 1.464978s because STOP_CON_REACHED.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.844002s, Solving time = 0.577460s, Total time = 1.464978s
Final Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039403s, Solving time = 0.004879s, Total time = 0.044282s
2 : Statistics :: Grounding time = 0.033738s, Solving time = 0.003561s, Total time = 0.037299s
3 : Statistics :: Grounding time = 0.031230s, Solving time = 0.004745s, Total time = 0.035975s
4 : Statistics :: Grounding time = 0.038570s, Solving time = 0.005316s, Total time = 0.043885s
5 : Statistics :: Grounding time = 0.034748s, Solving time = 0.005634s, Total time = 0.040382s
6 : Statistics :: Grounding time = 0.036245s, Solving time = 0.006554s, Total time = 0.042799s
7 : Statistics :: Grounding time = 0.037951s, Solving time = 0.007137s, Total time = 0.045088s
8 : Statistics :: Grounding time = 0.037580s, Solving time = 0.008427s, Total time = 0.046006s
9 : Statistics :: Grounding time = 0.037282s, Solving time = 0.011152s, Total time = 0.048434s
10 : Statistics :: Grounding time = 0.042633s, Solving time = 0.010710s, Total time = 0.053344s
11 : Statistics :: Grounding time = 0.042682s, Solving time = 0.012317s, Total time = 0.054999s
12 : Statistics :: Grounding time = 0.041283s, Solving time = 0.019172s, Total time = 0.060455s
13 : Statistics :: Grounding time = 0.040752s, Solving time = 0.030322s, Total time = 0.071074s
14 : Statistics :: Grounding time = 0.040749s, Solving time = 0.042771s, Total time = 0.083520s
15 : Statistics :: Grounding time = 0.041858s, Solving time = 0.063848s, Total time = 0.105706s
16 : Statistics :: Grounding time = 0.077069s, Solving time = 0.104649s, Total time = 0.181718s
17 : Statistics :: Grounding time = 0.090749s, Solving time = 0.183016s, Total time = 0.273765s
18 : Statistics :: Grounding time = 0.083629s, Solving time = 0.051160s, Total time = 0.134789s

[16-02-2021_16-42-12] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.844002s, Solving time = 0.577460s, Total time = 1.464978s
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-42-12] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),9)
occurs(3,talos,release(manipulator_arm_2,(block,5)),10)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),11)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[16-02-2021_16-42-12] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-42-12] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-42-12] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-42-12] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-42-12] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-42-12] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Instantiated.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Program building started.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Program building completed.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding base program parts.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.014475s.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving base program parts.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.002241s.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Incremental solving started.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.064190s.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.005487s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.044091s.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.003571s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.045453s.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.004638s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.046307s.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.006555s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.052864s.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.007728s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.050454s.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.008841s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.053475s.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.009424s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.059577s.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.009943s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.060864s.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.010753s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.057765s.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.010855s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.059214s.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.013229s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.065768s.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.013764s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.061380s.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.015882s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.062821s.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.016235s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.062903s.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.017683s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.066980s.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.021501s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-42-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.065695s.

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.026783s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.064911s.

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.034944s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.066785s.

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.045019s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.068965s.

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.074107s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.069916s.

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.100770s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.070535s.

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.087279s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.073461s.

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.110981s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.073381s.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.127826s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.073605s.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.112510s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Incremental solving completed in 2.556942s because STOP_CON_REACHED.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.555831s, Solving time = 0.898551s, Total time = 2.556942s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.064190s, Solving time = 0.005487s, Total time = 0.069676s
2 : Statistics :: Grounding time = 0.044091s, Solving time = 0.003571s, Total time = 0.047662s
3 : Statistics :: Grounding time = 0.045453s, Solving time = 0.004638s, Total time = 0.050091s
4 : Statistics :: Grounding time = 0.046307s, Solving time = 0.006555s, Total time = 0.052862s
5 : Statistics :: Grounding time = 0.052864s, Solving time = 0.007728s, Total time = 0.060592s
6 : Statistics :: Grounding time = 0.050454s, Solving time = 0.008841s, Total time = 0.059295s
7 : Statistics :: Grounding time = 0.053475s, Solving time = 0.009424s, Total time = 0.062899s
8 : Statistics :: Grounding time = 0.059577s, Solving time = 0.009943s, Total time = 0.069520s
9 : Statistics :: Grounding time = 0.060864s, Solving time = 0.010753s, Total time = 0.071617s
10 : Statistics :: Grounding time = 0.057765s, Solving time = 0.010855s, Total time = 0.068620s
11 : Statistics :: Grounding time = 0.059214s, Solving time = 0.013229s, Total time = 0.072443s
12 : Statistics :: Grounding time = 0.065768s, Solving time = 0.013764s, Total time = 0.079532s
13 : Statistics :: Grounding time = 0.061380s, Solving time = 0.015882s, Total time = 0.077262s
14 : Statistics :: Grounding time = 0.062821s, Solving time = 0.016235s, Total time = 0.079056s
15 : Statistics :: Grounding time = 0.062903s, Solving time = 0.017683s, Total time = 0.080586s
16 : Statistics :: Grounding time = 0.066980s, Solving time = 0.021501s, Total time = 0.088481s
17 : Statistics :: Grounding time = 0.065695s, Solving time = 0.026783s, Total time = 0.092477s
18 : Statistics :: Grounding time = 0.064911s, Solving time = 0.034944s, Total time = 0.099855s
19 : Statistics :: Grounding time = 0.066785s, Solving time = 0.045019s, Total time = 0.111804s
20 : Statistics :: Grounding time = 0.068965s, Solving time = 0.074107s, Total time = 0.143072s
21 : Statistics :: Grounding time = 0.069916s, Solving time = 0.100770s, Total time = 0.170686s
22 : Statistics :: Grounding time = 0.070535s, Solving time = 0.087279s, Total time = 0.157815s
23 : Statistics :: Grounding time = 0.073461s, Solving time = 0.110981s, Total time = 0.184442s
24 : Statistics :: Grounding time = 0.073381s, Solving time = 0.127826s, Total time = 0.201208s
25 : Statistics :: Grounding time = 0.073605s, Solving time = 0.112510s, Total time = 0.186114s

[16-02-2021_16-42-15] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.555831s, Solving time = 0.898551s, Total time = 2.556942s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-15] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_2,extended),13)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),14)
occurs(2,talos,configure(manipulator_arm_2,retracted),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),25)

[16-02-2021_16-42-15] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-42-15] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-42-15] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-42-15] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-42-15] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-42-15] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Instantiated.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Program building started.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Program building completed.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding base program parts.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.016985s.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving base program parts.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.002717s.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Incremental solving started.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.184733s.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.008406s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.063284s.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.005444s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.066566s.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.006807s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.072134s.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.010754s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.073977s.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.011821s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.072921s.

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.013322s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.081524s.

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.016286s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.077799s.

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.015460s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.077091s.

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.015916s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.079545s.

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.016718s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.081381s.

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.017542s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.083016s.

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.018450s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.087938s.

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.025444s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.086056s.

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.024321s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.087650s.

[16-02-2021_16-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.025854s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.088308s.

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.026909s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.090442s.

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.035415s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.088341s.

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.039880s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.091189s.

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.045047s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.092044s.

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.050015s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.098153s.

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.056154s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.094015s.

[16-02-2021_16-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.050900s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.093946s.

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.106587s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.097572s.

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Model found:
Model :: Total atoms = 6742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.101177s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Incremental solving completed in 2.992480s because STOP_CON_REACHED.

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.126610s, Solving time = 0.747348s, Total time = 2.992480s
Final Model :: Total atoms = 6742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.184733s, Solving time = 0.008406s, Total time = 0.193139s
2 : Statistics :: Grounding time = 0.063284s, Solving time = 0.005444s, Total time = 0.068728s
3 : Statistics :: Grounding time = 0.066566s, Solving time = 0.006807s, Total time = 0.073373s
4 : Statistics :: Grounding time = 0.072134s, Solving time = 0.010754s, Total time = 0.082889s
5 : Statistics :: Grounding time = 0.073977s, Solving time = 0.011821s, Total time = 0.085798s
6 : Statistics :: Grounding time = 0.072921s, Solving time = 0.013322s, Total time = 0.086243s
7 : Statistics :: Grounding time = 0.081524s, Solving time = 0.016286s, Total time = 0.097811s
8 : Statistics :: Grounding time = 0.077799s, Solving time = 0.015460s, Total time = 0.093259s
9 : Statistics :: Grounding time = 0.077091s, Solving time = 0.015916s, Total time = 0.093008s
10 : Statistics :: Grounding time = 0.079545s, Solving time = 0.016718s, Total time = 0.096263s
11 : Statistics :: Grounding time = 0.081381s, Solving time = 0.017542s, Total time = 0.098923s
12 : Statistics :: Grounding time = 0.083016s, Solving time = 0.018450s, Total time = 0.101466s
13 : Statistics :: Grounding time = 0.087938s, Solving time = 0.025444s, Total time = 0.113381s
14 : Statistics :: Grounding time = 0.086056s, Solving time = 0.024321s, Total time = 0.110377s
15 : Statistics :: Grounding time = 0.087650s, Solving time = 0.025854s, Total time = 0.113504s
16 : Statistics :: Grounding time = 0.088308s, Solving time = 0.026909s, Total time = 0.115217s
17 : Statistics :: Grounding time = 0.090442s, Solving time = 0.035415s, Total time = 0.125857s
18 : Statistics :: Grounding time = 0.088341s, Solving time = 0.039880s, Total time = 0.128221s
19 : Statistics :: Grounding time = 0.091189s, Solving time = 0.045047s, Total time = 0.136236s
20 : Statistics :: Grounding time = 0.092044s, Solving time = 0.050015s, Total time = 0.142059s
21 : Statistics :: Grounding time = 0.098153s, Solving time = 0.056154s, Total time = 0.154307s
22 : Statistics :: Grounding time = 0.094015s, Solving time = 0.050900s, Total time = 0.144914s
23 : Statistics :: Grounding time = 0.093946s, Solving time = 0.106587s, Total time = 0.200533s
24 : Statistics :: Grounding time = 0.097572s, Solving time = 0.101177s, Total time = 0.198749s

[16-02-2021_16-42-18] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 2.126610s, Solving time = 0.747348s, Total time = 2.992480s
Model :: Total atoms = 6742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-18] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),24)

[16-02-2021_16-42-18] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.464978s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.556942s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     2.992480s : Steps =    24 : Actions =    24 |  
  ====================================================================  

[16-02-2021_16-42-18] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-42-18] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-42-18] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-42-18] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-42-18] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-42-18] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-42-18] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-42-18] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Instantiated.

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> The logic program was extended with 24 rules into program part plan_module(step, start).

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> The logic program was extended with 3968 rules into program part state_module(step).

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=24, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 24], range_=IncRange(start=24, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 24, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Program building started.

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Program building completed.

[16-02-2021_16-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding base program parts.

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.023652s.

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving base program parts.

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.003562s.

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Incremental solving started.

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 24
End step max = None

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [25]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 24]), ('conformance_module', [25])].

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.325476s.

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.036328s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 24
End step max = None

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 24]), ('conformance_module', [26])].

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.071740s.

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.007305s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 24
End step max = None

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 24]), ('conformance_module', [27])].

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.068648s.

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.008117s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 24
End step max = None

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 24]), ('conformance_module', [28])].

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.072686s.

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.010592s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 24
End step max = None

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 24]), ('conformance_module', [29])].

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.074067s.

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.013291s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 24
End step max = None

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 24]), ('conformance_module', [30])].

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.078156s.

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.014774s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 24
End step max = None

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 24]), ('conformance_module', [31])].

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.086234s.

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.015172s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 24
End step max = None

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 24]), ('conformance_module', [32])].

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.083842s.

[16-02-2021_16-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.016478s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 24
End step max = None

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 24]), ('conformance_module', [33])].

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.085047s.

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.017329s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 24
End step max = None

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 24]), ('conformance_module', [34])].

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.090392s.

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.018435s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 24
End step max = None

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 24]), ('conformance_module', [35])].

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.088052s.

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.018722s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 24
End step max = None

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 24]), ('conformance_module', [36])].

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.097780s.

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.019549s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 24
End step max = None

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 24]), ('conformance_module', [37])].

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.091819s.

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.019820s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 24
End step max = None

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 24]), ('conformance_module', [38])].

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.092206s.

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.024657s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 24
End step max = None

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 24]), ('conformance_module', [39])].

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.102690s.

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.037198s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [16]:
Current step bound = 40
End step min = 24
End step max = None

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 24]), ('conformance_module', [40])].

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.098843s.

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.038486s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [17]:
Current step bound = 41
End step min = 24
End step max = None

[16-02-2021_16-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 24]), ('conformance_module', [41])].

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.104734s.

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.037148s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [18]:
Current step bound = 42
End step min = 24
End step max = None

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 24]), ('conformance_module', [42])].

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.098753s.

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.056487s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [19]:
Current step bound = 43
End step min = 24
End step max = None

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 24]), ('conformance_module', [43])].

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.100473s.

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Model found:
Model :: Total atoms = 9743, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.078618s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Incremental solving completed in 2.520440s because STOP_CON_REACHED.

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.935288s, Solving time = 0.492069s, Total time = 2.520440s
Final Model :: Total atoms = 9743, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.325476s, Solving time = 0.036328s, Total time = 0.361804s
2 : Statistics :: Grounding time = 0.071740s, Solving time = 0.007305s, Total time = 0.079045s
3 : Statistics :: Grounding time = 0.068648s, Solving time = 0.008117s, Total time = 0.076765s
4 : Statistics :: Grounding time = 0.072686s, Solving time = 0.010592s, Total time = 0.083279s
5 : Statistics :: Grounding time = 0.074067s, Solving time = 0.013291s, Total time = 0.087358s
6 : Statistics :: Grounding time = 0.078156s, Solving time = 0.014774s, Total time = 0.092930s
7 : Statistics :: Grounding time = 0.086234s, Solving time = 0.015172s, Total time = 0.101406s
8 : Statistics :: Grounding time = 0.083842s, Solving time = 0.016478s, Total time = 0.100320s
9 : Statistics :: Grounding time = 0.085047s, Solving time = 0.017329s, Total time = 0.102376s
10 : Statistics :: Grounding time = 0.090392s, Solving time = 0.018435s, Total time = 0.108827s
11 : Statistics :: Grounding time = 0.088052s, Solving time = 0.018722s, Total time = 0.106774s
12 : Statistics :: Grounding time = 0.097780s, Solving time = 0.019549s, Total time = 0.117329s
13 : Statistics :: Grounding time = 0.091819s, Solving time = 0.019820s, Total time = 0.111639s
14 : Statistics :: Grounding time = 0.092206s, Solving time = 0.024657s, Total time = 0.116863s
15 : Statistics :: Grounding time = 0.102690s, Solving time = 0.037198s, Total time = 0.139889s
16 : Statistics :: Grounding time = 0.098843s, Solving time = 0.038486s, Total time = 0.137329s
17 : Statistics :: Grounding time = 0.104734s, Solving time = 0.037148s, Total time = 0.141881s
18 : Statistics :: Grounding time = 0.098753s, Solving time = 0.056487s, Total time = 0.155241s
19 : Statistics :: Grounding time = 0.100473s, Solving time = 0.078618s, Total time = 0.179091s

[16-02-2021_16-42-21] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.935288s, Solving time = 0.492069s, Total time = 2.520440s
Model :: Total atoms = 9743, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-42-21] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),24)
occurs(1,talos,configure(manipulator_limb_2,extended),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),26)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_limb_2,retracted),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,configure(manipulator_limb_2,extended),37)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),40)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),41)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),42)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),43)

[16-02-2021_16-42-21] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     2.520440s : Steps =    43 : Actions =    43 |  
  ====================================================================  

[16-02-2021_16-42-21] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-42-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-42-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-42-21] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-42-21] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-42-21] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-42-21] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-42-21] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Instantiated.

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Program building started.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Program building completed.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding base program parts.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding completed in 0.021614s.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving base program parts.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving completed in 0.003094s.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Incremental solving started.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding completed in 0.135450s.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving started.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving completed in 0.020191s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding completed in 0.053278s.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving started.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving completed in 0.005879s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding completed in 0.056224s.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving started.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving completed in 0.008018s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding completed in 0.057277s.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving started.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving completed in 0.009784s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding completed in 0.071676s.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving started.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving completed in 0.010797s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding completed in 0.064367s.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving started.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving completed in 0.011346s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding completed in 0.061546s.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving started.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving completed in 0.012346s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding completed in 0.068122s.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving started.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving completed in 0.011796s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding completed in 0.064188s.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving started.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Model found:
Model :: Total atoms = 7583, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving completed in 0.015953s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Incremental solving completed in 0.783030s because STOP_CON_REACHED.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.653742s, Solving time = 0.109203s, Total time = 0.783030s
Final Model :: Total atoms = 7583, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.135450s, Solving time = 0.020191s, Total time = 0.155641s
2 : Statistics :: Grounding time = 0.053278s, Solving time = 0.005879s, Total time = 0.059157s
3 : Statistics :: Grounding time = 0.056224s, Solving time = 0.008018s, Total time = 0.064242s
4 : Statistics :: Grounding time = 0.057277s, Solving time = 0.009784s, Total time = 0.067061s
5 : Statistics :: Grounding time = 0.071676s, Solving time = 0.010797s, Total time = 0.082473s
6 : Statistics :: Grounding time = 0.064367s, Solving time = 0.011346s, Total time = 0.075712s
7 : Statistics :: Grounding time = 0.061546s, Solving time = 0.012346s, Total time = 0.073892s
8 : Statistics :: Grounding time = 0.068122s, Solving time = 0.011796s, Total time = 0.079918s
9 : Statistics :: Grounding time = 0.064188s, Solving time = 0.015953s, Total time = 0.080140s

[16-02-2021_16-42-22] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.653742s, Solving time = 0.109203s, Total time = 0.783030s
Model :: Total atoms = 7583, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-42-22] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_2,extended),13)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),14)
occurs(2,talos,configure(manipulator_arm_2,retracted),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),25)
occurs(2,talos,release(manipulator_arm_2,(block,5)),26)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),27)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),28)
occurs(2,talos,release(manipulator_arm_1,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[16-02-2021_16-42-22] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-42-22] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-42-22] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-42-22] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-42-22] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-42-22] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Instantiated.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> The logic program was extended with 43 rules into program part plan_module(step, start).

[16-02-2021_16-42-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> The logic program was extended with 6932 rules into program part state_module(step).

[16-02-2021_16-42-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=43, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 43], range_=IncRange(start=43, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 43, Max end step = None
Step inc = 1, Step inc init = 45, Stop con = StopCondition.Satisfiable

[16-02-2021_16-42-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Program building started.

[16-02-2021_16-42-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Program building completed.

[16-02-2021_16-42-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding base program parts.

[16-02-2021_16-42-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding completed in 0.030024s.

[16-02-2021_16-42-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving base program parts.

[16-02-2021_16-42-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving completed in 0.003424s.

[16-02-2021_16-42-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Incremental solving started.

[16-02-2021_16-42-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Beginning Incremental call [1]:
Current step bound = 44
End step min = 43
End step max = None

[16-02-2021_16-42-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding program parts: [('check', [44]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 43]), ('conformance_module', [43]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 43]), ('conformance_module', [44])].

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding completed in 0.450480s.

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving started.

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving completed in 0.055861s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Beginning Incremental call [2]:
Current step bound = 45
End step min = 43
End step max = None

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 43]), ('conformance_module', [45])].

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding completed in 0.077606s.

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving started.

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving completed in 0.008877s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Beginning Incremental call [3]:
Current step bound = 46
End step min = 43
End step max = None

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 43]), ('conformance_module', [46])].

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding completed in 0.078096s.

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving started.

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving completed in 0.011695s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Beginning Incremental call [4]:
Current step bound = 47
End step min = 43
End step max = None

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 43]), ('conformance_module', [47])].

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding completed in 0.081599s.

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving started.

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving completed in 0.015524s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Beginning Incremental call [5]:
Current step bound = 48
End step min = 43
End step max = None

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 43]), ('conformance_module', [48])].

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding completed in 0.090362s.

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving started.

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Model found:
Model :: Total atoms = 10435, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving completed in 0.019878s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Incremental solving completed in 0.941190s because STOP_CON_REACHED.

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.808166s, Solving time = 0.115258s, Total time = 0.941190s
Final Model :: Total atoms = 10435, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.450480s, Solving time = 0.055861s, Total time = 0.506341s
2 : Statistics :: Grounding time = 0.077606s, Solving time = 0.008877s, Total time = 0.086482s
3 : Statistics :: Grounding time = 0.078096s, Solving time = 0.011695s, Total time = 0.089791s
4 : Statistics :: Grounding time = 0.081599s, Solving time = 0.015524s, Total time = 0.097123s
5 : Statistics :: Grounding time = 0.090362s, Solving time = 0.019878s, Total time = 0.110239s

[16-02-2021_16-42-24] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.808166s, Solving time = 0.115258s, Total time = 0.941190s
Model :: Total atoms = 10435, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-24] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),24)
occurs(1,talos,configure(manipulator_limb_2,extended),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),26)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_limb_2,retracted),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,configure(manipulator_limb_2,extended),37)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),40)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),41)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),42)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),43)
occurs(1,talos,release(manipulator_end_2,(block,5)),44)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),45)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),46)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),47)
occurs(1,talos,release(manipulator_end_1,(block,3)),48)

[16-02-2021_16-42-24] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.783030s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     0.941190s : Steps =    48 : Actions =    48 |  
  ====================================================================  

[16-02-2021_16-42-24] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-42-24] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-42-24] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-42-24] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-42-24] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-42-24] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-42-24] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-42-24] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Instantiated.

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> The logic program was extended with 48 rules into program part plan_module(step, start).

[16-02-2021_16-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> The logic program was extended with 7712 rules into program part state_module(step).

[16-02-2021_16-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=48, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 48], range_=IncRange(start=48, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 48, Max end step = None
Step inc = 1, Step inc init = 50, Stop con = StopCondition.Satisfiable

[16-02-2021_16-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Program building started.

[16-02-2021_16-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Program building completed.

[16-02-2021_16-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding base program parts.

[16-02-2021_16-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.030657s.

[16-02-2021_16-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving base program parts.

[16-02-2021_16-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.003961s.

[16-02-2021_16-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Incremental solving started.

[16-02-2021_16-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [1]:
Current step bound = 49
End step min = 48
End step max = None

[16-02-2021_16-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [49]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('state_module', [46]), ('conformance_module', [46]), ('state_module', [47]), ('conformance_module', [47]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 48]), ('conformance_module', [48]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 48]), ('conformance_module', [49])].

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.488203s.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.060447s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [2]:
Current step bound = 50
End step min = 48
End step max = None

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 48]), ('conformance_module', [50])].

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.078438s.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.009017s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [3]:
Current step bound = 51
End step min = 48
End step max = None

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 48]), ('conformance_module', [51])].

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.079657s.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.013060s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [4]:
Current step bound = 52
End step min = 48
End step max = None

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 48]), ('conformance_module', [52])].

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.085545s.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.016584s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [5]:
Current step bound = 53
End step min = 48
End step max = None

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 48]), ('conformance_module', [53])].

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.088480s.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.017169s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [6]:
Current step bound = 54
End step min = 48
End step max = None

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 48]), ('conformance_module', [54])].

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.090028s.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.019018s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [7]:
Current step bound = 55
End step min = 48
End step max = None

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 48]), ('conformance_module', [55])].

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.093638s.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Model found:
Model :: Total atoms = 11787, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.026699s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Incremental solving completed in 1.229611s because STOP_CON_REACHED.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.034647s, Solving time = 0.165955s, Total time = 1.229611s
Final Model :: Total atoms = 11787, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.488203s, Solving time = 0.060447s, Total time = 0.548650s
2 : Statistics :: Grounding time = 0.078438s, Solving time = 0.009017s, Total time = 0.087455s
3 : Statistics :: Grounding time = 0.079657s, Solving time = 0.013060s, Total time = 0.092717s
4 : Statistics :: Grounding time = 0.085545s, Solving time = 0.016584s, Total time = 0.102130s
5 : Statistics :: Grounding time = 0.088480s, Solving time = 0.017169s, Total time = 0.105649s
6 : Statistics :: Grounding time = 0.090028s, Solving time = 0.019018s, Total time = 0.109046s
7 : Statistics :: Grounding time = 0.093638s, Solving time = 0.026699s, Total time = 0.120337s

[16-02-2021_16-42-26] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.034647s, Solving time = 0.165955s, Total time = 1.229611s
Model :: Total atoms = 11787, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-42-26] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),24)
occurs(1,talos,configure(manipulator_limb_2,extended),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),26)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_limb_2,retracted),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,configure(manipulator_limb_2,extended),37)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),40)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),41)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),42)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),43)
occurs(1,talos,release(manipulator_end_2,(block,5)),44)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),45)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),46)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),47)
occurs(1,talos,release(manipulator_end_1,(block,3)),48)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),49)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),50)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),51)
occurs(1,talos,release(manipulator_end_1,(block,2)),52)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),53)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),54)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),55)

[16-02-2021_16-42-26] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.229611s : Steps =    55 : Actions =    55 |  
  ====================================================================  

[16-02-2021_16-42-26] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-42-26] INFO :: Experiment >> 

      ================================================      
           Experimental run 12 : Time 15.646458s            
      ================================================      

[16-02-2021_16-42-26] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-42-26] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-42-26] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-42-26] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-42-26] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-42-26] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Instantiated.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Program building started.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Program building completed.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding base program parts.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.013985s.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving base program parts.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.002659s.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Incremental solving started.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.039640s.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.005933s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.030856s.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.002785s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.031398s.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.003742s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.038070s.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.004853s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.035309s.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.005678s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.035945s.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.006436s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.039504s.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.006660s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.037314s.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.008607s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.037757s.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.009890s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.040141s.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.011981s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.039546s.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.014313s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.040829s.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.022141s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.040434s.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.029583s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.042699s.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.045129s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.042086s.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.061661s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.076854s.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.104421s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.082227s.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.160701s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.084139s.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Model found:
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.071749s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Incremental solving completed in 1.450889s because STOP_CON_REACHED.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.828734s, Solving time = 0.578923s, Total time = 1.450889s
Final Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039640s, Solving time = 0.005933s, Total time = 0.045572s
2 : Statistics :: Grounding time = 0.030856s, Solving time = 0.002785s, Total time = 0.033641s
3 : Statistics :: Grounding time = 0.031398s, Solving time = 0.003742s, Total time = 0.035140s
4 : Statistics :: Grounding time = 0.038070s, Solving time = 0.004853s, Total time = 0.042924s
5 : Statistics :: Grounding time = 0.035309s, Solving time = 0.005678s, Total time = 0.040987s
6 : Statistics :: Grounding time = 0.035945s, Solving time = 0.006436s, Total time = 0.042381s
7 : Statistics :: Grounding time = 0.039504s, Solving time = 0.006660s, Total time = 0.046164s
8 : Statistics :: Grounding time = 0.037314s, Solving time = 0.008607s, Total time = 0.045921s
9 : Statistics :: Grounding time = 0.037757s, Solving time = 0.009890s, Total time = 0.047647s
10 : Statistics :: Grounding time = 0.040141s, Solving time = 0.011981s, Total time = 0.052122s
11 : Statistics :: Grounding time = 0.039546s, Solving time = 0.014313s, Total time = 0.053859s
12 : Statistics :: Grounding time = 0.040829s, Solving time = 0.022141s, Total time = 0.062970s
13 : Statistics :: Grounding time = 0.040434s, Solving time = 0.029583s, Total time = 0.070017s
14 : Statistics :: Grounding time = 0.042699s, Solving time = 0.045129s, Total time = 0.087828s
15 : Statistics :: Grounding time = 0.042086s, Solving time = 0.061661s, Total time = 0.103747s
16 : Statistics :: Grounding time = 0.076854s, Solving time = 0.104421s, Total time = 0.181276s
17 : Statistics :: Grounding time = 0.082227s, Solving time = 0.160701s, Total time = 0.242928s
18 : Statistics :: Grounding time = 0.084139s, Solving time = 0.071749s, Total time = 0.155889s

[16-02-2021_16-42-28] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.828734s, Solving time = 0.578923s, Total time = 1.450889s
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-42-28] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),7)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_1,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),10)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),11)
occurs(3,talos,release(manipulator_arm_1,(block,3)),12)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[16-02-2021_16-42-28] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-42-28] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-42-28] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-42-28] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-42-28] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-42-28] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Instantiated.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Program building started.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Program building completed.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding base program parts.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.014343s.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving base program parts.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.002239s.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Incremental solving started.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.062182s.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.005690s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.043561s.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.004354s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.045891s.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.004615s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.046162s.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.006755s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.049543s.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.007846s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.050294s.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.008876s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.053719s.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.009573s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.059958s.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.014049s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.056731s.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.010557s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.056403s.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.011056s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.060894s.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.014155s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.059216s.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.016084s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.061460s.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.017673s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.059393s.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.019001s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.066623s.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.020241s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.069100s.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.020236s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.064845s.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.028990s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.065622s.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.031206s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.067233s.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.038103s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.074237s.

[16-02-2021_16-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.066356s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.074021s.

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.069186s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.071606s.

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.074165s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.073024s.

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.131398s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.073638s.

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.095488s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.074909s.

[16-02-2021_16-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.190474s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Incremental solving completed in 2.573047s because STOP_CON_REACHED.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.554607s, Solving time = 0.918367s, Total time = 2.573047s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.062182s, Solving time = 0.005690s, Total time = 0.067872s
2 : Statistics :: Grounding time = 0.043561s, Solving time = 0.004354s, Total time = 0.047914s
3 : Statistics :: Grounding time = 0.045891s, Solving time = 0.004615s, Total time = 0.050506s
4 : Statistics :: Grounding time = 0.046162s, Solving time = 0.006755s, Total time = 0.052917s
5 : Statistics :: Grounding time = 0.049543s, Solving time = 0.007846s, Total time = 0.057388s
6 : Statistics :: Grounding time = 0.050294s, Solving time = 0.008876s, Total time = 0.059170s
7 : Statistics :: Grounding time = 0.053719s, Solving time = 0.009573s, Total time = 0.063292s
8 : Statistics :: Grounding time = 0.059958s, Solving time = 0.014049s, Total time = 0.074007s
9 : Statistics :: Grounding time = 0.056731s, Solving time = 0.010557s, Total time = 0.067288s
10 : Statistics :: Grounding time = 0.056403s, Solving time = 0.011056s, Total time = 0.067460s
11 : Statistics :: Grounding time = 0.060894s, Solving time = 0.014155s, Total time = 0.075049s
12 : Statistics :: Grounding time = 0.059216s, Solving time = 0.016084s, Total time = 0.075300s
13 : Statistics :: Grounding time = 0.061460s, Solving time = 0.017673s, Total time = 0.079133s
14 : Statistics :: Grounding time = 0.059393s, Solving time = 0.019001s, Total time = 0.078394s
15 : Statistics :: Grounding time = 0.066623s, Solving time = 0.020241s, Total time = 0.086864s
16 : Statistics :: Grounding time = 0.069100s, Solving time = 0.020236s, Total time = 0.089336s
17 : Statistics :: Grounding time = 0.064845s, Solving time = 0.028990s, Total time = 0.093836s
18 : Statistics :: Grounding time = 0.065622s, Solving time = 0.031206s, Total time = 0.096828s
19 : Statistics :: Grounding time = 0.067233s, Solving time = 0.038103s, Total time = 0.105336s
20 : Statistics :: Grounding time = 0.074237s, Solving time = 0.066356s, Total time = 0.140593s
21 : Statistics :: Grounding time = 0.074021s, Solving time = 0.069186s, Total time = 0.143207s
22 : Statistics :: Grounding time = 0.071606s, Solving time = 0.074165s, Total time = 0.145771s
23 : Statistics :: Grounding time = 0.073024s, Solving time = 0.131398s, Total time = 0.204422s
24 : Statistics :: Grounding time = 0.073638s, Solving time = 0.095488s, Total time = 0.169127s
25 : Statistics :: Grounding time = 0.074909s, Solving time = 0.190474s, Total time = 0.265384s

[16-02-2021_16-42-31] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.554607s, Solving time = 0.918367s, Total time = 2.573047s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-31] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_1,(block,5)),25)

[16-02-2021_16-42-31] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-42-31] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-42-31] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-42-31] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-42-31] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-42-31] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Instantiated.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Program building started.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Program building completed.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding base program parts.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.017031s.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving base program parts.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.004094s.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Incremental solving started.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.201474s.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.008150s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.063219s.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.005260s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.070521s.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.006732s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.066607s.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.009879s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.070404s.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.012012s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.073085s.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.013864s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.081024s.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.014398s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.078577s.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.015987s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.081579s.

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.016482s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.080437s.

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.017668s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.097697s.

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.017792s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.088850s.

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.018192s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.084889s.

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.021615s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.086742s.

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.024759s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.089006s.

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.024762s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.087984s.

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.026563s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.089461s.

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.030823s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.093805s.

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.047960s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.092146s.

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.042289s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.092279s.

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Model found:
Model :: Total atoms = 6058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.045910s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Incremental solving completed in 2.292974s because STOP_CON_REACHED.

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.786817s, Solving time = 0.425192s, Total time = 2.292974s
Final Model :: Total atoms = 6058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.201474s, Solving time = 0.008150s, Total time = 0.209625s
2 : Statistics :: Grounding time = 0.063219s, Solving time = 0.005260s, Total time = 0.068479s
3 : Statistics :: Grounding time = 0.070521s, Solving time = 0.006732s, Total time = 0.077253s
4 : Statistics :: Grounding time = 0.066607s, Solving time = 0.009879s, Total time = 0.076486s
5 : Statistics :: Grounding time = 0.070404s, Solving time = 0.012012s, Total time = 0.082416s
6 : Statistics :: Grounding time = 0.073085s, Solving time = 0.013864s, Total time = 0.086949s
7 : Statistics :: Grounding time = 0.081024s, Solving time = 0.014398s, Total time = 0.095422s
8 : Statistics :: Grounding time = 0.078577s, Solving time = 0.015987s, Total time = 0.094563s
9 : Statistics :: Grounding time = 0.081579s, Solving time = 0.016482s, Total time = 0.098061s
10 : Statistics :: Grounding time = 0.080437s, Solving time = 0.017668s, Total time = 0.098104s
11 : Statistics :: Grounding time = 0.097697s, Solving time = 0.017792s, Total time = 0.115489s
12 : Statistics :: Grounding time = 0.088850s, Solving time = 0.018192s, Total time = 0.107042s
13 : Statistics :: Grounding time = 0.084889s, Solving time = 0.021615s, Total time = 0.106505s
14 : Statistics :: Grounding time = 0.086742s, Solving time = 0.024759s, Total time = 0.111501s
15 : Statistics :: Grounding time = 0.089006s, Solving time = 0.024762s, Total time = 0.113768s
16 : Statistics :: Grounding time = 0.087984s, Solving time = 0.026563s, Total time = 0.114547s
17 : Statistics :: Grounding time = 0.089461s, Solving time = 0.030823s, Total time = 0.120284s
18 : Statistics :: Grounding time = 0.093805s, Solving time = 0.047960s, Total time = 0.141765s
19 : Statistics :: Grounding time = 0.092146s, Solving time = 0.042289s, Total time = 0.134435s
20 : Statistics :: Grounding time = 0.092279s, Solving time = 0.045910s, Total time = 0.138189s

[16-02-2021_16-42-33] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.786817s, Solving time = 0.425192s, Total time = 2.292974s
Model :: Total atoms = 6058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-42-33] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,configure(manipulator_limb_2,extended),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)

[16-02-2021_16-42-33] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.450889s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.573047s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     2.292974s : Steps =    20 : Actions =    20 |  
  ====================================================================  

[16-02-2021_16-42-33] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-42-33] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-42-33] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-42-33] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-42-33] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-42-33] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-42-33] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-42-33] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Instantiated.

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> The logic program was extended with 20 rules into program part plan_module(step, start).

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> The logic program was extended with 3344 rules into program part state_module(step).

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=20, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 20], range_=IncRange(start=20, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 20, Max end step = None
Step inc = 1, Step inc init = 22, Stop con = StopCondition.Satisfiable

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Program building started.

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Program building completed.

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding base program parts.

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.022224s.

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving base program parts.

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.003321s.

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Incremental solving started.

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [1]:
Current step bound = 21
End step min = 20
End step max = None

[16-02-2021_16-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [21]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 20]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 20]), ('conformance_module', [21])].

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.303970s.

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.031654s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [2]:
Current step bound = 22
End step min = 20
End step max = None

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 20]), ('conformance_module', [22])].

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.071962s.

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.007298s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [3]:
Current step bound = 23
End step min = 20
End step max = None

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 20]), ('conformance_module', [23])].

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.068442s.

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.008134s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [4]:
Current step bound = 24
End step min = 20
End step max = None

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 20]), ('conformance_module', [24])].

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.071308s.

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.009664s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [5]:
Current step bound = 25
End step min = 20
End step max = None

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 20]), ('conformance_module', [25])].

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.072171s.

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.012080s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [6]:
Current step bound = 26
End step min = 20
End step max = None

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 20]), ('conformance_module', [26])].

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.076381s.

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.014471s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [7]:
Current step bound = 27
End step min = 20
End step max = None

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 20]), ('conformance_module', [27])].

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.078441s.

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.015737s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [8]:
Current step bound = 28
End step min = 20
End step max = None

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 20]), ('conformance_module', [28])].

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.082468s.

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.017281s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [9]:
Current step bound = 29
End step min = 20
End step max = None

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 20]), ('conformance_module', [29])].

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.083569s.

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.016986s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [10]:
Current step bound = 30
End step min = 20
End step max = None

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 20]), ('conformance_module', [30])].

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.085485s.

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.018637s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [11]:
Current step bound = 31
End step min = 20
End step max = None

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 20]), ('conformance_module', [31])].

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.090676s.

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.018804s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [12]:
Current step bound = 32
End step min = 20
End step max = None

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 20]), ('conformance_module', [32])].

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.088551s.

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.019925s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [13]:
Current step bound = 33
End step min = 20
End step max = None

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 20]), ('conformance_module', [33])].

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.089060s.

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.021998s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [14]:
Current step bound = 34
End step min = 20
End step max = None

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 20]), ('conformance_module', [34])].

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.092058s.

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.020814s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [15]:
Current step bound = 35
End step min = 20
End step max = None

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 20]), ('conformance_module', [35])].

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.093268s.

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.020995s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [16]:
Current step bound = 36
End step min = 20
End step max = None

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 20]), ('conformance_module', [36])].

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.093931s.

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.022708s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [17]:
Current step bound = 37
End step min = 20
End step max = None

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 20]), ('conformance_module', [37])].

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.096071s.

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.034789s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [18]:
Current step bound = 38
End step min = 20
End step max = None

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 20]), ('conformance_module', [38])].

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.098844s.

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.033954s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [19]:
Current step bound = 39
End step min = 20
End step max = None

[16-02-2021_16-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 20]), ('conformance_module', [39])].

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.102160s.

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.049006s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [20]:
Current step bound = 40
End step min = 20
End step max = None

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 20]), ('conformance_module', [40])].

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.102509s.

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.083732s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [21]:
Current step bound = 41
End step min = 20
End step max = None

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 20]), ('conformance_module', [41])].

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.099251s.

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.077943s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [22]:
Current step bound = 42
End step min = 20
End step max = None

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 20]), ('conformance_module', [42])].

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.100218s.

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.119640s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [23]:
Current step bound = 43
End step min = 20
End step max = None

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 20]), ('conformance_module', [43])].

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.101983s.

[16-02-2021_16-42-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.143044s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [24]:
Current step bound = 44
End step min = 20
End step max = None

[16-02-2021_16-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 20]), ('conformance_module', [44])].

[16-02-2021_16-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.108490s.

[16-02-2021_16-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.191058s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [25]:
Current step bound = 45
End step min = 20
End step max = None

[16-02-2021_16-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 20]), ('conformance_module', [45])].

[16-02-2021_16-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.102721s.

[16-02-2021_16-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[16-02-2021_16-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Model found:
Model :: Total atoms = 10128, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.253554s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Incremental solving completed in 3.885254s because STOP_CON_REACHED.

[16-02-2021_16-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.476212s, Solving time = 1.267226s, Total time = 3.885254s
Final Model :: Total atoms = 10128, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.303970s, Solving time = 0.031654s, Total time = 0.335624s
2 : Statistics :: Grounding time = 0.071962s, Solving time = 0.007298s, Total time = 0.079260s
3 : Statistics :: Grounding time = 0.068442s, Solving time = 0.008134s, Total time = 0.076577s
4 : Statistics :: Grounding time = 0.071308s, Solving time = 0.009664s, Total time = 0.080973s
5 : Statistics :: Grounding time = 0.072171s, Solving time = 0.012080s, Total time = 0.084251s
6 : Statistics :: Grounding time = 0.076381s, Solving time = 0.014471s, Total time = 0.090852s
7 : Statistics :: Grounding time = 0.078441s, Solving time = 0.015737s, Total time = 0.094178s
8 : Statistics :: Grounding time = 0.082468s, Solving time = 0.017281s, Total time = 0.099748s
9 : Statistics :: Grounding time = 0.083569s, Solving time = 0.016986s, Total time = 0.100554s
10 : Statistics :: Grounding time = 0.085485s, Solving time = 0.018637s, Total time = 0.104122s
11 : Statistics :: Grounding time = 0.090676s, Solving time = 0.018804s, Total time = 0.109480s
12 : Statistics :: Grounding time = 0.088551s, Solving time = 0.019925s, Total time = 0.108476s
13 : Statistics :: Grounding time = 0.089060s, Solving time = 0.021998s, Total time = 0.111058s
14 : Statistics :: Grounding time = 0.092058s, Solving time = 0.020814s, Total time = 0.112871s
15 : Statistics :: Grounding time = 0.093268s, Solving time = 0.020995s, Total time = 0.114263s
16 : Statistics :: Grounding time = 0.093931s, Solving time = 0.022708s, Total time = 0.116639s
17 : Statistics :: Grounding time = 0.096071s, Solving time = 0.034789s, Total time = 0.130860s
18 : Statistics :: Grounding time = 0.098844s, Solving time = 0.033954s, Total time = 0.132798s
19 : Statistics :: Grounding time = 0.102160s, Solving time = 0.049006s, Total time = 0.151166s
20 : Statistics :: Grounding time = 0.102509s, Solving time = 0.083732s, Total time = 0.186240s
21 : Statistics :: Grounding time = 0.099251s, Solving time = 0.077943s, Total time = 0.177194s
22 : Statistics :: Grounding time = 0.100218s, Solving time = 0.119640s, Total time = 0.219858s
23 : Statistics :: Grounding time = 0.101983s, Solving time = 0.143044s, Total time = 0.245027s
24 : Statistics :: Grounding time = 0.108490s, Solving time = 0.191058s, Total time = 0.299548s
25 : Statistics :: Grounding time = 0.102721s, Solving time = 0.253554s, Total time = 0.356276s

[16-02-2021_16-42-37] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 2.476212s, Solving time = 1.267226s, Total time = 3.885254s
Model :: Total atoms = 10128, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-37] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,configure(manipulator_limb_2,extended),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,retracted),21)
occurs(1,talos,configure(manipulator_limb_1,retracted),22)
occurs(1,talos,move((store_room,0)),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,configure(manipulator_limb_1,extended),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),26)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),30)
occurs(1,talos,configure(manipulator_limb_1,retracted),31)
occurs(1,talos,move((store_room,1)),32)
occurs(1,talos,move((hallway,0)),33)
occurs(1,talos,move((hallway,1)),34)
occurs(1,talos,move((hallway,2)),35)
occurs(1,talos,move((puzzle_room,0)),36)
occurs(1,talos,move((puzzle_room,1)),37)
occurs(1,talos,configure(manipulator_limb_2,extended),38)
occurs(1,talos,configure(manipulator_limb_1,extended),39)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),40)
occurs(1,talos,release(manipulator_end_2,(block,6)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),43)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),44)
occurs(1,talos,release(manipulator_end_1,(block,5)),45)

[16-02-2021_16-42-37] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     3.885254s : Steps =    45 : Actions =    45 |  
  ====================================================================  

[16-02-2021_16-42-37] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-42-37] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-42-37] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-42-37] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-42-37] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-42-37] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-42-37] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-42-37] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Instantiated.

[16-02-2021_16-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-42-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Program building started.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Program building completed.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding base program parts.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding completed in 0.021643s.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving base program parts.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving completed in 0.002893s.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Incremental solving started.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding completed in 0.136396s.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving started.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving completed in 0.019899s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding completed in 0.053297s.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving started.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving completed in 0.006800s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding completed in 0.053570s.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving started.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving completed in 0.009007s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding completed in 0.057331s.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving started.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving completed in 0.010001s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding completed in 0.059201s.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving started.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving completed in 0.011295s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding completed in 0.061712s.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving started.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving completed in 0.011016s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding completed in 0.062674s.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving started.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving completed in 0.012719s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding completed in 0.063658s.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving started.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving completed in 0.012031s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding completed in 0.064159s.

[16-02-2021_16-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving started.

[16-02-2021_16-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Model found:
Model :: Total atoms = 7577, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving completed in 0.015587s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Incremental solving completed in 0.766198s because STOP_CON_REACHED.

[16-02-2021_16-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.633640s, Solving time = 0.111249s, Total time = 0.766198s
Final Model :: Total atoms = 7577, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.136396s, Solving time = 0.019899s, Total time = 0.156295s
2 : Statistics :: Grounding time = 0.053297s, Solving time = 0.006800s, Total time = 0.060097s
3 : Statistics :: Grounding time = 0.053570s, Solving time = 0.009007s, Total time = 0.062577s
4 : Statistics :: Grounding time = 0.057331s, Solving time = 0.010001s, Total time = 0.067333s
5 : Statistics :: Grounding time = 0.059201s, Solving time = 0.011295s, Total time = 0.070496s
6 : Statistics :: Grounding time = 0.061712s, Solving time = 0.011016s, Total time = 0.072727s
7 : Statistics :: Grounding time = 0.062674s, Solving time = 0.012719s, Total time = 0.075393s
8 : Statistics :: Grounding time = 0.063658s, Solving time = 0.012031s, Total time = 0.075689s
9 : Statistics :: Grounding time = 0.064159s, Solving time = 0.015587s, Total time = 0.079747s

[16-02-2021_16-42-39] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.633640s, Solving time = 0.111249s, Total time = 0.766198s
Model :: Total atoms = 7577, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-42-39] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_1,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),26)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),27)
occurs(2,talos,release(manipulator_arm_1,(block,3)),28)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[16-02-2021_16-42-39] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-42-39] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-42-39] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-42-39] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-42-39] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-42-39] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Instantiated.

[16-02-2021_16-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> The logic program was extended with 45 rules into program part plan_module(step, start).

[16-02-2021_16-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> The logic program was extended with 7244 rules into program part state_module(step).

[16-02-2021_16-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=45, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 45], range_=IncRange(start=45, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 45, Max end step = None
Step inc = 1, Step inc init = 47, Stop con = StopCondition.Satisfiable

[16-02-2021_16-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Program building started.

[16-02-2021_16-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Program building completed.

[16-02-2021_16-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding base program parts.

[16-02-2021_16-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding completed in 0.030116s.

[16-02-2021_16-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving base program parts.

[16-02-2021_16-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving completed in 0.003189s.

[16-02-2021_16-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Incremental solving started.

[16-02-2021_16-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Beginning Incremental call [1]:
Current step bound = 46
End step min = 45
End step max = None

[16-02-2021_16-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding program parts: [('check', [46]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 45]), ('conformance_module', [45]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 45]), ('conformance_module', [46])].

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding completed in 0.473750s.

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving started.

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving completed in 0.057598s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Beginning Incremental call [2]:
Current step bound = 47
End step min = 45
End step max = None

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 45]), ('conformance_module', [47])].

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding completed in 0.077691s.

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving started.

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving completed in 0.009233s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Beginning Incremental call [3]:
Current step bound = 48
End step min = 45
End step max = None

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 45]), ('conformance_module', [48])].

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding completed in 0.077595s.

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving started.

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving completed in 0.012219s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Beginning Incremental call [4]:
Current step bound = 49
End step min = 45
End step max = None

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 45]), ('conformance_module', [49])].

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding completed in 0.084355s.

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving started.

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving completed in 0.015489s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Beginning Incremental call [5]:
Current step bound = 50
End step min = 45
End step max = None

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 45]), ('conformance_module', [50])].

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding completed in 0.085720s.

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving started.

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Model found:
Model :: Total atoms = 10758, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving completed in 0.018414s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Incremental solving completed in 0.963600s because STOP_CON_REACHED.

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.829227s, Solving time = 0.116142s, Total time = 0.963600s
Final Model :: Total atoms = 10758, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.473750s, Solving time = 0.057598s, Total time = 0.531348s
2 : Statistics :: Grounding time = 0.077691s, Solving time = 0.009233s, Total time = 0.086924s
3 : Statistics :: Grounding time = 0.077595s, Solving time = 0.012219s, Total time = 0.089815s
4 : Statistics :: Grounding time = 0.084355s, Solving time = 0.015489s, Total time = 0.099844s
5 : Statistics :: Grounding time = 0.085720s, Solving time = 0.018414s, Total time = 0.104133s

[16-02-2021_16-42-40] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.829227s, Solving time = 0.116142s, Total time = 0.963600s
Model :: Total atoms = 10758, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-42-40] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,configure(manipulator_limb_2,extended),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,retracted),21)
occurs(1,talos,configure(manipulator_limb_1,retracted),22)
occurs(1,talos,move((store_room,0)),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,configure(manipulator_limb_1,extended),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),26)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),30)
occurs(1,talos,configure(manipulator_limb_1,retracted),31)
occurs(1,talos,move((store_room,1)),32)
occurs(1,talos,move((hallway,0)),33)
occurs(1,talos,move((hallway,1)),34)
occurs(1,talos,move((hallway,2)),35)
occurs(1,talos,move((puzzle_room,0)),36)
occurs(1,talos,move((puzzle_room,1)),37)
occurs(1,talos,configure(manipulator_limb_2,extended),38)
occurs(1,talos,configure(manipulator_limb_1,extended),39)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),40)
occurs(1,talos,release(manipulator_end_2,(block,6)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),43)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),44)
occurs(1,talos,release(manipulator_end_1,(block,5)),45)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),46)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),47)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),48)
occurs(1,talos,release(manipulator_end_1,(block,3)),49)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),50)

[16-02-2021_16-42-40] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.766198s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     0.963600s : Steps =    50 : Actions =    50 |  
  ====================================================================  

[16-02-2021_16-42-40] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-42-40] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-42-40] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-42-40] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-42-40] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-42-40] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-42-40] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-42-40] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Instantiated.

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-42-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> The logic program was extended with 50 rules into program part plan_module(step, start).

[16-02-2021_16-42-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> The logic program was extended with 8024 rules into program part state_module(step).

[16-02-2021_16-42-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=50, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 50], range_=IncRange(start=50, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 50, Max end step = None
Step inc = 1, Step inc init = 52, Stop con = StopCondition.Satisfiable

[16-02-2021_16-42-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Program building started.

[16-02-2021_16-42-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Program building completed.

[16-02-2021_16-42-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding base program parts.

[16-02-2021_16-42-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.031094s.

[16-02-2021_16-42-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving base program parts.

[16-02-2021_16-42-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.003658s.

[16-02-2021_16-42-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Incremental solving started.

[16-02-2021_16-42-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [1]:
Current step bound = 51
End step min = 50
End step max = None

[16-02-2021_16-42-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [51]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('state_module', [46]), ('conformance_module', [46]), ('state_module', [47]), ('conformance_module', [47]), ('state_module', [48]), ('conformance_module', [48]), ('state_module', [49]), ('conformance_module', [49]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 50]), ('conformance_module', [50]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 50]), ('conformance_module', [51])].

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.502452s.

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.063784s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [2]:
Current step bound = 52
End step min = 50
End step max = None

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 50]), ('conformance_module', [52])].

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.080025s.

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.009585s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [3]:
Current step bound = 53
End step min = 50
End step max = None

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 50]), ('conformance_module', [53])].

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.090955s.

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.013389s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [4]:
Current step bound = 54
End step min = 50
End step max = None

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 50]), ('conformance_module', [54])].

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.086534s.

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.016563s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [5]:
Current step bound = 55
End step min = 50
End step max = None

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 50]), ('conformance_module', [55])].

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.089866s.

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.016564s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [6]:
Current step bound = 56
End step min = 50
End step max = None

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 50]), ('conformance_module', [56])].

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.094325s.

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.018413s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [7]:
Current step bound = 57
End step min = 50
End step max = None

[16-02-2021_16-42-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 50]), ('conformance_module', [57])].

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.092554s.

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.024238s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [8]:
Current step bound = 58
End step min = 50
End step max = None

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 50]), ('conformance_module', [58])].

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.098836s.

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.021538s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [9]:
Current step bound = 59
End step min = 50
End step max = None

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 50]), ('conformance_module', [59])].

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.093367s.

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.024095s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [10]:
Current step bound = 60
End step min = 50
End step max = None

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 50]), ('conformance_module', [60])].

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.102507s.

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.029320s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [11]:
Current step bound = 61
End step min = 50
End step max = None

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 50]), ('conformance_module', [61])].

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.097452s.

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.025701s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [12]:
Current step bound = 62
End step min = 50
End step max = None

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 50]), ('conformance_module', [62])].

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.098969s.

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.038298s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [13]:
Current step bound = 63
End step min = 50
End step max = None

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 50]), ('conformance_module', [63])].

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.101841s.

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.056270s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [14]:
Current step bound = 64
End step min = 50
End step max = None

[16-02-2021_16-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 50]), ('conformance_module', [64])].

[16-02-2021_16-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.101412s.

[16-02-2021_16-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.073271s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [15]:
Current step bound = 65
End step min = 50
End step max = None

[16-02-2021_16-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 50]), ('conformance_module', [65])].

[16-02-2021_16-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.110547s.

[16-02-2021_16-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.095110s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [16]:
Current step bound = 66
End step min = 50
End step max = None

[16-02-2021_16-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 50]), ('conformance_module', [66])].

[16-02-2021_16-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.109129s.

[16-02-2021_16-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.184787s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [17]:
Current step bound = 67
End step min = 50
End step max = None

[16-02-2021_16-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 50]), ('conformance_module', [67])].

[16-02-2021_16-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.106561s.

[16-02-2021_16-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.264676s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [18]:
Current step bound = 68
End step min = 50
End step max = None

[16-02-2021_16-42-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 50]), ('conformance_module', [68])].

[16-02-2021_16-42-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.109037s.

[16-02-2021_16-42-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.391038s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [19]:
Current step bound = 69
End step min = 50
End step max = None

[16-02-2021_16-42-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 50]), ('conformance_module', [69])].

[16-02-2021_16-42-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.110805s.

[16-02-2021_16-42-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.617407s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [20]:
Current step bound = 70
End step min = 50
End step max = None

[16-02-2021_16-42-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 50]), ('conformance_module', [70])].

[16-02-2021_16-42-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.112936s.

[16-02-2021_16-42-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.992728s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [21]:
Current step bound = 71
End step min = 50
End step max = None

[16-02-2021_16-42-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 50]), ('conformance_module', [71])].

[16-02-2021_16-42-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.114750s.

[16-02-2021_16-42-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 1.235517s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [22]:
Current step bound = 72
End step min = 50
End step max = None

[16-02-2021_16-42-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [72]), ('domain_rules', [72]), ('state_module', [72]), ('plan_module', [72, 50]), ('conformance_module', [72])].

[16-02-2021_16-42-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.116653s.

[16-02-2021_16-42-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 1.995314s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [23]:
Current step bound = 73
End step min = 50
End step max = None

[16-02-2021_16-42-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [73]), ('domain_rules', [73]), ('state_module', [73]), ('plan_module', [73, 50]), ('conformance_module', [73])].

[16-02-2021_16-42-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.118513s.

[16-02-2021_16-42-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 2.299933s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [24]:
Current step bound = 74
End step min = 50
End step max = None

[16-02-2021_16-42-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [74]), ('domain_rules', [74]), ('state_module', [74]), ('plan_module', [74, 50]), ('conformance_module', [74])].

[16-02-2021_16-42-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.127450s.

[16-02-2021_16-42-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 4.294939s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [25]:
Current step bound = 75
End step min = 50
End step max = None

[16-02-2021_16-42-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [75]), ('domain_rules', [75]), ('state_module', [75]), ('plan_module', [75, 50]), ('conformance_module', [75])].

[16-02-2021_16-42-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.120591s.

[16-02-2021_16-42-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Model found:
Model :: Total atoms = 15408, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.755980s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Incremental solving completed in 16.812929s because STOP_CON_REACHED.

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 3.019164s, Solving time = 13.562120s, Total time = 16.812929s
Final Model :: Total atoms = 15408, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.502452s, Solving time = 0.063784s, Total time = 0.566236s
2 : Statistics :: Grounding time = 0.080025s, Solving time = 0.009585s, Total time = 0.089610s
3 : Statistics :: Grounding time = 0.090955s, Solving time = 0.013389s, Total time = 0.104344s
4 : Statistics :: Grounding time = 0.086534s, Solving time = 0.016563s, Total time = 0.103097s
5 : Statistics :: Grounding time = 0.089866s, Solving time = 0.016564s, Total time = 0.106430s
6 : Statistics :: Grounding time = 0.094325s, Solving time = 0.018413s, Total time = 0.112738s
7 : Statistics :: Grounding time = 0.092554s, Solving time = 0.024238s, Total time = 0.116792s
8 : Statistics :: Grounding time = 0.098836s, Solving time = 0.021538s, Total time = 0.120374s
9 : Statistics :: Grounding time = 0.093367s, Solving time = 0.024095s, Total time = 0.117463s
10 : Statistics :: Grounding time = 0.102507s, Solving time = 0.029320s, Total time = 0.131827s
11 : Statistics :: Grounding time = 0.097452s, Solving time = 0.025701s, Total time = 0.123153s
12 : Statistics :: Grounding time = 0.098969s, Solving time = 0.038298s, Total time = 0.137268s
13 : Statistics :: Grounding time = 0.101841s, Solving time = 0.056270s, Total time = 0.158112s
14 : Statistics :: Grounding time = 0.101412s, Solving time = 0.073271s, Total time = 0.174683s
15 : Statistics :: Grounding time = 0.110547s, Solving time = 0.095110s, Total time = 0.205658s
16 : Statistics :: Grounding time = 0.109129s, Solving time = 0.184787s, Total time = 0.293916s
17 : Statistics :: Grounding time = 0.106561s, Solving time = 0.264676s, Total time = 0.371237s
18 : Statistics :: Grounding time = 0.109037s, Solving time = 0.391038s, Total time = 0.500076s
19 : Statistics :: Grounding time = 0.110805s, Solving time = 0.617407s, Total time = 0.728213s
20 : Statistics :: Grounding time = 0.112936s, Solving time = 0.992728s, Total time = 1.105664s
21 : Statistics :: Grounding time = 0.114750s, Solving time = 1.235517s, Total time = 1.350266s
22 : Statistics :: Grounding time = 0.116653s, Solving time = 1.995314s, Total time = 2.111967s
23 : Statistics :: Grounding time = 0.118513s, Solving time = 2.299933s, Total time = 2.418446s
24 : Statistics :: Grounding time = 0.127450s, Solving time = 4.294939s, Total time = 4.422390s
25 : Statistics :: Grounding time = 0.120591s, Solving time = 0.755980s, Total time = 0.876571s

[16-02-2021_16-42-58] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 3.019164s, Solving time = 13.562120s, Total time = 16.812929s
Model :: Total atoms = 15408, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-42-58] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,configure(manipulator_limb_2,extended),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,retracted),21)
occurs(1,talos,configure(manipulator_limb_1,retracted),22)
occurs(1,talos,move((store_room,0)),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,configure(manipulator_limb_1,extended),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),26)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),30)
occurs(1,talos,configure(manipulator_limb_1,retracted),31)
occurs(1,talos,move((store_room,1)),32)
occurs(1,talos,move((hallway,0)),33)
occurs(1,talos,move((hallway,1)),34)
occurs(1,talos,move((hallway,2)),35)
occurs(1,talos,move((puzzle_room,0)),36)
occurs(1,talos,move((puzzle_room,1)),37)
occurs(1,talos,configure(manipulator_limb_2,extended),38)
occurs(1,talos,configure(manipulator_limb_1,extended),39)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),40)
occurs(1,talos,release(manipulator_end_2,(block,6)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),43)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),44)
occurs(1,talos,release(manipulator_end_1,(block,5)),45)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),46)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),47)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),48)
occurs(1,talos,release(manipulator_end_1,(block,3)),49)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),51)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,1)),52)
occurs(1,talos,release(manipulator_end_2,(block,4)),53)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),54)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),55)
occurs(1,talos,put(manipulator_end_1,(block,5),puzzle_room_table_right),56)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),57)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),58)
occurs(1,talos,release(manipulator_end_2,(block,6)),59)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),60)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),61)
occurs(1,talos,release(manipulator_end_1,(block,5)),62)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),63)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),64)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),65)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),66)
occurs(1,talos,release(manipulator_end_1,(block,3)),67)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),68)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),69)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),70)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),71)
occurs(1,talos,release(manipulator_end_1,(block,2)),72)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),73)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),74)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),75)

[16-02-2021_16-42-58] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =    16.812929s : Steps =    75 : Actions =    75 |  
  ====================================================================  

[16-02-2021_16-42-58] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-42-58] INFO :: Experiment >> 

      ================================================      
           Experimental run 13 : Time 32.004789s            
      ================================================      

[16-02-2021_16-42-58] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-42-58] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-42-58] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-42-58] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-42-58] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-42-58] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Instantiated.

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Program building started.

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Program building completed.

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding base program parts.

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.014050s.

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving base program parts.

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.002063s.

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Incremental solving started.

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.039254s.

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.005557s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-42-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.031736s.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.003562s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.034139s.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.004909s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.034877s.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.005658s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.035333s.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.005924s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.036669s.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.006270s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.038540s.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.007094s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.039012s.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.009202s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.037847s.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.010312s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.040066s.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.011123s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.039604s.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.012966s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.041482s.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.017288s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.039839s.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.027325s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.042870s.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.044882s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.042675s.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.069575s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.082789s.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.102766s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.083358s.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.177378s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.084894s.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.055841s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Incremental solving completed in 1.461976s because STOP_CON_REACHED.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.839034s, Solving time = 0.579696s, Total time = 1.461976s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039254s, Solving time = 0.005557s, Total time = 0.044811s
2 : Statistics :: Grounding time = 0.031736s, Solving time = 0.003562s, Total time = 0.035299s
3 : Statistics :: Grounding time = 0.034139s, Solving time = 0.004909s, Total time = 0.039048s
4 : Statistics :: Grounding time = 0.034877s, Solving time = 0.005658s, Total time = 0.040536s
5 : Statistics :: Grounding time = 0.035333s, Solving time = 0.005924s, Total time = 0.041257s
6 : Statistics :: Grounding time = 0.036669s, Solving time = 0.006270s, Total time = 0.042939s
7 : Statistics :: Grounding time = 0.038540s, Solving time = 0.007094s, Total time = 0.045634s
8 : Statistics :: Grounding time = 0.039012s, Solving time = 0.009202s, Total time = 0.048214s
9 : Statistics :: Grounding time = 0.037847s, Solving time = 0.010312s, Total time = 0.048159s
10 : Statistics :: Grounding time = 0.040066s, Solving time = 0.011123s, Total time = 0.051189s
11 : Statistics :: Grounding time = 0.039604s, Solving time = 0.012966s, Total time = 0.052570s
12 : Statistics :: Grounding time = 0.041482s, Solving time = 0.017288s, Total time = 0.058770s
13 : Statistics :: Grounding time = 0.039839s, Solving time = 0.027325s, Total time = 0.067164s
14 : Statistics :: Grounding time = 0.042870s, Solving time = 0.044882s, Total time = 0.087752s
15 : Statistics :: Grounding time = 0.042675s, Solving time = 0.069575s, Total time = 0.112250s
16 : Statistics :: Grounding time = 0.082789s, Solving time = 0.102766s, Total time = 0.185556s
17 : Statistics :: Grounding time = 0.083358s, Solving time = 0.177378s, Total time = 0.260735s
18 : Statistics :: Grounding time = 0.084894s, Solving time = 0.055841s, Total time = 0.140735s

[16-02-2021_16-43-00] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.839034s, Solving time = 0.579696s, Total time = 1.461976s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-43-00] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[16-02-2021_16-43-00] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-43-00] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-43-00] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-43-00] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-43-00] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-43-00] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Instantiated.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Program building started.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Program building completed.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding base program parts.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.014722s.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving base program parts.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.002162s.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Incremental solving started.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.062141s.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.005089s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.050306s.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.003724s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.047428s.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.005168s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.045917s.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.007028s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.049706s.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.008286s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.050462s.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.008696s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.053484s.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.009701s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.054960s.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.010006s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.056638s.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.010807s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.055545s.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.010916s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.059949s.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.013281s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.059583s.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.014981s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.061889s.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.015733s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.063113s.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.015754s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.067610s.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.017673s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.063015s.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.021112s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.070410s.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.023560s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.070403s.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.027265s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.068916s.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.042408s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.070784s.

[16-02-2021_16-43-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.062203s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.069444s.

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.078887s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.079609s.

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.081489s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.072321s.

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.081226s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.075017s.

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.123996s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.077947s.

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.147128s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Incremental solving completed in 2.519237s because STOP_CON_REACHED.

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.571320s, Solving time = 0.848280s, Total time = 2.519237s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.062141s, Solving time = 0.005089s, Total time = 0.067231s
2 : Statistics :: Grounding time = 0.050306s, Solving time = 0.003724s, Total time = 0.054029s
3 : Statistics :: Grounding time = 0.047428s, Solving time = 0.005168s, Total time = 0.052596s
4 : Statistics :: Grounding time = 0.045917s, Solving time = 0.007028s, Total time = 0.052945s
5 : Statistics :: Grounding time = 0.049706s, Solving time = 0.008286s, Total time = 0.057993s
6 : Statistics :: Grounding time = 0.050462s, Solving time = 0.008696s, Total time = 0.059158s
7 : Statistics :: Grounding time = 0.053484s, Solving time = 0.009701s, Total time = 0.063185s
8 : Statistics :: Grounding time = 0.054960s, Solving time = 0.010006s, Total time = 0.064966s
9 : Statistics :: Grounding time = 0.056638s, Solving time = 0.010807s, Total time = 0.067445s
10 : Statistics :: Grounding time = 0.055545s, Solving time = 0.010916s, Total time = 0.066461s
11 : Statistics :: Grounding time = 0.059949s, Solving time = 0.013281s, Total time = 0.073230s
12 : Statistics :: Grounding time = 0.059583s, Solving time = 0.014981s, Total time = 0.074564s
13 : Statistics :: Grounding time = 0.061889s, Solving time = 0.015733s, Total time = 0.077622s
14 : Statistics :: Grounding time = 0.063113s, Solving time = 0.015754s, Total time = 0.078867s
15 : Statistics :: Grounding time = 0.067610s, Solving time = 0.017673s, Total time = 0.085283s
16 : Statistics :: Grounding time = 0.063015s, Solving time = 0.021112s, Total time = 0.084127s
17 : Statistics :: Grounding time = 0.070410s, Solving time = 0.023560s, Total time = 0.093971s
18 : Statistics :: Grounding time = 0.070403s, Solving time = 0.027265s, Total time = 0.097669s
19 : Statistics :: Grounding time = 0.068916s, Solving time = 0.042408s, Total time = 0.111324s
20 : Statistics :: Grounding time = 0.070784s, Solving time = 0.062203s, Total time = 0.132987s
21 : Statistics :: Grounding time = 0.069444s, Solving time = 0.078887s, Total time = 0.148332s
22 : Statistics :: Grounding time = 0.079609s, Solving time = 0.081489s, Total time = 0.161098s
23 : Statistics :: Grounding time = 0.072321s, Solving time = 0.081226s, Total time = 0.153547s
24 : Statistics :: Grounding time = 0.075017s, Solving time = 0.123996s, Total time = 0.199013s
25 : Statistics :: Grounding time = 0.077947s, Solving time = 0.147128s, Total time = 0.225075s

[16-02-2021_16-43-02] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.571320s, Solving time = 0.848280s, Total time = 2.519237s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-43-03] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),13)
occurs(2,talos,configure(manipulator_arm_2,retracted),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_2,(block,5)),25)

[16-02-2021_16-43-03] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-43-03] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-43-03] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-43-03] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-43-03] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-43-03] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Instantiated.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Program building started.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Program building completed.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding base program parts.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.016982s.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving base program parts.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.002810s.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Incremental solving started.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.182992s.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.009159s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.063426s.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.005599s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.065165s.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.007116s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.066372s.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.009956s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.070387s.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.012283s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.074863s.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.013934s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.080384s.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.014345s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.077426s.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.015828s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.078221s.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.015750s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.079768s.

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.016829s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.081219s.

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.018392s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.082648s.

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.018994s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.083488s.

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.021658s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.086895s.

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.023971s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.087489s.

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.028830s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.090725s.

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.033387s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.090050s.

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.030914s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.090304s.

[16-02-2021_16-43-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.037122s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.089507s.

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.036480s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.092347s.

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.064918s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.094149s.

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.081094s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.096236s.

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Model found:
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.073113s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Incremental solving completed in 2.612366s because STOP_CON_REACHED.

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.921043s, Solving time = 0.592480s, Total time = 2.612366s
Final Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.182992s, Solving time = 0.009159s, Total time = 0.192151s
2 : Statistics :: Grounding time = 0.063426s, Solving time = 0.005599s, Total time = 0.069025s
3 : Statistics :: Grounding time = 0.065165s, Solving time = 0.007116s, Total time = 0.072281s
4 : Statistics :: Grounding time = 0.066372s, Solving time = 0.009956s, Total time = 0.076328s
5 : Statistics :: Grounding time = 0.070387s, Solving time = 0.012283s, Total time = 0.082671s
6 : Statistics :: Grounding time = 0.074863s, Solving time = 0.013934s, Total time = 0.088796s
7 : Statistics :: Grounding time = 0.080384s, Solving time = 0.014345s, Total time = 0.094729s
8 : Statistics :: Grounding time = 0.077426s, Solving time = 0.015828s, Total time = 0.093254s
9 : Statistics :: Grounding time = 0.078221s, Solving time = 0.015750s, Total time = 0.093971s
10 : Statistics :: Grounding time = 0.079768s, Solving time = 0.016829s, Total time = 0.096597s
11 : Statistics :: Grounding time = 0.081219s, Solving time = 0.018392s, Total time = 0.099611s
12 : Statistics :: Grounding time = 0.082648s, Solving time = 0.018994s, Total time = 0.101641s
13 : Statistics :: Grounding time = 0.083488s, Solving time = 0.021658s, Total time = 0.105146s
14 : Statistics :: Grounding time = 0.086895s, Solving time = 0.023971s, Total time = 0.110867s
15 : Statistics :: Grounding time = 0.087489s, Solving time = 0.028830s, Total time = 0.116319s
16 : Statistics :: Grounding time = 0.090725s, Solving time = 0.033387s, Total time = 0.124111s
17 : Statistics :: Grounding time = 0.090050s, Solving time = 0.030914s, Total time = 0.120964s
18 : Statistics :: Grounding time = 0.090304s, Solving time = 0.037122s, Total time = 0.127425s
19 : Statistics :: Grounding time = 0.089507s, Solving time = 0.036480s, Total time = 0.125987s
20 : Statistics :: Grounding time = 0.092347s, Solving time = 0.064918s, Total time = 0.157265s
21 : Statistics :: Grounding time = 0.094149s, Solving time = 0.081094s, Total time = 0.175244s
22 : Statistics :: Grounding time = 0.096236s, Solving time = 0.073113s, Total time = 0.169349s

[16-02-2021_16-43-05] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.921043s, Solving time = 0.592480s, Total time = 2.612366s
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-43-05] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)

[16-02-2021_16-43-05] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.461976s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.519237s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     2.612366s : Steps =    22 : Actions =    22 |  
  ====================================================================  

[16-02-2021_16-43-05] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-43-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-43-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-43-05] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-43-05] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-43-05] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-43-05] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-43-05] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Instantiated.

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-43-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> The logic program was extended with 22 rules into program part plan_module(step, start).

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> The logic program was extended with 3656 rules into program part state_module(step).

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=22, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 22], range_=IncRange(start=22, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 22, Max end step = None
Step inc = 1, Step inc init = 24, Stop con = StopCondition.Satisfiable

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Program building started.

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Program building completed.

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding base program parts.

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.022839s.

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving base program parts.

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.002832s.

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Incremental solving started.

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [1]:
Current step bound = 23
End step min = 22
End step max = None

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [23]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 22]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 22]), ('conformance_module', [23])].

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.313203s.

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.034102s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [2]:
Current step bound = 24
End step min = 22
End step max = None

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 22]), ('conformance_module', [24])].

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.076613s.

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.007542s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [3]:
Current step bound = 25
End step min = 22
End step max = None

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 22]), ('conformance_module', [25])].

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.071625s.

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.008880s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [4]:
Current step bound = 26
End step min = 22
End step max = None

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 22]), ('conformance_module', [26])].

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.072400s.

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.010543s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [5]:
Current step bound = 27
End step min = 22
End step max = None

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 22]), ('conformance_module', [27])].

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.073469s.

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.012685s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [6]:
Current step bound = 28
End step min = 22
End step max = None

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 22]), ('conformance_module', [28])].

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.077178s.

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.014959s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [7]:
Current step bound = 29
End step min = 22
End step max = None

[16-02-2021_16-43-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 22]), ('conformance_module', [29])].

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.078372s.

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.015896s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [8]:
Current step bound = 30
End step min = 22
End step max = None

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 22]), ('conformance_module', [30])].

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.083263s.

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.016512s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [9]:
Current step bound = 31
End step min = 22
End step max = None

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 22]), ('conformance_module', [31])].

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.085344s.

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.016689s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [10]:
Current step bound = 32
End step min = 22
End step max = None

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 22]), ('conformance_module', [32])].

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.086277s.

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.018350s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [11]:
Current step bound = 33
End step min = 22
End step max = None

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 22]), ('conformance_module', [33])].

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.097164s.

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.018692s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [12]:
Current step bound = 34
End step min = 22
End step max = None

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 22]), ('conformance_module', [34])].

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.088022s.

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.019867s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [13]:
Current step bound = 35
End step min = 22
End step max = None

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 22]), ('conformance_module', [35])].

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.095390s.

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.019729s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [14]:
Current step bound = 36
End step min = 22
End step max = None

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 22]), ('conformance_module', [36])].

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.091548s.

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.021362s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [15]:
Current step bound = 37
End step min = 22
End step max = None

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 22]), ('conformance_module', [37])].

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.093582s.

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.021408s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [16]:
Current step bound = 38
End step min = 22
End step max = None

[16-02-2021_16-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 22]), ('conformance_module', [38])].

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.095684s.

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.022854s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [17]:
Current step bound = 39
End step min = 22
End step max = None

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 22]), ('conformance_module', [39])].

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.098624s.

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.033187s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [18]:
Current step bound = 40
End step min = 22
End step max = None

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 22]), ('conformance_module', [40])].

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.098465s.

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.034464s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [19]:
Current step bound = 41
End step min = 22
End step max = None

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 22]), ('conformance_module', [41])].

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.099027s.

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.063150s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [20]:
Current step bound = 42
End step min = 22
End step max = None

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 22]), ('conformance_module', [42])].

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.105587s.

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.081328s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [21]:
Current step bound = 43
End step min = 22
End step max = None

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 22]), ('conformance_module', [43])].

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.103336s.

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.078631s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [22]:
Current step bound = 44
End step min = 22
End step max = None

[16-02-2021_16-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 22]), ('conformance_module', [44])].

[16-02-2021_16-43-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.101322s.

[16-02-2021_16-43-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.123479s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [23]:
Current step bound = 45
End step min = 22
End step max = None

[16-02-2021_16-43-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 22]), ('conformance_module', [45])].

[16-02-2021_16-43-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.104861s.

[16-02-2021_16-43-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.203591s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [24]:
Current step bound = 46
End step min = 22
End step max = None

[16-02-2021_16-43-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 22]), ('conformance_module', [46])].

[16-02-2021_16-43-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.103947s.

[16-02-2021_16-43-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.179123s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [25]:
Current step bound = 47
End step min = 22
End step max = None

[16-02-2021_16-43-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 22]), ('conformance_module', [47])].

[16-02-2021_16-43-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.106426s.

[16-02-2021_16-43-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Model found:
Model :: Total atoms = 10447, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.178446s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Incremental solving completed in 3.932521s because STOP_CON_REACHED.

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.523569s, Solving time = 1.258300s, Total time = 3.932521s
Final Model :: Total atoms = 10447, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.313203s, Solving time = 0.034102s, Total time = 0.347305s
2 : Statistics :: Grounding time = 0.076613s, Solving time = 0.007542s, Total time = 0.084155s
3 : Statistics :: Grounding time = 0.071625s, Solving time = 0.008880s, Total time = 0.080505s
4 : Statistics :: Grounding time = 0.072400s, Solving time = 0.010543s, Total time = 0.082943s
5 : Statistics :: Grounding time = 0.073469s, Solving time = 0.012685s, Total time = 0.086155s
6 : Statistics :: Grounding time = 0.077178s, Solving time = 0.014959s, Total time = 0.092137s
7 : Statistics :: Grounding time = 0.078372s, Solving time = 0.015896s, Total time = 0.094268s
8 : Statistics :: Grounding time = 0.083263s, Solving time = 0.016512s, Total time = 0.099775s
9 : Statistics :: Grounding time = 0.085344s, Solving time = 0.016689s, Total time = 0.102033s
10 : Statistics :: Grounding time = 0.086277s, Solving time = 0.018350s, Total time = 0.104627s
11 : Statistics :: Grounding time = 0.097164s, Solving time = 0.018692s, Total time = 0.115857s
12 : Statistics :: Grounding time = 0.088022s, Solving time = 0.019867s, Total time = 0.107889s
13 : Statistics :: Grounding time = 0.095390s, Solving time = 0.019729s, Total time = 0.115118s
14 : Statistics :: Grounding time = 0.091548s, Solving time = 0.021362s, Total time = 0.112910s
15 : Statistics :: Grounding time = 0.093582s, Solving time = 0.021408s, Total time = 0.114990s
16 : Statistics :: Grounding time = 0.095684s, Solving time = 0.022854s, Total time = 0.118538s
17 : Statistics :: Grounding time = 0.098624s, Solving time = 0.033187s, Total time = 0.131810s
18 : Statistics :: Grounding time = 0.098465s, Solving time = 0.034464s, Total time = 0.132930s
19 : Statistics :: Grounding time = 0.099027s, Solving time = 0.063150s, Total time = 0.162177s
20 : Statistics :: Grounding time = 0.105587s, Solving time = 0.081328s, Total time = 0.186916s
21 : Statistics :: Grounding time = 0.103336s, Solving time = 0.078631s, Total time = 0.181967s
22 : Statistics :: Grounding time = 0.101322s, Solving time = 0.123479s, Total time = 0.224801s
23 : Statistics :: Grounding time = 0.104861s, Solving time = 0.203591s, Total time = 0.308452s
24 : Statistics :: Grounding time = 0.103947s, Solving time = 0.179123s, Total time = 0.283070s
25 : Statistics :: Grounding time = 0.106426s, Solving time = 0.178446s, Total time = 0.284872s

[16-02-2021_16-43-10] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 2.523569s, Solving time = 1.258300s, Total time = 3.932521s
Model :: Total atoms = 10447, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-43-10] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,configure(manipulator_limb_1,retracted),24)
occurs(1,talos,move((store_room,0)),25)
occurs(1,talos,configure(manipulator_limb_2,extended),26)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),28)
occurs(1,talos,configure(manipulator_limb_1,extended),29)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),30)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),31)
occurs(1,talos,configure(manipulator_limb_2,retracted),32)
occurs(1,talos,configure(manipulator_limb_1,retracted),33)
occurs(1,talos,move((store_room,1)),34)
occurs(1,talos,move((hallway,0)),35)
occurs(1,talos,move((hallway,1)),36)
occurs(1,talos,move((hallway,2)),37)
occurs(1,talos,move((puzzle_room,0)),38)
occurs(1,talos,move((puzzle_room,1)),39)
occurs(1,talos,configure(manipulator_limb_1,extended),40)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),41)
occurs(1,talos,configure(manipulator_limb_2,extended),42)
occurs(1,talos,release(manipulator_end_1,(block,6)),43)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),44)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),45)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),46)
occurs(1,talos,release(manipulator_end_2,(block,5)),47)

[16-02-2021_16-43-10] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     3.932521s : Steps =    47 : Actions =    47 |  
  ====================================================================  

[16-02-2021_16-43-10] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-43-10] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-43-10] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-43-10] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-43-10] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-43-10] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-43-10] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-43-10] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Instantiated.

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Program building started.

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Program building completed.

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding base program parts.

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding completed in 0.021381s.

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving base program parts.

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving completed in 0.002900s.

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Incremental solving started.

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding completed in 0.139037s.

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving started.

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving completed in 0.020218s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding completed in 0.054551s.

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving started.

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving completed in 0.006430s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding completed in 0.056831s.

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving started.

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving completed in 0.008483s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding completed in 0.057912s.

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving started.

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving completed in 0.009760s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-43-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding completed in 0.057687s.

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving started.

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving completed in 0.011604s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding completed in 0.061608s.

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving started.

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving completed in 0.010890s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding completed in 0.061901s.

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving started.

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving completed in 0.012388s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding completed in 0.063667s.

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving started.

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving completed in 0.012497s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding completed in 0.064509s.

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving started.

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Model found:
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving completed in 0.016126s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Incremental solving completed in 0.771183s because STOP_CON_REACHED.

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.639084s, Solving time = 0.111295s, Total time = 0.771183s
Final Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.139037s, Solving time = 0.020218s, Total time = 0.159255s
2 : Statistics :: Grounding time = 0.054551s, Solving time = 0.006430s, Total time = 0.060980s
3 : Statistics :: Grounding time = 0.056831s, Solving time = 0.008483s, Total time = 0.065314s
4 : Statistics :: Grounding time = 0.057912s, Solving time = 0.009760s, Total time = 0.067672s
5 : Statistics :: Grounding time = 0.057687s, Solving time = 0.011604s, Total time = 0.069292s
6 : Statistics :: Grounding time = 0.061608s, Solving time = 0.010890s, Total time = 0.072498s
7 : Statistics :: Grounding time = 0.061901s, Solving time = 0.012388s, Total time = 0.074288s
8 : Statistics :: Grounding time = 0.063667s, Solving time = 0.012497s, Total time = 0.076165s
9 : Statistics :: Grounding time = 0.064509s, Solving time = 0.016126s, Total time = 0.080635s

[16-02-2021_16-43-11] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.639084s, Solving time = 0.111295s, Total time = 0.771183s
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-43-11] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),13)
occurs(2,talos,configure(manipulator_arm_2,retracted),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_2,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),26)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),27)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),28)
occurs(2,talos,release(manipulator_arm_1,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[16-02-2021_16-43-11] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-43-11] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-43-11] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-43-11] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-43-11] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-43-11] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Instantiated.

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-43-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> The logic program was extended with 47 rules into program part plan_module(step, start).

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> The logic program was extended with 7556 rules into program part state_module(step).

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=47, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 47], range_=IncRange(start=47, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 47, Max end step = None
Step inc = 1, Step inc init = 49, Stop con = StopCondition.Satisfiable

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Program building started.

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Program building completed.

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding base program parts.

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding completed in 0.030359s.

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving base program parts.

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving completed in 0.003671s.

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Incremental solving started.

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Beginning Incremental call [1]:
Current step bound = 48
End step min = 47
End step max = None

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding program parts: [('check', [48]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('state_module', [46]), ('conformance_module', [46]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 47]), ('conformance_module', [47]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 47]), ('conformance_module', [48])].

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding completed in 0.475666s.

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving started.

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving completed in 0.060971s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Beginning Incremental call [2]:
Current step bound = 49
End step min = 47
End step max = None

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 47]), ('conformance_module', [49])].

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding completed in 0.078318s.

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving started.

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving completed in 0.009289s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Beginning Incremental call [3]:
Current step bound = 50
End step min = 47
End step max = None

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 47]), ('conformance_module', [50])].

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding completed in 0.079310s.

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving started.

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving completed in 0.012597s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Beginning Incremental call [4]:
Current step bound = 51
End step min = 47
End step max = None

[16-02-2021_16-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 47]), ('conformance_module', [51])].

[16-02-2021_16-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding completed in 0.083724s.

[16-02-2021_16-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving started.

[16-02-2021_16-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving completed in 0.015023s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Beginning Incremental call [5]:
Current step bound = 52
End step min = 47
End step max = None

[16-02-2021_16-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 47]), ('conformance_module', [52])].

[16-02-2021_16-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding completed in 0.085492s.

[16-02-2021_16-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving started.

[16-02-2021_16-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Model found:
Model :: Total atoms = 11079, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving completed in 0.019004s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Incremental solving completed in 0.972160s because STOP_CON_REACHED.

[16-02-2021_16-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.832867s, Solving time = 0.120555s, Total time = 0.972160s
Final Model :: Total atoms = 11079, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.475666s, Solving time = 0.060971s, Total time = 0.536637s
2 : Statistics :: Grounding time = 0.078318s, Solving time = 0.009289s, Total time = 0.087607s
3 : Statistics :: Grounding time = 0.079310s, Solving time = 0.012597s, Total time = 0.091906s
4 : Statistics :: Grounding time = 0.083724s, Solving time = 0.015023s, Total time = 0.098747s
5 : Statistics :: Grounding time = 0.085492s, Solving time = 0.019004s, Total time = 0.104495s

[16-02-2021_16-43-13] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.832867s, Solving time = 0.120555s, Total time = 0.972160s
Model :: Total atoms = 11079, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-43-13] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,configure(manipulator_limb_1,retracted),24)
occurs(1,talos,move((store_room,0)),25)
occurs(1,talos,configure(manipulator_limb_2,extended),26)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),28)
occurs(1,talos,configure(manipulator_limb_1,extended),29)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),30)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),31)
occurs(1,talos,configure(manipulator_limb_2,retracted),32)
occurs(1,talos,configure(manipulator_limb_1,retracted),33)
occurs(1,talos,move((store_room,1)),34)
occurs(1,talos,move((hallway,0)),35)
occurs(1,talos,move((hallway,1)),36)
occurs(1,talos,move((hallway,2)),37)
occurs(1,talos,move((puzzle_room,0)),38)
occurs(1,talos,move((puzzle_room,1)),39)
occurs(1,talos,configure(manipulator_limb_1,extended),40)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),41)
occurs(1,talos,configure(manipulator_limb_2,extended),42)
occurs(1,talos,release(manipulator_end_1,(block,6)),43)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),44)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),45)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),46)
occurs(1,talos,release(manipulator_end_2,(block,5)),47)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),48)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),49)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),50)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),51)
occurs(1,talos,release(manipulator_end_1,(block,3)),52)

[16-02-2021_16-43-13] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.771183s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     0.972160s : Steps =    52 : Actions =    52 |  
  ====================================================================  

[16-02-2021_16-43-13] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-43-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-43-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-43-13] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-43-13] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-43-13] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-43-13] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-43-13] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Instantiated.

[16-02-2021_16-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> The logic program was extended with 52 rules into program part plan_module(step, start).

[16-02-2021_16-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> The logic program was extended with 8336 rules into program part state_module(step).

[16-02-2021_16-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=52, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 52], range_=IncRange(start=52, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 52, Max end step = None
Step inc = 1, Step inc init = 54, Stop con = StopCondition.Satisfiable

[16-02-2021_16-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Program building started.

[16-02-2021_16-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Program building completed.

[16-02-2021_16-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding base program parts.

[16-02-2021_16-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.032627s.

[16-02-2021_16-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving base program parts.

[16-02-2021_16-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.003567s.

[16-02-2021_16-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Incremental solving started.

[16-02-2021_16-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [1]:
Current step bound = 53
End step min = 52
End step max = None

[16-02-2021_16-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [53]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('state_module', [46]), ('conformance_module', [46]), ('state_module', [47]), ('conformance_module', [47]), ('state_module', [48]), ('conformance_module', [48]), ('state_module', [49]), ('conformance_module', [49]), ('state_module', [50]), ('conformance_module', [50]), ('state_module', [51]), ('conformance_module', [51]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 52]), ('conformance_module', [52]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 52]), ('conformance_module', [53])].

[16-02-2021_16-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.528534s.

[16-02-2021_16-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[16-02-2021_16-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.065146s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [2]:
Current step bound = 54
End step min = 52
End step max = None

[16-02-2021_16-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 52]), ('conformance_module', [54])].

[16-02-2021_16-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.081544s.

[16-02-2021_16-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[16-02-2021_16-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.009920s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [3]:
Current step bound = 55
End step min = 52
End step max = None

[16-02-2021_16-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 52]), ('conformance_module', [55])].

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.082209s.

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.014072s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [4]:
Current step bound = 56
End step min = 52
End step max = None

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 52]), ('conformance_module', [56])].

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.086609s.

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.017463s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [5]:
Current step bound = 57
End step min = 52
End step max = None

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 52]), ('conformance_module', [57])].

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.089567s.

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.017515s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [6]:
Current step bound = 58
End step min = 52
End step max = None

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 52]), ('conformance_module', [58])].

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.093047s.

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.018756s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [7]:
Current step bound = 59
End step min = 52
End step max = None

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 52]), ('conformance_module', [59])].

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.094262s.

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.024193s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [8]:
Current step bound = 60
End step min = 52
End step max = None

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 52]), ('conformance_module', [60])].

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.094776s.

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.025447s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [9]:
Current step bound = 61
End step min = 52
End step max = None

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 52]), ('conformance_module', [61])].

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.097779s.

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.028395s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [10]:
Current step bound = 62
End step min = 52
End step max = None

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 52]), ('conformance_module', [62])].

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.101079s.

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.041866s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [11]:
Current step bound = 63
End step min = 52
End step max = None

[16-02-2021_16-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 52]), ('conformance_module', [63])].

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.099578s.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Model found:
Model :: Total atoms = 13175, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.061865s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Incremental solving completed in 1.865016s because STOP_CON_REACHED.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.481610s, Solving time = 0.328206s, Total time = 1.865016s
Final Model :: Total atoms = 13175, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.528534s, Solving time = 0.065146s, Total time = 0.593680s
2 : Statistics :: Grounding time = 0.081544s, Solving time = 0.009920s, Total time = 0.091464s
3 : Statistics :: Grounding time = 0.082209s, Solving time = 0.014072s, Total time = 0.096280s
4 : Statistics :: Grounding time = 0.086609s, Solving time = 0.017463s, Total time = 0.104071s
5 : Statistics :: Grounding time = 0.089567s, Solving time = 0.017515s, Total time = 0.107082s
6 : Statistics :: Grounding time = 0.093047s, Solving time = 0.018756s, Total time = 0.111803s
7 : Statistics :: Grounding time = 0.094262s, Solving time = 0.024193s, Total time = 0.118455s
8 : Statistics :: Grounding time = 0.094776s, Solving time = 0.025447s, Total time = 0.120223s
9 : Statistics :: Grounding time = 0.097779s, Solving time = 0.028395s, Total time = 0.126174s
10 : Statistics :: Grounding time = 0.101079s, Solving time = 0.041866s, Total time = 0.142945s
11 : Statistics :: Grounding time = 0.099578s, Solving time = 0.061865s, Total time = 0.161443s

[16-02-2021_16-43-16] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.481610s, Solving time = 0.328206s, Total time = 1.865016s
Model :: Total atoms = 13175, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-43-16] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,configure(manipulator_limb_1,retracted),24)
occurs(1,talos,move((store_room,0)),25)
occurs(1,talos,configure(manipulator_limb_2,extended),26)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),28)
occurs(1,talos,configure(manipulator_limb_1,extended),29)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),30)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),31)
occurs(1,talos,configure(manipulator_limb_2,retracted),32)
occurs(1,talos,configure(manipulator_limb_1,retracted),33)
occurs(1,talos,move((store_room,1)),34)
occurs(1,talos,move((hallway,0)),35)
occurs(1,talos,move((hallway,1)),36)
occurs(1,talos,move((hallway,2)),37)
occurs(1,talos,move((puzzle_room,0)),38)
occurs(1,talos,move((puzzle_room,1)),39)
occurs(1,talos,configure(manipulator_limb_1,extended),40)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),41)
occurs(1,talos,configure(manipulator_limb_2,extended),42)
occurs(1,talos,release(manipulator_end_1,(block,6)),43)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),44)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),45)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),46)
occurs(1,talos,release(manipulator_end_2,(block,5)),47)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),48)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),49)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),50)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),51)
occurs(1,talos,release(manipulator_end_1,(block,3)),52)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),53)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),54)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),55)
occurs(1,talos,release(manipulator_end_1,(block,3)),56)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),57)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),58)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),59)
occurs(1,talos,release(manipulator_end_1,(block,2)),60)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),61)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),62)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),63)

[16-02-2021_16-43-16] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.865016s : Steps =    63 : Actions =    63 |  
  ====================================================================  

[16-02-2021_16-43-16] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-43-16] INFO :: Experiment >> 

      ================================================      
           Experimental run 14 : Time 17.494338s            
      ================================================      

[16-02-2021_16-43-16] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-43-16] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-43-16] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-43-16] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-43-16] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-43-16] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Instantiated.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Program building started.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Program building completed.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding base program parts.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.018638s.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving base program parts.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.002663s.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Incremental solving started.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.043610s.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.005240s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.031741s.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.003270s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.031453s.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.004586s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.034327s.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.005312s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.037661s.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.005484s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.036545s.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.006900s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.038282s.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.007683s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.037253s.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.008130s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.041460s.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.010150s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.041454s.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.011183s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.040060s.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.014205s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.041551s.

[16-02-2021_16-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.022583s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.040904s.

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.026590s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.042454s.

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.039154s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.042492s.

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.054203s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.079239s.

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.100401s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.079984s.

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.208604s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.088864s.

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.116647s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Incremental solving completed in 1.544057s because STOP_CON_REACHED.

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.847975s, Solving time = 0.652989s, Total time = 1.544057s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.043610s, Solving time = 0.005240s, Total time = 0.048851s
2 : Statistics :: Grounding time = 0.031741s, Solving time = 0.003270s, Total time = 0.035011s
3 : Statistics :: Grounding time = 0.031453s, Solving time = 0.004586s, Total time = 0.036039s
4 : Statistics :: Grounding time = 0.034327s, Solving time = 0.005312s, Total time = 0.039639s
5 : Statistics :: Grounding time = 0.037661s, Solving time = 0.005484s, Total time = 0.043146s
6 : Statistics :: Grounding time = 0.036545s, Solving time = 0.006900s, Total time = 0.043445s
7 : Statistics :: Grounding time = 0.038282s, Solving time = 0.007683s, Total time = 0.045965s
8 : Statistics :: Grounding time = 0.037253s, Solving time = 0.008130s, Total time = 0.045383s
9 : Statistics :: Grounding time = 0.041460s, Solving time = 0.010150s, Total time = 0.051610s
10 : Statistics :: Grounding time = 0.041454s, Solving time = 0.011183s, Total time = 0.052637s
11 : Statistics :: Grounding time = 0.040060s, Solving time = 0.014205s, Total time = 0.054266s
12 : Statistics :: Grounding time = 0.041551s, Solving time = 0.022583s, Total time = 0.064133s
13 : Statistics :: Grounding time = 0.040904s, Solving time = 0.026590s, Total time = 0.067494s
14 : Statistics :: Grounding time = 0.042454s, Solving time = 0.039154s, Total time = 0.081608s
15 : Statistics :: Grounding time = 0.042492s, Solving time = 0.054203s, Total time = 0.096695s
16 : Statistics :: Grounding time = 0.079239s, Solving time = 0.100401s, Total time = 0.179640s
17 : Statistics :: Grounding time = 0.079984s, Solving time = 0.208604s, Total time = 0.288588s
18 : Statistics :: Grounding time = 0.088864s, Solving time = 0.116647s, Total time = 0.205511s

[16-02-2021_16-43-17] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.847975s, Solving time = 0.652989s, Total time = 1.544057s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-43-17] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_1,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),10)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[16-02-2021_16-43-17] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-43-17] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-43-17] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-43-17] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-43-17] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-43-17] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Instantiated.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Program building started.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Program building completed.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding base program parts.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.014587s.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving base program parts.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.003201s.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Incremental solving started.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.061632s.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.005748s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.044006s.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.004357s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.045946s.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.004772s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.044525s.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.006404s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.049373s.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.008546s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.049466s.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.008943s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.054069s.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.009738s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.058247s.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.009774s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.060490s.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.010686s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.057499s.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.011025s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.061663s.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.013898s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.064616s.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.017898s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.062723s.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.015679s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.061284s.

[16-02-2021_16-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.017238s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.062832s.

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.019568s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.064612s.

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.020457s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.065124s.

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.027617s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.064576s.

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.030616s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.066966s.

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.045048s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.068892s.

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.068127s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.069777s.

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.076160s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.074050s.

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.097777s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.071665s.

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.130987s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.073090s.

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.163063s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.074655s.

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.160713s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Incremental solving completed in 2.633060s because STOP_CON_REACHED.

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.546365s, Solving time = 0.988040s, Total time = 2.633060s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.061632s, Solving time = 0.005748s, Total time = 0.067380s
2 : Statistics :: Grounding time = 0.044006s, Solving time = 0.004357s, Total time = 0.048362s
3 : Statistics :: Grounding time = 0.045946s, Solving time = 0.004772s, Total time = 0.050718s
4 : Statistics :: Grounding time = 0.044525s, Solving time = 0.006404s, Total time = 0.050929s
5 : Statistics :: Grounding time = 0.049373s, Solving time = 0.008546s, Total time = 0.057919s
6 : Statistics :: Grounding time = 0.049466s, Solving time = 0.008943s, Total time = 0.058409s
7 : Statistics :: Grounding time = 0.054069s, Solving time = 0.009738s, Total time = 0.063808s
8 : Statistics :: Grounding time = 0.058247s, Solving time = 0.009774s, Total time = 0.068021s
9 : Statistics :: Grounding time = 0.060490s, Solving time = 0.010686s, Total time = 0.071176s
10 : Statistics :: Grounding time = 0.057499s, Solving time = 0.011025s, Total time = 0.068524s
11 : Statistics :: Grounding time = 0.061663s, Solving time = 0.013898s, Total time = 0.075561s
12 : Statistics :: Grounding time = 0.064616s, Solving time = 0.017898s, Total time = 0.082513s
13 : Statistics :: Grounding time = 0.062723s, Solving time = 0.015679s, Total time = 0.078402s
14 : Statistics :: Grounding time = 0.061284s, Solving time = 0.017238s, Total time = 0.078522s
15 : Statistics :: Grounding time = 0.062832s, Solving time = 0.019568s, Total time = 0.082400s
16 : Statistics :: Grounding time = 0.064612s, Solving time = 0.020457s, Total time = 0.085070s
17 : Statistics :: Grounding time = 0.065124s, Solving time = 0.027617s, Total time = 0.092740s
18 : Statistics :: Grounding time = 0.064576s, Solving time = 0.030616s, Total time = 0.095192s
19 : Statistics :: Grounding time = 0.066966s, Solving time = 0.045048s, Total time = 0.112014s
20 : Statistics :: Grounding time = 0.068892s, Solving time = 0.068127s, Total time = 0.137019s
21 : Statistics :: Grounding time = 0.069777s, Solving time = 0.076160s, Total time = 0.145938s
22 : Statistics :: Grounding time = 0.074050s, Solving time = 0.097777s, Total time = 0.171828s
23 : Statistics :: Grounding time = 0.071665s, Solving time = 0.130987s, Total time = 0.202652s
24 : Statistics :: Grounding time = 0.073090s, Solving time = 0.163063s, Total time = 0.236153s
25 : Statistics :: Grounding time = 0.074655s, Solving time = 0.160713s, Total time = 0.235368s

[16-02-2021_16-43-20] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.546365s, Solving time = 0.988040s, Total time = 2.633060s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-43-20] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),4)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_2,retracted),13)
occurs(2,talos,configure(manipulator_arm_1,extended),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_1,(block,5)),25)

[16-02-2021_16-43-20] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-43-20] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-43-20] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-43-20] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-43-20] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-43-20] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Instantiated.

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Program building started.

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Program building completed.

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding base program parts.

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.016863s.

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving base program parts.

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.002799s.

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Incremental solving started.

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.190387s.

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.008796s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.062967s.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.005850s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.063870s.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.007115s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.066591s.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.010349s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.070739s.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.012403s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.072697s.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.013061s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.075766s.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.014646s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.076955s.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.015272s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.078578s.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.016231s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.080073s.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.018106s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.082602s.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.021937s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.082502s.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.017927s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.083549s.

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.021929s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.086021s.

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.025390s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.091155s.

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.033345s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.088126s.

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.030165s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.089322s.

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.028712s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.090132s.

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.046678s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.094651s.

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.066821s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.092957s.

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.044204s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.092651s.

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.072267s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.103836s.

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.088927s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.095082s.

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.062813s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.096321s.

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Model found:
Model :: Total atoms = 6742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.122919s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Incremental solving completed in 3.056734s because STOP_CON_REACHED.

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.124391s, Solving time = 0.808662s, Total time = 3.056734s
Final Model :: Total atoms = 6742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.190387s, Solving time = 0.008796s, Total time = 0.199184s
2 : Statistics :: Grounding time = 0.062967s, Solving time = 0.005850s, Total time = 0.068816s
3 : Statistics :: Grounding time = 0.063870s, Solving time = 0.007115s, Total time = 0.070985s
4 : Statistics :: Grounding time = 0.066591s, Solving time = 0.010349s, Total time = 0.076939s
5 : Statistics :: Grounding time = 0.070739s, Solving time = 0.012403s, Total time = 0.083142s
6 : Statistics :: Grounding time = 0.072697s, Solving time = 0.013061s, Total time = 0.085758s
7 : Statistics :: Grounding time = 0.075766s, Solving time = 0.014646s, Total time = 0.090412s
8 : Statistics :: Grounding time = 0.076955s, Solving time = 0.015272s, Total time = 0.092227s
9 : Statistics :: Grounding time = 0.078578s, Solving time = 0.016231s, Total time = 0.094809s
10 : Statistics :: Grounding time = 0.080073s, Solving time = 0.018106s, Total time = 0.098179s
11 : Statistics :: Grounding time = 0.082602s, Solving time = 0.021937s, Total time = 0.104539s
12 : Statistics :: Grounding time = 0.082502s, Solving time = 0.017927s, Total time = 0.100428s
13 : Statistics :: Grounding time = 0.083549s, Solving time = 0.021929s, Total time = 0.105478s
14 : Statistics :: Grounding time = 0.086021s, Solving time = 0.025390s, Total time = 0.111412s
15 : Statistics :: Grounding time = 0.091155s, Solving time = 0.033345s, Total time = 0.124499s
16 : Statistics :: Grounding time = 0.088126s, Solving time = 0.030165s, Total time = 0.118291s
17 : Statistics :: Grounding time = 0.089322s, Solving time = 0.028712s, Total time = 0.118034s
18 : Statistics :: Grounding time = 0.090132s, Solving time = 0.046678s, Total time = 0.136809s
19 : Statistics :: Grounding time = 0.094651s, Solving time = 0.066821s, Total time = 0.161471s
20 : Statistics :: Grounding time = 0.092957s, Solving time = 0.044204s, Total time = 0.137161s
21 : Statistics :: Grounding time = 0.092651s, Solving time = 0.072267s, Total time = 0.164919s
22 : Statistics :: Grounding time = 0.103836s, Solving time = 0.088927s, Total time = 0.192763s
23 : Statistics :: Grounding time = 0.095082s, Solving time = 0.062813s, Total time = 0.157895s
24 : Statistics :: Grounding time = 0.096321s, Solving time = 0.122919s, Total time = 0.219240s

[16-02-2021_16-43-23] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 2.124391s, Solving time = 0.808662s, Total time = 3.056734s
Model :: Total atoms = 6742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-43-23] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),24)

[16-02-2021_16-43-23] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.544057s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.633060s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     3.056734s : Steps =    24 : Actions =    24 |  
  ====================================================================  

[16-02-2021_16-43-23] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-43-23] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-43-23] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-43-23] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-43-23] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-43-23] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-43-23] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-43-23] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Instantiated.

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> The logic program was extended with 24 rules into program part plan_module(step, start).

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> The logic program was extended with 3968 rules into program part state_module(step).

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=24, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 24], range_=IncRange(start=24, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 24, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Program building started.

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Program building completed.

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding base program parts.

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.023563s.

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving base program parts.

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.003724s.

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Incremental solving started.

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 24
End step max = None

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [25]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 24]), ('conformance_module', [25])].

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.346849s.

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.034233s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 24
End step max = None

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 24]), ('conformance_module', [26])].

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.075260s.

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.006955s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 24
End step max = None

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 24]), ('conformance_module', [27])].

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.071631s.

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.008648s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 24
End step max = None

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 24]), ('conformance_module', [28])].

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.078409s.

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.011141s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 24
End step max = None

[16-02-2021_16-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 24]), ('conformance_module', [29])].

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.074645s.

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.013452s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 24
End step max = None

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 24]), ('conformance_module', [30])].

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.084861s.

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.015030s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 24
End step max = None

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 24]), ('conformance_module', [31])].

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.082697s.

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.015364s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 24
End step max = None

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 24]), ('conformance_module', [32])].

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.083716s.

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.017506s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 24
End step max = None

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 24]), ('conformance_module', [33])].

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.086418s.

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.018645s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 24
End step max = None

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 24]), ('conformance_module', [34])].

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.089223s.

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.019602s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 24
End step max = None

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 24]), ('conformance_module', [35])].

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.088232s.

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.019286s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 24
End step max = None

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 24]), ('conformance_module', [36])].

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.088961s.

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.020080s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 24
End step max = None

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 24]), ('conformance_module', [37])].

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.095366s.

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.020449s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 24
End step max = None

[16-02-2021_16-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 24]), ('conformance_module', [38])].

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.104778s.

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.030815s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 24
End step max = None

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 24]), ('conformance_module', [39])].

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.092112s.

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.038830s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [16]:
Current step bound = 40
End step min = 24
End step max = None

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 24]), ('conformance_module', [40])].

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.095266s.

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.046897s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [17]:
Current step bound = 41
End step min = 24
End step max = None

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 24]), ('conformance_module', [41])].

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.101381s.

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.039057s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [18]:
Current step bound = 42
End step min = 24
End step max = None

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 24]), ('conformance_module', [42])].

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.096962s.

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.059063s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [19]:
Current step bound = 43
End step min = 24
End step max = None

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 24]), ('conformance_module', [43])].

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.097596s.

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Model found:
Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.109759s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Incremental solving completed in 2.603168s because STOP_CON_REACHED.

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.957926s, Solving time = 0.548536s, Total time = 2.603168s
Final Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.346849s, Solving time = 0.034233s, Total time = 0.381081s
2 : Statistics :: Grounding time = 0.075260s, Solving time = 0.006955s, Total time = 0.082215s
3 : Statistics :: Grounding time = 0.071631s, Solving time = 0.008648s, Total time = 0.080279s
4 : Statistics :: Grounding time = 0.078409s, Solving time = 0.011141s, Total time = 0.089550s
5 : Statistics :: Grounding time = 0.074645s, Solving time = 0.013452s, Total time = 0.088097s
6 : Statistics :: Grounding time = 0.084861s, Solving time = 0.015030s, Total time = 0.099891s
7 : Statistics :: Grounding time = 0.082697s, Solving time = 0.015364s, Total time = 0.098060s
8 : Statistics :: Grounding time = 0.083716s, Solving time = 0.017506s, Total time = 0.101222s
9 : Statistics :: Grounding time = 0.086418s, Solving time = 0.018645s, Total time = 0.105063s
10 : Statistics :: Grounding time = 0.089223s, Solving time = 0.019602s, Total time = 0.108825s
11 : Statistics :: Grounding time = 0.088232s, Solving time = 0.019286s, Total time = 0.107518s
12 : Statistics :: Grounding time = 0.088961s, Solving time = 0.020080s, Total time = 0.109042s
13 : Statistics :: Grounding time = 0.095366s, Solving time = 0.020449s, Total time = 0.115816s
14 : Statistics :: Grounding time = 0.104778s, Solving time = 0.030815s, Total time = 0.135593s
15 : Statistics :: Grounding time = 0.092112s, Solving time = 0.038830s, Total time = 0.130942s
16 : Statistics :: Grounding time = 0.095266s, Solving time = 0.046897s, Total time = 0.142164s
17 : Statistics :: Grounding time = 0.101381s, Solving time = 0.039057s, Total time = 0.140438s
18 : Statistics :: Grounding time = 0.096962s, Solving time = 0.059063s, Total time = 0.156025s
19 : Statistics :: Grounding time = 0.097596s, Solving time = 0.109759s, Total time = 0.207356s

[16-02-2021_16-43-26] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.957926s, Solving time = 0.548536s, Total time = 2.603168s
Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-43-26] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),24)
occurs(1,talos,configure(manipulator_limb_1,extended),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_2,extended),36)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),37)
occurs(1,talos,configure(manipulator_limb_1,extended),38)
occurs(1,talos,release(manipulator_end_2,(block,6)),39)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),40)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),41)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),42)
occurs(1,talos,release(manipulator_end_1,(block,5)),43)

[16-02-2021_16-43-27] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     2.603168s : Steps =    43 : Actions =    43 |  
  ====================================================================  

[16-02-2021_16-43-27] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-43-27] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-43-27] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-43-27] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-43-27] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-43-27] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-43-27] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-43-27] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Instantiated.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Program building started.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Program building completed.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding base program parts.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding completed in 0.021230s.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving base program parts.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving completed in 0.003116s.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Incremental solving started.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding completed in 0.140027s.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving started.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving completed in 0.024615s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding completed in 0.058367s.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving started.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving completed in 0.006401s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding completed in 0.057487s.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving started.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving completed in 0.009121s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding completed in 0.058491s.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving started.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving completed in 0.010048s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding completed in 0.062336s.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving started.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving completed in 0.012186s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding completed in 0.065879s.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving started.

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving completed in 0.011826s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-43-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding completed in 0.066715s.

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving started.

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving completed in 0.013013s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding completed in 0.067245s.

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving started.

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving completed in 0.012798s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding completed in 0.066155s.

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving started.

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Model found:
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving completed in 0.015132s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Incremental solving completed in 0.803197s because STOP_CON_REACHED.

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.663932s, Solving time = 0.118255s, Total time = 0.803197s
Final Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.140027s, Solving time = 0.024615s, Total time = 0.164642s
2 : Statistics :: Grounding time = 0.058367s, Solving time = 0.006401s, Total time = 0.064768s
3 : Statistics :: Grounding time = 0.057487s, Solving time = 0.009121s, Total time = 0.066608s
4 : Statistics :: Grounding time = 0.058491s, Solving time = 0.010048s, Total time = 0.068539s
5 : Statistics :: Grounding time = 0.062336s, Solving time = 0.012186s, Total time = 0.074521s
6 : Statistics :: Grounding time = 0.065879s, Solving time = 0.011826s, Total time = 0.077705s
7 : Statistics :: Grounding time = 0.066715s, Solving time = 0.013013s, Total time = 0.079728s
8 : Statistics :: Grounding time = 0.067245s, Solving time = 0.012798s, Total time = 0.080043s
9 : Statistics :: Grounding time = 0.066155s, Solving time = 0.015132s, Total time = 0.081287s

[16-02-2021_16-43-28] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.663932s, Solving time = 0.118255s, Total time = 0.803197s
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-43-28] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),4)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_2,retracted),13)
occurs(2,talos,configure(manipulator_arm_1,extended),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_1,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),26)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),27)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),28)
occurs(2,talos,release(manipulator_arm_2,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[16-02-2021_16-43-28] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-43-28] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-43-28] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-43-28] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-43-28] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-43-28] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Instantiated.

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> The logic program was extended with 43 rules into program part plan_module(step, start).

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> The logic program was extended with 6932 rules into program part state_module(step).

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=43, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 43], range_=IncRange(start=43, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 43, Max end step = None
Step inc = 1, Step inc init = 45, Stop con = StopCondition.Satisfiable

[16-02-2021_16-43-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Program building started.

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Program building completed.

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding base program parts.

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding completed in 0.029131s.

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving base program parts.

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving completed in 0.003537s.

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Incremental solving started.

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Beginning Incremental call [1]:
Current step bound = 44
End step min = 43
End step max = None

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding program parts: [('check', [44]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 43]), ('conformance_module', [43]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 43]), ('conformance_module', [44])].

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding completed in 0.447884s.

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving started.

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving completed in 0.055451s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Beginning Incremental call [2]:
Current step bound = 45
End step min = 43
End step max = None

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 43]), ('conformance_module', [45])].

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding completed in 0.076859s.

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving started.

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving completed in 0.009023s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Beginning Incremental call [3]:
Current step bound = 46
End step min = 43
End step max = None

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 43]), ('conformance_module', [46])].

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding completed in 0.078020s.

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving started.

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving completed in 0.012174s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Beginning Incremental call [4]:
Current step bound = 47
End step min = 43
End step max = None

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 43]), ('conformance_module', [47])].

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding completed in 0.082307s.

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving started.

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving completed in 0.014826s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Beginning Incremental call [5]:
Current step bound = 48
End step min = 43
End step max = None

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 43]), ('conformance_module', [48])].

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding completed in 0.085380s.

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving started.

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Model found:
Model :: Total atoms = 10435, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving completed in 0.017948s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Incremental solving completed in 0.930019s because STOP_CON_REACHED.

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.799581s, Solving time = 0.112961s, Total time = 0.930019s
Final Model :: Total atoms = 10435, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-43-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.447884s, Solving time = 0.055451s, Total time = 0.503335s
2 : Statistics :: Grounding time = 0.076859s, Solving time = 0.009023s, Total time = 0.085883s
3 : Statistics :: Grounding time = 0.078020s, Solving time = 0.012174s, Total time = 0.090194s
4 : Statistics :: Grounding time = 0.082307s, Solving time = 0.014826s, Total time = 0.097133s
5 : Statistics :: Grounding time = 0.085380s, Solving time = 0.017948s, Total time = 0.103328s

[16-02-2021_16-43-29] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.799581s, Solving time = 0.112961s, Total time = 0.930019s
Model :: Total atoms = 10435, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-43-30] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),24)
occurs(1,talos,configure(manipulator_limb_1,extended),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_2,extended),36)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),37)
occurs(1,talos,configure(manipulator_limb_1,extended),38)
occurs(1,talos,release(manipulator_end_2,(block,6)),39)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),40)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),41)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),42)
occurs(1,talos,release(manipulator_end_1,(block,5)),43)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),44)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),45)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),46)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),47)
occurs(1,talos,release(manipulator_end_2,(block,3)),48)

[16-02-2021_16-43-30] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.803197s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     0.930019s : Steps =    48 : Actions =    48 |  
  ====================================================================  

[16-02-2021_16-43-30] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-43-30] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-43-30] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-43-30] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-43-30] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-43-30] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-43-30] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-43-30] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-43-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Instantiated.

[16-02-2021_16-43-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-43-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-43-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-43-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> The logic program was extended with 48 rules into program part plan_module(step, start).

[16-02-2021_16-43-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> The logic program was extended with 7712 rules into program part state_module(step).

[16-02-2021_16-43-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=48, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 48], range_=IncRange(start=48, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 48, Max end step = None
Step inc = 1, Step inc init = 50, Stop con = StopCondition.Satisfiable

[16-02-2021_16-43-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Program building started.

[16-02-2021_16-43-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Program building completed.

[16-02-2021_16-43-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding base program parts.

[16-02-2021_16-43-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.030724s.

[16-02-2021_16-43-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving base program parts.

[16-02-2021_16-43-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.003434s.

[16-02-2021_16-43-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Incremental solving started.

[16-02-2021_16-43-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [1]:
Current step bound = 49
End step min = 48
End step max = None

[16-02-2021_16-43-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [49]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('state_module', [46]), ('conformance_module', [46]), ('state_module', [47]), ('conformance_module', [47]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 48]), ('conformance_module', [48]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 48]), ('conformance_module', [49])].

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.491902s.

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.060388s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [2]:
Current step bound = 50
End step min = 48
End step max = None

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 48]), ('conformance_module', [50])].

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.079129s.

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.009350s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [3]:
Current step bound = 51
End step min = 48
End step max = None

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 48]), ('conformance_module', [51])].

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.085136s.

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.012976s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [4]:
Current step bound = 52
End step min = 48
End step max = None

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 48]), ('conformance_module', [52])].

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.091111s.

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.016319s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [5]:
Current step bound = 53
End step min = 48
End step max = None

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 48]), ('conformance_module', [53])].

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.088706s.

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.016542s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [6]:
Current step bound = 54
End step min = 48
End step max = None

[16-02-2021_16-43-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 48]), ('conformance_module', [54])].

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.092680s.

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.019137s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [7]:
Current step bound = 55
End step min = 48
End step max = None

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 48]), ('conformance_module', [55])].

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.109673s.

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.021070s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [8]:
Current step bound = 56
End step min = 48
End step max = None

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 48]), ('conformance_module', [56])].

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.093523s.

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.022811s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [9]:
Current step bound = 57
End step min = 48
End step max = None

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 48]), ('conformance_module', [57])].

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.099984s.

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.026879s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [10]:
Current step bound = 58
End step min = 48
End step max = None

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 48]), ('conformance_module', [58])].

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.097166s.

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.033610s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [11]:
Current step bound = 59
End step min = 48
End step max = None

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 48]), ('conformance_module', [59])].

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.098768s.

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.031084s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [12]:
Current step bound = 60
End step min = 48
End step max = None

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 48]), ('conformance_module', [60])].

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.098755s.

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.031383s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [13]:
Current step bound = 61
End step min = 48
End step max = None

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 48]), ('conformance_module', [61])].

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.104578s.

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.035325s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [14]:
Current step bound = 62
End step min = 48
End step max = None

[16-02-2021_16-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 48]), ('conformance_module', [62])].

[16-02-2021_16-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.107488s.

[16-02-2021_16-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.041400s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [15]:
Current step bound = 63
End step min = 48
End step max = None

[16-02-2021_16-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 48]), ('conformance_module', [63])].

[16-02-2021_16-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.104858s.

[16-02-2021_16-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.081984s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [16]:
Current step bound = 64
End step min = 48
End step max = None

[16-02-2021_16-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 48]), ('conformance_module', [64])].

[16-02-2021_16-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.107972s.

[16-02-2021_16-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.152428s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [17]:
Current step bound = 65
End step min = 48
End step max = None

[16-02-2021_16-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 48]), ('conformance_module', [65])].

[16-02-2021_16-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.115800s.

[16-02-2021_16-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.260042s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [18]:
Current step bound = 66
End step min = 48
End step max = None

[16-02-2021_16-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 48]), ('conformance_module', [66])].

[16-02-2021_16-43-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.113889s.

[16-02-2021_16-43-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.416622s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [19]:
Current step bound = 67
End step min = 48
End step max = None

[16-02-2021_16-43-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 48]), ('conformance_module', [67])].

[16-02-2021_16-43-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.115657s.

[16-02-2021_16-43-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.679605s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [20]:
Current step bound = 68
End step min = 48
End step max = None

[16-02-2021_16-43-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 48]), ('conformance_module', [68])].

[16-02-2021_16-43-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.113395s.

[16-02-2021_16-43-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 1.132148s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [21]:
Current step bound = 69
End step min = 48
End step max = None

[16-02-2021_16-43-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 48]), ('conformance_module', [69])].

[16-02-2021_16-43-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.114035s.

[16-02-2021_16-43-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 1.366982s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [22]:
Current step bound = 70
End step min = 48
End step max = None

[16-02-2021_16-43-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 48]), ('conformance_module', [70])].

[16-02-2021_16-43-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.121876s.

[16-02-2021_16-43-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 1.911627s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [23]:
Current step bound = 71
End step min = 48
End step max = None

[16-02-2021_16-43-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 48]), ('conformance_module', [71])].

[16-02-2021_16-43-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.125315s.

[16-02-2021_16-43-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 2.340829s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [24]:
Current step bound = 72
End step min = 48
End step max = None

[16-02-2021_16-43-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [72]), ('domain_rules', [72]), ('state_module', [72]), ('plan_module', [72, 48]), ('conformance_module', [72])].

[16-02-2021_16-43-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.118336s.

[16-02-2021_16-43-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 3.758074s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [25]:
Current step bound = 73
End step min = 48
End step max = None

[16-02-2021_16-43-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [73]), ('domain_rules', [73]), ('state_module', [73]), ('plan_module', [73, 48]), ('conformance_module', [73])].

[16-02-2021_16-43-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.130786s.

[16-02-2021_16-43-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[16-02-2021_16-43-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Model found:
Model :: Total atoms = 15094, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-43-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.289459s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-43-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Incremental solving completed in 16.047168s because STOP_CON_REACHED.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 3.051242s, Solving time = 12.771510s, Total time = 16.047168s
Final Model :: Total atoms = 15094, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.491902s, Solving time = 0.060388s, Total time = 0.552290s
2 : Statistics :: Grounding time = 0.079129s, Solving time = 0.009350s, Total time = 0.088479s
3 : Statistics :: Grounding time = 0.085136s, Solving time = 0.012976s, Total time = 0.098112s
4 : Statistics :: Grounding time = 0.091111s, Solving time = 0.016319s, Total time = 0.107430s
5 : Statistics :: Grounding time = 0.088706s, Solving time = 0.016542s, Total time = 0.105247s
6 : Statistics :: Grounding time = 0.092680s, Solving time = 0.019137s, Total time = 0.111817s
7 : Statistics :: Grounding time = 0.109673s, Solving time = 0.021070s, Total time = 0.130743s
8 : Statistics :: Grounding time = 0.093523s, Solving time = 0.022811s, Total time = 0.116334s
9 : Statistics :: Grounding time = 0.099984s, Solving time = 0.026879s, Total time = 0.126863s
10 : Statistics :: Grounding time = 0.097166s, Solving time = 0.033610s, Total time = 0.130777s
11 : Statistics :: Grounding time = 0.098768s, Solving time = 0.031084s, Total time = 0.129852s
12 : Statistics :: Grounding time = 0.098755s, Solving time = 0.031383s, Total time = 0.130138s
13 : Statistics :: Grounding time = 0.104578s, Solving time = 0.035325s, Total time = 0.139903s
14 : Statistics :: Grounding time = 0.107488s, Solving time = 0.041400s, Total time = 0.148887s
15 : Statistics :: Grounding time = 0.104858s, Solving time = 0.081984s, Total time = 0.186842s
16 : Statistics :: Grounding time = 0.107972s, Solving time = 0.152428s, Total time = 0.260400s
17 : Statistics :: Grounding time = 0.115800s, Solving time = 0.260042s, Total time = 0.375842s
18 : Statistics :: Grounding time = 0.113889s, Solving time = 0.416622s, Total time = 0.530511s
19 : Statistics :: Grounding time = 0.115657s, Solving time = 0.679605s, Total time = 0.795263s
20 : Statistics :: Grounding time = 0.113395s, Solving time = 1.132148s, Total time = 1.245543s
21 : Statistics :: Grounding time = 0.114035s, Solving time = 1.366982s, Total time = 1.481018s
22 : Statistics :: Grounding time = 0.121876s, Solving time = 1.911627s, Total time = 2.033503s
23 : Statistics :: Grounding time = 0.125315s, Solving time = 2.340829s, Total time = 2.466144s
24 : Statistics :: Grounding time = 0.118336s, Solving time = 3.758074s, Total time = 3.876409s
25 : Statistics :: Grounding time = 0.130786s, Solving time = 0.289459s, Total time = 0.420245s

[16-02-2021_16-43-47] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 3.051242s, Solving time = 12.771510s, Total time = 16.047168s
Model :: Total atoms = 15094, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-43-47] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),24)
occurs(1,talos,configure(manipulator_limb_1,extended),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_2,extended),36)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),37)
occurs(1,talos,configure(manipulator_limb_1,extended),38)
occurs(1,talos,release(manipulator_end_2,(block,6)),39)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),40)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),41)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),42)
occurs(1,talos,release(manipulator_end_1,(block,5)),43)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),44)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),45)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),46)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),47)
occurs(1,talos,release(manipulator_end_2,(block,3)),48)
occurs(1,talos,lift(manipulator_end_1,(block,4)),49)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),50)
occurs(1,talos,release(manipulator_end_1,(block,4)),51)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),52)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),53)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,2)),54)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),55)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),56)
occurs(1,talos,release(manipulator_end_1,(block,6)),57)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),58)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),59)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),60)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),61)
occurs(1,talos,release(manipulator_end_2,(block,5)),62)
occurs(1,talos,release(manipulator_end_1,(block,3)),63)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),64)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),65)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),66)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),67)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),68)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),69)
occurs(1,talos,release(manipulator_end_2,(block,2)),70)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),71)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),72)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),73)

[16-02-2021_16-43-47] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =    16.047168s : Steps =    73 : Actions =    73 |  
  ====================================================================  

[16-02-2021_16-43-47] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-43-47] INFO :: Experiment >> 

      ================================================      
           Experimental run 15 : Time 30.819810s            
      ================================================      

[16-02-2021_16-43-47] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-43-47] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-43-47] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-43-47] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-43-47] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-43-47] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Instantiated.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Program building started.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Program building completed.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding base program parts.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.013749s.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving base program parts.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.002921s.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Incremental solving started.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.039673s.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.005596s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.031407s.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.003161s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.031460s.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.004647s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.035725s.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.006378s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.035385s.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.005057s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.037347s.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.006165s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.038235s.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.007320s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.036669s.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.008296s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.037221s.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.010732s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.040575s.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.010857s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.042692s.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.014894s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.044195s.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.018226s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.041027s.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.028021s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.041902s.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.043937s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.042483s.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.058969s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.076994s.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.095006s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.085401s.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.148379s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.087557s.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.132775s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Incremental solving completed in 1.495947s because STOP_CON_REACHED.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.839695s, Solving time = 0.611335s, Total time = 1.495947s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039673s, Solving time = 0.005596s, Total time = 0.045269s
2 : Statistics :: Grounding time = 0.031407s, Solving time = 0.003161s, Total time = 0.034567s
3 : Statistics :: Grounding time = 0.031460s, Solving time = 0.004647s, Total time = 0.036106s
4 : Statistics :: Grounding time = 0.035725s, Solving time = 0.006378s, Total time = 0.042103s
5 : Statistics :: Grounding time = 0.035385s, Solving time = 0.005057s, Total time = 0.040442s
6 : Statistics :: Grounding time = 0.037347s, Solving time = 0.006165s, Total time = 0.043512s
7 : Statistics :: Grounding time = 0.038235s, Solving time = 0.007320s, Total time = 0.045555s
8 : Statistics :: Grounding time = 0.036669s, Solving time = 0.008296s, Total time = 0.044964s
9 : Statistics :: Grounding time = 0.037221s, Solving time = 0.010732s, Total time = 0.047953s
10 : Statistics :: Grounding time = 0.040575s, Solving time = 0.010857s, Total time = 0.051433s
11 : Statistics :: Grounding time = 0.042692s, Solving time = 0.014894s, Total time = 0.057586s
12 : Statistics :: Grounding time = 0.044195s, Solving time = 0.018226s, Total time = 0.062421s
13 : Statistics :: Grounding time = 0.041027s, Solving time = 0.028021s, Total time = 0.069048s
14 : Statistics :: Grounding time = 0.041902s, Solving time = 0.043937s, Total time = 0.085839s
15 : Statistics :: Grounding time = 0.042483s, Solving time = 0.058969s, Total time = 0.101451s
16 : Statistics :: Grounding time = 0.076994s, Solving time = 0.095006s, Total time = 0.172000s
17 : Statistics :: Grounding time = 0.085401s, Solving time = 0.148379s, Total time = 0.233780s
18 : Statistics :: Grounding time = 0.087557s, Solving time = 0.132775s, Total time = 0.220332s

[16-02-2021_16-43-48] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.839695s, Solving time = 0.611335s, Total time = 1.495947s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-43-48] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),7)
occurs(3,talos,release(manipulator_arm_2,(block,5)),8)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),9)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),10)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),11)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[16-02-2021_16-43-48] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-43-48] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-43-48] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-43-48] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-43-48] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-43-48] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Instantiated.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Program building started.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Program building completed.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding base program parts.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.014489s.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving base program parts.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.003332s.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Incremental solving started.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.062042s.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.005923s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.046689s.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.004258s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.046084s.

[16-02-2021_16-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.004931s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.045419s.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.006864s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.051407s.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.008213s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.049796s.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.009034s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.053802s.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.009850s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.054629s.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.010248s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.056582s.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.010798s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.062497s.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.011102s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.064619s.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.013259s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.059635s.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.016019s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.061439s.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.016176s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.059921s.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.016745s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.063615s.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.016449s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.063279s.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.015048s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.063813s.

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.021063s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.068522s.

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.023854s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.066529s.

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.029860s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.068139s.

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.029646s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.070088s.

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.044454s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.072439s.

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.054057s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.071204s.

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.100454s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.073199s.

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.099908s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.076734s.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.124473s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Incremental solving completed in 2.351349s because STOP_CON_REACHED.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.546613s, Solving time = 0.706020s, Total time = 2.351349s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.062042s, Solving time = 0.005923s, Total time = 0.067965s
2 : Statistics :: Grounding time = 0.046689s, Solving time = 0.004258s, Total time = 0.050947s
3 : Statistics :: Grounding time = 0.046084s, Solving time = 0.004931s, Total time = 0.051016s
4 : Statistics :: Grounding time = 0.045419s, Solving time = 0.006864s, Total time = 0.052283s
5 : Statistics :: Grounding time = 0.051407s, Solving time = 0.008213s, Total time = 0.059619s
6 : Statistics :: Grounding time = 0.049796s, Solving time = 0.009034s, Total time = 0.058830s
7 : Statistics :: Grounding time = 0.053802s, Solving time = 0.009850s, Total time = 0.063653s
8 : Statistics :: Grounding time = 0.054629s, Solving time = 0.010248s, Total time = 0.064877s
9 : Statistics :: Grounding time = 0.056582s, Solving time = 0.010798s, Total time = 0.067380s
10 : Statistics :: Grounding time = 0.062497s, Solving time = 0.011102s, Total time = 0.073599s
11 : Statistics :: Grounding time = 0.064619s, Solving time = 0.013259s, Total time = 0.077878s
12 : Statistics :: Grounding time = 0.059635s, Solving time = 0.016019s, Total time = 0.075654s
13 : Statistics :: Grounding time = 0.061439s, Solving time = 0.016176s, Total time = 0.077615s
14 : Statistics :: Grounding time = 0.059921s, Solving time = 0.016745s, Total time = 0.076665s
15 : Statistics :: Grounding time = 0.063615s, Solving time = 0.016449s, Total time = 0.080064s
16 : Statistics :: Grounding time = 0.063279s, Solving time = 0.015048s, Total time = 0.078328s
17 : Statistics :: Grounding time = 0.063813s, Solving time = 0.021063s, Total time = 0.084876s
18 : Statistics :: Grounding time = 0.068522s, Solving time = 0.023854s, Total time = 0.092376s
19 : Statistics :: Grounding time = 0.066529s, Solving time = 0.029860s, Total time = 0.096389s
20 : Statistics :: Grounding time = 0.068139s, Solving time = 0.029646s, Total time = 0.097786s
21 : Statistics :: Grounding time = 0.070088s, Solving time = 0.044454s, Total time = 0.114542s
22 : Statistics :: Grounding time = 0.072439s, Solving time = 0.054057s, Total time = 0.126497s
23 : Statistics :: Grounding time = 0.071204s, Solving time = 0.100454s, Total time = 0.171658s
24 : Statistics :: Grounding time = 0.073199s, Solving time = 0.099908s, Total time = 0.173108s
25 : Statistics :: Grounding time = 0.076734s, Solving time = 0.124473s, Total time = 0.201207s

[16-02-2021_16-43-51] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.546613s, Solving time = 0.706020s, Total time = 2.351349s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[16-02-2021_16-43-51] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),7)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),13)
occurs(2,talos,configure(manipulator_arm_2,retracted),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),23)
occurs(2,talos,release(manipulator_arm_2,(block,5)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),25)

[16-02-2021_16-43-51] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-43-51] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-43-51] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-43-51] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-43-51] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-43-51] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Instantiated.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Program building started.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Program building completed.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding base program parts.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.016414s.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving base program parts.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.002783s.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Incremental solving started.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.186266s.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.009416s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.066512s.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.005539s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.064574s.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.007175s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.067157s.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.009897s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.069740s.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.011913s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.072484s.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.013069s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.076385s.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.014970s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.076472s.

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.014723s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.078974s.

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.016059s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.079354s.

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.017086s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.079211s.

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.017001s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.081216s.

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.017543s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.087775s.

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.022556s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.085277s.

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.027867s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.088124s.

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.024998s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.088535s.

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.025732s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.093126s.

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.035718s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.098863s.

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.044720s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.089751s.

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.055008s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.092647s.

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Model found:
Model :: Total atoms = 6058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.051891s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Incremental solving completed in 2.267161s because STOP_CON_REACHED.

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.738858s, Solving time = 0.445664s, Total time = 2.267161s
Final Model :: Total atoms = 6058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.186266s, Solving time = 0.009416s, Total time = 0.195681s
2 : Statistics :: Grounding time = 0.066512s, Solving time = 0.005539s, Total time = 0.072051s
3 : Statistics :: Grounding time = 0.064574s, Solving time = 0.007175s, Total time = 0.071750s
4 : Statistics :: Grounding time = 0.067157s, Solving time = 0.009897s, Total time = 0.077054s
5 : Statistics :: Grounding time = 0.069740s, Solving time = 0.011913s, Total time = 0.081653s
6 : Statistics :: Grounding time = 0.072484s, Solving time = 0.013069s, Total time = 0.085553s
7 : Statistics :: Grounding time = 0.076385s, Solving time = 0.014970s, Total time = 0.091355s
8 : Statistics :: Grounding time = 0.076472s, Solving time = 0.014723s, Total time = 0.091195s
9 : Statistics :: Grounding time = 0.078974s, Solving time = 0.016059s, Total time = 0.095033s
10 : Statistics :: Grounding time = 0.079354s, Solving time = 0.017086s, Total time = 0.096440s
11 : Statistics :: Grounding time = 0.079211s, Solving time = 0.017001s, Total time = 0.096212s
12 : Statistics :: Grounding time = 0.081216s, Solving time = 0.017543s, Total time = 0.098759s
13 : Statistics :: Grounding time = 0.087775s, Solving time = 0.022556s, Total time = 0.110331s
14 : Statistics :: Grounding time = 0.085277s, Solving time = 0.027867s, Total time = 0.113144s
15 : Statistics :: Grounding time = 0.088124s, Solving time = 0.024998s, Total time = 0.113122s
16 : Statistics :: Grounding time = 0.088535s, Solving time = 0.025732s, Total time = 0.114267s
17 : Statistics :: Grounding time = 0.093126s, Solving time = 0.035718s, Total time = 0.128844s
18 : Statistics :: Grounding time = 0.098863s, Solving time = 0.044720s, Total time = 0.143583s
19 : Statistics :: Grounding time = 0.089751s, Solving time = 0.055008s, Total time = 0.144759s
20 : Statistics :: Grounding time = 0.092647s, Solving time = 0.051891s, Total time = 0.144538s

[16-02-2021_16-43-53] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.738858s, Solving time = 0.445664s, Total time = 2.267161s
Model :: Total atoms = 6058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-43-53] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,configure(manipulator_limb_2,extended),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)

[16-02-2021_16-43-53] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.495947s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.351349s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     2.267161s : Steps =    20 : Actions =    20 |  
  ====================================================================  

[16-02-2021_16-43-53] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-43-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-43-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-43-53] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-43-53] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-43-53] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-43-53] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-43-53] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Instantiated.

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> The logic program was extended with 20 rules into program part plan_module(step, start).

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> The logic program was extended with 3344 rules into program part state_module(step).

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=20, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 20], range_=IncRange(start=20, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 20, Max end step = None
Step inc = 1, Step inc init = 22, Stop con = StopCondition.Satisfiable

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Program building started.

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Program building completed.

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding base program parts.

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.022293s.

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving base program parts.

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.003393s.

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Incremental solving started.

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [1]:
Current step bound = 21
End step min = 20
End step max = None

[16-02-2021_16-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [21]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 20]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 20]), ('conformance_module', [21])].

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.301878s.

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.032186s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [2]:
Current step bound = 22
End step min = 20
End step max = None

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 20]), ('conformance_module', [22])].

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.070862s.

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.006591s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [3]:
Current step bound = 23
End step min = 20
End step max = None

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 20]), ('conformance_module', [23])].

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.069381s.

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.008311s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [4]:
Current step bound = 24
End step min = 20
End step max = None

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 20]), ('conformance_module', [24])].

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.080394s.

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.010388s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [5]:
Current step bound = 25
End step min = 20
End step max = None

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 20]), ('conformance_module', [25])].

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.077213s.

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.012311s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [6]:
Current step bound = 26
End step min = 20
End step max = None

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 20]), ('conformance_module', [26])].

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.075236s.

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.013946s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [7]:
Current step bound = 27
End step min = 20
End step max = None

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 20]), ('conformance_module', [27])].

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.077628s.

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.015212s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [8]:
Current step bound = 28
End step min = 20
End step max = None

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 20]), ('conformance_module', [28])].

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.083011s.

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.017502s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [9]:
Current step bound = 29
End step min = 20
End step max = None

[16-02-2021_16-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 20]), ('conformance_module', [29])].

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.090591s.

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.017408s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [10]:
Current step bound = 30
End step min = 20
End step max = None

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 20]), ('conformance_module', [30])].

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.086543s.

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.018578s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [11]:
Current step bound = 31
End step min = 20
End step max = None

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 20]), ('conformance_module', [31])].

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.087645s.

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.017972s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [12]:
Current step bound = 32
End step min = 20
End step max = None

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 20]), ('conformance_module', [32])].

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.088913s.

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.019232s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [13]:
Current step bound = 33
End step min = 20
End step max = None

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 20]), ('conformance_module', [33])].

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.090135s.

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.021862s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [14]:
Current step bound = 34
End step min = 20
End step max = None

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 20]), ('conformance_module', [34])].

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.095996s.

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.022224s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [15]:
Current step bound = 35
End step min = 20
End step max = None

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 20]), ('conformance_module', [35])].

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.098004s.

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.021298s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [16]:
Current step bound = 36
End step min = 20
End step max = None

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 20]), ('conformance_module', [36])].

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.094256s.

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.022770s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [17]:
Current step bound = 37
End step min = 20
End step max = None

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 20]), ('conformance_module', [37])].

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.097890s.

[16-02-2021_16-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.032348s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [18]:
Current step bound = 38
End step min = 20
End step max = None

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 20]), ('conformance_module', [38])].

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.099245s.

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.033311s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [19]:
Current step bound = 39
End step min = 20
End step max = None

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 20]), ('conformance_module', [39])].

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.098740s.

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.072759s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [20]:
Current step bound = 40
End step min = 20
End step max = None

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 20]), ('conformance_module', [40])].

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.099685s.

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.067956s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [21]:
Current step bound = 41
End step min = 20
End step max = None

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 20]), ('conformance_module', [41])].

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.103212s.

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.086314s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [22]:
Current step bound = 42
End step min = 20
End step max = None

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 20]), ('conformance_module', [42])].

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.103506s.

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.162686s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [23]:
Current step bound = 43
End step min = 20
End step max = None

[16-02-2021_16-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 20]), ('conformance_module', [43])].

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.104026s.

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.134287s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [24]:
Current step bound = 44
End step min = 20
End step max = None

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 20]), ('conformance_module', [44])].

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.104848s.

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.147157s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [25]:
Current step bound = 45
End step min = 20
End step max = None

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 20]), ('conformance_module', [45])].

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.109776s.

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Model found:
Model :: Total atoms = 10129, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.102231s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Incremental solving completed in 3.774137s because STOP_CON_REACHED.

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.510908s, Solving time = 1.120233s, Total time = 3.774137s
Final Model :: Total atoms = 10129, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.301878s, Solving time = 0.032186s, Total time = 0.334064s
2 : Statistics :: Grounding time = 0.070862s, Solving time = 0.006591s, Total time = 0.077453s
3 : Statistics :: Grounding time = 0.069381s, Solving time = 0.008311s, Total time = 0.077692s
4 : Statistics :: Grounding time = 0.080394s, Solving time = 0.010388s, Total time = 0.090783s
5 : Statistics :: Grounding time = 0.077213s, Solving time = 0.012311s, Total time = 0.089524s
6 : Statistics :: Grounding time = 0.075236s, Solving time = 0.013946s, Total time = 0.089182s
7 : Statistics :: Grounding time = 0.077628s, Solving time = 0.015212s, Total time = 0.092840s
8 : Statistics :: Grounding time = 0.083011s, Solving time = 0.017502s, Total time = 0.100512s
9 : Statistics :: Grounding time = 0.090591s, Solving time = 0.017408s, Total time = 0.107999s
10 : Statistics :: Grounding time = 0.086543s, Solving time = 0.018578s, Total time = 0.105120s
11 : Statistics :: Grounding time = 0.087645s, Solving time = 0.017972s, Total time = 0.105617s
12 : Statistics :: Grounding time = 0.088913s, Solving time = 0.019232s, Total time = 0.108145s
13 : Statistics :: Grounding time = 0.090135s, Solving time = 0.021862s, Total time = 0.111997s
14 : Statistics :: Grounding time = 0.095996s, Solving time = 0.022224s, Total time = 0.118220s
15 : Statistics :: Grounding time = 0.098004s, Solving time = 0.021298s, Total time = 0.119302s
16 : Statistics :: Grounding time = 0.094256s, Solving time = 0.022770s, Total time = 0.117027s
17 : Statistics :: Grounding time = 0.097890s, Solving time = 0.032348s, Total time = 0.130239s
18 : Statistics :: Grounding time = 0.099245s, Solving time = 0.033311s, Total time = 0.132556s
19 : Statistics :: Grounding time = 0.098740s, Solving time = 0.072759s, Total time = 0.171499s
20 : Statistics :: Grounding time = 0.099685s, Solving time = 0.067956s, Total time = 0.167640s
21 : Statistics :: Grounding time = 0.103212s, Solving time = 0.086314s, Total time = 0.189526s
22 : Statistics :: Grounding time = 0.103506s, Solving time = 0.162686s, Total time = 0.266192s
23 : Statistics :: Grounding time = 0.104026s, Solving time = 0.134287s, Total time = 0.238314s
24 : Statistics :: Grounding time = 0.104848s, Solving time = 0.147157s, Total time = 0.252005s
25 : Statistics :: Grounding time = 0.109776s, Solving time = 0.102231s, Total time = 0.212007s

[16-02-2021_16-43-57] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 2.510908s, Solving time = 1.120233s, Total time = 3.774137s
Model :: Total atoms = 10129, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-43-57] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,configure(manipulator_limb_2,extended),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,retracted),21)
occurs(1,talos,configure(manipulator_limb_1,retracted),22)
occurs(1,talos,move((store_room,0)),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),25)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_1,extended),27)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),28)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),29)
occurs(1,talos,configure(manipulator_limb_1,retracted),30)
occurs(1,talos,configure(manipulator_limb_2,retracted),31)
occurs(1,talos,move((store_room,1)),32)
occurs(1,talos,move((hallway,0)),33)
occurs(1,talos,move((hallway,1)),34)
occurs(1,talos,move((hallway,2)),35)
occurs(1,talos,move((puzzle_room,0)),36)
occurs(1,talos,move((puzzle_room,1)),37)
occurs(1,talos,configure(manipulator_limb_2,extended),38)
occurs(1,talos,configure(manipulator_limb_1,extended),39)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),40)
occurs(1,talos,release(manipulator_end_1,(block,6)),41)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),42)
occurs(1,talos,release(manipulator_end_2,(block,5)),43)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),44)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),45)

[16-02-2021_16-43-57] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     3.774137s : Steps =    45 : Actions =    45 |  
  ====================================================================  

[16-02-2021_16-43-57] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-43-57] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-43-57] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-43-57] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-43-57] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-43-57] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-43-57] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-43-57] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Instantiated.

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Program building started.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Program building completed.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding base program parts.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding completed in 0.021221s.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving base program parts.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving completed in 0.002894s.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Incremental solving started.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding completed in 0.136932s.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving started.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving completed in 0.019503s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding completed in 0.053388s.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving started.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving completed in 0.006534s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding completed in 0.054185s.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving started.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving completed in 0.008657s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding completed in 0.060814s.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving started.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving completed in 0.009688s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding completed in 0.059027s.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving started.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving completed in 0.010994s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding completed in 0.065750s.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving started.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving completed in 0.011356s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding completed in 0.062678s.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving started.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving completed in 0.012291s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding completed in 0.067718s.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving started.

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving completed in 0.012058s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding completed in 0.063048s.

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving started.

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Model found:
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving completed in 0.015171s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Incremental solving completed in 0.775215s because STOP_CON_REACHED.

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.644761s, Solving time = 0.109146s, Total time = 0.775215s
Final Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.136932s, Solving time = 0.019503s, Total time = 0.156435s
2 : Statistics :: Grounding time = 0.053388s, Solving time = 0.006534s, Total time = 0.059922s
3 : Statistics :: Grounding time = 0.054185s, Solving time = 0.008657s, Total time = 0.062842s
4 : Statistics :: Grounding time = 0.060814s, Solving time = 0.009688s, Total time = 0.070502s
5 : Statistics :: Grounding time = 0.059027s, Solving time = 0.010994s, Total time = 0.070021s
6 : Statistics :: Grounding time = 0.065750s, Solving time = 0.011356s, Total time = 0.077106s
7 : Statistics :: Grounding time = 0.062678s, Solving time = 0.012291s, Total time = 0.074969s
8 : Statistics :: Grounding time = 0.067718s, Solving time = 0.012058s, Total time = 0.079775s
9 : Statistics :: Grounding time = 0.063048s, Solving time = 0.015171s, Total time = 0.078220s

[16-02-2021_16-43-59] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.644761s, Solving time = 0.109146s, Total time = 0.775215s
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-43-59] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),7)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),13)
occurs(2,talos,configure(manipulator_arm_2,retracted),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),23)
occurs(2,talos,release(manipulator_arm_2,(block,5)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),25)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),26)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),27)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),28)
occurs(2,talos,release(manipulator_arm_2,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[16-02-2021_16-43-59] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-43-59] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-43-59] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-43-59] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-43-59] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-43-59] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Instantiated.

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> The logic program was extended with 45 rules into program part plan_module(step, start).

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> The logic program was extended with 7244 rules into program part state_module(step).

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=45, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 45], range_=IncRange(start=45, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 45, Max end step = None
Step inc = 1, Step inc init = 47, Stop con = StopCondition.Satisfiable

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Program building started.

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Program building completed.

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding base program parts.

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding completed in 0.029845s.

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving base program parts.

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving completed in 0.003644s.

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Incremental solving started.

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Beginning Incremental call [1]:
Current step bound = 46
End step min = 45
End step max = None

[16-02-2021_16-43-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding program parts: [('check', [46]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 45]), ('conformance_module', [45]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 45]), ('conformance_module', [46])].

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding completed in 0.477573s.

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving started.

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving completed in 0.056531s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Beginning Incremental call [2]:
Current step bound = 47
End step min = 45
End step max = None

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 45]), ('conformance_module', [47])].

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding completed in 0.083366s.

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving started.

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving completed in 0.008490s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Beginning Incremental call [3]:
Current step bound = 48
End step min = 45
End step max = None

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 45]), ('conformance_module', [48])].

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding completed in 0.077330s.

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving started.

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving completed in 0.012137s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Beginning Incremental call [4]:
Current step bound = 49
End step min = 45
End step max = None

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 45]), ('conformance_module', [49])].

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding completed in 0.084875s.

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving started.

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving completed in 0.015364s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Beginning Incremental call [5]:
Current step bound = 50
End step min = 45
End step max = None

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 45]), ('conformance_module', [50])].

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding completed in 0.085647s.

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving started.

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Model found:
Model :: Total atoms = 10759, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving completed in 0.018662s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Incremental solving completed in 0.970942s because STOP_CON_REACHED.

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.838636s, Solving time = 0.114828s, Total time = 0.970942s
Final Model :: Total atoms = 10759, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.477573s, Solving time = 0.056531s, Total time = 0.534103s
2 : Statistics :: Grounding time = 0.083366s, Solving time = 0.008490s, Total time = 0.091856s
3 : Statistics :: Grounding time = 0.077330s, Solving time = 0.012137s, Total time = 0.089468s
4 : Statistics :: Grounding time = 0.084875s, Solving time = 0.015364s, Total time = 0.100239s
5 : Statistics :: Grounding time = 0.085647s, Solving time = 0.018662s, Total time = 0.104308s

[16-02-2021_16-44-00] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.838636s, Solving time = 0.114828s, Total time = 0.970942s
Model :: Total atoms = 10759, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-44-00] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,configure(manipulator_limb_2,extended),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,retracted),21)
occurs(1,talos,configure(manipulator_limb_1,retracted),22)
occurs(1,talos,move((store_room,0)),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),25)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_1,extended),27)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),28)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),29)
occurs(1,talos,configure(manipulator_limb_1,retracted),30)
occurs(1,talos,configure(manipulator_limb_2,retracted),31)
occurs(1,talos,move((store_room,1)),32)
occurs(1,talos,move((hallway,0)),33)
occurs(1,talos,move((hallway,1)),34)
occurs(1,talos,move((hallway,2)),35)
occurs(1,talos,move((puzzle_room,0)),36)
occurs(1,talos,move((puzzle_room,1)),37)
occurs(1,talos,configure(manipulator_limb_2,extended),38)
occurs(1,talos,configure(manipulator_limb_1,extended),39)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),40)
occurs(1,talos,release(manipulator_end_1,(block,6)),41)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),42)
occurs(1,talos,release(manipulator_end_2,(block,5)),43)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),44)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),45)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),46)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),47)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),48)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),49)
occurs(1,talos,release(manipulator_end_2,(block,3)),50)

[16-02-2021_16-44-00] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.775215s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     0.970942s : Steps =    50 : Actions =    50 |  
  ====================================================================  

[16-02-2021_16-44-00] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-44-00] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-44-00] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-44-00] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-44-00] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-44-00] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-44-00] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-44-00] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Instantiated.

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-44-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> The logic program was extended with 50 rules into program part plan_module(step, start).

[16-02-2021_16-44-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> The logic program was extended with 8024 rules into program part state_module(step).

[16-02-2021_16-44-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=50, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 50], range_=IncRange(start=50, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 50, Max end step = None
Step inc = 1, Step inc init = 52, Stop con = StopCondition.Satisfiable

[16-02-2021_16-44-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Program building started.

[16-02-2021_16-44-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Program building completed.

[16-02-2021_16-44-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding base program parts.

[16-02-2021_16-44-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.030639s.

[16-02-2021_16-44-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving base program parts.

[16-02-2021_16-44-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.003584s.

[16-02-2021_16-44-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Incremental solving started.

[16-02-2021_16-44-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [1]:
Current step bound = 51
End step min = 50
End step max = None

[16-02-2021_16-44-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [51]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('state_module', [46]), ('conformance_module', [46]), ('state_module', [47]), ('conformance_module', [47]), ('state_module', [48]), ('conformance_module', [48]), ('state_module', [49]), ('conformance_module', [49]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 50]), ('conformance_module', [50]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 50]), ('conformance_module', [51])].

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.495892s.

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.064021s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [2]:
Current step bound = 52
End step min = 50
End step max = None

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 50]), ('conformance_module', [52])].

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.079737s.

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.009172s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [3]:
Current step bound = 53
End step min = 50
End step max = None

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 50]), ('conformance_module', [53])].

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.080707s.

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.013532s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [4]:
Current step bound = 54
End step min = 50
End step max = None

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 50]), ('conformance_module', [54])].

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.092655s.

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.016819s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [5]:
Current step bound = 55
End step min = 50
End step max = None

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 50]), ('conformance_module', [55])].

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.090202s.

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.016997s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [6]:
Current step bound = 56
End step min = 50
End step max = None

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 50]), ('conformance_module', [56])].

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.096951s.

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.018143s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [7]:
Current step bound = 57
End step min = 50
End step max = None

[16-02-2021_16-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 50]), ('conformance_module', [57])].

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.094333s.

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.023145s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [8]:
Current step bound = 58
End step min = 50
End step max = None

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 50]), ('conformance_module', [58])].

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.092980s.

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.021478s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [9]:
Current step bound = 59
End step min = 50
End step max = None

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 50]), ('conformance_module', [59])].

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.095064s.

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.025504s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [10]:
Current step bound = 60
End step min = 50
End step max = None

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 50]), ('conformance_module', [60])].

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.097661s.

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.030036s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [11]:
Current step bound = 61
End step min = 50
End step max = None

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 50]), ('conformance_module', [61])].

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.097903s.

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.031346s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [12]:
Current step bound = 62
End step min = 50
End step max = None

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 50]), ('conformance_module', [62])].

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.103988s.

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.036857s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [13]:
Current step bound = 63
End step min = 50
End step max = None

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 50]), ('conformance_module', [63])].

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.100583s.

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.043912s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [14]:
Current step bound = 64
End step min = 50
End step max = None

[16-02-2021_16-44-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 50]), ('conformance_module', [64])].

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.100931s.

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.049904s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [15]:
Current step bound = 65
End step min = 50
End step max = None

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 50]), ('conformance_module', [65])].

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.105679s.

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.070896s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [16]:
Current step bound = 66
End step min = 50
End step max = None

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 50]), ('conformance_module', [66])].

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.105402s.

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.117070s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [17]:
Current step bound = 67
End step min = 50
End step max = None

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 50]), ('conformance_module', [67])].

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.108177s.

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.286604s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [18]:
Current step bound = 68
End step min = 50
End step max = None

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 50]), ('conformance_module', [68])].

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.111559s.

[16-02-2021_16-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.417686s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [19]:
Current step bound = 69
End step min = 50
End step max = None

[16-02-2021_16-44-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 50]), ('conformance_module', [69])].

[16-02-2021_16-44-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.112023s.

[16-02-2021_16-44-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.778647s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [20]:
Current step bound = 70
End step min = 50
End step max = None

[16-02-2021_16-44-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 50]), ('conformance_module', [70])].

[16-02-2021_16-44-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.113381s.

[16-02-2021_16-44-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 1.247145s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [21]:
Current step bound = 71
End step min = 50
End step max = None

[16-02-2021_16-44-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 50]), ('conformance_module', [71])].

[16-02-2021_16-44-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.119348s.

[16-02-2021_16-44-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 1.744486s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [22]:
Current step bound = 72
End step min = 50
End step max = None

[16-02-2021_16-44-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [72]), ('domain_rules', [72]), ('state_module', [72]), ('plan_module', [72, 50]), ('conformance_module', [72])].

[16-02-2021_16-44-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.116280s.

[16-02-2021_16-44-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 2.002741s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [23]:
Current step bound = 73
End step min = 50
End step max = None

[16-02-2021_16-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [73]), ('domain_rules', [73]), ('state_module', [73]), ('plan_module', [73, 50]), ('conformance_module', [73])].

[16-02-2021_16-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.120910s.

[16-02-2021_16-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 2.809423s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [24]:
Current step bound = 74
End step min = 50
End step max = None

[16-02-2021_16-44-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [74]), ('domain_rules', [74]), ('state_module', [74]), ('plan_module', [74, 50]), ('conformance_module', [74])].

[16-02-2021_16-44-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.117417s.

[16-02-2021_16-44-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 4.298301s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [25]:
Current step bound = 75
End step min = 50
End step max = None

[16-02-2021_16-44-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [75]), ('domain_rules', [75]), ('state_module', [75]), ('plan_module', [75, 50]), ('conformance_module', [75])].

[16-02-2021_16-44-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.122557s.

[16-02-2021_16-44-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[16-02-2021_16-44-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Model found:
Model :: Total atoms = 15413, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-44-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 1.565340s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-44-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Incremental solving completed in 18.985242s because STOP_CON_REACHED.

[16-02-2021_16-44-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 3.002959s, Solving time = 15.742792s, Total time = 18.985242s
Final Model :: Total atoms = 15413, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-44-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.495892s, Solving time = 0.064021s, Total time = 0.559913s
2 : Statistics :: Grounding time = 0.079737s, Solving time = 0.009172s, Total time = 0.088908s
3 : Statistics :: Grounding time = 0.080707s, Solving time = 0.013532s, Total time = 0.094238s
4 : Statistics :: Grounding time = 0.092655s, Solving time = 0.016819s, Total time = 0.109474s
5 : Statistics :: Grounding time = 0.090202s, Solving time = 0.016997s, Total time = 0.107199s
6 : Statistics :: Grounding time = 0.096951s, Solving time = 0.018143s, Total time = 0.115094s
7 : Statistics :: Grounding time = 0.094333s, Solving time = 0.023145s, Total time = 0.117478s
8 : Statistics :: Grounding time = 0.092980s, Solving time = 0.021478s, Total time = 0.114457s
9 : Statistics :: Grounding time = 0.095064s, Solving time = 0.025504s, Total time = 0.120569s
10 : Statistics :: Grounding time = 0.097661s, Solving time = 0.030036s, Total time = 0.127697s
11 : Statistics :: Grounding time = 0.097903s, Solving time = 0.031346s, Total time = 0.129249s
12 : Statistics :: Grounding time = 0.103988s, Solving time = 0.036857s, Total time = 0.140846s
13 : Statistics :: Grounding time = 0.100583s, Solving time = 0.043912s, Total time = 0.144496s
14 : Statistics :: Grounding time = 0.100931s, Solving time = 0.049904s, Total time = 0.150835s
15 : Statistics :: Grounding time = 0.105679s, Solving time = 0.070896s, Total time = 0.176575s
16 : Statistics :: Grounding time = 0.105402s, Solving time = 0.117070s, Total time = 0.222473s
17 : Statistics :: Grounding time = 0.108177s, Solving time = 0.286604s, Total time = 0.394782s
18 : Statistics :: Grounding time = 0.111559s, Solving time = 0.417686s, Total time = 0.529245s
19 : Statistics :: Grounding time = 0.112023s, Solving time = 0.778647s, Total time = 0.890671s
20 : Statistics :: Grounding time = 0.113381s, Solving time = 1.247145s, Total time = 1.360526s
21 : Statistics :: Grounding time = 0.119348s, Solving time = 1.744486s, Total time = 1.863834s
22 : Statistics :: Grounding time = 0.116280s, Solving time = 2.002741s, Total time = 2.119021s
23 : Statistics :: Grounding time = 0.120910s, Solving time = 2.809423s, Total time = 2.930333s
24 : Statistics :: Grounding time = 0.117417s, Solving time = 4.298301s, Total time = 4.415718s
25 : Statistics :: Grounding time = 0.122557s, Solving time = 1.565340s, Total time = 1.687897s

[16-02-2021_16-44-20] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 3.002959s, Solving time = 15.742792s, Total time = 18.985242s
Model :: Total atoms = 15413, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-44-20] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,configure(manipulator_limb_2,extended),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,retracted),21)
occurs(1,talos,configure(manipulator_limb_1,retracted),22)
occurs(1,talos,move((store_room,0)),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),25)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_1,extended),27)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),28)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),29)
occurs(1,talos,configure(manipulator_limb_1,retracted),30)
occurs(1,talos,configure(manipulator_limb_2,retracted),31)
occurs(1,talos,move((store_room,1)),32)
occurs(1,talos,move((hallway,0)),33)
occurs(1,talos,move((hallway,1)),34)
occurs(1,talos,move((hallway,2)),35)
occurs(1,talos,move((puzzle_room,0)),36)
occurs(1,talos,move((puzzle_room,1)),37)
occurs(1,talos,configure(manipulator_limb_2,extended),38)
occurs(1,talos,configure(manipulator_limb_1,extended),39)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),40)
occurs(1,talos,release(manipulator_end_1,(block,6)),41)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),42)
occurs(1,talos,release(manipulator_end_2,(block,5)),43)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),44)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),45)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),46)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),47)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),48)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),49)
occurs(1,talos,release(manipulator_end_2,(block,3)),50)
occurs(1,talos,put(manipulator_end_1,(block,4),puzzle_room_table_left),51)
occurs(1,talos,release(manipulator_end_1,(block,4)),52)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),53)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),54)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),55)
occurs(1,talos,lift(manipulator_end_1,(block,5)),56)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),57)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),58)
occurs(1,talos,release(manipulator_end_2,(block,6)),59)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),60)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),61)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),62)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),63)
occurs(1,talos,release(manipulator_end_1,(block,5)),64)
occurs(1,talos,release(manipulator_end_2,(block,3)),65)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),66)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),67)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),68)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),69)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),70)
occurs(1,talos,release(manipulator_end_2,(block,2)),71)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),72)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),73)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),74)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),75)

[16-02-2021_16-44-20] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =    18.985242s : Steps =    75 : Actions =    75 |  
  ====================================================================  

[16-02-2021_16-44-21] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-44-21] INFO :: Experiment >> 

      ================================================      
           Experimental run 16 : Time 33.836381s            
      ================================================      

[16-02-2021_16-44-21] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-44-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-44-21] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-44-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-44-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-44-21] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Instantiated.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Program building started.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Program building completed.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding base program parts.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.013927s.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving base program parts.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.001702s.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Incremental solving started.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.045094s.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.005481s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.031752s.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.002816s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.032004s.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.004484s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.036912s.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.005613s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.034624s.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.005552s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.036221s.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.006698s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.037901s.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.007235s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.037671s.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.008482s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.039211s.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.010465s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.039901s.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.011722s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.039288s.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.015751s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.041644s.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.021035s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.040668s.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.027218s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.045264s.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.053831s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.042719s.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.081302s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-44-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.077310s.

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.136655s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.081155s.

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.201746s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.084497s.

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Model found:
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.247095s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Incremental solving completed in 1.737119s because STOP_CON_REACHED.

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.837764s, Solving time = 0.854883s, Total time = 1.737119s
Final Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.045094s, Solving time = 0.005481s, Total time = 0.050575s
2 : Statistics :: Grounding time = 0.031752s, Solving time = 0.002816s, Total time = 0.034569s
3 : Statistics :: Grounding time = 0.032004s, Solving time = 0.004484s, Total time = 0.036488s
4 : Statistics :: Grounding time = 0.036912s, Solving time = 0.005613s, Total time = 0.042526s
5 : Statistics :: Grounding time = 0.034624s, Solving time = 0.005552s, Total time = 0.040175s
6 : Statistics :: Grounding time = 0.036221s, Solving time = 0.006698s, Total time = 0.042919s
7 : Statistics :: Grounding time = 0.037901s, Solving time = 0.007235s, Total time = 0.045137s
8 : Statistics :: Grounding time = 0.037671s, Solving time = 0.008482s, Total time = 0.046153s
9 : Statistics :: Grounding time = 0.039211s, Solving time = 0.010465s, Total time = 0.049676s
10 : Statistics :: Grounding time = 0.039901s, Solving time = 0.011722s, Total time = 0.051623s
11 : Statistics :: Grounding time = 0.039288s, Solving time = 0.015751s, Total time = 0.055039s
12 : Statistics :: Grounding time = 0.041644s, Solving time = 0.021035s, Total time = 0.062679s
13 : Statistics :: Grounding time = 0.040668s, Solving time = 0.027218s, Total time = 0.067886s
14 : Statistics :: Grounding time = 0.045264s, Solving time = 0.053831s, Total time = 0.099095s
15 : Statistics :: Grounding time = 0.042719s, Solving time = 0.081302s, Total time = 0.124021s
16 : Statistics :: Grounding time = 0.077310s, Solving time = 0.136655s, Total time = 0.213964s
17 : Statistics :: Grounding time = 0.081155s, Solving time = 0.201746s, Total time = 0.282901s
18 : Statistics :: Grounding time = 0.084497s, Solving time = 0.247095s, Total time = 0.331592s

[16-02-2021_16-44-22] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.837764s, Solving time = 0.854883s, Total time = 1.737119s
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-44-22] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),8)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),9)
occurs(3,talos,release(manipulator_arm_1,(block,5)),10)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),11)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[16-02-2021_16-44-22] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-44-22] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-44-22] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-44-22] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-44-22] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-44-22] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Instantiated.

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Program building started.

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Program building completed.

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding base program parts.

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.014556s.

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving base program parts.

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.002330s.

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Incremental solving started.

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.061968s.

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.005854s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.044083s.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.003476s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.045743s.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.004863s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.046030s.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.006960s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.053476s.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.008454s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.052134s.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.009435s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.054138s.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.009666s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.059705s.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.010191s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.056435s.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.011016s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.055767s.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.011195s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.059501s.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.013605s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.059469s.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.014489s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.061326s.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.016100s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.060793s.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.015196s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.063995s.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.020602s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-44-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.062720s.

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.021122s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.064268s.

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.021227s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.067601s.

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.027967s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.066756s.

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.026951s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.067149s.

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.034637s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.072405s.

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.045748s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.069662s.

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.068354s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.070840s.

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.096201s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.072481s.

[16-02-2021_16-44-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.112766s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.074242s.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.130386s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Incremental solving completed in 2.384632s because STOP_CON_REACHED.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.537247s, Solving time = 0.748790s, Total time = 2.384632s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.061968s, Solving time = 0.005854s, Total time = 0.067822s
2 : Statistics :: Grounding time = 0.044083s, Solving time = 0.003476s, Total time = 0.047559s
3 : Statistics :: Grounding time = 0.045743s, Solving time = 0.004863s, Total time = 0.050606s
4 : Statistics :: Grounding time = 0.046030s, Solving time = 0.006960s, Total time = 0.052990s
5 : Statistics :: Grounding time = 0.053476s, Solving time = 0.008454s, Total time = 0.061930s
6 : Statistics :: Grounding time = 0.052134s, Solving time = 0.009435s, Total time = 0.061569s
7 : Statistics :: Grounding time = 0.054138s, Solving time = 0.009666s, Total time = 0.063804s
8 : Statistics :: Grounding time = 0.059705s, Solving time = 0.010191s, Total time = 0.069896s
9 : Statistics :: Grounding time = 0.056435s, Solving time = 0.011016s, Total time = 0.067451s
10 : Statistics :: Grounding time = 0.055767s, Solving time = 0.011195s, Total time = 0.066961s
11 : Statistics :: Grounding time = 0.059501s, Solving time = 0.013605s, Total time = 0.073106s
12 : Statistics :: Grounding time = 0.059469s, Solving time = 0.014489s, Total time = 0.073958s
13 : Statistics :: Grounding time = 0.061326s, Solving time = 0.016100s, Total time = 0.077426s
14 : Statistics :: Grounding time = 0.060793s, Solving time = 0.015196s, Total time = 0.075990s
15 : Statistics :: Grounding time = 0.063995s, Solving time = 0.020602s, Total time = 0.084597s
16 : Statistics :: Grounding time = 0.062720s, Solving time = 0.021122s, Total time = 0.083842s
17 : Statistics :: Grounding time = 0.064268s, Solving time = 0.021227s, Total time = 0.085495s
18 : Statistics :: Grounding time = 0.067601s, Solving time = 0.027967s, Total time = 0.095568s
19 : Statistics :: Grounding time = 0.066756s, Solving time = 0.026951s, Total time = 0.093707s
20 : Statistics :: Grounding time = 0.067149s, Solving time = 0.034637s, Total time = 0.101786s
21 : Statistics :: Grounding time = 0.072405s, Solving time = 0.045748s, Total time = 0.118153s
22 : Statistics :: Grounding time = 0.069662s, Solving time = 0.068354s, Total time = 0.138016s
23 : Statistics :: Grounding time = 0.070840s, Solving time = 0.096201s, Total time = 0.167041s
24 : Statistics :: Grounding time = 0.072481s, Solving time = 0.112766s, Total time = 0.185247s
25 : Statistics :: Grounding time = 0.074242s, Solving time = 0.130386s, Total time = 0.204629s

[16-02-2021_16-44-25] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.537247s, Solving time = 0.748790s, Total time = 2.384632s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-44-25] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),13)
occurs(2,talos,configure(manipulator_arm_2,retracted),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_2,(block,6)),21)
occurs(2,talos,configure(manipulator_arm_1,extended),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),25)

[16-02-2021_16-44-25] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-44-25] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-44-25] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-44-25] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-44-25] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-44-25] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Instantiated.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Program building started.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Program building completed.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding base program parts.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.016553s.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving base program parts.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.003019s.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Incremental solving started.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.184764s.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.008670s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.062788s.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.005336s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.063775s.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.006946s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.066741s.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.010016s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.069576s.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.012166s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.072986s.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.013304s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.075806s.

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.014683s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.078670s.

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.015292s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.081575s.

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.016569s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.080385s.

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.017035s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.079899s.

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.017139s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.082134s.

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.018858s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.088758s.

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.022152s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.085142s.

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.024749s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.087623s.

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.027010s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-44-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.086325s.

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.032177s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.089592s.

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.031957s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.093070s.

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.038780s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.095646s.

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.051045s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.092938s.

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.050684s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.092575s.

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.065053s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.093788s.

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Model found:
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.066871s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Incremental solving completed in 2.592940s because STOP_CON_REACHED.

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.921107s, Solving time = 0.569513s, Total time = 2.592940s
Final Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-44-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.184764s, Solving time = 0.008670s, Total time = 0.193435s
2 : Statistics :: Grounding time = 0.062788s, Solving time = 0.005336s, Total time = 0.068124s
3 : Statistics :: Grounding time = 0.063775s, Solving time = 0.006946s, Total time = 0.070721s
4 : Statistics :: Grounding time = 0.066741s, Solving time = 0.010016s, Total time = 0.076757s
5 : Statistics :: Grounding time = 0.069576s, Solving time = 0.012166s, Total time = 0.081742s
6 : Statistics :: Grounding time = 0.072986s, Solving time = 0.013304s, Total time = 0.086290s
7 : Statistics :: Grounding time = 0.075806s, Solving time = 0.014683s, Total time = 0.090489s
8 : Statistics :: Grounding time = 0.078670s, Solving time = 0.015292s, Total time = 0.093962s
9 : Statistics :: Grounding time = 0.081575s, Solving time = 0.016569s, Total time = 0.098144s
10 : Statistics :: Grounding time = 0.080385s, Solving time = 0.017035s, Total time = 0.097420s
11 : Statistics :: Grounding time = 0.079899s, Solving time = 0.017139s, Total time = 0.097038s
12 : Statistics :: Grounding time = 0.082134s, Solving time = 0.018858s, Total time = 0.100993s
13 : Statistics :: Grounding time = 0.088758s, Solving time = 0.022152s, Total time = 0.110909s
14 : Statistics :: Grounding time = 0.085142s, Solving time = 0.024749s, Total time = 0.109891s
15 : Statistics :: Grounding time = 0.087623s, Solving time = 0.027010s, Total time = 0.114633s
16 : Statistics :: Grounding time = 0.086325s, Solving time = 0.032177s, Total time = 0.118502s
17 : Statistics :: Grounding time = 0.089592s, Solving time = 0.031957s, Total time = 0.121549s
18 : Statistics :: Grounding time = 0.093070s, Solving time = 0.038780s, Total time = 0.131850s
19 : Statistics :: Grounding time = 0.095646s, Solving time = 0.051045s, Total time = 0.146690s
20 : Statistics :: Grounding time = 0.092938s, Solving time = 0.050684s, Total time = 0.143623s
21 : Statistics :: Grounding time = 0.092575s, Solving time = 0.065053s, Total time = 0.157627s
22 : Statistics :: Grounding time = 0.093788s, Solving time = 0.066871s, Total time = 0.160659s

[16-02-2021_16-44-27] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.921107s, Solving time = 0.569513s, Total time = 2.592940s
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-44-28] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)

[16-02-2021_16-44-28] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.737119s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.384632s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     2.592940s : Steps =    22 : Actions =    22 |  
  ====================================================================  

[16-02-2021_16-44-28] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-44-28] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-44-28] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-44-28] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-44-28] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-44-28] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-44-28] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-44-28] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Instantiated.

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> The logic program was extended with 22 rules into program part plan_module(step, start).

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> The logic program was extended with 3656 rules into program part state_module(step).

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=22, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 22], range_=IncRange(start=22, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 22, Max end step = None
Step inc = 1, Step inc init = 24, Stop con = StopCondition.Satisfiable

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Program building started.

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Program building completed.

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding base program parts.

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.022866s.

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving base program parts.

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.003674s.

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Incremental solving started.

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [1]:
Current step bound = 23
End step min = 22
End step max = None

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [23]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 22]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 22]), ('conformance_module', [23])].

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.315978s.

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.034863s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [2]:
Current step bound = 24
End step min = 22
End step max = None

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 22]), ('conformance_module', [24])].

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.069661s.

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.007412s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [3]:
Current step bound = 25
End step min = 22
End step max = None

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 22]), ('conformance_module', [25])].

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.069886s.

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.008923s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [4]:
Current step bound = 26
End step min = 22
End step max = None

[16-02-2021_16-44-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 22]), ('conformance_module', [26])].

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.072790s.

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.010640s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [5]:
Current step bound = 27
End step min = 22
End step max = None

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 22]), ('conformance_module', [27])].

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.074028s.

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.013460s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [6]:
Current step bound = 28
End step min = 22
End step max = None

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 22]), ('conformance_module', [28])].

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.076846s.

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.015752s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [7]:
Current step bound = 29
End step min = 22
End step max = None

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 22]), ('conformance_module', [29])].

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.082394s.

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.015560s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [8]:
Current step bound = 30
End step min = 22
End step max = None

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 22]), ('conformance_module', [30])].

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.083797s.

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.017576s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [9]:
Current step bound = 31
End step min = 22
End step max = None

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 22]), ('conformance_module', [31])].

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.084584s.

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.017091s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [10]:
Current step bound = 32
End step min = 22
End step max = None

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 22]), ('conformance_module', [32])].

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.086789s.

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.018986s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [11]:
Current step bound = 33
End step min = 22
End step max = None

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 22]), ('conformance_module', [33])].

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.087122s.

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.018211s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [12]:
Current step bound = 34
End step min = 22
End step max = None

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 22]), ('conformance_module', [34])].

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.090010s.

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.019325s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [13]:
Current step bound = 35
End step min = 22
End step max = None

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 22]), ('conformance_module', [35])].

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.091215s.

[16-02-2021_16-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.021251s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [14]:
Current step bound = 36
End step min = 22
End step max = None

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 22]), ('conformance_module', [36])].

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.092376s.

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.023304s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [15]:
Current step bound = 37
End step min = 22
End step max = None

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 22]), ('conformance_module', [37])].

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.093223s.

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.021314s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [16]:
Current step bound = 38
End step min = 22
End step max = None

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 22]), ('conformance_module', [38])].

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.101524s.

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.024091s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [17]:
Current step bound = 39
End step min = 22
End step max = None

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 22]), ('conformance_module', [39])].

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.097110s.

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.033692s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [18]:
Current step bound = 40
End step min = 22
End step max = None

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 22]), ('conformance_module', [40])].

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.098411s.

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.031621s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [19]:
Current step bound = 41
End step min = 22
End step max = None

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 22]), ('conformance_module', [41])].

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.098513s.

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.054481s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [20]:
Current step bound = 42
End step min = 22
End step max = None

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 22]), ('conformance_module', [42])].

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.102038s.

[16-02-2021_16-44-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.078998s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [21]:
Current step bound = 43
End step min = 22
End step max = None

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 22]), ('conformance_module', [43])].

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.100051s.

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.068870s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [22]:
Current step bound = 44
End step min = 22
End step max = None

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 22]), ('conformance_module', [44])].

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.101726s.

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.118480s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [23]:
Current step bound = 45
End step min = 22
End step max = None

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 22]), ('conformance_module', [45])].

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.105321s.

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.132421s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [24]:
Current step bound = 46
End step min = 22
End step max = None

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 22]), ('conformance_module', [46])].

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.104449s.

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.140738s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [25]:
Current step bound = 47
End step min = 22
End step max = None

[16-02-2021_16-44-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 22]), ('conformance_module', [47])].

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.107182s.

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Model found:
Model :: Total atoms = 10450, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.157530s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Incremental solving completed in 3.764137s because STOP_CON_REACHED.

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.509891s, Solving time = 1.108264s, Total time = 3.764137s
Final Model :: Total atoms = 10450, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.315978s, Solving time = 0.034863s, Total time = 0.350841s
2 : Statistics :: Grounding time = 0.069661s, Solving time = 0.007412s, Total time = 0.077073s
3 : Statistics :: Grounding time = 0.069886s, Solving time = 0.008923s, Total time = 0.078809s
4 : Statistics :: Grounding time = 0.072790s, Solving time = 0.010640s, Total time = 0.083431s
5 : Statistics :: Grounding time = 0.074028s, Solving time = 0.013460s, Total time = 0.087489s
6 : Statistics :: Grounding time = 0.076846s, Solving time = 0.015752s, Total time = 0.092597s
7 : Statistics :: Grounding time = 0.082394s, Solving time = 0.015560s, Total time = 0.097955s
8 : Statistics :: Grounding time = 0.083797s, Solving time = 0.017576s, Total time = 0.101374s
9 : Statistics :: Grounding time = 0.084584s, Solving time = 0.017091s, Total time = 0.101676s
10 : Statistics :: Grounding time = 0.086789s, Solving time = 0.018986s, Total time = 0.105775s
11 : Statistics :: Grounding time = 0.087122s, Solving time = 0.018211s, Total time = 0.105332s
12 : Statistics :: Grounding time = 0.090010s, Solving time = 0.019325s, Total time = 0.109335s
13 : Statistics :: Grounding time = 0.091215s, Solving time = 0.021251s, Total time = 0.112466s
14 : Statistics :: Grounding time = 0.092376s, Solving time = 0.023304s, Total time = 0.115680s
15 : Statistics :: Grounding time = 0.093223s, Solving time = 0.021314s, Total time = 0.114537s
16 : Statistics :: Grounding time = 0.101524s, Solving time = 0.024091s, Total time = 0.125615s
17 : Statistics :: Grounding time = 0.097110s, Solving time = 0.033692s, Total time = 0.130803s
18 : Statistics :: Grounding time = 0.098411s, Solving time = 0.031621s, Total time = 0.130032s
19 : Statistics :: Grounding time = 0.098513s, Solving time = 0.054481s, Total time = 0.152994s
20 : Statistics :: Grounding time = 0.102038s, Solving time = 0.078998s, Total time = 0.181037s
21 : Statistics :: Grounding time = 0.100051s, Solving time = 0.068870s, Total time = 0.168921s
22 : Statistics :: Grounding time = 0.101726s, Solving time = 0.118480s, Total time = 0.220206s
23 : Statistics :: Grounding time = 0.105321s, Solving time = 0.132421s, Total time = 0.237742s
24 : Statistics :: Grounding time = 0.104449s, Solving time = 0.140738s, Total time = 0.245187s
25 : Statistics :: Grounding time = 0.107182s, Solving time = 0.157530s, Total time = 0.264712s

[16-02-2021_16-44-32] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 2.509891s, Solving time = 1.108264s, Total time = 3.764137s
Model :: Total atoms = 10450, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-44-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,configure(manipulator_limb_1,retracted),24)
occurs(1,talos,move((store_room,0)),25)
occurs(1,talos,configure(manipulator_limb_2,extended),26)
occurs(1,talos,configure(manipulator_limb_1,extended),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),30)
occurs(1,talos,configure(manipulator_limb_1,retracted),31)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),32)
occurs(1,talos,configure(manipulator_limb_2,retracted),33)
occurs(1,talos,move((store_room,1)),34)
occurs(1,talos,move((hallway,0)),35)
occurs(1,talos,move((hallway,1)),36)
occurs(1,talos,move((hallway,2)),37)
occurs(1,talos,move((puzzle_room,0)),38)
occurs(1,talos,move((puzzle_room,1)),39)
occurs(1,talos,configure(manipulator_limb_2,extended),40)
occurs(1,talos,configure(manipulator_limb_1,extended),41)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),42)
occurs(1,talos,release(manipulator_end_2,(block,6)),43)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),44)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),45)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),46)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),47)

[16-02-2021_16-44-32] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     3.764137s : Steps =    47 : Actions =    47 |  
  ====================================================================  

[16-02-2021_16-44-32] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-44-32] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-44-32] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-44-32] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-44-32] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-44-32] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-44-32] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-44-32] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Instantiated.

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Program building started.

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Program building completed.

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding base program parts.

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding completed in 0.022088s.

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving base program parts.

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving completed in 0.002297s.

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Incremental solving started.

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding completed in 0.135871s.

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving started.

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving completed in 0.020026s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding completed in 0.053861s.

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving started.

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving completed in 0.006376s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-44-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding completed in 0.053074s.

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving started.

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving completed in 0.008397s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding completed in 0.057199s.

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving started.

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving completed in 0.010219s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding completed in 0.063921s.

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving started.

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving completed in 0.010599s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding completed in 0.060820s.

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving started.

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving completed in 0.011142s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding completed in 0.061839s.

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving started.

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving completed in 0.012529s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding completed in 0.066835s.

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving started.

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving completed in 0.012495s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding completed in 0.064487s.

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving started.

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Model found:
Model :: Total atoms = 7583, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving completed in 0.015260s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Incremental solving completed in 0.769691s because STOP_CON_REACHED.

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.639994s, Solving time = 0.109341s, Total time = 0.769691s
Final Model :: Total atoms = 7583, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.135871s, Solving time = 0.020026s, Total time = 0.155897s
2 : Statistics :: Grounding time = 0.053861s, Solving time = 0.006376s, Total time = 0.060237s
3 : Statistics :: Grounding time = 0.053074s, Solving time = 0.008397s, Total time = 0.061472s
4 : Statistics :: Grounding time = 0.057199s, Solving time = 0.010219s, Total time = 0.067418s
5 : Statistics :: Grounding time = 0.063921s, Solving time = 0.010599s, Total time = 0.074520s
6 : Statistics :: Grounding time = 0.060820s, Solving time = 0.011142s, Total time = 0.071962s
7 : Statistics :: Grounding time = 0.061839s, Solving time = 0.012529s, Total time = 0.074367s
8 : Statistics :: Grounding time = 0.066835s, Solving time = 0.012495s, Total time = 0.079330s
9 : Statistics :: Grounding time = 0.064487s, Solving time = 0.015260s, Total time = 0.079747s

[16-02-2021_16-44-33] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.639994s, Solving time = 0.109341s, Total time = 0.769691s
Model :: Total atoms = 7583, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-44-33] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),13)
occurs(2,talos,configure(manipulator_arm_2,retracted),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_2,(block,6)),21)
occurs(2,talos,configure(manipulator_arm_1,extended),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),25)
occurs(2,talos,release(manipulator_arm_1,(block,5)),26)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),27)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),28)
occurs(2,talos,release(manipulator_arm_2,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[16-02-2021_16-44-33] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-44-33] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-44-33] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-44-33] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-44-33] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-44-33] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Instantiated.

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> The logic program was extended with 47 rules into program part plan_module(step, start).

[16-02-2021_16-44-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> The logic program was extended with 7556 rules into program part state_module(step).

[16-02-2021_16-44-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=47, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 47], range_=IncRange(start=47, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 47, Max end step = None
Step inc = 1, Step inc init = 49, Stop con = StopCondition.Satisfiable

[16-02-2021_16-44-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Program building started.

[16-02-2021_16-44-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Program building completed.

[16-02-2021_16-44-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding base program parts.

[16-02-2021_16-44-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding completed in 0.030188s.

[16-02-2021_16-44-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving base program parts.

[16-02-2021_16-44-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving completed in 0.003911s.

[16-02-2021_16-44-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Incremental solving started.

[16-02-2021_16-44-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Beginning Incremental call [1]:
Current step bound = 48
End step min = 47
End step max = None

[16-02-2021_16-44-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding program parts: [('check', [48]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('state_module', [46]), ('conformance_module', [46]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 47]), ('conformance_module', [47]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 47]), ('conformance_module', [48])].

[16-02-2021_16-44-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding completed in 0.478228s.

[16-02-2021_16-44-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving started.

[16-02-2021_16-44-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving completed in 0.060713s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Beginning Incremental call [2]:
Current step bound = 49
End step min = 47
End step max = None

[16-02-2021_16-44-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 47]), ('conformance_module', [49])].

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding completed in 0.079893s.

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving started.

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving completed in 0.009620s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Beginning Incremental call [3]:
Current step bound = 50
End step min = 47
End step max = None

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 47]), ('conformance_module', [50])].

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding completed in 0.077327s.

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving started.

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving completed in 0.011880s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Beginning Incremental call [4]:
Current step bound = 51
End step min = 47
End step max = None

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 47]), ('conformance_module', [51])].

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding completed in 0.089124s.

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving started.

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving completed in 0.014870s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Beginning Incremental call [5]:
Current step bound = 52
End step min = 47
End step max = None

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 47]), ('conformance_module', [52])].

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding completed in 0.087212s.

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving started.

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Model found:
Model :: Total atoms = 11079, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving completed in 0.020855s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Incremental solving completed in 0.982025s because STOP_CON_REACHED.

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.841972s, Solving time = 0.121849s, Total time = 0.982025s
Final Model :: Total atoms = 11079, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.478228s, Solving time = 0.060713s, Total time = 0.538941s
2 : Statistics :: Grounding time = 0.079893s, Solving time = 0.009620s, Total time = 0.089513s
3 : Statistics :: Grounding time = 0.077327s, Solving time = 0.011880s, Total time = 0.089207s
4 : Statistics :: Grounding time = 0.089124s, Solving time = 0.014870s, Total time = 0.103994s
5 : Statistics :: Grounding time = 0.087212s, Solving time = 0.020855s, Total time = 0.108067s

[16-02-2021_16-44-35] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.841972s, Solving time = 0.121849s, Total time = 0.982025s
Model :: Total atoms = 11079, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-44-35] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,configure(manipulator_limb_1,retracted),24)
occurs(1,talos,move((store_room,0)),25)
occurs(1,talos,configure(manipulator_limb_2,extended),26)
occurs(1,talos,configure(manipulator_limb_1,extended),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),30)
occurs(1,talos,configure(manipulator_limb_1,retracted),31)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),32)
occurs(1,talos,configure(manipulator_limb_2,retracted),33)
occurs(1,talos,move((store_room,1)),34)
occurs(1,talos,move((hallway,0)),35)
occurs(1,talos,move((hallway,1)),36)
occurs(1,talos,move((hallway,2)),37)
occurs(1,talos,move((puzzle_room,0)),38)
occurs(1,talos,move((puzzle_room,1)),39)
occurs(1,talos,configure(manipulator_limb_2,extended),40)
occurs(1,talos,configure(manipulator_limb_1,extended),41)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),42)
occurs(1,talos,release(manipulator_end_2,(block,6)),43)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),44)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),45)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),46)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),47)
occurs(1,talos,release(manipulator_end_1,(block,5)),48)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),49)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),50)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),51)
occurs(1,talos,release(manipulator_end_2,(block,3)),52)

[16-02-2021_16-44-35] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.769691s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     0.982025s : Steps =    52 : Actions =    52 |  
  ====================================================================  

[16-02-2021_16-44-35] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-44-35] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-44-35] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-44-35] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-44-35] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-44-35] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-44-35] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-44-35] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Instantiated.

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-44-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> The logic program was extended with 52 rules into program part plan_module(step, start).

[16-02-2021_16-44-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> The logic program was extended with 8336 rules into program part state_module(step).

[16-02-2021_16-44-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=52, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 52], range_=IncRange(start=52, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 52, Max end step = None
Step inc = 1, Step inc init = 54, Stop con = StopCondition.Satisfiable

[16-02-2021_16-44-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Program building started.

[16-02-2021_16-44-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Program building completed.

[16-02-2021_16-44-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding base program parts.

[16-02-2021_16-44-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.030983s.

[16-02-2021_16-44-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving base program parts.

[16-02-2021_16-44-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.003288s.

[16-02-2021_16-44-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Incremental solving started.

[16-02-2021_16-44-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [1]:
Current step bound = 53
End step min = 52
End step max = None

[16-02-2021_16-44-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [53]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('state_module', [46]), ('conformance_module', [46]), ('state_module', [47]), ('conformance_module', [47]), ('state_module', [48]), ('conformance_module', [48]), ('state_module', [49]), ('conformance_module', [49]), ('state_module', [50]), ('conformance_module', [50]), ('state_module', [51]), ('conformance_module', [51]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 52]), ('conformance_module', [52]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 52]), ('conformance_module', [53])].

[16-02-2021_16-44-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.511117s.

[16-02-2021_16-44-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.065983s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [2]:
Current step bound = 54
End step min = 52
End step max = None

[16-02-2021_16-44-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 52]), ('conformance_module', [54])].

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.081409s.

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.010105s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [3]:
Current step bound = 55
End step min = 52
End step max = None

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 52]), ('conformance_module', [55])].

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.083424s.

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.014531s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [4]:
Current step bound = 56
End step min = 52
End step max = None

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 52]), ('conformance_module', [56])].

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.087941s.

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.017404s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [5]:
Current step bound = 57
End step min = 52
End step max = None

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 52]), ('conformance_module', [57])].

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.094588s.

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.016930s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [6]:
Current step bound = 58
End step min = 52
End step max = None

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 52]), ('conformance_module', [58])].

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.101997s.

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.018917s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [7]:
Current step bound = 59
End step min = 52
End step max = None

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 52]), ('conformance_module', [59])].

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.094671s.

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.022792s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [8]:
Current step bound = 60
End step min = 52
End step max = None

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 52]), ('conformance_module', [60])].

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.092829s.

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.022119s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [9]:
Current step bound = 61
End step min = 52
End step max = None

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 52]), ('conformance_module', [61])].

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.097241s.

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.024962s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [10]:
Current step bound = 62
End step min = 52
End step max = None

[16-02-2021_16-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 52]), ('conformance_module', [62])].

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.104028s.

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.033153s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [11]:
Current step bound = 63
End step min = 52
End step max = None

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 52]), ('conformance_module', [63])].

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.100233s.

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.034679s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [12]:
Current step bound = 64
End step min = 52
End step max = None

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 52]), ('conformance_module', [64])].

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.102952s.

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.037621s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [13]:
Current step bound = 65
End step min = 52
End step max = None

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 52]), ('conformance_module', [65])].

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.104516s.

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.052169s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [14]:
Current step bound = 66
End step min = 52
End step max = None

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 52]), ('conformance_module', [66])].

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.105298s.

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.058998s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [15]:
Current step bound = 67
End step min = 52
End step max = None

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 52]), ('conformance_module', [67])].

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.106690s.

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.068721s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [16]:
Current step bound = 68
End step min = 52
End step max = None

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 52]), ('conformance_module', [68])].

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.106371s.

[16-02-2021_16-44-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.144434s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [17]:
Current step bound = 69
End step min = 52
End step max = None

[16-02-2021_16-44-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 52]), ('conformance_module', [69])].

[16-02-2021_16-44-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.108100s.

[16-02-2021_16-44-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.262519s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [18]:
Current step bound = 70
End step min = 52
End step max = None

[16-02-2021_16-44-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 52]), ('conformance_module', [70])].

[16-02-2021_16-44-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.110912s.

[16-02-2021_16-44-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.351213s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [19]:
Current step bound = 71
End step min = 52
End step max = None

[16-02-2021_16-44-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 52]), ('conformance_module', [71])].

[16-02-2021_16-44-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.115014s.

[16-02-2021_16-44-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.585502s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [20]:
Current step bound = 72
End step min = 52
End step max = None

[16-02-2021_16-44-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [72]), ('domain_rules', [72]), ('state_module', [72]), ('plan_module', [72, 52]), ('conformance_module', [72])].

[16-02-2021_16-44-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.114678s.

[16-02-2021_16-44-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 1.090957s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [21]:
Current step bound = 73
End step min = 52
End step max = None

[16-02-2021_16-44-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [73]), ('domain_rules', [73]), ('state_module', [73]), ('plan_module', [73, 52]), ('conformance_module', [73])].

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.116228s.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Model found:
Model :: Total atoms = 15010, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.258969s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Incremental solving completed in 5.919523s because STOP_CON_REACHED.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.571220s, Solving time = 3.195966s, Total time = 5.919523s
Final Model :: Total atoms = 15010, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.511117s, Solving time = 0.065983s, Total time = 0.577100s
2 : Statistics :: Grounding time = 0.081409s, Solving time = 0.010105s, Total time = 0.091514s
3 : Statistics :: Grounding time = 0.083424s, Solving time = 0.014531s, Total time = 0.097955s
4 : Statistics :: Grounding time = 0.087941s, Solving time = 0.017404s, Total time = 0.105345s
5 : Statistics :: Grounding time = 0.094588s, Solving time = 0.016930s, Total time = 0.111518s
6 : Statistics :: Grounding time = 0.101997s, Solving time = 0.018917s, Total time = 0.120915s
7 : Statistics :: Grounding time = 0.094671s, Solving time = 0.022792s, Total time = 0.117463s
8 : Statistics :: Grounding time = 0.092829s, Solving time = 0.022119s, Total time = 0.114948s
9 : Statistics :: Grounding time = 0.097241s, Solving time = 0.024962s, Total time = 0.122203s
10 : Statistics :: Grounding time = 0.104028s, Solving time = 0.033153s, Total time = 0.137181s
11 : Statistics :: Grounding time = 0.100233s, Solving time = 0.034679s, Total time = 0.134912s
12 : Statistics :: Grounding time = 0.102952s, Solving time = 0.037621s, Total time = 0.140573s
13 : Statistics :: Grounding time = 0.104516s, Solving time = 0.052169s, Total time = 0.156685s
14 : Statistics :: Grounding time = 0.105298s, Solving time = 0.058998s, Total time = 0.164295s
15 : Statistics :: Grounding time = 0.106690s, Solving time = 0.068721s, Total time = 0.175411s
16 : Statistics :: Grounding time = 0.106371s, Solving time = 0.144434s, Total time = 0.250804s
17 : Statistics :: Grounding time = 0.108100s, Solving time = 0.262519s, Total time = 0.370620s
18 : Statistics :: Grounding time = 0.110912s, Solving time = 0.351213s, Total time = 0.462125s
19 : Statistics :: Grounding time = 0.115014s, Solving time = 0.585502s, Total time = 0.700516s
20 : Statistics :: Grounding time = 0.114678s, Solving time = 1.090957s, Total time = 1.205635s
21 : Statistics :: Grounding time = 0.116228s, Solving time = 0.258969s, Total time = 0.375198s

[16-02-2021_16-44-42] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.571220s, Solving time = 3.195966s, Total time = 5.919523s
Model :: Total atoms = 15010, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-44-42] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,configure(manipulator_limb_1,retracted),24)
occurs(1,talos,move((store_room,0)),25)
occurs(1,talos,configure(manipulator_limb_2,extended),26)
occurs(1,talos,configure(manipulator_limb_1,extended),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),30)
occurs(1,talos,configure(manipulator_limb_1,retracted),31)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),32)
occurs(1,talos,configure(manipulator_limb_2,retracted),33)
occurs(1,talos,move((store_room,1)),34)
occurs(1,talos,move((hallway,0)),35)
occurs(1,talos,move((hallway,1)),36)
occurs(1,talos,move((hallway,2)),37)
occurs(1,talos,move((puzzle_room,0)),38)
occurs(1,talos,move((puzzle_room,1)),39)
occurs(1,talos,configure(manipulator_limb_2,extended),40)
occurs(1,talos,configure(manipulator_limb_1,extended),41)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),42)
occurs(1,talos,release(manipulator_end_2,(block,6)),43)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),44)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),45)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),46)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),47)
occurs(1,talos,release(manipulator_end_1,(block,5)),48)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),49)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),50)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),51)
occurs(1,talos,release(manipulator_end_2,(block,3)),52)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,1)),53)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),54)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),55)
occurs(1,talos,release(manipulator_end_1,(block,4)),56)
occurs(1,talos,put(manipulator_end_2,(block,5),puzzle_room_table_right),57)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),58)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),59)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),60)
occurs(1,talos,release(manipulator_end_1,(block,6)),61)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),62)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),63)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),64)
occurs(1,talos,release(manipulator_end_2,(block,5)),65)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),66)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),67)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),68)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),69)
occurs(1,talos,release(manipulator_end_2,(block,2)),70)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),71)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),72)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),73)

[16-02-2021_16-44-42] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     5.919523s : Steps =    73 : Actions =    73 |  
  ====================================================================  

[16-02-2021_16-44-42] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-44-42] INFO :: Experiment >> 

      ================================================      
           Experimental run 17 : Time 21.437576s            
      ================================================      

[16-02-2021_16-44-42] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-44-42] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-44-42] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-44-42] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-44-42] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-44-42] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Instantiated.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Program building started.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Program building completed.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding base program parts.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.014165s.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving base program parts.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.002564s.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Incremental solving started.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.040340s.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.005739s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.034550s.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.003119s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.032231s.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.003969s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.034639s.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.004910s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.035037s.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.005245s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.036510s.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.006372s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.038127s.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.006905s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.037163s.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.009526s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.038440s.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.010241s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.040323s.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.010781s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-44-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.043417s.

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.016150s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.041208s.

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.022703s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.039487s.

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.028443s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.041312s.

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.043740s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.043177s.

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.064084s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.079990s.

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.121502s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.091352s.

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.171162s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.085832s.

[16-02-2021_16-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.188853s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Incremental solving completed in 1.616245s because STOP_CON_REACHED.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.847300s, Solving time = 0.726010s, Total time = 1.616245s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.040340s, Solving time = 0.005739s, Total time = 0.046079s
2 : Statistics :: Grounding time = 0.034550s, Solving time = 0.003119s, Total time = 0.037669s
3 : Statistics :: Grounding time = 0.032231s, Solving time = 0.003969s, Total time = 0.036201s
4 : Statistics :: Grounding time = 0.034639s, Solving time = 0.004910s, Total time = 0.039549s
5 : Statistics :: Grounding time = 0.035037s, Solving time = 0.005245s, Total time = 0.040282s
6 : Statistics :: Grounding time = 0.036510s, Solving time = 0.006372s, Total time = 0.042882s
7 : Statistics :: Grounding time = 0.038127s, Solving time = 0.006905s, Total time = 0.045032s
8 : Statistics :: Grounding time = 0.037163s, Solving time = 0.009526s, Total time = 0.046689s
9 : Statistics :: Grounding time = 0.038440s, Solving time = 0.010241s, Total time = 0.048681s
10 : Statistics :: Grounding time = 0.040323s, Solving time = 0.010781s, Total time = 0.051104s
11 : Statistics :: Grounding time = 0.043417s, Solving time = 0.016150s, Total time = 0.059567s
12 : Statistics :: Grounding time = 0.041208s, Solving time = 0.022703s, Total time = 0.063912s
13 : Statistics :: Grounding time = 0.039487s, Solving time = 0.028443s, Total time = 0.067930s
14 : Statistics :: Grounding time = 0.041312s, Solving time = 0.043740s, Total time = 0.085052s
15 : Statistics :: Grounding time = 0.043177s, Solving time = 0.064084s, Total time = 0.107261s
16 : Statistics :: Grounding time = 0.079990s, Solving time = 0.121502s, Total time = 0.201493s
17 : Statistics :: Grounding time = 0.091352s, Solving time = 0.171162s, Total time = 0.262514s
18 : Statistics :: Grounding time = 0.085832s, Solving time = 0.188853s, Total time = 0.274685s

[16-02-2021_16-44-44] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.847300s, Solving time = 0.726010s, Total time = 1.616245s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-44-44] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),7)
occurs(3,talos,release(manipulator_arm_2,(block,5)),8)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),9)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),10)
occurs(3,talos,release(manipulator_arm_2,(block,3)),11)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),12)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[16-02-2021_16-44-44] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-44-44] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-44-44] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-44-44] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-44-44] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-44-44] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Instantiated.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Program building started.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Program building completed.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding base program parts.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.017129s.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving base program parts.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.001683s.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Incremental solving started.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.077020s.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.005337s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.045505s.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.003595s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.047209s.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.004442s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.046953s.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.006452s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.050749s.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.007913s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.053252s.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.008894s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.068050s.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.009599s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.060047s.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.009975s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.057032s.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.011065s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.059786s.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.011903s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.060103s.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.013559s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.067099s.

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.015162s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.061423s.

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.018135s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.066172s.

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.020123s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.064075s.

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.018093s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.065968s.

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.020838s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.064453s.

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.024536s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.064248s.

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.028154s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.070816s.

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.052057s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.068717s.

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.057068s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.069016s.

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.069525s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.070788s.

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.085881s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.072004s.

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.112280s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.073453s.

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.151634s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.078413s.

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.148075s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Incremental solving completed in 2.615307s because STOP_CON_REACHED.

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.599480s, Solving time = 0.915979s, Total time = 2.615307s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.077020s, Solving time = 0.005337s, Total time = 0.082356s
2 : Statistics :: Grounding time = 0.045505s, Solving time = 0.003595s, Total time = 0.049100s
3 : Statistics :: Grounding time = 0.047209s, Solving time = 0.004442s, Total time = 0.051651s
4 : Statistics :: Grounding time = 0.046953s, Solving time = 0.006452s, Total time = 0.053405s
5 : Statistics :: Grounding time = 0.050749s, Solving time = 0.007913s, Total time = 0.058662s
6 : Statistics :: Grounding time = 0.053252s, Solving time = 0.008894s, Total time = 0.062146s
7 : Statistics :: Grounding time = 0.068050s, Solving time = 0.009599s, Total time = 0.077649s
8 : Statistics :: Grounding time = 0.060047s, Solving time = 0.009975s, Total time = 0.070022s
9 : Statistics :: Grounding time = 0.057032s, Solving time = 0.011065s, Total time = 0.068098s
10 : Statistics :: Grounding time = 0.059786s, Solving time = 0.011903s, Total time = 0.071689s
11 : Statistics :: Grounding time = 0.060103s, Solving time = 0.013559s, Total time = 0.073662s
12 : Statistics :: Grounding time = 0.067099s, Solving time = 0.015162s, Total time = 0.082261s
13 : Statistics :: Grounding time = 0.061423s, Solving time = 0.018135s, Total time = 0.079558s
14 : Statistics :: Grounding time = 0.066172s, Solving time = 0.020123s, Total time = 0.086295s
15 : Statistics :: Grounding time = 0.064075s, Solving time = 0.018093s, Total time = 0.082168s
16 : Statistics :: Grounding time = 0.065968s, Solving time = 0.020838s, Total time = 0.086806s
17 : Statistics :: Grounding time = 0.064453s, Solving time = 0.024536s, Total time = 0.088990s
18 : Statistics :: Grounding time = 0.064248s, Solving time = 0.028154s, Total time = 0.092401s
19 : Statistics :: Grounding time = 0.070816s, Solving time = 0.052057s, Total time = 0.122874s
20 : Statistics :: Grounding time = 0.068717s, Solving time = 0.057068s, Total time = 0.125785s
21 : Statistics :: Grounding time = 0.069016s, Solving time = 0.069525s, Total time = 0.138541s
22 : Statistics :: Grounding time = 0.070788s, Solving time = 0.085881s, Total time = 0.156669s
23 : Statistics :: Grounding time = 0.072004s, Solving time = 0.112280s, Total time = 0.184284s
24 : Statistics :: Grounding time = 0.073453s, Solving time = 0.151634s, Total time = 0.225087s
25 : Statistics :: Grounding time = 0.078413s, Solving time = 0.148075s, Total time = 0.226488s

[16-02-2021_16-44-46] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.599480s, Solving time = 0.915979s, Total time = 2.615307s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-44-46] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),4)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),14)
occurs(2,talos,configure(manipulator_arm_2,retracted),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),23)
occurs(2,talos,release(manipulator_arm_2,(block,5)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),25)

[16-02-2021_16-44-46] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-44-46] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-44-46] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-44-46] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-44-46] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-44-46] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Instantiated.

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Program building started.

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Program building completed.

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding base program parts.

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.017307s.

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving base program parts.

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.002980s.

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Incremental solving started.

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-44-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.183915s.

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.008955s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.065809s.

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.005727s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.064445s.

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.007151s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.067845s.

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.010433s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.079887s.

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.012206s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.074141s.

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.014205s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.074773s.

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.014800s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.080593s.

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.015370s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.078920s.

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.015667s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.080016s.

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.017193s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.082300s.

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.017602s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.088513s.

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.017594s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.083832s.

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.021716s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.087153s.

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.024260s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.087663s.

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.025296s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.089646s.

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.035404s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.091326s.

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.028050s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.088915s.

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.028445s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.092193s.

[16-02-2021_16-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.038837s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.091953s.

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.059307s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.093533s.

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.070968s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.095069s.

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.064365s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.095171s.

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.092365s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.097185s.

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Model found:
Model :: Total atoms = 6742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.135340s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Incremental solving completed in 3.036678s because STOP_CON_REACHED.

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.132105s, Solving time = 0.784238s, Total time = 3.036678s
Final Model :: Total atoms = 6742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.183915s, Solving time = 0.008955s, Total time = 0.192870s
2 : Statistics :: Grounding time = 0.065809s, Solving time = 0.005727s, Total time = 0.071536s
3 : Statistics :: Grounding time = 0.064445s, Solving time = 0.007151s, Total time = 0.071596s
4 : Statistics :: Grounding time = 0.067845s, Solving time = 0.010433s, Total time = 0.078277s
5 : Statistics :: Grounding time = 0.079887s, Solving time = 0.012206s, Total time = 0.092093s
6 : Statistics :: Grounding time = 0.074141s, Solving time = 0.014205s, Total time = 0.088346s
7 : Statistics :: Grounding time = 0.074773s, Solving time = 0.014800s, Total time = 0.089573s
8 : Statistics :: Grounding time = 0.080593s, Solving time = 0.015370s, Total time = 0.095963s
9 : Statistics :: Grounding time = 0.078920s, Solving time = 0.015667s, Total time = 0.094587s
10 : Statistics :: Grounding time = 0.080016s, Solving time = 0.017193s, Total time = 0.097209s
11 : Statistics :: Grounding time = 0.082300s, Solving time = 0.017602s, Total time = 0.099902s
12 : Statistics :: Grounding time = 0.088513s, Solving time = 0.017594s, Total time = 0.106107s
13 : Statistics :: Grounding time = 0.083832s, Solving time = 0.021716s, Total time = 0.105548s
14 : Statistics :: Grounding time = 0.087153s, Solving time = 0.024260s, Total time = 0.111412s
15 : Statistics :: Grounding time = 0.087663s, Solving time = 0.025296s, Total time = 0.112959s
16 : Statistics :: Grounding time = 0.089646s, Solving time = 0.035404s, Total time = 0.125050s
17 : Statistics :: Grounding time = 0.091326s, Solving time = 0.028050s, Total time = 0.119376s
18 : Statistics :: Grounding time = 0.088915s, Solving time = 0.028445s, Total time = 0.117361s
19 : Statistics :: Grounding time = 0.092193s, Solving time = 0.038837s, Total time = 0.131031s
20 : Statistics :: Grounding time = 0.091953s, Solving time = 0.059307s, Total time = 0.151261s
21 : Statistics :: Grounding time = 0.093533s, Solving time = 0.070968s, Total time = 0.164501s
22 : Statistics :: Grounding time = 0.095069s, Solving time = 0.064365s, Total time = 0.159435s
23 : Statistics :: Grounding time = 0.095171s, Solving time = 0.092365s, Total time = 0.187536s
24 : Statistics :: Grounding time = 0.097185s, Solving time = 0.135340s, Total time = 0.232525s

[16-02-2021_16-44-49] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 2.132105s, Solving time = 0.784238s, Total time = 3.036678s
Model :: Total atoms = 6742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-44-50] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),24)

[16-02-2021_16-44-50] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.616245s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.615307s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     3.036678s : Steps =    24 : Actions =    24 |  
  ====================================================================  

[16-02-2021_16-44-50] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-44-50] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-44-50] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-44-50] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-44-50] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-44-50] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-44-50] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-44-50] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Instantiated.

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> The logic program was extended with 24 rules into program part plan_module(step, start).

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> The logic program was extended with 3968 rules into program part state_module(step).

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=24, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 24], range_=IncRange(start=24, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 24, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Program building started.

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Program building completed.

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding base program parts.

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.026115s.

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving base program parts.

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.003719s.

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Incremental solving started.

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 24
End step max = None

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [25]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 24]), ('conformance_module', [25])].

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.328628s.

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.035464s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 24
End step max = None

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 24]), ('conformance_module', [26])].

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.070620s.

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.007197s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 24
End step max = None

[16-02-2021_16-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 24]), ('conformance_module', [27])].

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.070887s.

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.009265s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 24
End step max = None

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 24]), ('conformance_module', [28])].

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.072900s.

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.010261s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 24
End step max = None

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 24]), ('conformance_module', [29])].

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.072866s.

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.012926s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 24
End step max = None

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 24]), ('conformance_module', [30])].

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.078153s.

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.014982s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 24
End step max = None

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 24]), ('conformance_module', [31])].

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.081280s.

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.016076s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 24
End step max = None

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 24]), ('conformance_module', [32])].

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.083411s.

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.016936s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 24
End step max = None

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 24]), ('conformance_module', [33])].

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.087560s.

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.018700s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 24
End step max = None

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 24]), ('conformance_module', [34])].

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.085246s.

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.019202s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 24
End step max = None

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 24]), ('conformance_module', [35])].

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.091513s.

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.018754s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 24
End step max = None

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 24]), ('conformance_module', [36])].

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.090425s.

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.019918s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 24
End step max = None

[16-02-2021_16-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 24]), ('conformance_module', [37])].

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.091296s.

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.019988s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 24
End step max = None

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 24]), ('conformance_module', [38])].

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.093009s.

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.024398s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 24
End step max = None

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 24]), ('conformance_module', [39])].

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.094765s.

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.039546s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [16]:
Current step bound = 40
End step min = 24
End step max = None

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 24]), ('conformance_module', [40])].

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.096319s.

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.035143s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [17]:
Current step bound = 41
End step min = 24
End step max = None

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 24]), ('conformance_module', [41])].

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.096702s.

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.050874s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [18]:
Current step bound = 42
End step min = 24
End step max = None

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 24]), ('conformance_module', [42])].

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.099415s.

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.055235s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [19]:
Current step bound = 43
End step min = 24
End step max = None

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 24]), ('conformance_module', [43])].

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.099250s.

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Model found:
Model :: Total atoms = 9747, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.064247s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Incremental solving completed in 2.496344s because STOP_CON_REACHED.

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.910360s, Solving time = 0.492830s, Total time = 2.496344s
Final Model :: Total atoms = 9747, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.328628s, Solving time = 0.035464s, Total time = 0.364092s
2 : Statistics :: Grounding time = 0.070620s, Solving time = 0.007197s, Total time = 0.077817s
3 : Statistics :: Grounding time = 0.070887s, Solving time = 0.009265s, Total time = 0.080152s
4 : Statistics :: Grounding time = 0.072900s, Solving time = 0.010261s, Total time = 0.083161s
5 : Statistics :: Grounding time = 0.072866s, Solving time = 0.012926s, Total time = 0.085792s
6 : Statistics :: Grounding time = 0.078153s, Solving time = 0.014982s, Total time = 0.093135s
7 : Statistics :: Grounding time = 0.081280s, Solving time = 0.016076s, Total time = 0.097357s
8 : Statistics :: Grounding time = 0.083411s, Solving time = 0.016936s, Total time = 0.100347s
9 : Statistics :: Grounding time = 0.087560s, Solving time = 0.018700s, Total time = 0.106259s
10 : Statistics :: Grounding time = 0.085246s, Solving time = 0.019202s, Total time = 0.104448s
11 : Statistics :: Grounding time = 0.091513s, Solving time = 0.018754s, Total time = 0.110267s
12 : Statistics :: Grounding time = 0.090425s, Solving time = 0.019918s, Total time = 0.110343s
13 : Statistics :: Grounding time = 0.091296s, Solving time = 0.019988s, Total time = 0.111284s
14 : Statistics :: Grounding time = 0.093009s, Solving time = 0.024398s, Total time = 0.117407s
15 : Statistics :: Grounding time = 0.094765s, Solving time = 0.039546s, Total time = 0.134311s
16 : Statistics :: Grounding time = 0.096319s, Solving time = 0.035143s, Total time = 0.131462s
17 : Statistics :: Grounding time = 0.096702s, Solving time = 0.050874s, Total time = 0.147576s
18 : Statistics :: Grounding time = 0.099415s, Solving time = 0.055235s, Total time = 0.154650s
19 : Statistics :: Grounding time = 0.099250s, Solving time = 0.064247s, Total time = 0.163498s

[16-02-2021_16-44-52] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.910360s, Solving time = 0.492830s, Total time = 2.496344s
Model :: Total atoms = 9747, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[16-02-2021_16-44-53] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),24)
occurs(1,talos,configure(manipulator_limb_1,extended),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),26)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),27)
occurs(1,talos,configure(manipulator_limb_2,retracted),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),37)
occurs(1,talos,configure(manipulator_limb_2,extended),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),40)
occurs(1,talos,release(manipulator_end_2,(block,5)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),43)

[16-02-2021_16-44-53] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     2.496344s : Steps =    43 : Actions =    43 |  
  ====================================================================  

[16-02-2021_16-44-53] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-44-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-44-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-44-53] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-44-53] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-44-53] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-44-53] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-44-53] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Instantiated.

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Program building started.

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Program building completed.

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding base program parts.

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding completed in 0.021874s.

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving base program parts.

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving completed in 0.002783s.

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Incremental solving started.

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding completed in 0.136114s.

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving started.

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving completed in 0.019262s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding completed in 0.053844s.

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving started.

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving completed in 0.006166s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding completed in 0.057396s.

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving started.

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving completed in 0.008237s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding completed in 0.057590s.

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving started.

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving completed in 0.009749s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding completed in 0.057958s.

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving started.

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving completed in 0.010617s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding completed in 0.066189s.

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving started.

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving completed in 0.010871s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding completed in 0.060796s.

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving started.

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving completed in 0.012262s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding completed in 0.068377s.

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving started.

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving completed in 0.012069s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding completed in 0.063737s.

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving started.

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Model found:
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving completed in 0.015057s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Incremental solving completed in 0.771760s because STOP_CON_REACHED.

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.643875s, Solving time = 0.107071s, Total time = 0.771760s
Final Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.136114s, Solving time = 0.019262s, Total time = 0.155376s
2 : Statistics :: Grounding time = 0.053844s, Solving time = 0.006166s, Total time = 0.060010s
3 : Statistics :: Grounding time = 0.057396s, Solving time = 0.008237s, Total time = 0.065633s
4 : Statistics :: Grounding time = 0.057590s, Solving time = 0.009749s, Total time = 0.067339s
5 : Statistics :: Grounding time = 0.057958s, Solving time = 0.010617s, Total time = 0.068575s
6 : Statistics :: Grounding time = 0.066189s, Solving time = 0.010871s, Total time = 0.077059s
7 : Statistics :: Grounding time = 0.060796s, Solving time = 0.012262s, Total time = 0.073058s
8 : Statistics :: Grounding time = 0.068377s, Solving time = 0.012069s, Total time = 0.080446s
9 : Statistics :: Grounding time = 0.063737s, Solving time = 0.015057s, Total time = 0.078794s

[16-02-2021_16-44-54] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.643875s, Solving time = 0.107071s, Total time = 0.771760s
Model :: Total atoms = 7579, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-44-54] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),4)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),14)
occurs(2,talos,configure(manipulator_arm_2,retracted),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),23)
occurs(2,talos,release(manipulator_arm_2,(block,5)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),25)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),26)
occurs(2,talos,release(manipulator_arm_2,(block,3)),27)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),28)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[16-02-2021_16-44-54] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-44-54] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-44-54] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-44-54] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-44-54] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-44-54] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Instantiated.

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> The logic program was extended with 43 rules into program part plan_module(step, start).

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> The logic program was extended with 6932 rules into program part state_module(step).

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=43, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 43], range_=IncRange(start=43, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 43, Max end step = None
Step inc = 1, Step inc init = 45, Stop con = StopCondition.Satisfiable

[16-02-2021_16-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Program building started.

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Program building completed.

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding base program parts.

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding completed in 0.030112s.

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving base program parts.

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving completed in 0.003631s.

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Incremental solving started.

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Beginning Incremental call [1]:
Current step bound = 44
End step min = 43
End step max = None

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding program parts: [('check', [44]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 43]), ('conformance_module', [43]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 43]), ('conformance_module', [44])].

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding completed in 0.449649s.

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving started.

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving completed in 0.054195s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Beginning Incremental call [2]:
Current step bound = 45
End step min = 43
End step max = None

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 43]), ('conformance_module', [45])].

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding completed in 0.077302s.

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving started.

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving completed in 0.008912s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Beginning Incremental call [3]:
Current step bound = 46
End step min = 43
End step max = None

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 43]), ('conformance_module', [46])].

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding completed in 0.080244s.

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving started.

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving completed in 0.012621s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Beginning Incremental call [4]:
Current step bound = 47
End step min = 43
End step max = None

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 43]), ('conformance_module', [47])].

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding completed in 0.081859s.

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving started.

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving completed in 0.015357s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Beginning Incremental call [5]:
Current step bound = 48
End step min = 43
End step max = None

[16-02-2021_16-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 43]), ('conformance_module', [48])].

[16-02-2021_16-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding completed in 0.083490s.

[16-02-2021_16-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving started.

[16-02-2021_16-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Model found:
Model :: Total atoms = 10442, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving completed in 0.018182s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Incremental solving completed in 0.932931s because STOP_CON_REACHED.

[16-02-2021_16-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.802657s, Solving time = 0.112899s, Total time = 0.932931s
Final Model :: Total atoms = 10442, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.449649s, Solving time = 0.054195s, Total time = 0.503844s
2 : Statistics :: Grounding time = 0.077302s, Solving time = 0.008912s, Total time = 0.086214s
3 : Statistics :: Grounding time = 0.080244s, Solving time = 0.012621s, Total time = 0.092866s
4 : Statistics :: Grounding time = 0.081859s, Solving time = 0.015357s, Total time = 0.097216s
5 : Statistics :: Grounding time = 0.083490s, Solving time = 0.018182s, Total time = 0.101672s

[16-02-2021_16-44-56] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.802657s, Solving time = 0.112899s, Total time = 0.932931s
Model :: Total atoms = 10442, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-44-56] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),24)
occurs(1,talos,configure(manipulator_limb_1,extended),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),26)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),27)
occurs(1,talos,configure(manipulator_limb_2,retracted),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),37)
occurs(1,talos,configure(manipulator_limb_2,extended),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),40)
occurs(1,talos,release(manipulator_end_2,(block,5)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),43)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),44)
occurs(1,talos,release(manipulator_end_2,(block,3)),45)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),46)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),47)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),48)

[16-02-2021_16-44-56] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.771760s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     0.932931s : Steps =    48 : Actions =    48 |  
  ====================================================================  

[16-02-2021_16-44-56] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-44-56] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-44-56] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-44-56] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-44-56] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-44-56] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-44-56] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-44-56] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Instantiated.

[16-02-2021_16-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> The logic program was extended with 48 rules into program part plan_module(step, start).

[16-02-2021_16-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> The logic program was extended with 7712 rules into program part state_module(step).

[16-02-2021_16-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=48, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 48], range_=IncRange(start=48, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 48, Max end step = None
Step inc = 1, Step inc init = 50, Stop con = StopCondition.Satisfiable

[16-02-2021_16-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Program building started.

[16-02-2021_16-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Program building completed.

[16-02-2021_16-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding base program parts.

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.030716s.

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving base program parts.

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.003551s.

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Incremental solving started.

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [1]:
Current step bound = 49
End step min = 48
End step max = None

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [49]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('state_module', [46]), ('conformance_module', [46]), ('state_module', [47]), ('conformance_module', [47]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 48]), ('conformance_module', [48]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 48]), ('conformance_module', [49])].

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.480801s.

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.061066s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [2]:
Current step bound = 50
End step min = 48
End step max = None

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 48]), ('conformance_module', [50])].

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.078109s.

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.009242s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [3]:
Current step bound = 51
End step min = 48
End step max = None

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 48]), ('conformance_module', [51])].

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.079836s.

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.013243s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [4]:
Current step bound = 52
End step min = 48
End step max = None

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 48]), ('conformance_module', [52])].

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.088588s.

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.016726s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [5]:
Current step bound = 53
End step min = 48
End step max = None

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 48]), ('conformance_module', [53])].

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.088448s.

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.017310s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [6]:
Current step bound = 54
End step min = 48
End step max = None

[16-02-2021_16-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 48]), ('conformance_module', [54])].

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.089920s.

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.018767s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [7]:
Current step bound = 55
End step min = 48
End step max = None

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 48]), ('conformance_module', [55])].

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.093907s.

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.022690s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [8]:
Current step bound = 56
End step min = 48
End step max = None

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 48]), ('conformance_module', [56])].

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.094934s.

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.021425s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [9]:
Current step bound = 57
End step min = 48
End step max = None

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 48]), ('conformance_module', [57])].

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.096470s.

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.024573s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [10]:
Current step bound = 58
End step min = 48
End step max = None

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 48]), ('conformance_module', [58])].

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.096711s.

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.027785s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [11]:
Current step bound = 59
End step min = 48
End step max = None

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 48]), ('conformance_module', [59])].

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.097905s.

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.030699s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [12]:
Current step bound = 60
End step min = 48
End step max = None

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 48]), ('conformance_module', [60])].

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.102225s.

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.038945s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [13]:
Current step bound = 61
End step min = 48
End step max = None

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 48]), ('conformance_module', [61])].

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.100643s.

[16-02-2021_16-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.049662s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [14]:
Current step bound = 62
End step min = 48
End step max = None

[16-02-2021_16-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 48]), ('conformance_module', [62])].

[16-02-2021_16-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.106404s.

[16-02-2021_16-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.072953s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [15]:
Current step bound = 63
End step min = 48
End step max = None

[16-02-2021_16-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 48]), ('conformance_module', [63])].

[16-02-2021_16-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.103997s.

[16-02-2021_16-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.101986s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [16]:
Current step bound = 64
End step min = 48
End step max = None

[16-02-2021_16-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 48]), ('conformance_module', [64])].

[16-02-2021_16-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.107749s.

[16-02-2021_16-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.129996s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [17]:
Current step bound = 65
End step min = 48
End step max = None

[16-02-2021_16-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 48]), ('conformance_module', [65])].

[16-02-2021_16-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.106382s.

[16-02-2021_16-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-45-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.227337s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [18]:
Current step bound = 66
End step min = 48
End step max = None

[16-02-2021_16-45-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 48]), ('conformance_module', [66])].

[16-02-2021_16-45-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.110236s.

[16-02-2021_16-45-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-45-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.449249s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [19]:
Current step bound = 67
End step min = 48
End step max = None

[16-02-2021_16-45-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 48]), ('conformance_module', [67])].

[16-02-2021_16-45-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.115910s.

[16-02-2021_16-45-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-45-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.823988s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [20]:
Current step bound = 68
End step min = 48
End step max = None

[16-02-2021_16-45-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 48]), ('conformance_module', [68])].

[16-02-2021_16-45-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.112205s.

[16-02-2021_16-45-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 1.357247s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [21]:
Current step bound = 69
End step min = 48
End step max = None

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 48]), ('conformance_module', [69])].

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.120656s.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Model found:
Model :: Total atoms = 14358, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.249615s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Incremental solving completed in 6.421348s because STOP_CON_REACHED.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.502752s, Solving time = 3.768055s, Total time = 6.421348s
Final Model :: Total atoms = 14358, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.480801s, Solving time = 0.061066s, Total time = 0.541867s
2 : Statistics :: Grounding time = 0.078109s, Solving time = 0.009242s, Total time = 0.087350s
3 : Statistics :: Grounding time = 0.079836s, Solving time = 0.013243s, Total time = 0.093079s
4 : Statistics :: Grounding time = 0.088588s, Solving time = 0.016726s, Total time = 0.105315s
5 : Statistics :: Grounding time = 0.088448s, Solving time = 0.017310s, Total time = 0.105758s
6 : Statistics :: Grounding time = 0.089920s, Solving time = 0.018767s, Total time = 0.108687s
7 : Statistics :: Grounding time = 0.093907s, Solving time = 0.022690s, Total time = 0.116597s
8 : Statistics :: Grounding time = 0.094934s, Solving time = 0.021425s, Total time = 0.116359s
9 : Statistics :: Grounding time = 0.096470s, Solving time = 0.024573s, Total time = 0.121043s
10 : Statistics :: Grounding time = 0.096711s, Solving time = 0.027785s, Total time = 0.124496s
11 : Statistics :: Grounding time = 0.097905s, Solving time = 0.030699s, Total time = 0.128603s
12 : Statistics :: Grounding time = 0.102225s, Solving time = 0.038945s, Total time = 0.141170s
13 : Statistics :: Grounding time = 0.100643s, Solving time = 0.049662s, Total time = 0.150304s
14 : Statistics :: Grounding time = 0.106404s, Solving time = 0.072953s, Total time = 0.179357s
15 : Statistics :: Grounding time = 0.103997s, Solving time = 0.101986s, Total time = 0.205982s
16 : Statistics :: Grounding time = 0.107749s, Solving time = 0.129996s, Total time = 0.237745s
17 : Statistics :: Grounding time = 0.106382s, Solving time = 0.227337s, Total time = 0.333719s
18 : Statistics :: Grounding time = 0.110236s, Solving time = 0.449249s, Total time = 0.559485s
19 : Statistics :: Grounding time = 0.115910s, Solving time = 0.823988s, Total time = 0.939898s
20 : Statistics :: Grounding time = 0.112205s, Solving time = 1.357247s, Total time = 1.469453s
21 : Statistics :: Grounding time = 0.120656s, Solving time = 0.249615s, Total time = 0.370271s

[16-02-2021_16-45-03] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.502752s, Solving time = 3.768055s, Total time = 6.421348s
Model :: Total atoms = 14358, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[16-02-2021_16-45-03] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),24)
occurs(1,talos,configure(manipulator_limb_1,extended),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),26)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),27)
occurs(1,talos,configure(manipulator_limb_2,retracted),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),37)
occurs(1,talos,configure(manipulator_limb_2,extended),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),40)
occurs(1,talos,release(manipulator_end_2,(block,5)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),43)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),44)
occurs(1,talos,release(manipulator_end_2,(block,3)),45)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),46)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),47)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),48)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),49)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),50)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),51)
occurs(1,talos,release(manipulator_end_1,(block,2)),52)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),53)
occurs(1,talos,put(manipulator_end_2,(block,4),puzzle_room_table_right),54)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),55)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,1)),56)
occurs(1,talos,release(manipulator_end_2,(block,4)),57)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),58)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),59)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),60)
occurs(1,talos,release(manipulator_end_2,(block,6)),61)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),62)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),63)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),64)
occurs(1,talos,release(manipulator_end_1,(block,5)),65)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),66)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),67)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),68)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),69)

[16-02-2021_16-45-03] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     6.421348s : Steps =    69 : Actions =    69 |  
  ====================================================================  

[16-02-2021_16-45-03] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-45-03] INFO :: Experiment >> 

      ================================================      
           Experimental run 18 : Time 21.156952s            
      ================================================      

[16-02-2021_16-45-03] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-45-03] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-45-03] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-45-03] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-45-03] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-45-03] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Instantiated.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Program building started.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Program building completed.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding base program parts.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.014256s.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving base program parts.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.002400s.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Incremental solving started.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.040220s.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.005587s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.031481s.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.003066s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.031311s.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.004607s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.033794s.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.005622s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.035066s.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.005453s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.036716s.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.006670s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.040771s.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.006593s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.039622s.

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.008113s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.038594s.

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.009913s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.040398s.

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.010618s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.039335s.

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.013080s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.041099s.

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.017929s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.040901s.

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.026965s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.043875s.

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.039972s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.042769s.

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.065359s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.077693s.

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.105565s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.080999s.

[16-02-2021_16-45-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.236185s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.083854s.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Model found:
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.144772s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Incremental solving completed in 1.593328s because STOP_CON_REACHED.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.832754s, Solving time = 0.718469s, Total time = 1.593328s
Final Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.040220s, Solving time = 0.005587s, Total time = 0.045806s
2 : Statistics :: Grounding time = 0.031481s, Solving time = 0.003066s, Total time = 0.034548s
3 : Statistics :: Grounding time = 0.031311s, Solving time = 0.004607s, Total time = 0.035918s
4 : Statistics :: Grounding time = 0.033794s, Solving time = 0.005622s, Total time = 0.039416s
5 : Statistics :: Grounding time = 0.035066s, Solving time = 0.005453s, Total time = 0.040519s
6 : Statistics :: Grounding time = 0.036716s, Solving time = 0.006670s, Total time = 0.043386s
7 : Statistics :: Grounding time = 0.040771s, Solving time = 0.006593s, Total time = 0.047364s
8 : Statistics :: Grounding time = 0.039622s, Solving time = 0.008113s, Total time = 0.047735s
9 : Statistics :: Grounding time = 0.038594s, Solving time = 0.009913s, Total time = 0.048507s
10 : Statistics :: Grounding time = 0.040398s, Solving time = 0.010618s, Total time = 0.051016s
11 : Statistics :: Grounding time = 0.039335s, Solving time = 0.013080s, Total time = 0.052415s
12 : Statistics :: Grounding time = 0.041099s, Solving time = 0.017929s, Total time = 0.059028s
13 : Statistics :: Grounding time = 0.040901s, Solving time = 0.026965s, Total time = 0.067866s
14 : Statistics :: Grounding time = 0.043875s, Solving time = 0.039972s, Total time = 0.083847s
15 : Statistics :: Grounding time = 0.042769s, Solving time = 0.065359s, Total time = 0.108129s
16 : Statistics :: Grounding time = 0.077693s, Solving time = 0.105565s, Total time = 0.183258s
17 : Statistics :: Grounding time = 0.080999s, Solving time = 0.236185s, Total time = 0.317184s
18 : Statistics :: Grounding time = 0.083854s, Solving time = 0.144772s, Total time = 0.228627s

[16-02-2021_16-45-05] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.832754s, Solving time = 0.718469s, Total time = 1.593328s
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-45-05] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_1,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),10)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),11)
occurs(3,talos,release(manipulator_arm_2,(block,3)),12)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[16-02-2021_16-45-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-45-05] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-45-05] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-45-05] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-45-05] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-45-05] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Instantiated.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Program building started.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Program building completed.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding base program parts.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.014676s.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving base program parts.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.002066s.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Incremental solving started.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.062920s.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.005016s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.048686s.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.004608s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.046152s.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.005106s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.045523s.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.006644s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.049109s.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.007758s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.051518s.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.009159s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.053754s.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.009796s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.054217s.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.010205s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.056641s.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.010742s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.056530s.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.011065s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.062134s.

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.014217s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.059581s.

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.016042s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.062005s.

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.019069s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.060716s.

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.019015s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.061900s.

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.019108s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.068894s.

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.019740s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.065073s.

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.025632s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.063850s.

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.034494s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.068466s.

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.038056s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.068670s.

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.065436s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-45-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.069605s.

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.075546s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.075314s.

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.097694s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.072267s.

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.102891s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.073584s.

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.125563s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.074104s.

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.106342s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Incremental solving completed in 2.505805s because STOP_CON_REACHED.

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.545890s, Solving time = 0.861008s, Total time = 2.505805s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.062920s, Solving time = 0.005016s, Total time = 0.067936s
2 : Statistics :: Grounding time = 0.048686s, Solving time = 0.004608s, Total time = 0.053294s
3 : Statistics :: Grounding time = 0.046152s, Solving time = 0.005106s, Total time = 0.051258s
4 : Statistics :: Grounding time = 0.045523s, Solving time = 0.006644s, Total time = 0.052166s
5 : Statistics :: Grounding time = 0.049109s, Solving time = 0.007758s, Total time = 0.056866s
6 : Statistics :: Grounding time = 0.051518s, Solving time = 0.009159s, Total time = 0.060677s
7 : Statistics :: Grounding time = 0.053754s, Solving time = 0.009796s, Total time = 0.063550s
8 : Statistics :: Grounding time = 0.054217s, Solving time = 0.010205s, Total time = 0.064422s
9 : Statistics :: Grounding time = 0.056641s, Solving time = 0.010742s, Total time = 0.067383s
10 : Statistics :: Grounding time = 0.056530s, Solving time = 0.011065s, Total time = 0.067595s
11 : Statistics :: Grounding time = 0.062134s, Solving time = 0.014217s, Total time = 0.076351s
12 : Statistics :: Grounding time = 0.059581s, Solving time = 0.016042s, Total time = 0.075623s
13 : Statistics :: Grounding time = 0.062005s, Solving time = 0.019069s, Total time = 0.081074s
14 : Statistics :: Grounding time = 0.060716s, Solving time = 0.019015s, Total time = 0.079731s
15 : Statistics :: Grounding time = 0.061900s, Solving time = 0.019108s, Total time = 0.081008s
16 : Statistics :: Grounding time = 0.068894s, Solving time = 0.019740s, Total time = 0.088634s
17 : Statistics :: Grounding time = 0.065073s, Solving time = 0.025632s, Total time = 0.090706s
18 : Statistics :: Grounding time = 0.063850s, Solving time = 0.034494s, Total time = 0.098344s
19 : Statistics :: Grounding time = 0.068466s, Solving time = 0.038056s, Total time = 0.106522s
20 : Statistics :: Grounding time = 0.068670s, Solving time = 0.065436s, Total time = 0.134106s
21 : Statistics :: Grounding time = 0.069605s, Solving time = 0.075546s, Total time = 0.145151s
22 : Statistics :: Grounding time = 0.075314s, Solving time = 0.097694s, Total time = 0.173009s
23 : Statistics :: Grounding time = 0.072267s, Solving time = 0.102891s, Total time = 0.175158s
24 : Statistics :: Grounding time = 0.073584s, Solving time = 0.125563s, Total time = 0.199147s
25 : Statistics :: Grounding time = 0.074104s, Solving time = 0.106342s, Total time = 0.180446s

[16-02-2021_16-45-07] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.545890s, Solving time = 0.861008s, Total time = 2.505805s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-45-07] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_1,(block,5)),25)

[16-02-2021_16-45-07] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-45-07] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-45-07] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-45-07] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-45-07] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-45-07] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Instantiated.

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Program building started.

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Program building completed.

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding base program parts.

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.016692s.

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving base program parts.

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.002833s.

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Incremental solving started.

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.188205s.

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.008902s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.063528s.

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.005263s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.070113s.

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.007456s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.066927s.

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.010324s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.070580s.

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.012256s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.072476s.

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.013299s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.077577s.

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.014386s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.078334s.

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.015092s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.077788s.

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.016007s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.077929s.

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.016799s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.080060s.

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.017992s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.082646s.

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.017868s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.083865s.

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.021720s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.085195s.

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.024728s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.086952s.

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.025911s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.088222s.

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.030247s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.089054s.

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.031245s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.090625s.

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.041862s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.092130s.

[16-02-2021_16-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.052753s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.095311s.

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Model found:
Model :: Total atoms = 6058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.046049s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Incremental solving completed in 2.252880s because STOP_CON_REACHED.

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.734210s, Solving time = 0.432990s, Total time = 2.252880s
Final Model :: Total atoms = 6058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.188205s, Solving time = 0.008902s, Total time = 0.197107s
2 : Statistics :: Grounding time = 0.063528s, Solving time = 0.005263s, Total time = 0.068791s
3 : Statistics :: Grounding time = 0.070113s, Solving time = 0.007456s, Total time = 0.077569s
4 : Statistics :: Grounding time = 0.066927s, Solving time = 0.010324s, Total time = 0.077251s
5 : Statistics :: Grounding time = 0.070580s, Solving time = 0.012256s, Total time = 0.082835s
6 : Statistics :: Grounding time = 0.072476s, Solving time = 0.013299s, Total time = 0.085776s
7 : Statistics :: Grounding time = 0.077577s, Solving time = 0.014386s, Total time = 0.091963s
8 : Statistics :: Grounding time = 0.078334s, Solving time = 0.015092s, Total time = 0.093426s
9 : Statistics :: Grounding time = 0.077788s, Solving time = 0.016007s, Total time = 0.093795s
10 : Statistics :: Grounding time = 0.077929s, Solving time = 0.016799s, Total time = 0.094728s
11 : Statistics :: Grounding time = 0.080060s, Solving time = 0.017992s, Total time = 0.098052s
12 : Statistics :: Grounding time = 0.082646s, Solving time = 0.017868s, Total time = 0.100514s
13 : Statistics :: Grounding time = 0.083865s, Solving time = 0.021720s, Total time = 0.105584s
14 : Statistics :: Grounding time = 0.085195s, Solving time = 0.024728s, Total time = 0.109923s
15 : Statistics :: Grounding time = 0.086952s, Solving time = 0.025911s, Total time = 0.112863s
16 : Statistics :: Grounding time = 0.088222s, Solving time = 0.030247s, Total time = 0.118469s
17 : Statistics :: Grounding time = 0.089054s, Solving time = 0.031245s, Total time = 0.120299s
18 : Statistics :: Grounding time = 0.090625s, Solving time = 0.041862s, Total time = 0.132487s
19 : Statistics :: Grounding time = 0.092130s, Solving time = 0.052753s, Total time = 0.144883s
20 : Statistics :: Grounding time = 0.095311s, Solving time = 0.046049s, Total time = 0.141360s

[16-02-2021_16-45-10] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.734210s, Solving time = 0.432990s, Total time = 2.252880s
Model :: Total atoms = 6058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-45-10] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,configure(manipulator_limb_2,extended),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)

[16-02-2021_16-45-10] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.593328s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.505805s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     2.252880s : Steps =    20 : Actions =    20 |  
  ====================================================================  

[16-02-2021_16-45-10] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-45-10] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-45-10] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-45-10] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-45-10] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-45-10] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-45-10] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-45-10] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Instantiated.

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> The logic program was extended with 20 rules into program part plan_module(step, start).

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> The logic program was extended with 3344 rules into program part state_module(step).

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=20, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 20], range_=IncRange(start=20, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 20, Max end step = None
Step inc = 1, Step inc init = 22, Stop con = StopCondition.Satisfiable

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Program building started.

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Program building completed.

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding base program parts.

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.022578s.

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving base program parts.

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.003555s.

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Incremental solving started.

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [1]:
Current step bound = 21
End step min = 20
End step max = None

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [21]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 20]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 20]), ('conformance_module', [21])].

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.301488s.

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.032914s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [2]:
Current step bound = 22
End step min = 20
End step max = None

[16-02-2021_16-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 20]), ('conformance_module', [22])].

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.072856s.

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.007161s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [3]:
Current step bound = 23
End step min = 20
End step max = None

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 20]), ('conformance_module', [23])].

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.071351s.

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.007677s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [4]:
Current step bound = 24
End step min = 20
End step max = None

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 20]), ('conformance_module', [24])].

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.072571s.

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.010269s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [5]:
Current step bound = 25
End step min = 20
End step max = None

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 20]), ('conformance_module', [25])].

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.072207s.

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.012481s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [6]:
Current step bound = 26
End step min = 20
End step max = None

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 20]), ('conformance_module', [26])].

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.075466s.

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.014085s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [7]:
Current step bound = 27
End step min = 20
End step max = None

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 20]), ('conformance_module', [27])].

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.083887s.

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.015262s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [8]:
Current step bound = 28
End step min = 20
End step max = None

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 20]), ('conformance_module', [28])].

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.090251s.

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.016370s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [9]:
Current step bound = 29
End step min = 20
End step max = None

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 20]), ('conformance_module', [29])].

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.084632s.

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.017644s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [10]:
Current step bound = 30
End step min = 20
End step max = None

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 20]), ('conformance_module', [30])].

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.084879s.

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.018770s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [11]:
Current step bound = 31
End step min = 20
End step max = None

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 20]), ('conformance_module', [31])].

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.087298s.

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.018446s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [12]:
Current step bound = 32
End step min = 20
End step max = None

[16-02-2021_16-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 20]), ('conformance_module', [32])].

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.088795s.

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.019162s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [13]:
Current step bound = 33
End step min = 20
End step max = None

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 20]), ('conformance_module', [33])].

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.095058s.

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.021345s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [14]:
Current step bound = 34
End step min = 20
End step max = None

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 20]), ('conformance_module', [34])].

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.095686s.

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.021396s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [15]:
Current step bound = 35
End step min = 20
End step max = None

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 20]), ('conformance_module', [35])].

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.100554s.

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.021210s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [16]:
Current step bound = 36
End step min = 20
End step max = None

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 20]), ('conformance_module', [36])].

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.093321s.

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.024254s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [17]:
Current step bound = 37
End step min = 20
End step max = None

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 20]), ('conformance_module', [37])].

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.095575s.

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.032643s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [18]:
Current step bound = 38
End step min = 20
End step max = None

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 20]), ('conformance_module', [38])].

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.097573s.

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.036073s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [19]:
Current step bound = 39
End step min = 20
End step max = None

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 20]), ('conformance_module', [39])].

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.097500s.

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.045818s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [20]:
Current step bound = 40
End step min = 20
End step max = None

[16-02-2021_16-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 20]), ('conformance_module', [40])].

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.103613s.

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.052614s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [21]:
Current step bound = 41
End step min = 20
End step max = None

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 20]), ('conformance_module', [41])].

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.105740s.

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.089962s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [22]:
Current step bound = 42
End step min = 20
End step max = None

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 20]), ('conformance_module', [42])].

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.102779s.

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.103430s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [23]:
Current step bound = 43
End step min = 20
End step max = None

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 20]), ('conformance_module', [43])].

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.110589s.

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.171222s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [24]:
Current step bound = 44
End step min = 20
End step max = None

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 20]), ('conformance_module', [44])].

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.103448s.

[16-02-2021_16-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.211487s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [25]:
Current step bound = 45
End step min = 20
End step max = None

[16-02-2021_16-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 20]), ('conformance_module', [45])].

[16-02-2021_16-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.107679s.

[16-02-2021_16-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[16-02-2021_16-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Model found:
Model :: Total atoms = 10128, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.220253s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Incremental solving completed in 3.905456s because STOP_CON_REACHED.

[16-02-2021_16-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.517371s, Solving time = 1.245504s, Total time = 3.905456s
Final Model :: Total atoms = 10128, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.301488s, Solving time = 0.032914s, Total time = 0.334402s
2 : Statistics :: Grounding time = 0.072856s, Solving time = 0.007161s, Total time = 0.080017s
3 : Statistics :: Grounding time = 0.071351s, Solving time = 0.007677s, Total time = 0.079028s
4 : Statistics :: Grounding time = 0.072571s, Solving time = 0.010269s, Total time = 0.082840s
5 : Statistics :: Grounding time = 0.072207s, Solving time = 0.012481s, Total time = 0.084688s
6 : Statistics :: Grounding time = 0.075466s, Solving time = 0.014085s, Total time = 0.089551s
7 : Statistics :: Grounding time = 0.083887s, Solving time = 0.015262s, Total time = 0.099148s
8 : Statistics :: Grounding time = 0.090251s, Solving time = 0.016370s, Total time = 0.106621s
9 : Statistics :: Grounding time = 0.084632s, Solving time = 0.017644s, Total time = 0.102276s
10 : Statistics :: Grounding time = 0.084879s, Solving time = 0.018770s, Total time = 0.103649s
11 : Statistics :: Grounding time = 0.087298s, Solving time = 0.018446s, Total time = 0.105744s
12 : Statistics :: Grounding time = 0.088795s, Solving time = 0.019162s, Total time = 0.107957s
13 : Statistics :: Grounding time = 0.095058s, Solving time = 0.021345s, Total time = 0.116403s
14 : Statistics :: Grounding time = 0.095686s, Solving time = 0.021396s, Total time = 0.117082s
15 : Statistics :: Grounding time = 0.100554s, Solving time = 0.021210s, Total time = 0.121763s
16 : Statistics :: Grounding time = 0.093321s, Solving time = 0.024254s, Total time = 0.117575s
17 : Statistics :: Grounding time = 0.095575s, Solving time = 0.032643s, Total time = 0.128218s
18 : Statistics :: Grounding time = 0.097573s, Solving time = 0.036073s, Total time = 0.133646s
19 : Statistics :: Grounding time = 0.097500s, Solving time = 0.045818s, Total time = 0.143318s
20 : Statistics :: Grounding time = 0.103613s, Solving time = 0.052614s, Total time = 0.156226s
21 : Statistics :: Grounding time = 0.105740s, Solving time = 0.089962s, Total time = 0.195702s
22 : Statistics :: Grounding time = 0.102779s, Solving time = 0.103430s, Total time = 0.206209s
23 : Statistics :: Grounding time = 0.110589s, Solving time = 0.171222s, Total time = 0.281811s
24 : Statistics :: Grounding time = 0.103448s, Solving time = 0.211487s, Total time = 0.314935s
25 : Statistics :: Grounding time = 0.107679s, Solving time = 0.220253s, Total time = 0.327932s

[16-02-2021_16-45-14] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 2.517371s, Solving time = 1.245504s, Total time = 3.905456s
Model :: Total atoms = 10128, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-45-14] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,configure(manipulator_limb_2,extended),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,retracted),21)
occurs(1,talos,configure(manipulator_limb_1,retracted),22)
occurs(1,talos,move((store_room,0)),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,configure(manipulator_limb_1,extended),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),26)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),30)
occurs(1,talos,configure(manipulator_limb_1,retracted),31)
occurs(1,talos,move((store_room,1)),32)
occurs(1,talos,move((hallway,0)),33)
occurs(1,talos,move((hallway,1)),34)
occurs(1,talos,move((hallway,2)),35)
occurs(1,talos,move((puzzle_room,0)),36)
occurs(1,talos,move((puzzle_room,1)),37)
occurs(1,talos,configure(manipulator_limb_2,extended),38)
occurs(1,talos,configure(manipulator_limb_1,extended),39)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),40)
occurs(1,talos,release(manipulator_end_2,(block,6)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),43)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),44)
occurs(1,talos,release(manipulator_end_1,(block,5)),45)

[16-02-2021_16-45-14] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     3.905456s : Steps =    45 : Actions =    45 |  
  ====================================================================  

[16-02-2021_16-45-14] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-45-14] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-45-14] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-45-14] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-45-14] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-45-14] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-45-14] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-45-14] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Instantiated.

[16-02-2021_16-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Program building started.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Program building completed.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding base program parts.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding completed in 0.021169s.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving base program parts.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving completed in 0.002995s.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Incremental solving started.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding completed in 0.140981s.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving started.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving completed in 0.019312s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding completed in 0.054006s.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving started.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving completed in 0.006394s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding completed in 0.053643s.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving started.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving completed in 0.008708s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding completed in 0.062358s.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving started.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving completed in 0.009836s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding completed in 0.059080s.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving started.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving completed in 0.010939s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding completed in 0.062491s.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving started.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving completed in 0.011179s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding completed in 0.061772s.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving started.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving completed in 0.012234s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding completed in 0.065080s.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving started.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving completed in 0.012272s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding completed in 0.063942s.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving started.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Model found:
Model :: Total atoms = 7577, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving completed in 0.015234s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Incremental solving completed in 0.774215s because STOP_CON_REACHED.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.644522s, Solving time = 0.109102s, Total time = 0.774215s
Final Model :: Total atoms = 7577, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.140981s, Solving time = 0.019312s, Total time = 0.160293s
2 : Statistics :: Grounding time = 0.054006s, Solving time = 0.006394s, Total time = 0.060400s
3 : Statistics :: Grounding time = 0.053643s, Solving time = 0.008708s, Total time = 0.062351s
4 : Statistics :: Grounding time = 0.062358s, Solving time = 0.009836s, Total time = 0.072194s
5 : Statistics :: Grounding time = 0.059080s, Solving time = 0.010939s, Total time = 0.070019s
6 : Statistics :: Grounding time = 0.062491s, Solving time = 0.011179s, Total time = 0.073670s
7 : Statistics :: Grounding time = 0.061772s, Solving time = 0.012234s, Total time = 0.074006s
8 : Statistics :: Grounding time = 0.065080s, Solving time = 0.012272s, Total time = 0.077352s
9 : Statistics :: Grounding time = 0.063942s, Solving time = 0.015234s, Total time = 0.079176s

[16-02-2021_16-45-15] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.644522s, Solving time = 0.109102s, Total time = 0.774215s
Model :: Total atoms = 7577, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-45-15] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_1,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),26)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),27)
occurs(2,talos,release(manipulator_arm_2,(block,3)),28)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[16-02-2021_16-45-15] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-45-15] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-45-15] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-45-15] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-45-15] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-45-15] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Instantiated.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> The logic program was extended with 45 rules into program part plan_module(step, start).

[16-02-2021_16-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> The logic program was extended with 7244 rules into program part state_module(step).

[16-02-2021_16-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=45, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 45], range_=IncRange(start=45, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 45, Max end step = None
Step inc = 1, Step inc init = 47, Stop con = StopCondition.Satisfiable

[16-02-2021_16-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Program building started.

[16-02-2021_16-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Program building completed.

[16-02-2021_16-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding base program parts.

[16-02-2021_16-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding completed in 0.029559s.

[16-02-2021_16-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving base program parts.

[16-02-2021_16-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving completed in 0.003669s.

[16-02-2021_16-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Incremental solving started.

[16-02-2021_16-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Beginning Incremental call [1]:
Current step bound = 46
End step min = 45
End step max = None

[16-02-2021_16-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding program parts: [('check', [46]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 45]), ('conformance_module', [45]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 45]), ('conformance_module', [46])].

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding completed in 0.456058s.

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving started.

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving completed in 0.060658s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Beginning Incremental call [2]:
Current step bound = 47
End step min = 45
End step max = None

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 45]), ('conformance_module', [47])].

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding completed in 0.077914s.

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving started.

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving completed in 0.009466s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Beginning Incremental call [3]:
Current step bound = 48
End step min = 45
End step max = None

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 45]), ('conformance_module', [48])].

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding completed in 0.076138s.

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving started.

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving completed in 0.012606s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Beginning Incremental call [4]:
Current step bound = 49
End step min = 45
End step max = None

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 45]), ('conformance_module', [49])].

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding completed in 0.088677s.

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving started.

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving completed in 0.015253s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Beginning Incremental call [5]:
Current step bound = 50
End step min = 45
End step max = None

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 45]), ('conformance_module', [50])].

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding completed in 0.090375s.

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving started.

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Model found:
Model :: Total atoms = 10758, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving completed in 0.018514s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Incremental solving completed in 0.956055s because STOP_CON_REACHED.

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.818722s, Solving time = 0.120165s, Total time = 0.956055s
Final Model :: Total atoms = 10758, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.456058s, Solving time = 0.060658s, Total time = 0.516716s
2 : Statistics :: Grounding time = 0.077914s, Solving time = 0.009466s, Total time = 0.087380s
3 : Statistics :: Grounding time = 0.076138s, Solving time = 0.012606s, Total time = 0.088744s
4 : Statistics :: Grounding time = 0.088677s, Solving time = 0.015253s, Total time = 0.103930s
5 : Statistics :: Grounding time = 0.090375s, Solving time = 0.018514s, Total time = 0.108889s

[16-02-2021_16-45-17] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.818722s, Solving time = 0.120165s, Total time = 0.956055s
Model :: Total atoms = 10758, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-45-17] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,configure(manipulator_limb_2,extended),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,retracted),21)
occurs(1,talos,configure(manipulator_limb_1,retracted),22)
occurs(1,talos,move((store_room,0)),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,configure(manipulator_limb_1,extended),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),26)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),30)
occurs(1,talos,configure(manipulator_limb_1,retracted),31)
occurs(1,talos,move((store_room,1)),32)
occurs(1,talos,move((hallway,0)),33)
occurs(1,talos,move((hallway,1)),34)
occurs(1,talos,move((hallway,2)),35)
occurs(1,talos,move((puzzle_room,0)),36)
occurs(1,talos,move((puzzle_room,1)),37)
occurs(1,talos,configure(manipulator_limb_2,extended),38)
occurs(1,talos,configure(manipulator_limb_1,extended),39)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),40)
occurs(1,talos,release(manipulator_end_2,(block,6)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),43)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),44)
occurs(1,talos,release(manipulator_end_1,(block,5)),45)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),46)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),47)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),48)
occurs(1,talos,release(manipulator_end_2,(block,3)),49)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),50)

[16-02-2021_16-45-17] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.774215s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     0.956055s : Steps =    50 : Actions =    50 |  
  ====================================================================  

[16-02-2021_16-45-17] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-45-17] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-45-17] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-45-17] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-45-17] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-45-17] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-45-17] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-45-17] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Instantiated.

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-45-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> The logic program was extended with 50 rules into program part plan_module(step, start).

[16-02-2021_16-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> The logic program was extended with 8024 rules into program part state_module(step).

[16-02-2021_16-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=50, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 50], range_=IncRange(start=50, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 50, Max end step = None
Step inc = 1, Step inc init = 52, Stop con = StopCondition.Satisfiable

[16-02-2021_16-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Program building started.

[16-02-2021_16-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Program building completed.

[16-02-2021_16-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding base program parts.

[16-02-2021_16-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.032464s.

[16-02-2021_16-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving base program parts.

[16-02-2021_16-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.003862s.

[16-02-2021_16-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Incremental solving started.

[16-02-2021_16-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [1]:
Current step bound = 51
End step min = 50
End step max = None

[16-02-2021_16-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [51]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('state_module', [46]), ('conformance_module', [46]), ('state_module', [47]), ('conformance_module', [47]), ('state_module', [48]), ('conformance_module', [48]), ('state_module', [49]), ('conformance_module', [49]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 50]), ('conformance_module', [50]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 50]), ('conformance_module', [51])].

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.499965s.

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.066384s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [2]:
Current step bound = 52
End step min = 50
End step max = None

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 50]), ('conformance_module', [52])].

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.080385s.

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.009338s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [3]:
Current step bound = 53
End step min = 50
End step max = None

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 50]), ('conformance_module', [53])].

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.079547s.

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.013609s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [4]:
Current step bound = 54
End step min = 50
End step max = None

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 50]), ('conformance_module', [54])].

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.087092s.

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.017293s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [5]:
Current step bound = 55
End step min = 50
End step max = None

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 50]), ('conformance_module', [55])].

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.089969s.

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.017328s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [6]:
Current step bound = 56
End step min = 50
End step max = None

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 50]), ('conformance_module', [56])].

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.091124s.

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.019081s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [7]:
Current step bound = 57
End step min = 50
End step max = None

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 50]), ('conformance_module', [57])].

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.094046s.

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.022723s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [8]:
Current step bound = 58
End step min = 50
End step max = None

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 50]), ('conformance_module', [58])].

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.096144s.

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.024637s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [9]:
Current step bound = 59
End step min = 50
End step max = None

[16-02-2021_16-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 50]), ('conformance_module', [59])].

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.095538s.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.028036s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [10]:
Current step bound = 60
End step min = 50
End step max = None

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 50]), ('conformance_module', [60])].

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.098576s.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.039500s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [11]:
Current step bound = 61
End step min = 50
End step max = None

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 50]), ('conformance_module', [61])].

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.099960s.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Model found:
Model :: Total atoms = 12854, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.057076s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Incremental solving completed in 1.819446s because STOP_CON_REACHED.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.444809s, Solving time = 0.318869s, Total time = 1.819446s
Final Model :: Total atoms = 12854, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.499965s, Solving time = 0.066384s, Total time = 0.566349s
2 : Statistics :: Grounding time = 0.080385s, Solving time = 0.009338s, Total time = 0.089723s
3 : Statistics :: Grounding time = 0.079547s, Solving time = 0.013609s, Total time = 0.093156s
4 : Statistics :: Grounding time = 0.087092s, Solving time = 0.017293s, Total time = 0.104385s
5 : Statistics :: Grounding time = 0.089969s, Solving time = 0.017328s, Total time = 0.107297s
6 : Statistics :: Grounding time = 0.091124s, Solving time = 0.019081s, Total time = 0.110205s
7 : Statistics :: Grounding time = 0.094046s, Solving time = 0.022723s, Total time = 0.116770s
8 : Statistics :: Grounding time = 0.096144s, Solving time = 0.024637s, Total time = 0.120781s
9 : Statistics :: Grounding time = 0.095538s, Solving time = 0.028036s, Total time = 0.123574s
10 : Statistics :: Grounding time = 0.098576s, Solving time = 0.039500s, Total time = 0.138077s
11 : Statistics :: Grounding time = 0.099960s, Solving time = 0.057076s, Total time = 0.157036s

[16-02-2021_16-45-20] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.444809s, Solving time = 0.318869s, Total time = 1.819446s
Model :: Total atoms = 12854, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-45-20] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,configure(manipulator_limb_2,extended),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,retracted),21)
occurs(1,talos,configure(manipulator_limb_1,retracted),22)
occurs(1,talos,move((store_room,0)),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,configure(manipulator_limb_1,extended),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),26)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),30)
occurs(1,talos,configure(manipulator_limb_1,retracted),31)
occurs(1,talos,move((store_room,1)),32)
occurs(1,talos,move((hallway,0)),33)
occurs(1,talos,move((hallway,1)),34)
occurs(1,talos,move((hallway,2)),35)
occurs(1,talos,move((puzzle_room,0)),36)
occurs(1,talos,move((puzzle_room,1)),37)
occurs(1,talos,configure(manipulator_limb_2,extended),38)
occurs(1,talos,configure(manipulator_limb_1,extended),39)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),40)
occurs(1,talos,release(manipulator_end_2,(block,6)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),43)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),44)
occurs(1,talos,release(manipulator_end_1,(block,5)),45)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),46)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),47)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),48)
occurs(1,talos,release(manipulator_end_2,(block,3)),49)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),52)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),53)
occurs(1,talos,release(manipulator_end_2,(block,3)),54)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),55)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),56)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),57)
occurs(1,talos,release(manipulator_end_2,(block,2)),58)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),59)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),60)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),61)

[16-02-2021_16-45-20] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.819446s : Steps =    61 : Actions =    61 |  
  ====================================================================  

[16-02-2021_16-45-20] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-45-20] INFO :: Experiment >> 

      ================================================      
           Experimental run 19 : Time 16.903662s            
      ================================================      

[16-02-2021_16-45-20] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[16-02-2021_16-45-20] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[16-02-2021_16-45-20] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[16-02-2021_16-45-20] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[16-02-2021_16-45-20] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-45-20] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Instantiated.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Program building started.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Program building completed.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding base program parts.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.014264s.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving base program parts.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.002414s.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Incremental solving started.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.040054s.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.005679s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.031104s.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.003698s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.033757s.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.004600s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.034898s.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.005166s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.038410s.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.005670s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.037233s.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.006775s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.037573s.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.006866s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.037615s.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.008132s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.038231s.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.011331s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.040401s.

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.010322s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.039498s.

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.012306s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.041270s.

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.016847s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.042355s.

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.027980s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.042388s.

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.038485s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.042991s.

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.059292s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.076554s.

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.105135s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.080673s.

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.166349s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.085650s.

[16-02-2021_16-45-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Model found:
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.066969s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Incremental solving completed in 1.442207s because STOP_CON_REACHED.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.834920s, Solving time = 0.564016s, Total time = 1.442207s
Final Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.040054s, Solving time = 0.005679s, Total time = 0.045733s
2 : Statistics :: Grounding time = 0.031104s, Solving time = 0.003698s, Total time = 0.034802s
3 : Statistics :: Grounding time = 0.033757s, Solving time = 0.004600s, Total time = 0.038357s
4 : Statistics :: Grounding time = 0.034898s, Solving time = 0.005166s, Total time = 0.040064s
5 : Statistics :: Grounding time = 0.038410s, Solving time = 0.005670s, Total time = 0.044080s
6 : Statistics :: Grounding time = 0.037233s, Solving time = 0.006775s, Total time = 0.044007s
7 : Statistics :: Grounding time = 0.037573s, Solving time = 0.006866s, Total time = 0.044439s
8 : Statistics :: Grounding time = 0.037615s, Solving time = 0.008132s, Total time = 0.045748s
9 : Statistics :: Grounding time = 0.038231s, Solving time = 0.011331s, Total time = 0.049563s
10 : Statistics :: Grounding time = 0.040401s, Solving time = 0.010322s, Total time = 0.050723s
11 : Statistics :: Grounding time = 0.039498s, Solving time = 0.012306s, Total time = 0.051804s
12 : Statistics :: Grounding time = 0.041270s, Solving time = 0.016847s, Total time = 0.058117s
13 : Statistics :: Grounding time = 0.042355s, Solving time = 0.027980s, Total time = 0.070335s
14 : Statistics :: Grounding time = 0.042388s, Solving time = 0.038485s, Total time = 0.080873s
15 : Statistics :: Grounding time = 0.042991s, Solving time = 0.059292s, Total time = 0.102283s
16 : Statistics :: Grounding time = 0.076554s, Solving time = 0.105135s, Total time = 0.181689s
17 : Statistics :: Grounding time = 0.080673s, Solving time = 0.166349s, Total time = 0.247022s
18 : Statistics :: Grounding time = 0.085650s, Solving time = 0.066969s, Total time = 0.152619s

[16-02-2021_16-45-22] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.834920s, Solving time = 0.564016s, Total time = 1.442207s
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-45-22] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),9)
occurs(3,talos,release(manipulator_arm_2,(block,5)),10)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),11)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[16-02-2021_16-45-22] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-45-22] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-45-22] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[16-02-2021_16-45-22] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-45-22] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[16-02-2021_16-45-22] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Instantiated.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> The logic program was extended with 9 rules into program part conformance_module(step).

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Program building started.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Program building completed.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding base program parts.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.014661s.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving base program parts.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.002633s.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Incremental solving started.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.062067s.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.005156s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.044352s.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.003820s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.047996s.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.004380s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.046142s.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.006838s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.048773s.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.008365s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.050058s.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.008868s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.059237s.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.009488s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.053603s.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.010199s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.061302s.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.010659s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.055956s.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.011105s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.059195s.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.013618s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.057939s.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.013774s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.062429s.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.015945s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-45-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.062230s.

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.015948s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.062787s.

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.017730s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.069171s.

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.023495s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.069002s.

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.022869s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.063678s.

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.038384s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.070254s.

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.044427s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.069266s.

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.059228s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.069104s.

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.073523s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.070568s.

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.072148s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[16-02-2021_16-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.072921s.

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.083310s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.079262s.

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.108679s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.080316s.

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Model found:
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.146121s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Incremental solving completed in 2.492793s because STOP_CON_REACHED.

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.562272s, Solving time = 0.830711s, Total time = 2.492793s
Final Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.062067s, Solving time = 0.005156s, Total time = 0.067223s
2 : Statistics :: Grounding time = 0.044352s, Solving time = 0.003820s, Total time = 0.048173s
3 : Statistics :: Grounding time = 0.047996s, Solving time = 0.004380s, Total time = 0.052377s
4 : Statistics :: Grounding time = 0.046142s, Solving time = 0.006838s, Total time = 0.052980s
5 : Statistics :: Grounding time = 0.048773s, Solving time = 0.008365s, Total time = 0.057138s
6 : Statistics :: Grounding time = 0.050058s, Solving time = 0.008868s, Total time = 0.058926s
7 : Statistics :: Grounding time = 0.059237s, Solving time = 0.009488s, Total time = 0.068724s
8 : Statistics :: Grounding time = 0.053603s, Solving time = 0.010199s, Total time = 0.063802s
9 : Statistics :: Grounding time = 0.061302s, Solving time = 0.010659s, Total time = 0.071961s
10 : Statistics :: Grounding time = 0.055956s, Solving time = 0.011105s, Total time = 0.067061s
11 : Statistics :: Grounding time = 0.059195s, Solving time = 0.013618s, Total time = 0.072813s
12 : Statistics :: Grounding time = 0.057939s, Solving time = 0.013774s, Total time = 0.071713s
13 : Statistics :: Grounding time = 0.062429s, Solving time = 0.015945s, Total time = 0.078374s
14 : Statistics :: Grounding time = 0.062230s, Solving time = 0.015948s, Total time = 0.078178s
15 : Statistics :: Grounding time = 0.062787s, Solving time = 0.017730s, Total time = 0.080517s
16 : Statistics :: Grounding time = 0.069171s, Solving time = 0.023495s, Total time = 0.092666s
17 : Statistics :: Grounding time = 0.069002s, Solving time = 0.022869s, Total time = 0.091871s
18 : Statistics :: Grounding time = 0.063678s, Solving time = 0.038384s, Total time = 0.102062s
19 : Statistics :: Grounding time = 0.070254s, Solving time = 0.044427s, Total time = 0.114681s
20 : Statistics :: Grounding time = 0.069266s, Solving time = 0.059228s, Total time = 0.128494s
21 : Statistics :: Grounding time = 0.069104s, Solving time = 0.073523s, Total time = 0.142627s
22 : Statistics :: Grounding time = 0.070568s, Solving time = 0.072148s, Total time = 0.142716s
23 : Statistics :: Grounding time = 0.072921s, Solving time = 0.083310s, Total time = 0.156232s
24 : Statistics :: Grounding time = 0.079262s, Solving time = 0.108679s, Total time = 0.187942s
25 : Statistics :: Grounding time = 0.080316s, Solving time = 0.146121s, Total time = 0.226437s

[16-02-2021_16-45-24] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.562272s, Solving time = 0.830711s, Total time = 2.492793s
Model :: Total atoms = 6186, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[16-02-2021_16-45-24] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),7)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_2,retracted),13)
occurs(2,talos,configure(manipulator_arm_1,extended),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),25)

[16-02-2021_16-45-24] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-45-24] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[16-02-2021_16-45-24] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 25

[16-02-2021_16-45-24] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 12

[16-02-2021_16-45-24] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 12

[16-02-2021_16-45-24] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Instantiated.

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> The logic program was extended with 12 rules into program part conformance_module(step).

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Program building started.

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Program building completed.

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding base program parts.

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.016814s.

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving base program parts.

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.002746s.

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Incremental solving started.

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.198350s.

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.008757s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[16-02-2021_16-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.064048s.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.005526s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.064370s.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.006964s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.066964s.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.009937s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.071455s.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.014563s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.072828s.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.012880s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.082462s.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.014246s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.077923s.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.015543s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.079088s.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.016220s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.079979s.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.017003s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.081160s.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.017393s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.082439s.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.018198s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[16-02-2021_16-45-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.083586s.

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.021447s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.085323s.

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.026862s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.091432s.

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.029299s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.087568s.

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.025258s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.088270s.

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.033342s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.090916s.

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.051973s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.092095s.

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.045494s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.091229s.

[16-02-2021_16-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.057743s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.093491s.

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.086449s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.100250s.

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Model found:
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.138501s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Incremental solving completed in 2.718836s because STOP_CON_REACHED.

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.942041s, Solving time = 0.676343s, Total time = 2.718836s
Final Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.198350s, Solving time = 0.008757s, Total time = 0.207107s
2 : Statistics :: Grounding time = 0.064048s, Solving time = 0.005526s, Total time = 0.069574s
3 : Statistics :: Grounding time = 0.064370s, Solving time = 0.006964s, Total time = 0.071335s
4 : Statistics :: Grounding time = 0.066964s, Solving time = 0.009937s, Total time = 0.076901s
5 : Statistics :: Grounding time = 0.071455s, Solving time = 0.014563s, Total time = 0.086018s
6 : Statistics :: Grounding time = 0.072828s, Solving time = 0.012880s, Total time = 0.085709s
7 : Statistics :: Grounding time = 0.082462s, Solving time = 0.014246s, Total time = 0.096708s
8 : Statistics :: Grounding time = 0.077923s, Solving time = 0.015543s, Total time = 0.093466s
9 : Statistics :: Grounding time = 0.079088s, Solving time = 0.016220s, Total time = 0.095307s
10 : Statistics :: Grounding time = 0.079979s, Solving time = 0.017003s, Total time = 0.096982s
11 : Statistics :: Grounding time = 0.081160s, Solving time = 0.017393s, Total time = 0.098552s
12 : Statistics :: Grounding time = 0.082439s, Solving time = 0.018198s, Total time = 0.100637s
13 : Statistics :: Grounding time = 0.083586s, Solving time = 0.021447s, Total time = 0.105033s
14 : Statistics :: Grounding time = 0.085323s, Solving time = 0.026862s, Total time = 0.112185s
15 : Statistics :: Grounding time = 0.091432s, Solving time = 0.029299s, Total time = 0.120731s
16 : Statistics :: Grounding time = 0.087568s, Solving time = 0.025258s, Total time = 0.112826s
17 : Statistics :: Grounding time = 0.088270s, Solving time = 0.033342s, Total time = 0.121612s
18 : Statistics :: Grounding time = 0.090916s, Solving time = 0.051973s, Total time = 0.142889s
19 : Statistics :: Grounding time = 0.092095s, Solving time = 0.045494s, Total time = 0.137589s
20 : Statistics :: Grounding time = 0.091229s, Solving time = 0.057743s, Total time = 0.148973s
21 : Statistics :: Grounding time = 0.093491s, Solving time = 0.086449s, Total time = 0.179940s
22 : Statistics :: Grounding time = 0.100250s, Solving time = 0.138501s, Total time = 0.238751s

[16-02-2021_16-45-27] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.942041s, Solving time = 0.676343s, Total time = 2.718836s
Model :: Total atoms = 6400, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[16-02-2021_16-45-27] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),22)

[16-02-2021_16-45-27] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.442207s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.492793s : Steps =    25 : Actions =    25 |  
  | Level 1 : Time =     2.718836s : Steps =    22 : Actions =    22 |  
  ====================================================================  

[16-02-2021_16-45-27] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-45-27] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-45-27] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-45-27] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 12

[16-02-2021_16-45-27] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 13

[16-02-2021_16-45-27] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 13

[16-02-2021_16-45-27] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 25

[16-02-2021_16-45-27] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Instantiated.

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> The logic program was extended with 25 rules into program part conformance_module(step).

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> The logic program was extended with 22 rules into program part plan_module(step, start).

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> The logic program was extended with 3656 rules into program part state_module(step).

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=22, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 22], range_=IncRange(start=22, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 22, Max end step = None
Step inc = 1, Step inc init = 24, Stop con = StopCondition.Satisfiable

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Program building started.

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Program building completed.

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding base program parts.

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.022950s.

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving base program parts.

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.003728s.

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Incremental solving started.

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [1]:
Current step bound = 23
End step min = 22
End step max = None

[16-02-2021_16-45-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [23]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 22]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 22]), ('conformance_module', [23])].

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.312728s.

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.036481s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [2]:
Current step bound = 24
End step min = 22
End step max = None

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 22]), ('conformance_module', [24])].

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.069192s.

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.007114s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [3]:
Current step bound = 25
End step min = 22
End step max = None

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 22]), ('conformance_module', [25])].

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.069296s.

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.008666s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [4]:
Current step bound = 26
End step min = 22
End step max = None

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 22]), ('conformance_module', [26])].

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.072407s.

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.010082s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [5]:
Current step bound = 27
End step min = 22
End step max = None

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 22]), ('conformance_module', [27])].

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.071817s.

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.012748s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [6]:
Current step bound = 28
End step min = 22
End step max = None

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 22]), ('conformance_module', [28])].

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.076271s.

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.014226s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [7]:
Current step bound = 29
End step min = 22
End step max = None

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 22]), ('conformance_module', [29])].

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.083057s.

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.015718s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [8]:
Current step bound = 30
End step min = 22
End step max = None

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 22]), ('conformance_module', [30])].

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.081830s.

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.016373s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [9]:
Current step bound = 31
End step min = 22
End step max = None

[16-02-2021_16-45-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 22]), ('conformance_module', [31])].

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.083756s.

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.017025s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [10]:
Current step bound = 32
End step min = 22
End step max = None

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 22]), ('conformance_module', [32])].

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.084441s.

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.018123s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [11]:
Current step bound = 33
End step min = 22
End step max = None

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 22]), ('conformance_module', [33])].

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.087272s.

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.018898s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [12]:
Current step bound = 34
End step min = 22
End step max = None

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 22]), ('conformance_module', [34])].

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.092974s.

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.020301s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [13]:
Current step bound = 35
End step min = 22
End step max = None

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 22]), ('conformance_module', [35])].

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.094782s.

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.021445s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [14]:
Current step bound = 36
End step min = 22
End step max = None

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 22]), ('conformance_module', [36])].

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.091856s.

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.029587s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [15]:
Current step bound = 37
End step min = 22
End step max = None

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 22]), ('conformance_module', [37])].

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.094614s.

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.036539s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [16]:
Current step bound = 38
End step min = 22
End step max = None

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 22]), ('conformance_module', [38])].

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.097668s.

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.053701s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [17]:
Current step bound = 39
End step min = 22
End step max = None

[16-02-2021_16-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 22]), ('conformance_module', [39])].

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.097677s.

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.048451s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [18]:
Current step bound = 40
End step min = 22
End step max = None

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 22]), ('conformance_module', [40])].

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.095950s.

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.045510s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [19]:
Current step bound = 41
End step min = 22
End step max = None

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 22]), ('conformance_module', [41])].

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.101878s.

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Model found:
Model :: Total atoms = 9422, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.077869s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Incremental solving completed in 2.488121s because STOP_CON_REACHED.

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.882417s, Solving time = 0.512585s, Total time = 2.488121s
Final Model :: Total atoms = 9422, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.312728s, Solving time = 0.036481s, Total time = 0.349209s
2 : Statistics :: Grounding time = 0.069192s, Solving time = 0.007114s, Total time = 0.076306s
3 : Statistics :: Grounding time = 0.069296s, Solving time = 0.008666s, Total time = 0.077962s
4 : Statistics :: Grounding time = 0.072407s, Solving time = 0.010082s, Total time = 0.082489s
5 : Statistics :: Grounding time = 0.071817s, Solving time = 0.012748s, Total time = 0.084566s
6 : Statistics :: Grounding time = 0.076271s, Solving time = 0.014226s, Total time = 0.090497s
7 : Statistics :: Grounding time = 0.083057s, Solving time = 0.015718s, Total time = 0.098775s
8 : Statistics :: Grounding time = 0.081830s, Solving time = 0.016373s, Total time = 0.098202s
9 : Statistics :: Grounding time = 0.083756s, Solving time = 0.017025s, Total time = 0.100782s
10 : Statistics :: Grounding time = 0.084441s, Solving time = 0.018123s, Total time = 0.102563s
11 : Statistics :: Grounding time = 0.087272s, Solving time = 0.018898s, Total time = 0.106170s
12 : Statistics :: Grounding time = 0.092974s, Solving time = 0.020301s, Total time = 0.113275s
13 : Statistics :: Grounding time = 0.094782s, Solving time = 0.021445s, Total time = 0.116227s
14 : Statistics :: Grounding time = 0.091856s, Solving time = 0.029587s, Total time = 0.121443s
15 : Statistics :: Grounding time = 0.094614s, Solving time = 0.036539s, Total time = 0.131153s
16 : Statistics :: Grounding time = 0.097668s, Solving time = 0.053701s, Total time = 0.151369s
17 : Statistics :: Grounding time = 0.097677s, Solving time = 0.048451s, Total time = 0.146128s
18 : Statistics :: Grounding time = 0.095950s, Solving time = 0.045510s, Total time = 0.141460s
19 : Statistics :: Grounding time = 0.101878s, Solving time = 0.077869s, Total time = 0.179747s

[16-02-2021_16-45-30] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.882417s, Solving time = 0.512585s, Total time = 2.488121s
Model :: Total atoms = 9422, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-45-30] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,configure(manipulator_limb_1,extended),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),38)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),39)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),40)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),41)

[16-02-2021_16-45-30] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     2.488121s : Steps =    41 : Actions =    41 |  
  ====================================================================  

[16-02-2021_16-45-30] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[16-02-2021_16-45-30] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[16-02-2021_16-45-30] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-45-30] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[16-02-2021_16-45-30] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-45-30] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[16-02-2021_16-45-30] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[16-02-2021_16-45-30] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Instantiated.

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> The logic program was extended with 18 rules into program part conformance_module(step).

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> The logic program was extended with 25 rules into program part plan_module(step, start).

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> The logic program was extended with 3749 rules into program part state_module(step).

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=25, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 25], range_=IncRange(start=25, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 25, Max end step = None
Step inc = 1, Step inc init = 27, Stop con = StopCondition.Satisfiable

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Program building started.

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Program building completed.

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding base program parts.

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding completed in 0.021318s.

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving base program parts.

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving completed in 0.002902s.

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Incremental solving started.

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Beginning Incremental call [1]:
Current step bound = 26
End step min = 25
End step max = None

[16-02-2021_16-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding program parts: [('check', [26]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 25]), ('conformance_module', [26])].

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding completed in 0.135543s.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving started.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving completed in 0.019774s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Beginning Incremental call [2]:
Current step bound = 27
End step min = 25
End step max = None

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 25]), ('conformance_module', [27])].

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding completed in 0.054094s.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving started.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving completed in 0.005840s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Beginning Incremental call [3]:
Current step bound = 28
End step min = 25
End step max = None

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 25]), ('conformance_module', [28])].

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding completed in 0.054173s.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving started.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving completed in 0.008647s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Beginning Incremental call [4]:
Current step bound = 29
End step min = 25
End step max = None

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 25]), ('conformance_module', [29])].

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding completed in 0.057668s.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving started.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving completed in 0.009968s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Beginning Incremental call [5]:
Current step bound = 30
End step min = 25
End step max = None

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 25]), ('conformance_module', [30])].

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding completed in 0.060787s.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving started.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving completed in 0.011246s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Beginning Incremental call [6]:
Current step bound = 31
End step min = 25
End step max = None

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 25]), ('conformance_module', [31])].

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding completed in 0.063802s.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving started.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving completed in 0.011173s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Beginning Incremental call [7]:
Current step bound = 32
End step min = 25
End step max = None

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 25]), ('conformance_module', [32])].

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding completed in 0.061452s.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving started.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving completed in 0.012177s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Beginning Incremental call [8]:
Current step bound = 33
End step min = 25
End step max = None

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 25]), ('conformance_module', [33])].

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding completed in 0.064564s.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving started.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving completed in 0.012301s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Beginning Incremental call [9]:
Current step bound = 34
End step min = 25
End step max = None

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 25]), ('conformance_module', [34])].

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding completed in 0.064616s.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving started.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Model found:
Model :: Total atoms = 7583, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving completed in 0.015462s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Incremental solving completed in 0.768305s because STOP_CON_REACHED.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.638017s, Solving time = 0.109490s, Total time = 0.768305s
Final Model :: Total atoms = 7583, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.135543s, Solving time = 0.019774s, Total time = 0.155317s
2 : Statistics :: Grounding time = 0.054094s, Solving time = 0.005840s, Total time = 0.059935s
3 : Statistics :: Grounding time = 0.054173s, Solving time = 0.008647s, Total time = 0.062820s
4 : Statistics :: Grounding time = 0.057668s, Solving time = 0.009968s, Total time = 0.067636s
5 : Statistics :: Grounding time = 0.060787s, Solving time = 0.011246s, Total time = 0.072033s
6 : Statistics :: Grounding time = 0.063802s, Solving time = 0.011173s, Total time = 0.074975s
7 : Statistics :: Grounding time = 0.061452s, Solving time = 0.012177s, Total time = 0.073629s
8 : Statistics :: Grounding time = 0.064564s, Solving time = 0.012301s, Total time = 0.076865s
9 : Statistics :: Grounding time = 0.064616s, Solving time = 0.015462s, Total time = 0.080078s

[16-02-2021_16-45-31] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.638017s, Solving time = 0.109490s, Total time = 0.768305s
Model :: Total atoms = 7583, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-45-31] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),7)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_2,retracted),13)
occurs(2,talos,configure(manipulator_arm_1,extended),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),25)
occurs(2,talos,release(manipulator_arm_2,(block,5)),26)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),27)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),28)
occurs(2,talos,release(manipulator_arm_1,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[16-02-2021_16-45-31] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-45-31] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 25

[16-02-2021_16-45-31] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[16-02-2021_16-45-31] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[16-02-2021_16-45-31] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 29

[16-02-2021_16-45-31] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Instantiated.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> The logic program was extended with 29 rules into program part conformance_module(step).

[16-02-2021_16-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> The logic program was extended with 41 rules into program part plan_module(step, start).

[16-02-2021_16-45-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> The logic program was extended with 6620 rules into program part state_module(step).

[16-02-2021_16-45-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=41, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 41], range_=IncRange(start=41, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 41, Max end step = None
Step inc = 1, Step inc init = 43, Stop con = StopCondition.Satisfiable

[16-02-2021_16-45-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Program building started.

[16-02-2021_16-45-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Program building completed.

[16-02-2021_16-45-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding base program parts.

[16-02-2021_16-45-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding completed in 0.028779s.

[16-02-2021_16-45-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving base program parts.

[16-02-2021_16-45-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving completed in 0.003706s.

[16-02-2021_16-45-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Incremental solving started.

[16-02-2021_16-45-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Beginning Incremental call [1]:
Current step bound = 42
End step min = 41
End step max = None

[16-02-2021_16-45-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding program parts: [('check', [42]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 41]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 41]), ('conformance_module', [42])].

[16-02-2021_16-45-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding completed in 0.436049s.

[16-02-2021_16-45-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving started.

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving completed in 0.054797s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Beginning Incremental call [2]:
Current step bound = 43
End step min = 41
End step max = None

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 41]), ('conformance_module', [43])].

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding completed in 0.076392s.

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving started.

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving completed in 0.008696s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Beginning Incremental call [3]:
Current step bound = 44
End step min = 41
End step max = None

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 41]), ('conformance_module', [44])].

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding completed in 0.077098s.

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving started.

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving completed in 0.011845s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Beginning Incremental call [4]:
Current step bound = 45
End step min = 41
End step max = None

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 41]), ('conformance_module', [45])].

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding completed in 0.081707s.

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving started.

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving completed in 0.014672s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Beginning Incremental call [5]:
Current step bound = 46
End step min = 41
End step max = None

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 41]), ('conformance_module', [46])].

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding completed in 0.088871s.

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving started.

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Model found:
Model :: Total atoms = 10113, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving completed in 0.020543s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Incremental solving completed in 0.920459s because STOP_CON_REACHED.

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.788897s, Solving time = 0.114260s, Total time = 0.920459s
Final Model :: Total atoms = 10113, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.436049s, Solving time = 0.054797s, Total time = 0.490846s
2 : Statistics :: Grounding time = 0.076392s, Solving time = 0.008696s, Total time = 0.085088s
3 : Statistics :: Grounding time = 0.077098s, Solving time = 0.011845s, Total time = 0.088944s
4 : Statistics :: Grounding time = 0.081707s, Solving time = 0.014672s, Total time = 0.096380s
5 : Statistics :: Grounding time = 0.088871s, Solving time = 0.020543s, Total time = 0.109414s

[16-02-2021_16-45-33] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.788897s, Solving time = 0.114260s, Total time = 0.920459s
Model :: Total atoms = 10113, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[16-02-2021_16-45-33] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,configure(manipulator_limb_1,extended),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),38)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),39)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),40)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),41)
occurs(1,talos,release(manipulator_end_2,(block,5)),42)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),43)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),44)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),45)
occurs(1,talos,release(manipulator_end_1,(block,3)),46)

[16-02-2021_16-45-33] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.768305s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =     0.920459s : Steps =    46 : Actions =    46 |  
  ====================================================================  

[16-02-2021_16-45-33] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[16-02-2021_16-45-33] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[16-02-2021_16-45-33] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[16-02-2021_16-45-33] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 29

[16-02-2021_16-45-33] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[16-02-2021_16-45-33] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[16-02-2021_16-45-33] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 34

[16-02-2021_16-45-33] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Instantiated.

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> The logic program was extended with 224 rules into program part ash_initial_state.

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> The logic program was extended with 56 rules into program part ash_goal_state.

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> The logic program was extended with 34 rules into program part conformance_module(step).

[16-02-2021_16-45-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> The logic program was extended with 46 rules into program part plan_module(step, start).

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> The logic program was extended with 7400 rules into program part state_module(step).

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=46, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 46], range_=IncRange(start=46, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 46, Max end step = None
Step inc = 1, Step inc init = 48, Stop con = StopCondition.Satisfiable

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Program building started.

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Program building completed.

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding base program parts.

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.029645s.

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving base program parts.

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.003401s.

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Incremental solving started.

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [1]:
Current step bound = 47
End step min = 46
End step max = None

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [47]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('state_module', [32]), ('conformance_module', [32]), ('state_module', [33]), ('conformance_module', [33]), ('state_module', [34]), ('conformance_module', [34]), ('state_module', [35]), ('conformance_module', [35]), ('state_module', [36]), ('conformance_module', [36]), ('state_module', [37]), ('conformance_module', [37]), ('state_module', [38]), ('conformance_module', [38]), ('state_module', [39]), ('conformance_module', [39]), ('state_module', [40]), ('conformance_module', [40]), ('state_module', [41]), ('conformance_module', [41]), ('state_module', [42]), ('conformance_module', [42]), ('state_module', [43]), ('conformance_module', [43]), ('state_module', [44]), ('conformance_module', [44]), ('state_module', [45]), ('conformance_module', [45]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 46]), ('conformance_module', [46]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 46]), ('conformance_module', [47])].

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.494876s.

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.057611s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [2]:
Current step bound = 48
End step min = 46
End step max = None

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 46]), ('conformance_module', [48])].

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.078344s.

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.009251s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [3]:
Current step bound = 49
End step min = 46
End step max = None

[16-02-2021_16-45-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 46]), ('conformance_module', [49])].

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.079099s.

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.013501s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [4]:
Current step bound = 50
End step min = 46
End step max = None

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 46]), ('conformance_module', [50])].

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.088837s.

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.016527s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [5]:
Current step bound = 51
End step min = 46
End step max = None

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 46]), ('conformance_module', [51])].

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.087558s.

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.016864s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [6]:
Current step bound = 52
End step min = 46
End step max = None

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 46]), ('conformance_module', [52])].

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.090212s.

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.021768s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [7]:
Current step bound = 53
End step min = 46
End step max = None

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 46]), ('conformance_module', [53])].

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.092686s.

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.022677s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [8]:
Current step bound = 54
End step min = 46
End step max = None

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 46]), ('conformance_module', [54])].

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.094486s.

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.024296s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [9]:
Current step bound = 55
End step min = 46
End step max = None

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 46]), ('conformance_module', [55])].

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.096011s.

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.030343s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [10]:
Current step bound = 56
End step min = 46
End step max = None

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 46]), ('conformance_module', [56])].

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.098277s.

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.040745s:
Result = UNSAT, Stop condition = SAT

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [11]:
Current step bound = 57
End step min = 46
End step max = None

[16-02-2021_16-45-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 46]), ('conformance_module', [57])].

[16-02-2021_16-45-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.097562s.

[16-02-2021_16-45-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[16-02-2021_16-45-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Model found:
Model :: Total atoms = 12209, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-45-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.055149s:
Result = SAT, Stop condition = SAT

[16-02-2021_16-45-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Incremental solving completed in 1.794207s because STOP_CON_REACHED.

[16-02-2021_16-45-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.427593s, Solving time = 0.312131s, Total time = 1.794207s
Final Model :: Total atoms = 12209, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-45-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.494876s, Solving time = 0.057611s, Total time = 0.552487s
2 : Statistics :: Grounding time = 0.078344s, Solving time = 0.009251s, Total time = 0.087595s
3 : Statistics :: Grounding time = 0.079099s, Solving time = 0.013501s, Total time = 0.092600s
4 : Statistics :: Grounding time = 0.088837s, Solving time = 0.016527s, Total time = 0.105364s
5 : Statistics :: Grounding time = 0.087558s, Solving time = 0.016864s, Total time = 0.104422s
6 : Statistics :: Grounding time = 0.090212s, Solving time = 0.021768s, Total time = 0.111980s
7 : Statistics :: Grounding time = 0.092686s, Solving time = 0.022677s, Total time = 0.115363s
8 : Statistics :: Grounding time = 0.094486s, Solving time = 0.024296s, Total time = 0.118783s
9 : Statistics :: Grounding time = 0.096011s, Solving time = 0.030343s, Total time = 0.126354s
10 : Statistics :: Grounding time = 0.098277s, Solving time = 0.040745s, Total time = 0.139022s
11 : Statistics :: Grounding time = 0.097562s, Solving time = 0.055149s, Total time = 0.152710s

[16-02-2021_16-45-36] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.427593s, Solving time = 0.312131s, Total time = 1.794207s
Model :: Total atoms = 12209, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[16-02-2021_16-45-36] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,configure(manipulator_limb_1,extended),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),36)
occurs(1,talos,release(manipulator_end_1,(block,6)),37)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),38)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),39)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),40)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),41)
occurs(1,talos,release(manipulator_end_2,(block,5)),42)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),43)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),44)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),45)
occurs(1,talos,release(manipulator_end_1,(block,3)),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),47)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),48)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),49)
occurs(1,talos,release(manipulator_end_1,(block,3)),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),51)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),52)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),53)
occurs(1,talos,release(manipulator_end_1,(block,2)),54)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),55)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),56)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),57)

[16-02-2021_16-45-36] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.794207s : Steps =    57 : Actions =    57 |  
  ====================================================================  

[16-02-2021_16-45-36] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[16-02-2021_16-45-36] INFO :: Experiment >> 

      ================================================      
           Experimental run 20 : Time 15.715237s            
      ================================================      

[16-02-2021_16-45-36] INFO :: Experiment >> 

  ################################################################################################  
      All 20 experimental runs complete : Real time 495.054783s, Proccessing time 1712.812500s      
  ################################################################################################  

[16-02-2021_16-45-36] INFO :: Experiment >> 

          ========================================          
                     Experimental Data                      
          ========================================          

 RU  IT  AL        GT         ST         TT   S   A
  0   1   3  0.832240   0.654908   1.528605  18  18
  0   1   2  1.522892   0.846128   2.466920  25  25
  0   1   1  1.902402   0.588610   2.590806  22  22
  0   2   1  1.915677   0.593867   2.598865  41  41
  0   3   2  0.673566   0.114980   0.808993  34  34
  0   3   1  0.981718   0.114863   1.114467  46  46
  0   4   1  3.095011  14.501883  17.824157  71  71
  1   1   3  0.839913   0.620367   1.502469  18  18
  1   1   2  1.543762   0.913597   2.560634  25  25
  1   1   1  1.935753   0.581476   2.622056  22  22
  1   2   1  2.535940   1.226796   3.912668  47  47
  1   3   2  0.649774   0.107482   0.778245  34  34
  1   3   1  0.833612   0.118528   0.970338  52  52
  1   4   1  3.074434  15.812103  19.121508  77  77
  2   1   3  0.836832   0.734150   1.614686  18  18
  2   1   2  1.559366   0.883481   2.541085  25  25
  2   1   1  1.913619   0.627232   2.645454  22  22
  2   2   1  1.882625   0.516545   2.491895  41  41
  2   3   2  0.639199   0.112703   0.825846  34  34
  2   3   1  0.779578   0.110825   0.907740  46  46
  2   4   1  2.989749  12.352397  15.559526  71  71
  3   1   3  0.828919   0.596203   1.467466  18  18
  3   1   2  1.542976   0.871264   2.516736  25  25
  3   1   1  1.928021   0.614124   2.643388  22  22
  3   2   1  1.880972   0.526232   2.499818  41  41
  3   3   2  0.636633   0.108948   0.766544  34  34
  3   3   1  0.805231   0.108949   0.931640  46  46
  3   4   1  2.948233  11.831541  14.992258  71  71
  4   1   3  0.858193   0.780269   1.683723  18  18
  4   1   2  1.578235   0.813958   2.491515  25  25
  4   1   1  1.924422   0.590384   2.608610  22  22
  4   2   1  1.892149   0.499131   2.486680  41  41
  4   3   2  0.646635   0.111261   0.778155  34  34
  4   3   1  0.790574   0.110453   0.918532  46  46
  4   4   1  1.395635   0.294672   1.743373  57  57
  5   1   3  0.841891   0.664759   1.551862  18  18
  5   1   2  1.478561   0.628691   2.203255  24  24
  5   1   1  1.916762   0.608723   2.634663  22  22
  5   2   1  1.783046   0.507012   2.378560  40  40
  5   3   2  0.708952   0.121917   0.854694  34  34
  5   3   1  0.864205   0.129363   1.013981  46  46
  5   4   1  2.942054  11.487422  14.647699  71  71
  6   1   3  0.839825   0.635902   1.520789  18  18
  6   1   2  1.569527   0.971847   2.643968  25  25
  6   1   1  2.129963   0.811420   3.070376  24  24
  6   2   1  1.894188   0.494848   2.481265  43  43
  6   3   2  0.644328   0.110464   0.775381  34  34
  6   3   1  0.812862   0.115280   0.945825  48  48
  6   4   1  2.506079   4.746990   7.406282  69  69
  7   1   3  0.829967   0.670021   1.545135  18  18
  7   1   2  1.547714   0.799485   2.448725  25  25
  7   1   1  1.928952   0.642198   2.666918  22  22
  7   2   1  1.904996   0.510719   2.503999  41  41
  7   3   2  0.647839   0.108748   0.777757  34  34
  7   3   1  0.771267   0.110320   0.898351  46  46
  7   4   1  3.012789  13.157874  16.398329  71  71
  8   1   3  0.833123   0.712807   1.589840  18  18
  8   1   2  1.560464   0.989105   2.648597  25  25
  8   1   1  1.728508   0.442176   2.253895  20  20
  8   2   1  2.509171   0.943963   3.593150  45  45
  8   3   2  0.640081   0.109035   0.769801  34  34
  8   3   1  0.819668   0.114892   0.953056  50  50
  8   4   1  1.452410   0.301109   1.809019  61  61
  9   1   3  0.832485   0.722731   1.599519  18  18
  9   1   2  1.550386   0.926766   2.577964  25  25
  9   1   1  1.946004   0.633061   2.678504  22  22
  9   2   1  1.925673   0.472121   2.489898  41  41
  9   3   2  0.642368   0.111032   0.774645  34  34
  9   3   1  0.785428   0.108549   0.911140  46  46
  9   4   1  2.989417  16.671090  19.890474  71  71
 10   1   3  0.830400   0.703533   1.577882  18  18
 10   1   2  1.544690   0.817923   2.458765  25  25
 10   1   1  1.742905   0.440600   2.260700  20  20
 10   2   1  2.525279   1.147876   3.815520  45  45
 10   3   2  0.637013   0.110797   0.769272  34  34
 10   3   1  0.829775   0.116928   0.964037  50  50
 10   4   1  1.458219   0.290257   1.803523  61  61
 11   1   3  0.844002   0.577460   1.464978  18  18
 11   1   2  1.555831   0.898551   2.556942  25  25
 11   1   1  2.126610   0.747348   2.992480  24  24
 11   2   1  1.935288   0.492069   2.520440  43  43
 11   3   2  0.653742   0.109203   0.783030  34  34
 11   3   1  0.808166   0.115258   0.941190  48  48
 11   4   1  1.034647   0.165955   1.229611  55  55
 12   1   3  0.828734   0.578923   1.450889  18  18
 12   1   2  1.554607   0.918367   2.573047  25  25
 12   1   1  1.786817   0.425192   2.292974  20  20
 12   2   1  2.476212   1.267226   3.885254  45  45
 12   3   2  0.633640   0.111249   0.766198  34  34
 12   3   1  0.829227   0.116142   0.963600  50  50
 12   4   1  3.019164  13.562120  16.812929  75  75
 13   1   3  0.839034   0.579696   1.461976  18  18
 13   1   2  1.571320   0.848280   2.519237  25  25
 13   1   1  1.921043   0.592480   2.612366  22  22
 13   2   1  2.523569   1.258300   3.932521  47  47
 13   3   2  0.639084   0.111295   0.771183  34  34
 13   3   1  0.832867   0.120555   0.972160  52  52
 13   4   1  1.481610   0.328206   1.865016  63  63
 14   1   3  0.847975   0.652989   1.544057  18  18
 14   1   2  1.546365   0.988040   2.633060  25  25
 14   1   1  2.124391   0.808662   3.056734  24  24
 14   2   1  1.957926   0.548536   2.603168  43  43
 14   3   2  0.663932   0.118255   0.803197  34  34
 14   3   1  0.799581   0.112961   0.930019  48  48
 14   4   1  3.051242  12.771510  16.047168  73  73
 15   1   3  0.839695   0.611335   1.495947  18  18
 15   1   2  1.546613   0.706020   2.351349  25  25
 15   1   1  1.738858   0.445664   2.267161  20  20
 15   2   1  2.510908   1.120233   3.774137  45  45
 15   3   2  0.644761   0.109146   0.775215  34  34
 15   3   1  0.838636   0.114828   0.970942  50  50
 15   4   1  3.002959  15.742792  18.985242  75  75
 16   1   3  0.837764   0.854883   1.737119  18  18
 16   1   2  1.537247   0.748790   2.384632  25  25
 16   1   1  1.921107   0.569513   2.592940  22  22
 16   2   1  2.509891   1.108264   3.764137  47  47
 16   3   2  0.639994   0.109341   0.769691  34  34
 16   3   1  0.841972   0.121849   0.982025  52  52
 16   4   1  2.571220   3.195966   5.919523  73  73
 17   1   3  0.847300   0.726010   1.616245  18  18
 17   1   2  1.599480   0.915979   2.615307  25  25
 17   1   1  2.132105   0.784238   3.036678  24  24
 17   2   1  1.910360   0.492830   2.496344  43  43
 17   3   2  0.643875   0.107071   0.771760  34  34
 17   3   1  0.802657   0.112899   0.932931  48  48
 17   4   1  2.502752   3.768055   6.421348  69  69
 18   1   3  0.832754   0.718469   1.593328  18  18
 18   1   2  1.545890   0.861008   2.505805  25  25
 18   1   1  1.734210   0.432990   2.252880  20  20
 18   2   1  2.517371   1.245504   3.905456  45  45
 18   3   2  0.644522   0.109102   0.774215  34  34
 18   3   1  0.818722   0.120165   0.956055  50  50
 18   4   1  1.444809   0.318869   1.819446  61  61
 19   1   3  0.834920   0.564016   1.442207  18  18
 19   1   2  1.562272   0.830711   2.492793  25  25
 19   1   1  1.942041   0.676343   2.718836  22  22
 19   2   1  1.882417   0.512585   2.488121  41  41
 19   3   2  0.638017   0.109490   0.768305  34  34
 19   3   1  0.788897   0.114260   0.920459  46  46
 19   4   1  1.427593   0.312131   1.794207  57  57

[16-02-2021_16-45-36] INFO :: __main__ >> Exiting with code 0

