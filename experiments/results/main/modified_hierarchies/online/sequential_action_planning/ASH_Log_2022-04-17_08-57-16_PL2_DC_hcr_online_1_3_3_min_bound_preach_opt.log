[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 25 :: Actions = 25                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 24:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 25:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=25

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 1, Current planning level is complete = False

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 25, chosen step range to extract = range(0, 26)

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 29
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  25, AC =  25, CF = 1.0, GT =   2.77s, ST =   1.23s, OT = 0.00s, TT =   4.00s, EF = (LE = 1.8, AC = 1.8), ED = (LE = 1.3, AC = 1.3), EB = (LE = 0.7, AC = 0.7)

[17-04-2022_10-26-36] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=3, plan_length=25, start_step=0, blend=Blend(left=0, right=0)

[17-04-2022_10-26-36] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=1, small_group_size=8, large_group_size=9

[17-04-2022_10-26-36] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=8, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=16, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 3, Problem Range = [1-3], Size = 25, Sub-goal Stage Range = [1-25]
Division points [total=2] : [(Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 16, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 2 solved.

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 1 at level 1:
Total Templated Partial Problems = 3, Problem Range = [1-3], Size = 25, Sub-goal Stage Range = [1-25]
Division points [total=2] : [(Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 16, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-8]

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 25, chosen step range to extract = range(0, 26)

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 29
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 44, chosen step range to extract = range(0, 45)

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 29
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 29
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [1-8], problem number = 1, increment number = 1

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 8)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1782.2008879000014)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [1-8] : Concurrency disabled : Minimum search length bound enabled with value 7

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 8
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 7

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[17-04-2022_10-26-36] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[17-04-2022_10-26-36] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((store_room,0),0,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((store_room,0),0,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((store_room,0),0,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((starting_room,0),0,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((starting_room,0),0,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((starting_room,0),0,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((starting_room,0),0,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((starting_room,0),0,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((starting_room,0),0,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((starting_room,0),0,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 168 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 0).
holds(1, complete_tower(red,puzzle_room_table), false, 0).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0).
holds(1, configuration(manipulator_limb_1), retracted, 0).
holds(1, configuration(manipulator_limb_2), retracted, 0).
holds(1, configuration(puzzle_room_door), closed, 0).
holds(1, configuration(starting_room_door), closed, 0).
holds(1, configuration(store_room_door), closed, 0).
holds(1, grasping(manipulator_arm_1), nothing, 0).
holds(1, grasping(manipulator_arm_2), nothing, 0).
holds(1, grasping(manipulator_end_1), nothing, 0).
holds(1, grasping(manipulator_end_2), nothing, 0).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 0).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 0).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 0).
holds(1, in((block,4)), ((store_room,0),0,0), 0).
holds(1, in((block,5)), ((store_room,0),0,0), 0).
holds(1, in((block,6)), ((store_room,0),0,0), 0).
holds(1, in(manipulator_arm_1), ((starting_room,0),0,0), 0).
holds(1, in(manipulator_arm_2), ((starting_room,0),0,0), 0).
holds(1, in(manipulator_end_1), ((starting_room,0),0,0), 0).
holds(1, in(manipulator_end_2), ((starting_room,0),0,0), 0).
holds(1, in(manipulator_limb_1), ((starting_room,0),0,0), 0).
holds(1, in(manipulator_limb_2), ((starting_room,0),0,0), 0).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 0).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 0).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 0).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 0).
holds(1, in(talos), ((starting_room,0),0,0), 0).
holds(1, in_tower((block,1),(block,1)), true, 0).
holds(1, in_tower((block,1),(block,2)), false, 0).
holds(1, in_tower((block,1),(block,3)), true, 0).
holds(1, in_tower((block,1),(block,4)), false, 0).
holds(1, in_tower((block,1),(block,5)), false, 0).
holds(1, in_tower((block,1),(block,6)), false, 0).
holds(1, in_tower((block,2),(block,1)), false, 0).
holds(1, in_tower((block,2),(block,2)), true, 0).
holds(1, in_tower((block,2),(block,3)), false, 0).
holds(1, in_tower((block,2),(block,4)), false, 0).
holds(1, in_tower((block,2),(block,5)), false, 0).
holds(1, in_tower((block,2),(block,6)), false, 0).
holds(1, in_tower((block,3),(block,1)), false, 0).
holds(1, in_tower((block,3),(block,2)), false, 0).
holds(1, in_tower((block,3),(block,3)), false, 0).
holds(1, in_tower((block,3),(block,4)), false, 0).
holds(1, in_tower((block,3),(block,5)), false, 0).
holds(1, in_tower((block,3),(block,6)), false, 0).
holds(1, in_tower((block,4),(block,1)), false, 0).
holds(1, in_tower((block,4),(block,2)), false, 0).
holds(1, in_tower((block,4),(block,3)), false, 0).
holds(1, in_tower((block,4),(block,4)), false, 0).
holds(1, in_tower((block,4),(block,5)), false, 0).
holds(1, in_tower((block,4),(block,6)), false, 0).
holds(1, in_tower((block,5),(block,1)), false, 0).
holds(1, in_tower((block,5),(block,2)), false, 0).
holds(1, in_tower((block,5),(block,3)), false, 0).
holds(1, in_tower((block,5),(block,4)), false, 0).
holds(1, in_tower((block,5),(block,5)), false, 0).
holds(1, in_tower((block,5),(block,6)), false, 0).
holds(1, in_tower((block,6),(block,1)), false, 0).
holds(1, in_tower((block,6),(block,2)), false, 0).
holds(1, in_tower((block,6),(block,3)), false, 0).
holds(1, in_tower((block,6),(block,4)), false, 0).
holds(1, in_tower((block,6),(block,5)), false, 0).
holds(1, in_tower((block,6),(block,6)), false, 0).
holds(1, on((block,1)), puzzle_room_table_left, 0).
holds(1, on((block,2)), puzzle_room_table_right, 0).
holds(1, on((block,3)), (block,1), 0).
holds(1, on((block,4)), nothing, 0).
holds(1, on((block,5)), nothing, 0).
holds(1, on((block,6)), nothing, 0).
holds(1, tower_base((block,1),puzzle_room_table), true, 0).
holds(1, tower_base((block,2),puzzle_room_table), true, 0).
holds(1, tower_base((block,3),puzzle_room_table), false, 0).
holds(1, tower_base((block,4),puzzle_room_table), false, 0).
holds(1, tower_base((block,5),puzzle_room_table), false, 0).
holds(1, tower_base((block,6),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(2, complete_tower(blue,puzzle_room_table), false, 0).
holds(2, complete_tower(red,puzzle_room_table), false, 0).
holds(2, configuration(manipulator_end_1), aligned_with(nothing), 0).
holds(2, configuration(manipulator_end_2), aligned_with(nothing), 0).
holds(2, configuration(manipulator_limb_1), retracted, 0).
holds(2, configuration(manipulator_limb_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, grasping(manipulator_end_1), nothing, 0).
holds(2, grasping(manipulator_end_2), nothing, 0).
holds(2, in((block,1)), (puzzle_room,1), 0).
holds(2, in((block,2)), (puzzle_room,1), 0).
holds(2, in((block,3)), (puzzle_room,1), 0).
holds(2, in((block,4)), (store_room,0), 0).
holds(2, in((block,5)), (store_room,0), 0).
holds(2, in((block,6)), (store_room,0), 0).
holds(2, in(manipulator_arm_1), (starting_room,0), 0).
holds(2, in(manipulator_arm_2), (starting_room,0), 0).
holds(2, in(manipulator_end_1), (starting_room,0), 0).
holds(2, in(manipulator_end_2), (starting_room,0), 0).
holds(2, in(manipulator_limb_1), (starting_room,0), 0).
holds(2, in(manipulator_limb_2), (starting_room,0), 0).
holds(2, in(puzzle_room_table), (puzzle_room,1), 0).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 0).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 0).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 0).
holds(2, in(talos), (starting_room,0), 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, on((block,1)), puzzle_room_table_left, 0).
holds(2, on((block,2)), puzzle_room_table_right, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, tower_base((block,1),puzzle_room_table), true, 0).
holds(2, tower_base((block,2),puzzle_room_table), true, 0).
holds(2, tower_base((block,3),puzzle_room_table), false, 0).
holds(2, tower_base((block,4),puzzle_room_table), false, 0).
holds(2, tower_base((block,5),puzzle_room_table), false, 0).
holds(2, tower_base((block,6),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 0).

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=7']

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((starting_room,1))', 'F': 'in(talos)', 'V': '(starting_room,1)', 'I': 1})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((hallway,1))', 'F': 'in(talos)', 'V': '(hallway,1)', 'I': 2})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((hallway,2))', 'F': 'in(talos)', 'V': '(hallway,2)', 'I': 3})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'I': 4})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(puzzle_room_door_handle_outer)', 'I': 5})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_end_1)', 'V': 'puzzle_room_door_handle_outer', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'I': 7})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'I': 8})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'I': 8})

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 9 rules into program part base:

sub_goal(2, talos, move((starting_room,1)), in(talos), (starting_room,1), 1).
sub_goal(2, talos, move((hallway,1)), in(talos), (hallway,1), 2).
sub_goal(2, talos, move((hallway,2)), in(talos), (hallway,2), 3).
sub_goal(2, talos, configure(manipulator_limb_1,extended), configuration(manipulator_limb_1), extended, 4).
sub_goal(2, talos, configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)), configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 5).
sub_goal(2, talos, grasp(manipulator_end_1,puzzle_room_door_handle_outer), grasping(manipulator_end_1), puzzle_room_door_handle_outer, 6).
sub_goal(2, talos, actuate(manipulator_end_1,puzzle_room_door), configuration(puzzle_room_door), open, 7).
sub_goal(2, talos, release(manipulator_end_1,puzzle_room_door_handle_outer), configuration(manipulator_end_1), aligned_with(nothing), 8).
sub_goal(2, talos, release(manipulator_end_1,puzzle_room_door_handle_outer), grasping(manipulator_end_1), nothing, 8).

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=7']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001C097F2B940>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=8, step_end_min=8, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1782.2008879000014, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 8, 'sequential', 'false'), range_=None)]

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 854 rules

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004669399999329471s

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.171863s.

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025394s with result Satisfiable.

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001C09BE928B0>

[17-04-2022_10-26-36] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 0)
	('last_sgoals', 8)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001C09BE928B0>)

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 8, sequential, false). %* None *%

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      7
Incrementor step ends | Minimum  =      8 : Maximum =    300

[17-04-2022_10-26-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.645701s.

[17-04-2022_10-26-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.532881s with result Unsatisfiable.

[17-04-2022_10-26-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.1785818000007566, Incremental time limit = None
Running cumulative time = 2.1785818000007566, Cumulative time limit = 1782.2008879000014
Used memory = (RSS = 2350.402344Mb, VMS = 2366.687500Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =      8 : Maximum =    300

[17-04-2022_10-26-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.312797s.

[17-04-2022_10-26-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.047602s with result Unsatisfiable.

[17-04-2022_10-26-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3603997000000163, Incremental time limit = None
Running cumulative time = 2.538981500000773, Cumulative time limit = 1782.2008879000014
Used memory = (RSS = 2353.234375Mb, VMS = 2372.609375Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =      8 : Maximum =    300

[17-04-2022_10-26-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.324020s.

[17-04-2022_10-26-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053551s with result Unsatisfiable.

[17-04-2022_10-26-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.37757149999924877, Incremental time limit = None
Running cumulative time = 2.9165530000000217, Cumulative time limit = 1782.2008879000014
Used memory = (RSS = 2355.578125Mb, VMS = 2373.132812Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =      8 : Maximum =    300

[17-04-2022_10-26-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.330004s.

[17-04-2022_10-26-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.062743s with result Unsatisfiable.

[17-04-2022_10-26-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.39274660000046424, Incremental time limit = None
Running cumulative time = 3.309299600000486, Cumulative time limit = 1782.2008879000014
Used memory = (RSS = 2357.902344Mb, VMS = 2373.656250Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =      8 : Maximum =    300

[17-04-2022_10-26-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.337496s.

[17-04-2022_10-26-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.078559s with result Unsatisfiable.

[17-04-2022_10-26-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.41605489999983547, Incremental time limit = None
Running cumulative time = 3.7253545000003214, Cumulative time limit = 1782.2008879000014
Used memory = (RSS = 2359.925781Mb, VMS = 2375.238281Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =      8 : Maximum =    300

[17-04-2022_10-26-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.344714s.

[17-04-2022_10-26-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.114906s with result Unsatisfiable.

[17-04-2022_10-26-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4596194000005198, Incremental time limit = None
Running cumulative time = 4.184973900000841, Cumulative time limit = 1782.2008879000014
Used memory = (RSS = 2367.054688Mb, VMS = 2391.593750Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =      8 : Maximum =    300

[17-04-2022_10-26-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.350964s.

[17-04-2022_10-26-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.133732s with result Unsatisfiable.

[17-04-2022_10-26-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4846950999999535, Incremental time limit = None
Running cumulative time = 4.669669000000795, Cumulative time limit = 1782.2008879000014
Used memory = (RSS = 2369.941406Mb, VMS = 2392.824219Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =      8 : Maximum =    300

[17-04-2022_10-26-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.359996s.

[17-04-2022_10-26-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.154965s with result Unsatisfiable.

[17-04-2022_10-26-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5149618999994345, Incremental time limit = None
Running cumulative time = 5.184630900000229, Cumulative time limit = 1782.2008879000014
Used memory = (RSS = 2373.449219Mb, VMS = 2393.910156Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =      8 : Maximum =    300

[17-04-2022_10-26-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.366863s.

[17-04-2022_10-26-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.231440s with result Unsatisfiable.

[17-04-2022_10-26-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5983027000011134, Incremental time limit = None
Running cumulative time = 5.782933600001343, Cumulative time limit = 1782.2008879000014
Used memory = (RSS = 2379.707031Mb, VMS = 2398.617188Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =      8 : Maximum =    300

[17-04-2022_10-26-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.375768s.

[17-04-2022_10-26-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.225632s with result Unsatisfiable.

[17-04-2022_10-26-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6013999000006152, Incremental time limit = None
Running cumulative time = 6.384333500001958, Cumulative time limit = 1782.2008879000014
Used memory = (RSS = 2381.343750Mb, VMS = 2398.312500Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =      8 : Maximum =    300

[17-04-2022_10-26-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.375849s.

[17-04-2022_10-26-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.281553s with result Satisfiable.

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6574022999993758, Incremental time limit = None
Running cumulative time = 7.041735800001334, Cumulative time limit = 1782.2008879000014
Used memory = (RSS = 2392.859375Mb, VMS = 2410.332031Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.124172s, Solving = 1.917564s, Total = 7.041736s, Memory = (RSS = 2392.859375Mb, VMS = 2410.332031Mb), Step range = [0-17]), Calls = 11
Final Model :: Total atoms = 27902, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.645701s, Solving = 0.532881s, Total = 2.178582s, Memory = (RSS = 2350.402344Mb, VMS = 2366.687500Mb), Step range = [0-7]
2 : Statistics :: Grounding = 0.312797s, Solving = 0.047602s, Total = 0.360400s, Memory = (RSS = 2353.234375Mb, VMS = 2372.609375Mb), Step range = [8-8]
3 : Statistics :: Grounding = 0.324020s, Solving = 0.053551s, Total = 0.377571s, Memory = (RSS = 2355.578125Mb, VMS = 2373.132812Mb), Step range = [9-9]
4 : Statistics :: Grounding = 0.330004s, Solving = 0.062743s, Total = 0.392747s, Memory = (RSS = 2357.902344Mb, VMS = 2373.656250Mb), Step range = [10-10]
5 : Statistics :: Grounding = 0.337496s, Solving = 0.078559s, Total = 0.416055s, Memory = (RSS = 2359.925781Mb, VMS = 2375.238281Mb), Step range = [11-11]
6 : Statistics :: Grounding = 0.344714s, Solving = 0.114906s, Total = 0.459619s, Memory = (RSS = 2367.054688Mb, VMS = 2391.593750Mb), Step range = [12-12]
7 : Statistics :: Grounding = 0.350964s, Solving = 0.133732s, Total = 0.484695s, Memory = (RSS = 2369.941406Mb, VMS = 2392.824219Mb), Step range = [13-13]
8 : Statistics :: Grounding = 0.359996s, Solving = 0.154965s, Total = 0.514962s, Memory = (RSS = 2373.449219Mb, VMS = 2393.910156Mb), Step range = [14-14]
9 : Statistics :: Grounding = 0.366863s, Solving = 0.231440s, Total = 0.598303s, Memory = (RSS = 2379.707031Mb, VMS = 2398.617188Mb), Step range = [15-15]
10 : Statistics :: Grounding = 0.375768s, Solving = 0.225632s, Total = 0.601400s, Memory = (RSS = 2381.343750Mb, VMS = 2398.312500Mb), Step range = [16-16]
11 : Statistics :: Grounding = 0.375849s, Solving = 0.281553s, Total = 0.657402s, Memory = (RSS = 2392.859375Mb, VMS = 2410.332031Mb), Step range = [17-17]

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 7.041736s due to: Stop condition reached.

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 8, Last requested goal index = 8, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.124172s, Solving = 1.917564s, Total = 7.041736s, Memory = (RSS = 2392.859375Mb, VMS = 2410.332031Mb), Step range = [0-17]), Calls = 11
Model :: Total atoms = 27902, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 17 :: Actions = 17                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,0))
Step 10:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,0))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=17

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 1 solved.

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Online planning increment 1 finished.

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 44 : Goals achieved = 14 : Goals unachieved = 30 : Complete = False
Level = 1 : Solved problems = 1 : Total constraining sub-goal stages = 25 : Goals achieved = 8 : Goals unachieved = 17 : Complete = False

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 2 by method ground-first is [1-1].

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 2 at level 1:
Total Templated Partial Problems = 3, Problem Range = [1-3], Size = 25, Sub-goal Stage Range = [1-25]
Division points [total=2] : [(Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 16, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [9-16]

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 17, chosen step range to extract = range(0, 18)

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 29
Level [1]: Length = 17, Total actions = 17, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 25, chosen step range to extract = range(0, 26)

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 29
Level [1]: Length = 17, Total actions = 17, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 44, chosen step range to extract = range(0, 45)

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 29
Level [1]: Length = 17, Total actions = 17, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 29
Level [1]: Length = 17, Total actions = 17, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [9-16], problem number = 2, increment number = 2

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 9)
	('last_sgoals', 16)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1774.9618956999993)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [9-16] : Concurrency disabled : Minimum search length bound enabled with value 24

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 9
last_sgoals = 16
start_step = 17
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 24

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[17-04-2022_10-26-44] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[17-04-2022_10-26-44] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 17 as problem start state.

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 17})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 17})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 17})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((store_room,0),0,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((store_room,0),0,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((store_room,0),0,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((hallway,2),8,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((hallway,2),8,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((hallway,2),8,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((hallway,2),8,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((hallway,2),8,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((hallway,2),8,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((hallway,2),8,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 17})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 17})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 17})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 17})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 17})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 17})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 17})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 17})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 17})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 17})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 17})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 17})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 17})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 17})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 17})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 17})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 17})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 17})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 17})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 17})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 17})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 17})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 17})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 17})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(hallway,2)', 'S': 17})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(hallway,2)', 'S': 17})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(hallway,2)', 'S': 17})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(hallway,2)', 'S': 17})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(hallway,2)', 'S': 17})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(hallway,2)', 'S': 17})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 17})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 17})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 17})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 17})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(hallway,2)', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 17})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 17})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 17})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 17})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 17})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 17})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 17})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 17})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 17})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 17})

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 164 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 17).
holds(1, complete_tower(red,puzzle_room_table), false, 17).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 17).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 17).
holds(1, configuration(manipulator_limb_1), extended, 17).
holds(1, configuration(manipulator_limb_2), retracted, 17).
holds(1, configuration(puzzle_room_door), open, 17).
holds(1, configuration(starting_room_door), closed, 17).
holds(1, configuration(store_room_door), closed, 17).
holds(1, grasping(manipulator_end_1), nothing, 17).
holds(1, grasping(manipulator_end_2), nothing, 17).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 17).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 17).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 17).
holds(1, in((block,4)), ((store_room,0),0,0), 17).
holds(1, in((block,5)), ((store_room,0),0,0), 17).
holds(1, in((block,6)), ((store_room,0),0,0), 17).
holds(1, in(manipulator_arm_1), ((hallway,2),8,1), 17).
holds(1, in(manipulator_arm_2), ((hallway,2),8,1), 17).
holds(1, in(manipulator_end_1), ((hallway,2),8,1), 17).
holds(1, in(manipulator_end_2), ((hallway,2),8,1), 17).
holds(1, in(manipulator_limb_1), ((hallway,2),8,1), 17).
holds(1, in(manipulator_limb_2), ((hallway,2),8,1), 17).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 17).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 17).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 17).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 17).
holds(1, in(talos), ((hallway,2),8,1), 17).
holds(1, in_tower((block,1),(block,1)), true, 17).
holds(1, in_tower((block,1),(block,2)), false, 17).
holds(1, in_tower((block,1),(block,3)), true, 17).
holds(1, in_tower((block,1),(block,4)), false, 17).
holds(1, in_tower((block,1),(block,5)), false, 17).
holds(1, in_tower((block,1),(block,6)), false, 17).
holds(1, in_tower((block,2),(block,1)), false, 17).
holds(1, in_tower((block,2),(block,2)), true, 17).
holds(1, in_tower((block,2),(block,3)), false, 17).
holds(1, in_tower((block,2),(block,4)), false, 17).
holds(1, in_tower((block,2),(block,5)), false, 17).
holds(1, in_tower((block,2),(block,6)), false, 17).
holds(1, in_tower((block,3),(block,1)), false, 17).
holds(1, in_tower((block,3),(block,2)), false, 17).
holds(1, in_tower((block,3),(block,3)), false, 17).
holds(1, in_tower((block,3),(block,4)), false, 17).
holds(1, in_tower((block,3),(block,5)), false, 17).
holds(1, in_tower((block,3),(block,6)), false, 17).
holds(1, in_tower((block,4),(block,1)), false, 17).
holds(1, in_tower((block,4),(block,2)), false, 17).
holds(1, in_tower((block,4),(block,3)), false, 17).
holds(1, in_tower((block,4),(block,4)), false, 17).
holds(1, in_tower((block,4),(block,5)), false, 17).
holds(1, in_tower((block,4),(block,6)), false, 17).
holds(1, in_tower((block,5),(block,1)), false, 17).
holds(1, in_tower((block,5),(block,2)), false, 17).
holds(1, in_tower((block,5),(block,3)), false, 17).
holds(1, in_tower((block,5),(block,4)), false, 17).
holds(1, in_tower((block,5),(block,5)), false, 17).
holds(1, in_tower((block,5),(block,6)), false, 17).
holds(1, in_tower((block,6),(block,1)), false, 17).
holds(1, in_tower((block,6),(block,2)), false, 17).
holds(1, in_tower((block,6),(block,3)), false, 17).
holds(1, in_tower((block,6),(block,4)), false, 17).
holds(1, in_tower((block,6),(block,5)), false, 17).
holds(1, in_tower((block,6),(block,6)), false, 17).
holds(1, on((block,1)), puzzle_room_table_left, 17).
holds(1, on((block,2)), puzzle_room_table_right, 17).
holds(1, on((block,3)), (block,1), 17).
holds(1, on((block,4)), nothing, 17).
holds(1, on((block,5)), nothing, 17).
holds(1, on((block,6)), nothing, 17).
holds(1, tower_base((block,1),puzzle_room_table), true, 17).
holds(1, tower_base((block,2),puzzle_room_table), true, 17).
holds(1, tower_base((block,3),puzzle_room_table), false, 17).
holds(1, tower_base((block,4),puzzle_room_table), false, 17).
holds(1, tower_base((block,5),puzzle_room_table), false, 17).
holds(1, tower_base((block,6),puzzle_room_table), false, 17).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 17).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 17).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 17).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 17).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 17).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 17).
holds(2, complete_tower(blue,puzzle_room_table), false, 17).
holds(2, complete_tower(red,puzzle_room_table), false, 17).
holds(2, configuration(manipulator_end_1), aligned_with(nothing), 17).
holds(2, configuration(manipulator_end_2), aligned_with(nothing), 17).
holds(2, configuration(manipulator_limb_1), extended, 17).
holds(2, configuration(manipulator_limb_2), retracted, 17).
holds(2, configuration(puzzle_room_door), open, 17).
holds(2, configuration(starting_room_door), closed, 17).
holds(2, configuration(store_room_door), closed, 17).
holds(2, grasping(manipulator_end_1), nothing, 17).
holds(2, grasping(manipulator_end_2), nothing, 17).
holds(2, in((block,1)), (puzzle_room,1), 17).
holds(2, in((block,2)), (puzzle_room,1), 17).
holds(2, in((block,3)), (puzzle_room,1), 17).
holds(2, in((block,4)), (store_room,0), 17).
holds(2, in((block,5)), (store_room,0), 17).
holds(2, in((block,6)), (store_room,0), 17).
holds(2, in(manipulator_arm_1), (hallway,2), 17).
holds(2, in(manipulator_arm_2), (hallway,2), 17).
holds(2, in(manipulator_end_1), (hallway,2), 17).
holds(2, in(manipulator_end_2), (hallway,2), 17).
holds(2, in(manipulator_limb_1), (hallway,2), 17).
holds(2, in(manipulator_limb_2), (hallway,2), 17).
holds(2, in(puzzle_room_table), (puzzle_room,1), 17).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 17).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 17).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 17).
holds(2, in(talos), (hallway,2), 17).
holds(2, in_tower((block,1),(block,1)), true, 17).
holds(2, in_tower((block,1),(block,2)), false, 17).
holds(2, in_tower((block,1),(block,3)), true, 17).
holds(2, in_tower((block,1),(block,4)), false, 17).
holds(2, in_tower((block,1),(block,5)), false, 17).
holds(2, in_tower((block,1),(block,6)), false, 17).
holds(2, in_tower((block,2),(block,1)), false, 17).
holds(2, in_tower((block,2),(block,2)), true, 17).
holds(2, in_tower((block,2),(block,3)), false, 17).
holds(2, in_tower((block,2),(block,4)), false, 17).
holds(2, in_tower((block,2),(block,5)), false, 17).
holds(2, in_tower((block,2),(block,6)), false, 17).
holds(2, in_tower((block,3),(block,1)), false, 17).
holds(2, in_tower((block,3),(block,2)), false, 17).
holds(2, in_tower((block,3),(block,3)), false, 17).
holds(2, in_tower((block,3),(block,4)), false, 17).
holds(2, in_tower((block,3),(block,5)), false, 17).
holds(2, in_tower((block,3),(block,6)), false, 17).
holds(2, in_tower((block,4),(block,1)), false, 17).
holds(2, in_tower((block,4),(block,2)), false, 17).
holds(2, in_tower((block,4),(block,3)), false, 17).
holds(2, in_tower((block,4),(block,4)), false, 17).
holds(2, in_tower((block,4),(block,5)), false, 17).
holds(2, in_tower((block,4),(block,6)), false, 17).
holds(2, in_tower((block,5),(block,1)), false, 17).
holds(2, in_tower((block,5),(block,2)), false, 17).
holds(2, in_tower((block,5),(block,3)), false, 17).
holds(2, in_tower((block,5),(block,4)), false, 17).
holds(2, in_tower((block,5),(block,5)), false, 17).
holds(2, in_tower((block,5),(block,6)), false, 17).
holds(2, in_tower((block,6),(block,1)), false, 17).
holds(2, in_tower((block,6),(block,2)), false, 17).
holds(2, in_tower((block,6),(block,3)), false, 17).
holds(2, in_tower((block,6),(block,4)), false, 17).
holds(2, in_tower((block,6),(block,5)), false, 17).
holds(2, in_tower((block,6),(block,6)), false, 17).
holds(2, on((block,1)), puzzle_room_table_left, 17).
holds(2, on((block,2)), puzzle_room_table_right, 17).
holds(2, on((block,3)), (block,1), 17).
holds(2, on((block,4)), nothing, 17).
holds(2, on((block,5)), nothing, 17).
holds(2, on((block,6)), nothing, 17).
holds(2, tower_base((block,1),puzzle_room_table), true, 17).
holds(2, tower_base((block,2),puzzle_room_table), true, 17).
holds(2, tower_base((block,3),puzzle_room_table), false, 17).
holds(2, tower_base((block,4),puzzle_room_table), false, 17).
holds(2, tower_base((block,5),puzzle_room_table), false, 17).
holds(2, tower_base((block,6),puzzle_room_table), false, 17).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 17).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 17).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 17).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 17).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 17).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 17).

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=24']

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'I': 9})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'I': 9})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((hallway,1))', 'F': 'in(talos)', 'V': '(hallway,1)', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((hallway,0))', 'F': 'in(talos)', 'V': '(hallway,0)', 'I': 11})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'I': 12})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(store_room_door_handle_outer)', 'I': 13})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'F': 'grasping(manipulator_end_1)', 'V': 'store_room_door_handle_outer', 'I': 14})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'F': 'configuration(store_room_door)', 'V': 'open', 'I': 15})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'I': 16})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'I': 16})

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 10 rules into program part base:

sub_goal(2, talos, configure(manipulator_limb_1,retracted), configuration(manipulator_end_1), aligned_with(nothing), 9).
sub_goal(2, talos, configure(manipulator_limb_1,retracted), configuration(manipulator_limb_1), retracted, 9).
sub_goal(2, talos, move((hallway,1)), in(talos), (hallway,1), 10).
sub_goal(2, talos, move((hallway,0)), in(talos), (hallway,0), 11).
sub_goal(2, talos, configure(manipulator_limb_1,extended), configuration(manipulator_limb_1), extended, 12).
sub_goal(2, talos, configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)), configuration(manipulator_end_1), aligned_with(store_room_door_handle_outer), 13).
sub_goal(2, talos, grasp(manipulator_end_1,store_room_door_handle_outer), grasping(manipulator_end_1), store_room_door_handle_outer, 14).
sub_goal(2, talos, actuate(manipulator_end_1,store_room_door), configuration(store_room_door), open, 15).
sub_goal(2, talos, release(manipulator_end_1,store_room_door_handle_outer), configuration(manipulator_end_1), aligned_with(nothing), 16).
sub_goal(2, talos, release(manipulator_end_1,store_room_door_handle_outer), grasping(manipulator_end_1), nothing, 16).

[17-04-2022_10-26-44] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=24']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001C097F2B160>]
	incrementor = SolveIncrementor(step_start=17, step_increase=1, step_increase_initial=8, step_end_min=25, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1774.9618956999993, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 17), range_=None), IncPart(name='plan_module', args=('#inc', 17, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 17, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 17, 9, 16, 'sequential', 'false'), range_=None)]

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 851 rules

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005343100000573031s

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[17-04-2022_10-26-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[17-04-2022_10-26-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.173853s.

[17-04-2022_10-26-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025219s with result Satisfiable.

[17-04-2022_10-26-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[17-04-2022_10-26-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001C09B4FBC20>

[17-04-2022_10-26-45] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 17)
	('last_sgoals', 16)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('first_sgoals', 9)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001C09B4FBC20>)

[17-04-2022_10-26-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 17). %* None *%
#program plan_module(#inc, 17, false, false). %* None *%
#program optimisation_module(#inc, 17, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 17, 9, 16, sequential, false). %* None *%

[17-04-2022_10-26-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     16 : Current =     24
Incrementor step ends | Minimum  =     25 : Maximum =    300

[17-04-2022_10-26-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(17), Number(17)]), ('plan_module', [Number(17), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(17), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(17), Number(9), Number(16), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(18), Number(17)]), ('plan_module', [Number(18), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(17), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(17), Number(9), Number(16), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(19), Number(17)]), ('plan_module', [Number(19), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(17), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(17), Number(9), Number(16), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(20), Number(17)]), ('plan_module', [Number(20), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(17), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(17), Number(9), Number(16), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(21), Number(17)]), ('plan_module', [Number(21), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(17), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(17), Number(9), Number(16), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(22), Number(17)]), ('plan_module', [Number(22), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(17), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(17), Number(9), Number(16), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(23), Number(17)]), ('plan_module', [Number(23), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(17), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(17), Number(9), Number(16), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(24), Number(17)]), ('plan_module', [Number(24), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(17), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(17), Number(9), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.668426s.

[17-04-2022_10-26-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.536286s with result Unsatisfiable.

[17-04-2022_10-26-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.204711400000633, Incremental time limit = None
Running cumulative time = 2.204711400000633, Cumulative time limit = 1774.9618956999993
Used memory = (RSS = 2354.988281Mb, VMS = 2371.195312Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =     25 : Maximum =    300

[17-04-2022_10-26-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(17)]), ('plan_module', [Number(25), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(17), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(17), Number(9), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.307168s.

[17-04-2022_10-26-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.046948s with result Unsatisfiable.

[17-04-2022_10-26-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3541158000007272, Incremental time limit = None
Running cumulative time = 2.5588272000013603, Cumulative time limit = 1774.9618956999993
Used memory = (RSS = 2357.285156Mb, VMS = 2376.242188Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =     25 : Maximum =    300

[17-04-2022_10-26-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(17)]), ('plan_module', [Number(26), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(17), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(17), Number(9), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.314312s.

[17-04-2022_10-26-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.052465s with result Unsatisfiable.

[17-04-2022_10-26-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3667765000000145, Incremental time limit = None
Running cumulative time = 2.925603700001375, Cumulative time limit = 1774.9618956999993
Used memory = (RSS = 2359.394531Mb, VMS = 2376.769531Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =     25 : Maximum =    300

[17-04-2022_10-26-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(17)]), ('plan_module', [Number(27), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(17), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(17), Number(9), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.323709s.

[17-04-2022_10-26-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.058831s with result Unsatisfiable.

[17-04-2022_10-26-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.38253960000020015, Incremental time limit = None
Running cumulative time = 3.308143300001575, Cumulative time limit = 1774.9618956999993
Used memory = (RSS = 2361.601562Mb, VMS = 2377.289062Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =     25 : Maximum =    300

[17-04-2022_10-26-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(17)]), ('plan_module', [Number(28), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(17), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(17), Number(9), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.328369s.

[17-04-2022_10-26-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.067841s with result Unsatisfiable.

[17-04-2022_10-26-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.39620950000062294, Incremental time limit = None
Running cumulative time = 3.704352800002198, Cumulative time limit = 1774.9618956999993
Used memory = (RSS = 2363.523438Mb, VMS = 2378.871094Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =     25 : Maximum =    300

[17-04-2022_10-26-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(17)]), ('plan_module', [Number(29), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(17), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(17), Number(9), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.336446s.

[17-04-2022_10-26-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.092283s with result Unsatisfiable.

[17-04-2022_10-26-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4287285000000338, Incremental time limit = None
Running cumulative time = 4.133081300002232, Cumulative time limit = 1774.9618956999993
Used memory = (RSS = 2371.917969Mb, VMS = 2396.457031Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =     25 : Maximum =    300

[17-04-2022_10-26-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(17)]), ('plan_module', [Number(30), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(17), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(17), Number(9), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.344576s.

[17-04-2022_10-26-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.105491s with result Unsatisfiable.

[17-04-2022_10-26-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.45006760000069335, Incremental time limit = None
Running cumulative time = 4.583148900002925, Cumulative time limit = 1774.9618956999993
Used memory = (RSS = 2374.625000Mb, VMS = 2396.976562Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =     25 : Maximum =    300

[17-04-2022_10-26-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(17)]), ('plan_module', [Number(31), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(17), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(17), Number(9), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.346057s.

[17-04-2022_10-26-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.144073s with result Satisfiable.

[17-04-2022_10-26-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4901293999992049, Incremental time limit = None
Running cumulative time = 5.07327830000213, Cumulative time limit = 1774.9618956999993
Used memory = (RSS = 2380.664062Mb, VMS = 2401.464844Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.969061s, Solving = 1.104218s, Total = 5.073278s, Memory = (RSS = 2380.664062Mb, VMS = 2401.464844Mb), Step range = [17-31]), Calls = 8
Final Model :: Total atoms = 26676, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[17-04-2022_10-26-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.668426s, Solving = 0.536286s, Total = 2.204711s, Memory = (RSS = 2354.988281Mb, VMS = 2371.195312Mb), Step range = [17-24]
2 : Statistics :: Grounding = 0.307168s, Solving = 0.046948s, Total = 0.354116s, Memory = (RSS = 2357.285156Mb, VMS = 2376.242188Mb), Step range = [25-25]
3 : Statistics :: Grounding = 0.314312s, Solving = 0.052465s, Total = 0.366777s, Memory = (RSS = 2359.394531Mb, VMS = 2376.769531Mb), Step range = [26-26]
4 : Statistics :: Grounding = 0.323709s, Solving = 0.058831s, Total = 0.382540s, Memory = (RSS = 2361.601562Mb, VMS = 2377.289062Mb), Step range = [27-27]
5 : Statistics :: Grounding = 0.328369s, Solving = 0.067841s, Total = 0.396210s, Memory = (RSS = 2363.523438Mb, VMS = 2378.871094Mb), Step range = [28-28]
6 : Statistics :: Grounding = 0.336446s, Solving = 0.092283s, Total = 0.428729s, Memory = (RSS = 2371.917969Mb, VMS = 2396.457031Mb), Step range = [29-29]
7 : Statistics :: Grounding = 0.344576s, Solving = 0.105491s, Total = 0.450068s, Memory = (RSS = 2374.625000Mb, VMS = 2396.976562Mb), Step range = [30-30]
8 : Statistics :: Grounding = 0.346057s, Solving = 0.144073s, Total = 0.490129s, Memory = (RSS = 2380.664062Mb, VMS = 2401.464844Mb), Step range = [31-31]

[17-04-2022_10-26-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 5.073278s due to: Stop condition reached.

[17-04-2022_10-26-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[17-04-2022_10-26-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[17-04-2022_10-26-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-26-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-26-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[17-04-2022_10-26-50] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 16, Last requested goal index = 16, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.969061s, Solving = 1.104218s, Total = 5.073278s, Memory = (RSS = 2380.664062Mb, VMS = 2401.464844Mb), Step range = [17-31]), Calls = 8
Model :: Total atoms = 26676, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 14 :: Actions = 14                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,0))
Step 10:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,0))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 21:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(store_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(store_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 31:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=31

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Monolevel problem 2 at level 1 solved.

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Online planning increment 2 finished.

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 44 : Goals achieved = 14 : Goals unachieved = 30 : Complete = False
Level = 1 : Solved problems = 2 : Total constraining sub-goal stages = 25 : Goals achieved = 16 : Goals unachieved = 9 : Complete = False

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 3 by method ground-first is [1-1].

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 3 at level 1:
Total Templated Partial Problems = 3, Problem Range = [1-3], Size = 25, Sub-goal Stage Range = [1-25]
Division points [total=2] : [(Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 16, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [17-25]

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 31, chosen step range to extract = range(0, 32)

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 29
Level [1]: Length = 31, Total actions = 31, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 25, chosen step range to extract = range(0, 26)

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 29
Level [1]: Length = 31, Total actions = 31, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 44, chosen step range to extract = range(0, 45)

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 29
Level [1]: Length = 31, Total actions = 31, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 29
Level [1]: Length = 31, Total actions = 31, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [17-25], problem number = 3, increment number = 3

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 17)
	('last_sgoals', 25)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1769.8886173999972)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [17-25] : Concurrency disabled : Minimum search length bound enabled with value 39

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 17
last_sgoals = 25
start_step = 31
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 39

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[17-04-2022_10-26-51] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[17-04-2022_10-26-51] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 31 as problem start state.

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 31})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 31})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 31})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 31})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 31})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 31})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 31})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 31})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 31})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 31})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 31})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 31})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((store_room,0),0,0)', 'S': 31})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((store_room,0),0,0)', 'S': 31})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((store_room,0),0,0)', 'S': 31})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((hallway,0),0,1)', 'S': 31})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((hallway,0),0,1)', 'S': 31})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((hallway,0),0,1)', 'S': 31})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((hallway,0),0,1)', 'S': 31})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((hallway,0),0,1)', 'S': 31})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((hallway,0),0,1)', 'S': 31})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 31})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 31})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 31})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 31})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((hallway,0),0,1)', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 31})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 31})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 31})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 31})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 31})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 31})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 31})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 31})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 31})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(hallway,0)', 'S': 31})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(hallway,0)', 'S': 31})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(hallway,0)', 'S': 31})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(hallway,0)', 'S': 31})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(hallway,0)', 'S': 31})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(hallway,0)', 'S': 31})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 31})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 31})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 31})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 31})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(hallway,0)', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 31})

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 164 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 31).
holds(1, complete_tower(red,puzzle_room_table), false, 31).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 31).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 31).
holds(1, configuration(manipulator_limb_1), extended, 31).
holds(1, configuration(manipulator_limb_2), retracted, 31).
holds(1, configuration(puzzle_room_door), open, 31).
holds(1, configuration(starting_room_door), closed, 31).
holds(1, configuration(store_room_door), open, 31).
holds(1, grasping(manipulator_end_1), nothing, 31).
holds(1, grasping(manipulator_end_2), nothing, 31).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 31).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 31).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 31).
holds(1, in((block,4)), ((store_room,0),0,0), 31).
holds(1, in((block,5)), ((store_room,0),0,0), 31).
holds(1, in((block,6)), ((store_room,0),0,0), 31).
holds(1, in(manipulator_arm_1), ((hallway,0),0,1), 31).
holds(1, in(manipulator_arm_2), ((hallway,0),0,1), 31).
holds(1, in(manipulator_end_1), ((hallway,0),0,1), 31).
holds(1, in(manipulator_end_2), ((hallway,0),0,1), 31).
holds(1, in(manipulator_limb_1), ((hallway,0),0,1), 31).
holds(1, in(manipulator_limb_2), ((hallway,0),0,1), 31).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 31).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 31).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 31).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 31).
holds(1, in(talos), ((hallway,0),0,1), 31).
holds(1, in_tower((block,1),(block,1)), true, 31).
holds(1, in_tower((block,1),(block,2)), false, 31).
holds(1, in_tower((block,1),(block,3)), true, 31).
holds(1, in_tower((block,1),(block,4)), false, 31).
holds(1, in_tower((block,1),(block,5)), false, 31).
holds(1, in_tower((block,1),(block,6)), false, 31).
holds(1, in_tower((block,2),(block,1)), false, 31).
holds(1, in_tower((block,2),(block,2)), true, 31).
holds(1, in_tower((block,2),(block,3)), false, 31).
holds(1, in_tower((block,2),(block,4)), false, 31).
holds(1, in_tower((block,2),(block,5)), false, 31).
holds(1, in_tower((block,2),(block,6)), false, 31).
holds(1, in_tower((block,3),(block,1)), false, 31).
holds(1, in_tower((block,3),(block,2)), false, 31).
holds(1, in_tower((block,3),(block,3)), false, 31).
holds(1, in_tower((block,3),(block,4)), false, 31).
holds(1, in_tower((block,3),(block,5)), false, 31).
holds(1, in_tower((block,3),(block,6)), false, 31).
holds(1, in_tower((block,4),(block,1)), false, 31).
holds(1, in_tower((block,4),(block,2)), false, 31).
holds(1, in_tower((block,4),(block,3)), false, 31).
holds(1, in_tower((block,4),(block,4)), false, 31).
holds(1, in_tower((block,4),(block,5)), false, 31).
holds(1, in_tower((block,4),(block,6)), false, 31).
holds(1, in_tower((block,5),(block,1)), false, 31).
holds(1, in_tower((block,5),(block,2)), false, 31).
holds(1, in_tower((block,5),(block,3)), false, 31).
holds(1, in_tower((block,5),(block,4)), false, 31).
holds(1, in_tower((block,5),(block,5)), false, 31).
holds(1, in_tower((block,5),(block,6)), false, 31).
holds(1, in_tower((block,6),(block,1)), false, 31).
holds(1, in_tower((block,6),(block,2)), false, 31).
holds(1, in_tower((block,6),(block,3)), false, 31).
holds(1, in_tower((block,6),(block,4)), false, 31).
holds(1, in_tower((block,6),(block,5)), false, 31).
holds(1, in_tower((block,6),(block,6)), false, 31).
holds(1, on((block,1)), puzzle_room_table_left, 31).
holds(1, on((block,2)), puzzle_room_table_right, 31).
holds(1, on((block,3)), (block,1), 31).
holds(1, on((block,4)), nothing, 31).
holds(1, on((block,5)), nothing, 31).
holds(1, on((block,6)), nothing, 31).
holds(1, tower_base((block,1),puzzle_room_table), true, 31).
holds(1, tower_base((block,2),puzzle_room_table), true, 31).
holds(1, tower_base((block,3),puzzle_room_table), false, 31).
holds(1, tower_base((block,4),puzzle_room_table), false, 31).
holds(1, tower_base((block,5),puzzle_room_table), false, 31).
holds(1, tower_base((block,6),puzzle_room_table), false, 31).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 31).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 31).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 31).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 31).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 31).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 31).
holds(2, complete_tower(blue,puzzle_room_table), false, 31).
holds(2, complete_tower(red,puzzle_room_table), false, 31).
holds(2, configuration(manipulator_end_1), aligned_with(nothing), 31).
holds(2, configuration(manipulator_end_2), aligned_with(nothing), 31).
holds(2, configuration(manipulator_limb_1), extended, 31).
holds(2, configuration(manipulator_limb_2), retracted, 31).
holds(2, configuration(puzzle_room_door), open, 31).
holds(2, configuration(starting_room_door), closed, 31).
holds(2, configuration(store_room_door), open, 31).
holds(2, grasping(manipulator_end_1), nothing, 31).
holds(2, grasping(manipulator_end_2), nothing, 31).
holds(2, in((block,1)), (puzzle_room,1), 31).
holds(2, in((block,2)), (puzzle_room,1), 31).
holds(2, in((block,3)), (puzzle_room,1), 31).
holds(2, in((block,4)), (store_room,0), 31).
holds(2, in((block,5)), (store_room,0), 31).
holds(2, in((block,6)), (store_room,0), 31).
holds(2, in(manipulator_arm_1), (hallway,0), 31).
holds(2, in(manipulator_arm_2), (hallway,0), 31).
holds(2, in(manipulator_end_1), (hallway,0), 31).
holds(2, in(manipulator_end_2), (hallway,0), 31).
holds(2, in(manipulator_limb_1), (hallway,0), 31).
holds(2, in(manipulator_limb_2), (hallway,0), 31).
holds(2, in(puzzle_room_table), (puzzle_room,1), 31).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 31).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 31).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 31).
holds(2, in(talos), (hallway,0), 31).
holds(2, in_tower((block,1),(block,1)), true, 31).
holds(2, in_tower((block,1),(block,2)), false, 31).
holds(2, in_tower((block,1),(block,3)), true, 31).
holds(2, in_tower((block,1),(block,4)), false, 31).
holds(2, in_tower((block,1),(block,5)), false, 31).
holds(2, in_tower((block,1),(block,6)), false, 31).
holds(2, in_tower((block,2),(block,1)), false, 31).
holds(2, in_tower((block,2),(block,2)), true, 31).
holds(2, in_tower((block,2),(block,3)), false, 31).
holds(2, in_tower((block,2),(block,4)), false, 31).
holds(2, in_tower((block,2),(block,5)), false, 31).
holds(2, in_tower((block,2),(block,6)), false, 31).
holds(2, in_tower((block,3),(block,1)), false, 31).
holds(2, in_tower((block,3),(block,2)), false, 31).
holds(2, in_tower((block,3),(block,3)), false, 31).
holds(2, in_tower((block,3),(block,4)), false, 31).
holds(2, in_tower((block,3),(block,5)), false, 31).
holds(2, in_tower((block,3),(block,6)), false, 31).
holds(2, in_tower((block,4),(block,1)), false, 31).
holds(2, in_tower((block,4),(block,2)), false, 31).
holds(2, in_tower((block,4),(block,3)), false, 31).
holds(2, in_tower((block,4),(block,4)), false, 31).
holds(2, in_tower((block,4),(block,5)), false, 31).
holds(2, in_tower((block,4),(block,6)), false, 31).
holds(2, in_tower((block,5),(block,1)), false, 31).
holds(2, in_tower((block,5),(block,2)), false, 31).
holds(2, in_tower((block,5),(block,3)), false, 31).
holds(2, in_tower((block,5),(block,4)), false, 31).
holds(2, in_tower((block,5),(block,5)), false, 31).
holds(2, in_tower((block,5),(block,6)), false, 31).
holds(2, in_tower((block,6),(block,1)), false, 31).
holds(2, in_tower((block,6),(block,2)), false, 31).
holds(2, in_tower((block,6),(block,3)), false, 31).
holds(2, in_tower((block,6),(block,4)), false, 31).
holds(2, in_tower((block,6),(block,5)), false, 31).
holds(2, in_tower((block,6),(block,6)), false, 31).
holds(2, on((block,1)), puzzle_room_table_left, 31).
holds(2, on((block,2)), puzzle_room_table_right, 31).
holds(2, on((block,3)), (block,1), 31).
holds(2, on((block,4)), nothing, 31).
holds(2, on((block,5)), nothing, 31).
holds(2, on((block,6)), nothing, 31).
holds(2, tower_base((block,1),puzzle_room_table), true, 31).
holds(2, tower_base((block,2),puzzle_room_table), true, 31).
holds(2, tower_base((block,3),puzzle_room_table), false, 31).
holds(2, tower_base((block,4),puzzle_room_table), false, 31).
holds(2, tower_base((block,5),puzzle_room_table), false, 31).
holds(2, tower_base((block,6),puzzle_room_table), false, 31).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 31).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 31).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 31).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 31).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 31).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 31).

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=39']

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'I': 17})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'I': 17})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((store_room,1))', 'F': 'in(talos)', 'V': '(store_room,1)', 'I': 18})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((store_room,0))', 'F': 'in(talos)', 'V': '(store_room,0)', 'I': 19})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,5)))', 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,5))', 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'I': 22})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'I': 23})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,6)))', 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,6))', 'I': 24})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,6))', 'F': 'grasping(manipulator_end_1)', 'V': '(block,6)', 'I': 25})

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 10 rules into program part base:

sub_goal(2, talos, configure(manipulator_limb_1,retracted), configuration(manipulator_end_1), aligned_with(nothing), 17).
sub_goal(2, talos, configure(manipulator_limb_1,retracted), configuration(manipulator_limb_1), retracted, 17).
sub_goal(2, talos, move((store_room,1)), in(talos), (store_room,1), 18).
sub_goal(2, talos, move((store_room,0)), in(talos), (store_room,0), 19).
sub_goal(2, talos, configure(manipulator_limb_2,extended), configuration(manipulator_limb_2), extended, 20).
sub_goal(2, talos, configure(manipulator_end_2,aligned_with((block,5))), configuration(manipulator_end_2), aligned_with((block,5)), 21).
sub_goal(2, talos, grasp(manipulator_end_2,(block,5)), grasping(manipulator_end_2), (block,5), 22).
sub_goal(2, talos, configure(manipulator_limb_1,extended), configuration(manipulator_limb_1), extended, 23).
sub_goal(2, talos, configure(manipulator_end_1,aligned_with((block,6))), configuration(manipulator_end_1), aligned_with((block,6)), 24).
sub_goal(2, talos, grasp(manipulator_end_1,(block,6)), grasping(manipulator_end_1), (block,6), 25).

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=39']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001C09ABEF790>]
	incrementor = SolveIncrementor(step_start=31, step_increase=1, step_increase_initial=9, step_end_min=40, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1769.8886173999972, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 31), range_=None), IncPart(name='plan_module', args=('#inc', 31, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 31, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 31, 17, 25, 'sequential', 'false'), range_=None)]

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 851 rules

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005327400000169291s

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.171392s.

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025742s with result Satisfiable.

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001C09B86C900>

[17-04-2022_10-26-51] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 31)
	('last_sgoals', 25)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('first_sgoals', 17)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001C09B86C900>)

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 31). %* None *%
#program plan_module(#inc, 31, false, false). %* None *%
#program optimisation_module(#inc, 31, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 31, 17, 25, sequential, false). %* None *%

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     30 : Current =     39
Incrementor step ends | Minimum  =     40 : Maximum =    300

[17-04-2022_10-26-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(31), Number(31)]), ('plan_module', [Number(31), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(31), Number(17), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(32), Number(31)]), ('plan_module', [Number(32), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(31), Number(17), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(33), Number(31)]), ('plan_module', [Number(33), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(31), Number(17), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(34), Number(31)]), ('plan_module', [Number(34), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(31), Number(17), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(35), Number(31)]), ('plan_module', [Number(35), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(31), Number(17), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(36), Number(31)]), ('plan_module', [Number(36), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(31), Number(17), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(37), Number(31)]), ('plan_module', [Number(37), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(31), Number(17), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(38), Number(31)]), ('plan_module', [Number(38), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(31), Number(17), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(39), Number(31)]), ('plan_module', [Number(39), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(31), Number(17), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.872802s.

[17-04-2022_10-26-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.635945s with result Unsatisfiable.

[17-04-2022_10-26-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.50874659999954, Incremental time limit = None
Running cumulative time = 2.50874659999954, Cumulative time limit = 1769.8886173999972
Used memory = (RSS = 2360.265625Mb, VMS = 2376.640625Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =     40 : Maximum =    300

[17-04-2022_10-26-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(31)]), ('plan_module', [Number(40), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(31), Number(17), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.317883s.

[17-04-2022_10-26-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051632s with result Unsatisfiable.

[17-04-2022_10-26-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3695147000007637, Incremental time limit = None
Running cumulative time = 2.878261300000304, Cumulative time limit = 1769.8886173999972
Used memory = (RSS = 2366.429688Mb, VMS = 2387.437500Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =     40 : Maximum =    300

[17-04-2022_10-26-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(31)]), ('plan_module', [Number(41), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(31), Number(17), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.325476s.

[17-04-2022_10-26-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053468s with result Unsatisfiable.

[17-04-2022_10-26-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.37894409999898926, Incremental time limit = None
Running cumulative time = 3.257205399999293, Cumulative time limit = 1769.8886173999972
Used memory = (RSS = 2369.089844Mb, VMS = 2387.957031Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =     40 : Maximum =    300

[17-04-2022_10-26-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(31)]), ('plan_module', [Number(42), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(31), Number(17), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.332385s.

[17-04-2022_10-26-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.069938s with result Unsatisfiable.

[17-04-2022_10-26-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4023225000000821, Incremental time limit = None
Running cumulative time = 3.6595278999993752, Cumulative time limit = 1769.8886173999972
Used memory = (RSS = 2371.566406Mb, VMS = 2389.542969Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     42 : Current =     43
Incrementor step ends | Minimum  =     40 : Maximum =    300

[17-04-2022_10-26-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('state_module', [Number(43), Number(31)]), ('plan_module', [Number(43), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(31), Number(17), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.341077s.

[17-04-2022_10-26-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.084052s with result Unsatisfiable.

[17-04-2022_10-26-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4251289000012548, Incremental time limit = None
Running cumulative time = 4.08465680000063, Cumulative time limit = 1769.8886173999972
Used memory = (RSS = 2374.164062Mb, VMS = 2390.863281Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     43 : Current =     44
Incrementor step ends | Minimum  =     40 : Maximum =    300

[17-04-2022_10-26-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('state_module', [Number(44), Number(31)]), ('plan_module', [Number(44), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(31), Number(17), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.348316s.

[17-04-2022_10-26-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.099354s with result Unsatisfiable.

[17-04-2022_10-26-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4476705999986734, Incremental time limit = None
Running cumulative time = 4.5323273999993035, Cumulative time limit = 1769.8886173999972
Used memory = (RSS = 2376.820312Mb, VMS = 2403.714844Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     44 : Current =     45
Incrementor step ends | Minimum  =     40 : Maximum =    300

[17-04-2022_10-26-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('state_module', [Number(45), Number(31)]), ('plan_module', [Number(45), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(31), Number(17), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.345262s.

[17-04-2022_10-26-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.128572s with result Satisfiable.

[17-04-2022_10-26-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.47383410000020376, Incremental time limit = None
Running cumulative time = 5.006161499999507, Cumulative time limit = 1769.8886173999972
Used memory = (RSS = 2383.371094Mb, VMS = 2408.640625Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.883200s, Solving = 1.122962s, Total = 5.006161s, Memory = (RSS = 2383.371094Mb, VMS = 2408.640625Mb), Step range = [31-45]), Calls = 7
Final Model :: Total atoms = 26686, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[17-04-2022_10-26-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.872802s, Solving = 0.635945s, Total = 2.508747s, Memory = (RSS = 2360.265625Mb, VMS = 2376.640625Mb), Step range = [31-39]
2 : Statistics :: Grounding = 0.317883s, Solving = 0.051632s, Total = 0.369515s, Memory = (RSS = 2366.429688Mb, VMS = 2387.437500Mb), Step range = [40-40]
3 : Statistics :: Grounding = 0.325476s, Solving = 0.053468s, Total = 0.378944s, Memory = (RSS = 2369.089844Mb, VMS = 2387.957031Mb), Step range = [41-41]
4 : Statistics :: Grounding = 0.332385s, Solving = 0.069938s, Total = 0.402323s, Memory = (RSS = 2371.566406Mb, VMS = 2389.542969Mb), Step range = [42-42]
5 : Statistics :: Grounding = 0.341077s, Solving = 0.084052s, Total = 0.425129s, Memory = (RSS = 2374.164062Mb, VMS = 2390.863281Mb), Step range = [43-43]
6 : Statistics :: Grounding = 0.348316s, Solving = 0.099354s, Total = 0.447671s, Memory = (RSS = 2376.820312Mb, VMS = 2403.714844Mb), Step range = [44-44]
7 : Statistics :: Grounding = 0.345262s, Solving = 0.128572s, Total = 0.473834s, Memory = (RSS = 2383.371094Mb, VMS = 2408.640625Mb), Step range = [45-45]

[17-04-2022_10-26-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 5.006161s due to: Stop condition reached.

[17-04-2022_10-26-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[17-04-2022_10-26-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[17-04-2022_10-26-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-26-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-26-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 19, 35: 19, 36: 19, 37: 20, 38: 20, 39: 20, 40: 20, 41: 21, 42: 22, 43: 23, 44: 24, 45: 25}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 36, 20: 40, 21: 41, 22: 42, 23: 43, 24: 44, 25: 45}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 25, Last requested goal index = 25, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.883200s, Solving = 1.122962s, Total = 5.006161s, Memory = (RSS = 2383.371094Mb, VMS = 2408.640625Mb), Step range = [31-45]), Calls = 7
Model :: Total atoms = 26686, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 14 :: Actions = 14                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,0))
Step 10:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,0))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 21:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(store_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(store_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 31:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 18] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 37:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,1))
Step 38:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,1))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 21] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Achieved Sub-goals:
        [Index = 21] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 42:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 44:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 45:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Monolevel problem 3 at level 1 solved.

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Online planning increment 3 finished.

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 44 : Goals achieved = 14 : Goals unachieved = 30 : Complete = False
Level = 1 : Solved problems = 3 : Total constraining sub-goal stages = 25 : Goals achieved = 25 : Goals unachieved = 0 : Complete = False

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 2.

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 4 by method ground-first is [1-2].

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 2 at level 2:
Total Templated Partial Problems = 3, Problem Range = [1-3], Size = 44, Sub-goal Stage Range = [1-44]
Division points [total=2] : [(Index = 14, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 29, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [15-29]

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 25, chosen step range to extract = range(0, 26)

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 29
Level [1]: Length = 45, Total actions = 45, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 44, chosen step range to extract = range(0, 45)

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 29
Level [1]: Length = 45, Total actions = 45, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 25, Total actions = 25, Produced sub-goal stages = 25, Produced sub-goal literals = 29
Level [1]: Length = 45, Total actions = 45, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [15-29], problem number = 2, increment number = 4

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 15)
	('last_sgoals', 29)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1782.2008879000014)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [15-29] : Concurrency disabled : Minimum search length bound enabled with value 39

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 15
last_sgoals = 29
start_step = 25
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 39

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[17-04-2022_10-26-57] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[17-04-2022_10-26-57] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 25 as problem start state.

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,6))', 'S': 25})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 25})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 25})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 25})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 25})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 25})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 25})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 25})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 25})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': '(block,6)', 'S': 25})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 25})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 25})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 25})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 25})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(store_room,0)', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 25})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 25})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 25})
Fluent({'L': 3, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 25})
Fluent({'L': 3, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 25})
Fluent({'L': 3, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 25})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 25})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 25})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 25})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 25})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 25})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 25})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 25})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 25})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'store_room', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 25})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 25})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 25})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 25})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 25})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 25})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 25})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 25})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 25})

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 25).
holds(2, complete_tower(red,puzzle_room_table), false, 25).
holds(2, configuration(manipulator_end_1), aligned_with((block,6)), 25).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 25).
holds(2, configuration(manipulator_limb_1), extended, 25).
holds(2, configuration(manipulator_limb_2), extended, 25).
holds(2, configuration(puzzle_room_door), open, 25).
holds(2, configuration(starting_room_door), closed, 25).
holds(2, configuration(store_room_door), open, 25).
holds(2, grasping(manipulator_arm_1), (block,6), 25).
holds(2, grasping(manipulator_arm_2), (block,5), 25).
holds(2, grasping(manipulator_end_1), (block,6), 25).
holds(2, grasping(manipulator_end_2), (block,5), 25).
holds(2, in((block,1)), (puzzle_room,1), 25).
holds(2, in((block,2)), (puzzle_room,1), 25).
holds(2, in((block,3)), (puzzle_room,1), 25).
holds(2, in((block,4)), (store_room,0), 25).
holds(2, in((block,5)), (store_room,0), 25).
holds(2, in((block,6)), (store_room,0), 25).
holds(2, in(manipulator_arm_1), (store_room,0), 25).
holds(2, in(manipulator_arm_2), (store_room,0), 25).
holds(2, in(manipulator_end_1), (store_room,0), 25).
holds(2, in(manipulator_end_2), (store_room,0), 25).
holds(2, in(manipulator_limb_1), (store_room,0), 25).
holds(2, in(manipulator_limb_2), (store_room,0), 25).
holds(2, in(puzzle_room_table), (puzzle_room,1), 25).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 25).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 25).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 25).
holds(2, in(talos), (store_room,0), 25).
holds(2, in_tower((block,1),(block,1)), true, 25).
holds(2, in_tower((block,1),(block,2)), false, 25).
holds(2, in_tower((block,1),(block,3)), true, 25).
holds(2, in_tower((block,1),(block,4)), false, 25).
holds(2, in_tower((block,1),(block,5)), false, 25).
holds(2, in_tower((block,1),(block,6)), false, 25).
holds(2, in_tower((block,2),(block,1)), false, 25).
holds(2, in_tower((block,2),(block,2)), true, 25).
holds(2, in_tower((block,2),(block,3)), false, 25).
holds(2, in_tower((block,2),(block,4)), false, 25).
holds(2, in_tower((block,2),(block,5)), false, 25).
holds(2, in_tower((block,2),(block,6)), false, 25).
holds(2, in_tower((block,3),(block,1)), false, 25).
holds(2, in_tower((block,3),(block,2)), false, 25).
holds(2, in_tower((block,3),(block,3)), false, 25).
holds(2, in_tower((block,3),(block,4)), false, 25).
holds(2, in_tower((block,3),(block,5)), false, 25).
holds(2, in_tower((block,3),(block,6)), false, 25).
holds(2, in_tower((block,4),(block,1)), false, 25).
holds(2, in_tower((block,4),(block,2)), false, 25).
holds(2, in_tower((block,4),(block,3)), false, 25).
holds(2, in_tower((block,4),(block,4)), false, 25).
holds(2, in_tower((block,4),(block,5)), false, 25).
holds(2, in_tower((block,4),(block,6)), false, 25).
holds(2, in_tower((block,5),(block,1)), false, 25).
holds(2, in_tower((block,5),(block,2)), false, 25).
holds(2, in_tower((block,5),(block,3)), false, 25).
holds(2, in_tower((block,5),(block,4)), false, 25).
holds(2, in_tower((block,5),(block,5)), false, 25).
holds(2, in_tower((block,5),(block,6)), false, 25).
holds(2, in_tower((block,6),(block,1)), false, 25).
holds(2, in_tower((block,6),(block,2)), false, 25).
holds(2, in_tower((block,6),(block,3)), false, 25).
holds(2, in_tower((block,6),(block,4)), false, 25).
holds(2, in_tower((block,6),(block,5)), false, 25).
holds(2, in_tower((block,6),(block,6)), false, 25).
holds(2, on((block,1)), puzzle_room_table_left, 25).
holds(2, on((block,2)), puzzle_room_table_right, 25).
holds(2, on((block,3)), (block,1), 25).
holds(2, on((block,4)), nothing, 25).
holds(2, on((block,5)), nothing, 25).
holds(2, on((block,6)), nothing, 25).
holds(2, tower_base((block,1),puzzle_room_table), true, 25).
holds(2, tower_base((block,2),puzzle_room_table), true, 25).
holds(2, tower_base((block,3),puzzle_room_table), false, 25).
holds(2, tower_base((block,4),puzzle_room_table), false, 25).
holds(2, tower_base((block,5),puzzle_room_table), false, 25).
holds(2, tower_base((block,6),puzzle_room_table), false, 25).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 25).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 25).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 25).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 25).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 25).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 25).
holds(3, complete_tower(blue,puzzle_room_table), false, 25).
holds(3, complete_tower(red,puzzle_room_table), false, 25).
holds(3, configuration(manipulator_arm_1), extended, 25).
holds(3, configuration(manipulator_arm_2), extended, 25).
holds(3, configuration(puzzle_room_door), open, 25).
holds(3, configuration(starting_room_door), closed, 25).
holds(3, configuration(store_room_door), open, 25).
holds(3, grasping(manipulator_arm_1), (block,6), 25).
holds(3, grasping(manipulator_arm_2), (block,5), 25).
holds(3, in((block,1)), puzzle_room, 25).
holds(3, in((block,2)), puzzle_room, 25).
holds(3, in((block,3)), puzzle_room, 25).
holds(3, in((block,4)), store_room, 25).
holds(3, in((block,5)), store_room, 25).
holds(3, in((block,6)), store_room, 25).
holds(3, in(manipulator_arm_1), store_room, 25).
holds(3, in(manipulator_arm_2), store_room, 25).
holds(3, in(puzzle_room_table), puzzle_room, 25).
holds(3, in(talos), store_room, 25).
holds(3, in_tower((block,1),(block,1)), true, 25).
holds(3, in_tower((block,1),(block,2)), false, 25).
holds(3, in_tower((block,1),(block,3)), true, 25).
holds(3, in_tower((block,1),(block,4)), false, 25).
holds(3, in_tower((block,1),(block,5)), false, 25).
holds(3, in_tower((block,1),(block,6)), false, 25).
holds(3, in_tower((block,2),(block,1)), false, 25).
holds(3, in_tower((block,2),(block,2)), true, 25).
holds(3, in_tower((block,2),(block,3)), false, 25).
holds(3, in_tower((block,2),(block,4)), false, 25).
holds(3, in_tower((block,2),(block,5)), false, 25).
holds(3, in_tower((block,2),(block,6)), false, 25).
holds(3, in_tower((block,3),(block,1)), false, 25).
holds(3, in_tower((block,3),(block,2)), false, 25).
holds(3, in_tower((block,3),(block,3)), false, 25).
holds(3, in_tower((block,3),(block,4)), false, 25).
holds(3, in_tower((block,3),(block,5)), false, 25).
holds(3, in_tower((block,3),(block,6)), false, 25).
holds(3, in_tower((block,4),(block,1)), false, 25).
holds(3, in_tower((block,4),(block,2)), false, 25).
holds(3, in_tower((block,4),(block,3)), false, 25).
holds(3, in_tower((block,4),(block,4)), false, 25).
holds(3, in_tower((block,4),(block,5)), false, 25).
holds(3, in_tower((block,4),(block,6)), false, 25).
holds(3, in_tower((block,5),(block,1)), false, 25).
holds(3, in_tower((block,5),(block,2)), false, 25).
holds(3, in_tower((block,5),(block,3)), false, 25).
holds(3, in_tower((block,5),(block,4)), false, 25).
holds(3, in_tower((block,5),(block,5)), false, 25).
holds(3, in_tower((block,5),(block,6)), false, 25).
holds(3, in_tower((block,6),(block,1)), false, 25).
holds(3, in_tower((block,6),(block,2)), false, 25).
holds(3, in_tower((block,6),(block,3)), false, 25).
holds(3, in_tower((block,6),(block,4)), false, 25).
holds(3, in_tower((block,6),(block,5)), false, 25).
holds(3, in_tower((block,6),(block,6)), false, 25).
holds(3, on((block,1)), puzzle_room_table, 25).
holds(3, on((block,2)), puzzle_room_table, 25).
holds(3, on((block,3)), (block,1), 25).
holds(3, on((block,4)), nothing, 25).
holds(3, on((block,5)), nothing, 25).
holds(3, on((block,6)), nothing, 25).
holds(3, tower_base((block,1),puzzle_room_table), true, 25).
holds(3, tower_base((block,2),puzzle_room_table), true, 25).
holds(3, tower_base((block,3),puzzle_room_table), false, 25).
holds(3, tower_base((block,4),puzzle_room_table), false, 25).
holds(3, tower_base((block,5),puzzle_room_table), false, 25).
holds(3, tower_base((block,6),puzzle_room_table), false, 25).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 25).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 25).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 25).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 25).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 25).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 25).

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=39']

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 15})
SubGoal({'L': 3, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 16})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 17})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 18})
SubGoal({'L': 3, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 19})
SubGoal({'L': 3, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 20})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 21})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 22})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 23})
SubGoal({'L': 3, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 24})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 25})
SubGoal({'L': 3, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 26})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 27})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 28})
SubGoal({'L': 3, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 29})

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 15 rules into program part base:

sub_goal(3, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 15).
sub_goal(3, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 16).
sub_goal(3, talos, move(hallway), in(talos), hallway, 17).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 18).
sub_goal(3, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 19).
sub_goal(3, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 20).
sub_goal(3, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 21).
sub_goal(3, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 22).
sub_goal(3, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 23).
sub_goal(3, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 24).
sub_goal(3, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 25).
sub_goal(3, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 26).
sub_goal(3, talos, move(hallway), in(talos), hallway, 27).
sub_goal(3, talos, move(store_room), in(talos), store_room, 28).
sub_goal(3, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 29).

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=39']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001C09ABEF3A0>]
	incrementor = SolveIncrementor(step_start=25, step_increase=1, step_increase_initial=15, step_end_min=40, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1782.2008879000014, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 25), range_=None), IncPart(name='plan_module', args=('#inc', 25, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 25, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 25, 15, 29, 'sequential', 'false'), range_=None)]

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 837 rules

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005222899999353103s

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.157309s.

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022591s with result Satisfiable.

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001C09BE8EEA0>

[17-04-2022_10-26-57] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 25)
	('last_sgoals', 29)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('first_sgoals', 15)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001C09BE8EEA0>)

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 25). %* None *%
#program plan_module(#inc, 25, false, false). %* None *%
#program optimisation_module(#inc, 25, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 25, 15, 29, sequential, false). %* None *%

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     24 : Current =     39
Incrementor step ends | Minimum  =     40 : Maximum =    300

[17-04-2022_10-26-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(25), Number(25)]), ('plan_module', [Number(25), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(26), Number(25)]), ('plan_module', [Number(26), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(27), Number(25)]), ('plan_module', [Number(27), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(28), Number(25)]), ('plan_module', [Number(28), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(29), Number(25)]), ('plan_module', [Number(29), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(30), Number(25)]), ('plan_module', [Number(30), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(31), Number(25)]), ('plan_module', [Number(31), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(32), Number(25)]), ('plan_module', [Number(32), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(33), Number(25)]), ('plan_module', [Number(33), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(34), Number(25)]), ('plan_module', [Number(34), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(35), Number(25)]), ('plan_module', [Number(35), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(36), Number(25)]), ('plan_module', [Number(36), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(37), Number(25)]), ('plan_module', [Number(37), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(38), Number(25)]), ('plan_module', [Number(38), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(39), Number(25)]), ('plan_module', [Number(39), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.962847s.

[17-04-2022_10-26-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.426572s with result Unsatisfiable.

[17-04-2022_10-26-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.3894192000007024, Incremental time limit = None
Running cumulative time = 1.3894192000007024, Cumulative time limit = 1782.2008879000014
Used memory = (RSS = 2348.839844Mb, VMS = 2362.937500Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =     40 : Maximum =    300

[17-04-2022_10-26-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(25)]), ('plan_module', [Number(40), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.130294s.

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.026723s with result Unsatisfiable.

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.15701649999937217, Incremental time limit = None
Running cumulative time = 1.5464357000000746, Cumulative time limit = 1782.2008879000014
Used memory = (RSS = 2349.914062Mb, VMS = 2367.203125Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =     40 : Maximum =    300

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(25)]), ('plan_module', [Number(41), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.133979s.

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027423s with result Unsatisfiable.

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.16140219999942929, Incremental time limit = None
Running cumulative time = 1.7078378999995039, Cumulative time limit = 1782.2008879000014
Used memory = (RSS = 2351.687500Mb, VMS = 2368.523438Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =     40 : Maximum =    300

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(25)]), ('plan_module', [Number(42), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.135729s.

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.028572s with result Unsatisfiable.

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1643010999996477, Incremental time limit = None
Running cumulative time = 1.8721389999991516, Cumulative time limit = 1782.2008879000014
Used memory = (RSS = 2352.578125Mb, VMS = 2368.789062Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     42 : Current =     43
Incrementor step ends | Minimum  =     40 : Maximum =    300

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('state_module', [Number(43), Number(25)]), ('plan_module', [Number(43), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.138604s.

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.028860s with result Unsatisfiable.

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.16746359999979177, Incremental time limit = None
Running cumulative time = 2.0396025999989433, Cumulative time limit = 1782.2008879000014
Used memory = (RSS = 2353.589844Mb, VMS = 2369.050781Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     43 : Current =     44
Incrementor step ends | Minimum  =     40 : Maximum =    300

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('state_module', [Number(44), Number(25)]), ('plan_module', [Number(44), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.139279s.

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036746s with result Unsatisfiable.

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1760249000008116, Incremental time limit = None
Running cumulative time = 2.215627499999755, Cumulative time limit = 1782.2008879000014
Used memory = (RSS = 2354.476562Mb, VMS = 2369.312500Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     44 : Current =     45
Incrementor step ends | Minimum  =     40 : Maximum =    300

[17-04-2022_10-26-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('state_module', [Number(45), Number(25)]), ('plan_module', [Number(45), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.141789s.

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.061487s with result Unsatisfiable.

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2032760000001872, Incremental time limit = None
Running cumulative time = 2.418903499999942, Cumulative time limit = 1782.2008879000014
Used memory = (RSS = 2356.468750Mb, VMS = 2370.988281Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     45 : Current =     46
Incrementor step ends | Minimum  =     40 : Maximum =    300

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('state_module', [Number(46), Number(25)]), ('plan_module', [Number(46), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.142333s.

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.089085s with result Unsatisfiable.

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.23141820000000735, Incremental time limit = None
Running cumulative time = 2.6503216999999495, Cumulative time limit = 1782.2008879000014
Used memory = (RSS = 2357.320312Mb, VMS = 2371.250000Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     46 : Current =     47
Incrementor step ends | Minimum  =     40 : Maximum =    300

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(47)]), ('state_module', [Number(47), Number(25)]), ('plan_module', [Number(47), Number(25), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(25), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(25), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.144011s.

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.153736s with result Satisfiable.

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.29774709999946936, Incremental time limit = None
Running cumulative time = 2.948068799999419, Cumulative time limit = 1782.2008879000014
Used memory = (RSS = 2370.847656Mb, VMS = 2393.382812Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.068865s, Solving = 0.879204s, Total = 2.948069s, Memory = (RSS = 2370.847656Mb, VMS = 2393.382812Mb), Step range = [25-47]), Calls = 9
Final Model :: Total atoms = 26175, Cost = (-2,), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.962847s, Solving = 0.426572s, Total = 1.389419s, Memory = (RSS = 2348.839844Mb, VMS = 2362.937500Mb), Step range = [25-39]
2 : Statistics :: Grounding = 0.130294s, Solving = 0.026723s, Total = 0.157016s, Memory = (RSS = 2349.914062Mb, VMS = 2367.203125Mb), Step range = [40-40]
3 : Statistics :: Grounding = 0.133979s, Solving = 0.027423s, Total = 0.161402s, Memory = (RSS = 2351.687500Mb, VMS = 2368.523438Mb), Step range = [41-41]
4 : Statistics :: Grounding = 0.135729s, Solving = 0.028572s, Total = 0.164301s, Memory = (RSS = 2352.578125Mb, VMS = 2368.789062Mb), Step range = [42-42]
5 : Statistics :: Grounding = 0.138604s, Solving = 0.028860s, Total = 0.167464s, Memory = (RSS = 2353.589844Mb, VMS = 2369.050781Mb), Step range = [43-43]
6 : Statistics :: Grounding = 0.139279s, Solving = 0.036746s, Total = 0.176025s, Memory = (RSS = 2354.476562Mb, VMS = 2369.312500Mb), Step range = [44-44]
7 : Statistics :: Grounding = 0.141789s, Solving = 0.061487s, Total = 0.203276s, Memory = (RSS = 2356.468750Mb, VMS = 2370.988281Mb), Step range = [45-45]
8 : Statistics :: Grounding = 0.142333s, Solving = 0.089085s, Total = 0.231418s, Memory = (RSS = 2357.320312Mb, VMS = 2371.250000Mb), Step range = [46-46]
9 : Statistics :: Grounding = 0.144011s, Solving = 0.153736s, Total = 0.297747s, Memory = (RSS = 2370.847656Mb, VMS = 2393.382812Mb), Step range = [47-47]

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.948069s due to: Stop condition reached.

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 19, 35: 19, 36: 19, 37: 20, 38: 20, 39: 20, 40: 20, 41: 21, 42: 22, 43: 23, 44: 24, 45: 25}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 36, 20: 40, 21: 41, 22: 42, 23: 43, 24: 44, 25: 45}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 19, 35: 19, 36: 19, 37: 20, 38: 20, 39: 20, 40: 20, 41: 21, 42: 22, 43: 23, 44: 24, 45: 25}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 36, 20: 40, 21: 41, 22: 42, 23: 43, 24: 44, 25: 45}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 19, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 28, 47: 29}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 37, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 45, 28: 46, 29: 47}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 29, Last requested goal index = 29, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.068865s, Solving = 0.879204s, Total = 2.948069s, Memory = (RSS = 2370.847656Mb, VMS = 2393.382812Mb), Step range = [25-47]), Calls = 9
Model :: Total atoms = 26175, Cost = (-2,), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 22 :: Actions = 22                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 24:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 25:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 26:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 27:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 38:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 39:
    Current Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 40:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 41:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 42:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((puzzle_room,0))
Step 43:
    Current Sub-goals:
        [Index = 25] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 25] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : move((hallway,2))
Step 44:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((hallway,1))
Step 45:
    Current Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 46:
    Current Sub-goals:
        [Index = 28] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 28] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 47:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=25, end_step=None

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for parts of the existing plan at the current level that have already been divided: start_step=25

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=47

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=25

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 4, Current planning level is complete = False

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 47, chosen step range to extract = range(25, 48)

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 47, Total actions = 47, Produced sub-goal stages = 47, Produced sub-goal literals = 55
Level [1]: Length = 45, Total actions = 45, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  22, AC =  22, CF = 1.0, GT =   4.84s, ST =   2.11s, OT = 0.00s, TT =   6.95s, EF = (LE = 1.5, AC = 1.5), ED = (LE = 1.1, AC = 1.1), EB = (LE = 0.8, AC = 0.8)

[17-04-2022_10-27-01] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=3, plan_length=22, start_step=25, blend=Blend(left=0, right=0)

[17-04-2022_10-27-01] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=1, small_group_size=7, large_group_size=8

[17-04-2022_10-27-01] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=32, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=39, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 3, Problem Range = [4-6], Size = 22, Sub-goal Stage Range = [26-47]
Division points [total=2] : [(Index = 32, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 39, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Monolevel problem 2 at level 2 solved.

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 4 at level 1:
Total Templated Partial Problems = 3, Problem Range = [4-6], Size = 22, Sub-goal Stage Range = [26-47]
Division points [total=2] : [(Index = 32, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 39, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [26-32]

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 45, chosen step range to extract = range(0, 46)

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 47, Total actions = 47, Produced sub-goal stages = 47, Produced sub-goal literals = 55
Level [1]: Length = 45, Total actions = 45, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 47, chosen step range to extract = range(0, 48)

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 47, Total actions = 47, Produced sub-goal stages = 47, Produced sub-goal literals = 55
Level [1]: Length = 45, Total actions = 45, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 44, chosen step range to extract = range(0, 45)

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 47, Total actions = 47, Produced sub-goal stages = 47, Produced sub-goal literals = 55
Level [1]: Length = 45, Total actions = 45, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 47, Total actions = 47, Produced sub-goal stages = 47, Produced sub-goal literals = 55
Level [1]: Length = 45, Total actions = 45, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [26-32], problem number = 4, increment number = 4

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 26)
	('last_sgoals', 32)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1761.9343870999983)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [26-32] : Concurrency disabled : Minimum search length bound enabled with value 51

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 26
last_sgoals = 32
start_step = 45
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 51

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[17-04-2022_10-27-01] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[17-04-2022_10-27-01] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 45 as problem start state.

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,6))', 'S': 45})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 45})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 45})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 45})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 45})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 45})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 45})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,6)', 'S': 45})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 45})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 45})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 45})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 45})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((store_room,0),0,0)', 'S': 45})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((store_room,0),0,0)', 'S': 45})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((store_room,0),0,0)', 'S': 45})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((store_room,0),0,0)', 'S': 45})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((store_room,0),0,0)', 'S': 45})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((store_room,0),0,0)', 'S': 45})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((store_room,0),0,0)', 'S': 45})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((store_room,0),0,0)', 'S': 45})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((store_room,0),0,0)', 'S': 45})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 45})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 45})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 45})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 45})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((store_room,0),0,0)', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 45})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 45})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 45})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 45})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 45})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 45})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 45})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 45})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 45})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,6))', 'S': 45})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 45})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 45})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 45})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 45})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 45})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 45})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': '(block,6)', 'S': 45})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 45})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 45})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 45})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 45})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 45})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 45})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 45})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0)', 'S': 45})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0)', 'S': 45})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0)', 'S': 45})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0)', 'S': 45})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0)', 'S': 45})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0)', 'S': 45})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 45})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 45})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 45})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 45})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(store_room,0)', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 45})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 45})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 45})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 45})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 45})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 45})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 45})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 45})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 45})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 45})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 45})

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 164 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 45).
holds(1, complete_tower(red,puzzle_room_table), false, 45).
holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 45).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 45).
holds(1, configuration(manipulator_limb_1), extended, 45).
holds(1, configuration(manipulator_limb_2), extended, 45).
holds(1, configuration(puzzle_room_door), open, 45).
holds(1, configuration(starting_room_door), closed, 45).
holds(1, configuration(store_room_door), open, 45).
holds(1, grasping(manipulator_end_1), (block,6), 45).
holds(1, grasping(manipulator_end_2), (block,5), 45).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 45).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 45).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 45).
holds(1, in((block,4)), ((store_room,0),0,0), 45).
holds(1, in((block,5)), ((store_room,0),0,0), 45).
holds(1, in((block,6)), ((store_room,0),0,0), 45).
holds(1, in(manipulator_arm_1), ((store_room,0),0,0), 45).
holds(1, in(manipulator_arm_2), ((store_room,0),0,0), 45).
holds(1, in(manipulator_end_1), ((store_room,0),0,0), 45).
holds(1, in(manipulator_end_2), ((store_room,0),0,0), 45).
holds(1, in(manipulator_limb_1), ((store_room,0),0,0), 45).
holds(1, in(manipulator_limb_2), ((store_room,0),0,0), 45).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 45).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 45).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 45).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 45).
holds(1, in(talos), ((store_room,0),0,0), 45).
holds(1, in_tower((block,1),(block,1)), true, 45).
holds(1, in_tower((block,1),(block,2)), false, 45).
holds(1, in_tower((block,1),(block,3)), true, 45).
holds(1, in_tower((block,1),(block,4)), false, 45).
holds(1, in_tower((block,1),(block,5)), false, 45).
holds(1, in_tower((block,1),(block,6)), false, 45).
holds(1, in_tower((block,2),(block,1)), false, 45).
holds(1, in_tower((block,2),(block,2)), true, 45).
holds(1, in_tower((block,2),(block,3)), false, 45).
holds(1, in_tower((block,2),(block,4)), false, 45).
holds(1, in_tower((block,2),(block,5)), false, 45).
holds(1, in_tower((block,2),(block,6)), false, 45).
holds(1, in_tower((block,3),(block,1)), false, 45).
holds(1, in_tower((block,3),(block,2)), false, 45).
holds(1, in_tower((block,3),(block,3)), false, 45).
holds(1, in_tower((block,3),(block,4)), false, 45).
holds(1, in_tower((block,3),(block,5)), false, 45).
holds(1, in_tower((block,3),(block,6)), false, 45).
holds(1, in_tower((block,4),(block,1)), false, 45).
holds(1, in_tower((block,4),(block,2)), false, 45).
holds(1, in_tower((block,4),(block,3)), false, 45).
holds(1, in_tower((block,4),(block,4)), false, 45).
holds(1, in_tower((block,4),(block,5)), false, 45).
holds(1, in_tower((block,4),(block,6)), false, 45).
holds(1, in_tower((block,5),(block,1)), false, 45).
holds(1, in_tower((block,5),(block,2)), false, 45).
holds(1, in_tower((block,5),(block,3)), false, 45).
holds(1, in_tower((block,5),(block,4)), false, 45).
holds(1, in_tower((block,5),(block,5)), false, 45).
holds(1, in_tower((block,5),(block,6)), false, 45).
holds(1, in_tower((block,6),(block,1)), false, 45).
holds(1, in_tower((block,6),(block,2)), false, 45).
holds(1, in_tower((block,6),(block,3)), false, 45).
holds(1, in_tower((block,6),(block,4)), false, 45).
holds(1, in_tower((block,6),(block,5)), false, 45).
holds(1, in_tower((block,6),(block,6)), false, 45).
holds(1, on((block,1)), puzzle_room_table_left, 45).
holds(1, on((block,2)), puzzle_room_table_right, 45).
holds(1, on((block,3)), (block,1), 45).
holds(1, on((block,4)), nothing, 45).
holds(1, on((block,5)), nothing, 45).
holds(1, on((block,6)), nothing, 45).
holds(1, tower_base((block,1),puzzle_room_table), true, 45).
holds(1, tower_base((block,2),puzzle_room_table), true, 45).
holds(1, tower_base((block,3),puzzle_room_table), false, 45).
holds(1, tower_base((block,4),puzzle_room_table), false, 45).
holds(1, tower_base((block,5),puzzle_room_table), false, 45).
holds(1, tower_base((block,6),puzzle_room_table), false, 45).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 45).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 45).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 45).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 45).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 45).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 45).
holds(2, complete_tower(blue,puzzle_room_table), false, 45).
holds(2, complete_tower(red,puzzle_room_table), false, 45).
holds(2, configuration(manipulator_end_1), aligned_with((block,6)), 45).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 45).
holds(2, configuration(manipulator_limb_1), extended, 45).
holds(2, configuration(manipulator_limb_2), extended, 45).
holds(2, configuration(puzzle_room_door), open, 45).
holds(2, configuration(starting_room_door), closed, 45).
holds(2, configuration(store_room_door), open, 45).
holds(2, grasping(manipulator_end_1), (block,6), 45).
holds(2, grasping(manipulator_end_2), (block,5), 45).
holds(2, in((block,1)), (puzzle_room,1), 45).
holds(2, in((block,2)), (puzzle_room,1), 45).
holds(2, in((block,3)), (puzzle_room,1), 45).
holds(2, in((block,4)), (store_room,0), 45).
holds(2, in((block,5)), (store_room,0), 45).
holds(2, in((block,6)), (store_room,0), 45).
holds(2, in(manipulator_arm_1), (store_room,0), 45).
holds(2, in(manipulator_arm_2), (store_room,0), 45).
holds(2, in(manipulator_end_1), (store_room,0), 45).
holds(2, in(manipulator_end_2), (store_room,0), 45).
holds(2, in(manipulator_limb_1), (store_room,0), 45).
holds(2, in(manipulator_limb_2), (store_room,0), 45).
holds(2, in(puzzle_room_table), (puzzle_room,1), 45).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 45).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 45).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 45).
holds(2, in(talos), (store_room,0), 45).
holds(2, in_tower((block,1),(block,1)), true, 45).
holds(2, in_tower((block,1),(block,2)), false, 45).
holds(2, in_tower((block,1),(block,3)), true, 45).
holds(2, in_tower((block,1),(block,4)), false, 45).
holds(2, in_tower((block,1),(block,5)), false, 45).
holds(2, in_tower((block,1),(block,6)), false, 45).
holds(2, in_tower((block,2),(block,1)), false, 45).
holds(2, in_tower((block,2),(block,2)), true, 45).
holds(2, in_tower((block,2),(block,3)), false, 45).
holds(2, in_tower((block,2),(block,4)), false, 45).
holds(2, in_tower((block,2),(block,5)), false, 45).
holds(2, in_tower((block,2),(block,6)), false, 45).
holds(2, in_tower((block,3),(block,1)), false, 45).
holds(2, in_tower((block,3),(block,2)), false, 45).
holds(2, in_tower((block,3),(block,3)), false, 45).
holds(2, in_tower((block,3),(block,4)), false, 45).
holds(2, in_tower((block,3),(block,5)), false, 45).
holds(2, in_tower((block,3),(block,6)), false, 45).
holds(2, in_tower((block,4),(block,1)), false, 45).
holds(2, in_tower((block,4),(block,2)), false, 45).
holds(2, in_tower((block,4),(block,3)), false, 45).
holds(2, in_tower((block,4),(block,4)), false, 45).
holds(2, in_tower((block,4),(block,5)), false, 45).
holds(2, in_tower((block,4),(block,6)), false, 45).
holds(2, in_tower((block,5),(block,1)), false, 45).
holds(2, in_tower((block,5),(block,2)), false, 45).
holds(2, in_tower((block,5),(block,3)), false, 45).
holds(2, in_tower((block,5),(block,4)), false, 45).
holds(2, in_tower((block,5),(block,5)), false, 45).
holds(2, in_tower((block,5),(block,6)), false, 45).
holds(2, in_tower((block,6),(block,1)), false, 45).
holds(2, in_tower((block,6),(block,2)), false, 45).
holds(2, in_tower((block,6),(block,3)), false, 45).
holds(2, in_tower((block,6),(block,4)), false, 45).
holds(2, in_tower((block,6),(block,5)), false, 45).
holds(2, in_tower((block,6),(block,6)), false, 45).
holds(2, on((block,1)), puzzle_room_table_left, 45).
holds(2, on((block,2)), puzzle_room_table_right, 45).
holds(2, on((block,3)), (block,1), 45).
holds(2, on((block,4)), nothing, 45).
holds(2, on((block,5)), nothing, 45).
holds(2, on((block,6)), nothing, 45).
holds(2, tower_base((block,1),puzzle_room_table), true, 45).
holds(2, tower_base((block,2),puzzle_room_table), true, 45).
holds(2, tower_base((block,3),puzzle_room_table), false, 45).
holds(2, tower_base((block,4),puzzle_room_table), false, 45).
holds(2, tower_base((block,5),puzzle_room_table), false, 45).
holds(2, tower_base((block,6),puzzle_room_table), false, 45).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 45).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 45).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 45).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 45).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 45).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 45).

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=51']

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'I': 26})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'I': 27})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((store_room,1))', 'F': 'in(talos)', 'V': '(store_room,1)', 'I': 28})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((hallway,0))', 'F': 'in(talos)', 'V': '(hallway,0)', 'I': 29})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((hallway,1))', 'F': 'in(talos)', 'V': '(hallway,1)', 'I': 30})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((hallway,2))', 'F': 'in(talos)', 'V': '(hallway,2)', 'I': 31})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'F': 'in(talos)', 'V': '(puzzle_room,0)', 'I': 32})

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 7 rules into program part base:

sub_goal(2, talos, configure(manipulator_limb_1,retracted), configuration(manipulator_limb_1), retracted, 26).
sub_goal(2, talos, configure(manipulator_limb_2,retracted), configuration(manipulator_limb_2), retracted, 27).
sub_goal(2, talos, move((store_room,1)), in(talos), (store_room,1), 28).
sub_goal(2, talos, move((hallway,0)), in(talos), (hallway,0), 29).
sub_goal(2, talos, move((hallway,1)), in(talos), (hallway,1), 30).
sub_goal(2, talos, move((hallway,2)), in(talos), (hallway,2), 31).
sub_goal(2, talos, move((puzzle_room,0)), in(talos), (puzzle_room,0), 32).

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=51']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001C09ABEFCA0>]
	incrementor = SolveIncrementor(step_start=45, step_increase=1, step_increase_initial=7, step_end_min=52, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1761.9343870999983, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 45), range_=None), IncPart(name='plan_module', args=('#inc', 45, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 45, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 45, 26, 32, 'sequential', 'false'), range_=None)]

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 848 rules

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005298000000038883s

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.172926s.

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025652s with result Satisfiable.

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001C09B4E8130>

[17-04-2022_10-27-01] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 45)
	('last_sgoals', 32)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('first_sgoals', 26)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001C09B4E8130>)

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 45). %* None *%
#program plan_module(#inc, 45, false, false). %* None *%
#program optimisation_module(#inc, 45, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 45, 26, 32, sequential, false). %* None *%

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     44 : Current =     51
Incrementor step ends | Minimum  =     52 : Maximum =    300

[17-04-2022_10-27-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(51)]), ('state_module', [Number(45), Number(45)]), ('plan_module', [Number(45), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(45), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(45), Number(26), Number(32), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(46), Number(45)]), ('plan_module', [Number(46), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(45), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(45), Number(26), Number(32), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(47), Number(45)]), ('plan_module', [Number(47), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(45), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(45), Number(26), Number(32), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(48), Number(45)]), ('plan_module', [Number(48), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(45), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(45), Number(26), Number(32), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(49), Number(45)]), ('plan_module', [Number(49), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(49), Number(45), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(45), Number(26), Number(32), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(50), Number(45)]), ('plan_module', [Number(50), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(45), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(45), Number(26), Number(32), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(51), Number(45)]), ('plan_module', [Number(51), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(45), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(45), Number(26), Number(32), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.432349s.

[17-04-2022_10-27-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.428425s with result Unsatisfiable.

[17-04-2022_10-27-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.860774499999934, Incremental time limit = None
Running cumulative time = 1.860774499999934, Cumulative time limit = 1761.9343870999983
Used memory = (RSS = 2355.855469Mb, VMS = 2370.402344Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     51 : Current =     52
Incrementor step ends | Minimum  =     52 : Maximum =    300

[17-04-2022_10-27-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(52)]), ('state_module', [Number(52), Number(45)]), ('plan_module', [Number(52), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(45), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(45), Number(26), Number(32), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.300246s.

[17-04-2022_10-27-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.048526s with result Unsatisfiable.

[17-04-2022_10-27-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3487725999993927, Incremental time limit = None
Running cumulative time = 2.2095470999993267, Cumulative time limit = 1761.9343870999983
Used memory = (RSS = 2357.976562Mb, VMS = 2375.968750Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     52 : Current =     53
Incrementor step ends | Minimum  =     52 : Maximum =    300

[17-04-2022_10-27-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(53)]), ('state_module', [Number(53), Number(45)]), ('plan_module', [Number(53), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(45), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(45), Number(26), Number(32), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.311297s.

[17-04-2022_10-27-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050426s with result Unsatisfiable.

[17-04-2022_10-27-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3617224999998143, Incremental time limit = None
Running cumulative time = 2.571269599999141, Cumulative time limit = 1761.9343870999983
Used memory = (RSS = 2360.160156Mb, VMS = 2376.492188Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     53 : Current =     54
Incrementor step ends | Minimum  =     52 : Maximum =    300

[17-04-2022_10-27-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('state_module', [Number(54), Number(45)]), ('plan_module', [Number(54), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(45), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(45), Number(26), Number(32), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.316682s.

[17-04-2022_10-27-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053297s with result Unsatisfiable.

[17-04-2022_10-27-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.36997949999931734, Incremental time limit = None
Running cumulative time = 2.9412490999984584, Cumulative time limit = 1761.9343870999983
Used memory = (RSS = 2362.285156Mb, VMS = 2377.015625Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     54 : Current =     55
Incrementor step ends | Minimum  =     52 : Maximum =    300

[17-04-2022_10-27-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(55), Number(45)]), ('plan_module', [Number(55), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(45), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(45), Number(26), Number(32), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.318670s.

[17-04-2022_10-27-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.058556s with result Unsatisfiable.

[17-04-2022_10-27-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3772255000003497, Incremental time limit = None
Running cumulative time = 3.318474599998808, Cumulative time limit = 1761.9343870999983
Used memory = (RSS = 2369.535156Mb, VMS = 2391.265625Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =     52 : Maximum =    300

[17-04-2022_10-27-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(45)]), ('plan_module', [Number(56), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(45), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(45), Number(26), Number(32), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.326116s.

[17-04-2022_10-27-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.066327s with result Unsatisfiable.

[17-04-2022_10-27-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3924425000004703, Incremental time limit = None
Running cumulative time = 3.7109170999992784, Cumulative time limit = 1761.9343870999983
Used memory = (RSS = 2371.996094Mb, VMS = 2392.847656Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     56 : Current =     57
Incrementor step ends | Minimum  =     52 : Maximum =    300

[17-04-2022_10-27-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('state_module', [Number(57), Number(45)]), ('plan_module', [Number(57), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(45), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(45), Number(26), Number(32), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.334111s.

[17-04-2022_10-27-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.069727s with result Unsatisfiable.

[17-04-2022_10-27-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4038386000011087, Incremental time limit = None
Running cumulative time = 4.114755700000387, Cumulative time limit = 1761.9343870999983
Used memory = (RSS = 2374.519531Mb, VMS = 2394.156250Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     57 : Current =     58
Incrementor step ends | Minimum  =     52 : Maximum =    300

[17-04-2022_10-27-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(58)]), ('state_module', [Number(58), Number(45)]), ('plan_module', [Number(58), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(45), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(45), Number(26), Number(32), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.340423s.

[17-04-2022_10-27-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.072505s with result Unsatisfiable.

[17-04-2022_10-27-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.41292839999914577, Incremental time limit = None
Running cumulative time = 4.527684099999533, Cumulative time limit = 1761.9343870999983
Used memory = (RSS = 2377.296875Mb, VMS = 2394.675781Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     58 : Current =     59
Incrementor step ends | Minimum  =     52 : Maximum =    300

[17-04-2022_10-27-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(59)]), ('state_module', [Number(59), Number(45)]), ('plan_module', [Number(59), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(45), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(45), Number(26), Number(32), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.345778s.

[17-04-2022_10-27-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.093630s with result Unsatisfiable.

[17-04-2022_10-27-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.43940810000003694, Incremental time limit = None
Running cumulative time = 4.96709219999957, Cumulative time limit = 1761.9343870999983
Used memory = (RSS = 2379.832031Mb, VMS = 2395.191406Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     59 : Current =     60
Incrementor step ends | Minimum  =     52 : Maximum =    300

[17-04-2022_10-27-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(60)]), ('state_module', [Number(60), Number(45)]), ('plan_module', [Number(60), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(60), Number(45), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('conformance_module', [Number(60), Number(45), Number(26), Number(32), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.353628s.

[17-04-2022_10-27-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.117297s with result Unsatisfiable.

[17-04-2022_10-27-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4709253999999419, Incremental time limit = None
Running cumulative time = 5.438017599999512, Cumulative time limit = 1761.9343870999983
Used memory = (RSS = 2386.687500Mb, VMS = 2415.195312Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     60 : Current =     61
Incrementor step ends | Minimum  =     52 : Maximum =    300

[17-04-2022_10-27-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(61)]), ('state_module', [Number(61), Number(45)]), ('plan_module', [Number(61), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(61), Number(45), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('conformance_module', [Number(61), Number(45), Number(26), Number(32), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.357466s.

[17-04-2022_10-27-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.164910s with result Unsatisfiable.

[17-04-2022_10-27-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5223763000003601, Incremental time limit = None
Running cumulative time = 5.960393899999872, Cumulative time limit = 1761.9343870999983
Used memory = (RSS = 2390.156250Mb, VMS = 2417.437500Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     61 : Current =     62
Incrementor step ends | Minimum  =     52 : Maximum =    300

[17-04-2022_10-27-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(62)]), ('state_module', [Number(62), Number(45)]), ('plan_module', [Number(62), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(62), Number(45), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(62)]), ('action_preconditions', [Number(62)]), ('variable_relations', [Number(62)]), ('abstraction_mappings', [Number(62)]), ('conformance_module', [Number(62), Number(45), Number(26), Number(32), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.365923s.

[17-04-2022_10-27-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.347038s with result Unsatisfiable.

[17-04-2022_10-27-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7129607999995642, Incremental time limit = None
Running cumulative time = 6.673354699999436, Cumulative time limit = 1761.9343870999983
Used memory = (RSS = 2395.695312Mb, VMS = 2421.695312Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     62 : Current =     63
Incrementor step ends | Minimum  =     52 : Maximum =    300

[17-04-2022_10-27-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(63)]), ('state_module', [Number(63), Number(45)]), ('plan_module', [Number(63), Number(45), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(63), Number(45), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('conformance_module', [Number(63), Number(45), Number(26), Number(32), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.369504s.

[17-04-2022_10-27-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.258060s with result Satisfiable.

[17-04-2022_10-27-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6275648000000729, Incremental time limit = None
Running cumulative time = 7.300919499999509, Cumulative time limit = 1761.9343870999983
Used memory = (RSS = 2399.761719Mb, VMS = 2423.488281Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.472194s, Solving = 1.828726s, Total = 7.300919s, Memory = (RSS = 2399.761719Mb, VMS = 2423.488281Mb), Step range = [45-63]), Calls = 13
Final Model :: Total atoms = 28246, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[17-04-2022_10-27-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.432349s, Solving = 0.428425s, Total = 1.860774s, Memory = (RSS = 2355.855469Mb, VMS = 2370.402344Mb), Step range = [45-51]
2 : Statistics :: Grounding = 0.300246s, Solving = 0.048526s, Total = 0.348773s, Memory = (RSS = 2357.976562Mb, VMS = 2375.968750Mb), Step range = [52-52]
3 : Statistics :: Grounding = 0.311297s, Solving = 0.050426s, Total = 0.361722s, Memory = (RSS = 2360.160156Mb, VMS = 2376.492188Mb), Step range = [53-53]
4 : Statistics :: Grounding = 0.316682s, Solving = 0.053297s, Total = 0.369979s, Memory = (RSS = 2362.285156Mb, VMS = 2377.015625Mb), Step range = [54-54]
5 : Statistics :: Grounding = 0.318670s, Solving = 0.058556s, Total = 0.377226s, Memory = (RSS = 2369.535156Mb, VMS = 2391.265625Mb), Step range = [55-55]
6 : Statistics :: Grounding = 0.326116s, Solving = 0.066327s, Total = 0.392443s, Memory = (RSS = 2371.996094Mb, VMS = 2392.847656Mb), Step range = [56-56]
7 : Statistics :: Grounding = 0.334111s, Solving = 0.069727s, Total = 0.403839s, Memory = (RSS = 2374.519531Mb, VMS = 2394.156250Mb), Step range = [57-57]
8 : Statistics :: Grounding = 0.340423s, Solving = 0.072505s, Total = 0.412928s, Memory = (RSS = 2377.296875Mb, VMS = 2394.675781Mb), Step range = [58-58]
9 : Statistics :: Grounding = 0.345778s, Solving = 0.093630s, Total = 0.439408s, Memory = (RSS = 2379.832031Mb, VMS = 2395.191406Mb), Step range = [59-59]
10 : Statistics :: Grounding = 0.353628s, Solving = 0.117297s, Total = 0.470925s, Memory = (RSS = 2386.687500Mb, VMS = 2415.195312Mb), Step range = [60-60]
11 : Statistics :: Grounding = 0.357466s, Solving = 0.164910s, Total = 0.522376s, Memory = (RSS = 2390.156250Mb, VMS = 2417.437500Mb), Step range = [61-61]
12 : Statistics :: Grounding = 0.365923s, Solving = 0.347038s, Total = 0.712961s, Memory = (RSS = 2395.695312Mb, VMS = 2421.695312Mb), Step range = [62-62]
13 : Statistics :: Grounding = 0.369504s, Solving = 0.258060s, Total = 0.627565s, Memory = (RSS = 2399.761719Mb, VMS = 2423.488281Mb), Step range = [63-63]

[17-04-2022_10-27-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 7.300919s due to: Stop condition reached.

[17-04-2022_10-27-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[17-04-2022_10-27-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[17-04-2022_10-27-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-27-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[17-04-2022_10-27-09] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 19, 35: 19, 36: 19, 37: 20, 38: 20, 39: 20, 40: 20, 41: 21, 42: 22, 43: 23, 44: 24, 45: 25}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 36, 20: 40, 21: 41, 22: 42, 23: 43, 24: 44, 25: 45}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 19, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 28, 47: 29}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 37, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 45, 28: 46, 29: 47}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 19, 35: 19, 36: 19, 37: 20, 38: 20, 39: 20, 40: 20, 41: 21, 42: 22, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 28, 50: 28, 51: 29, 52: 29, 53: 29, 54: 29, 55: 30, 56: 30, 57: 30, 58: 31, 59: 31, 60: 31, 61: 32, 62: 32, 63: 32}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 36, 20: 40, 21: 41, 22: 42, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 50, 29: 54, 30: 57, 31: 60, 32: 63}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 19, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 28, 47: 29}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 37, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 45, 28: 46, 29: 47}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 32, Last requested goal index = 32, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.472194s, Solving = 1.828726s, Total = 7.300919s, Memory = (RSS = 2399.761719Mb, VMS = 2423.488281Mb), Step range = [45-63]), Calls = 13
Model :: Total atoms = 28246, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 18 :: Actions = 18                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,0))
Step 10:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,0))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 21:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(store_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(store_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 31:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 18] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 37:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,1))
Step 38:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,1))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 21] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Achieved Sub-goals:
        [Index = 21] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 42:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 44:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 45:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 46:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 47:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 48:
    Current Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 49:
    Current Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 50:
    Current Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 51:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 52:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 53:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 54:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 55:
    Current Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 56:
    Current Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 57:
    Current Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 58:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 59:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 60:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 61:
    Current Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 62:
    Current Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 63:
    Current Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=63

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Monolevel problem 4 at level 1 solved.

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Online planning increment 4 finished.

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 44 : Goals achieved = 29 : Goals unachieved = 15 : Complete = False
Level = 1 : Solved problems = 4 : Total constraining sub-goal stages = 47 : Goals achieved = 32 : Goals unachieved = 15 : Complete = False

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 5 by method ground-first is [1-1].

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 5 at level 1:
Total Templated Partial Problems = 3, Problem Range = [4-6], Size = 22, Sub-goal Stage Range = [26-47]
Division points [total=2] : [(Index = 32, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 39, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [33-39]

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 63, chosen step range to extract = range(0, 64)

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 47, Total actions = 47, Produced sub-goal stages = 47, Produced sub-goal literals = 55
Level [1]: Length = 63, Total actions = 63, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 47, chosen step range to extract = range(0, 48)

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 47, Total actions = 47, Produced sub-goal stages = 47, Produced sub-goal literals = 55
Level [1]: Length = 63, Total actions = 63, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 44, chosen step range to extract = range(0, 45)

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 47, Total actions = 47, Produced sub-goal stages = 47, Produced sub-goal literals = 55
Level [1]: Length = 63, Total actions = 63, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 47, Total actions = 47, Produced sub-goal stages = 47, Produced sub-goal literals = 55
Level [1]: Length = 63, Total actions = 63, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [33-39], problem number = 5, increment number = 5

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 33)
	('last_sgoals', 39)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1754.6334675999988)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [33-39] : Concurrency disabled : Minimum search length bound enabled with value 69

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 33
last_sgoals = 39
start_step = 63
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 69

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[17-04-2022_10-27-10] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[17-04-2022_10-27-10] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 63 as problem start state.

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,6))', 'S': 63})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 63})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 63})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 63})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 63})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 63})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 63})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,6)', 'S': 63})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 63})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 63})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 63})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 63})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((store_room,0),0,0)', 'S': 63})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((puzzle_room,0),0,1)', 'S': 63})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((puzzle_room,0),0,1)', 'S': 63})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((puzzle_room,0),0,1)', 'S': 63})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((puzzle_room,0),0,1)', 'S': 63})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((puzzle_room,0),0,1)', 'S': 63})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((puzzle_room,0),0,1)', 'S': 63})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((puzzle_room,0),0,1)', 'S': 63})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((puzzle_room,0),0,1)', 'S': 63})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 63})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 63})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 63})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 63})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((puzzle_room,0),0,1)', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 63})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 63})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 63})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 63})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 63})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 63})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 63})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 63})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 63})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,6))', 'S': 63})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 63})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 63})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 63})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 63})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 63})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 63})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': '(block,6)', 'S': 63})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 63})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 63})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 63})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 63})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 63})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(puzzle_room,0)', 'S': 63})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,0)', 'S': 63})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,0)', 'S': 63})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,0)', 'S': 63})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,0)', 'S': 63})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,0)', 'S': 63})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,0)', 'S': 63})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,0)', 'S': 63})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 63})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 63})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 63})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 63})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(puzzle_room,0)', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 63})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 63})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 63})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 63})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 63})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 63})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 63})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 63})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 63})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 63})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 63})

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 164 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 63).
holds(1, complete_tower(red,puzzle_room_table), false, 63).
holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 63).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 63).
holds(1, configuration(manipulator_limb_1), retracted, 63).
holds(1, configuration(manipulator_limb_2), retracted, 63).
holds(1, configuration(puzzle_room_door), open, 63).
holds(1, configuration(starting_room_door), closed, 63).
holds(1, configuration(store_room_door), open, 63).
holds(1, grasping(manipulator_end_1), (block,6), 63).
holds(1, grasping(manipulator_end_2), (block,5), 63).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 63).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 63).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 63).
holds(1, in((block,4)), ((store_room,0),0,0), 63).
holds(1, in((block,5)), ((puzzle_room,0),0,1), 63).
holds(1, in((block,6)), ((puzzle_room,0),0,1), 63).
holds(1, in(manipulator_arm_1), ((puzzle_room,0),0,1), 63).
holds(1, in(manipulator_arm_2), ((puzzle_room,0),0,1), 63).
holds(1, in(manipulator_end_1), ((puzzle_room,0),0,1), 63).
holds(1, in(manipulator_end_2), ((puzzle_room,0),0,1), 63).
holds(1, in(manipulator_limb_1), ((puzzle_room,0),0,1), 63).
holds(1, in(manipulator_limb_2), ((puzzle_room,0),0,1), 63).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 63).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 63).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 63).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 63).
holds(1, in(talos), ((puzzle_room,0),0,1), 63).
holds(1, in_tower((block,1),(block,1)), true, 63).
holds(1, in_tower((block,1),(block,2)), false, 63).
holds(1, in_tower((block,1),(block,3)), true, 63).
holds(1, in_tower((block,1),(block,4)), false, 63).
holds(1, in_tower((block,1),(block,5)), false, 63).
holds(1, in_tower((block,1),(block,6)), false, 63).
holds(1, in_tower((block,2),(block,1)), false, 63).
holds(1, in_tower((block,2),(block,2)), true, 63).
holds(1, in_tower((block,2),(block,3)), false, 63).
holds(1, in_tower((block,2),(block,4)), false, 63).
holds(1, in_tower((block,2),(block,5)), false, 63).
holds(1, in_tower((block,2),(block,6)), false, 63).
holds(1, in_tower((block,3),(block,1)), false, 63).
holds(1, in_tower((block,3),(block,2)), false, 63).
holds(1, in_tower((block,3),(block,3)), false, 63).
holds(1, in_tower((block,3),(block,4)), false, 63).
holds(1, in_tower((block,3),(block,5)), false, 63).
holds(1, in_tower((block,3),(block,6)), false, 63).
holds(1, in_tower((block,4),(block,1)), false, 63).
holds(1, in_tower((block,4),(block,2)), false, 63).
holds(1, in_tower((block,4),(block,3)), false, 63).
holds(1, in_tower((block,4),(block,4)), false, 63).
holds(1, in_tower((block,4),(block,5)), false, 63).
holds(1, in_tower((block,4),(block,6)), false, 63).
holds(1, in_tower((block,5),(block,1)), false, 63).
holds(1, in_tower((block,5),(block,2)), false, 63).
holds(1, in_tower((block,5),(block,3)), false, 63).
holds(1, in_tower((block,5),(block,4)), false, 63).
holds(1, in_tower((block,5),(block,5)), false, 63).
holds(1, in_tower((block,5),(block,6)), false, 63).
holds(1, in_tower((block,6),(block,1)), false, 63).
holds(1, in_tower((block,6),(block,2)), false, 63).
holds(1, in_tower((block,6),(block,3)), false, 63).
holds(1, in_tower((block,6),(block,4)), false, 63).
holds(1, in_tower((block,6),(block,5)), false, 63).
holds(1, in_tower((block,6),(block,6)), false, 63).
holds(1, on((block,1)), puzzle_room_table_left, 63).
holds(1, on((block,2)), puzzle_room_table_right, 63).
holds(1, on((block,3)), (block,1), 63).
holds(1, on((block,4)), nothing, 63).
holds(1, on((block,5)), nothing, 63).
holds(1, on((block,6)), nothing, 63).
holds(1, tower_base((block,1),puzzle_room_table), true, 63).
holds(1, tower_base((block,2),puzzle_room_table), true, 63).
holds(1, tower_base((block,3),puzzle_room_table), false, 63).
holds(1, tower_base((block,4),puzzle_room_table), false, 63).
holds(1, tower_base((block,5),puzzle_room_table), false, 63).
holds(1, tower_base((block,6),puzzle_room_table), false, 63).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 63).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 63).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 63).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 63).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 63).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 63).
holds(2, complete_tower(blue,puzzle_room_table), false, 63).
holds(2, complete_tower(red,puzzle_room_table), false, 63).
holds(2, configuration(manipulator_end_1), aligned_with((block,6)), 63).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 63).
holds(2, configuration(manipulator_limb_1), retracted, 63).
holds(2, configuration(manipulator_limb_2), retracted, 63).
holds(2, configuration(puzzle_room_door), open, 63).
holds(2, configuration(starting_room_door), closed, 63).
holds(2, configuration(store_room_door), open, 63).
holds(2, grasping(manipulator_end_1), (block,6), 63).
holds(2, grasping(manipulator_end_2), (block,5), 63).
holds(2, in((block,1)), (puzzle_room,1), 63).
holds(2, in((block,2)), (puzzle_room,1), 63).
holds(2, in((block,3)), (puzzle_room,1), 63).
holds(2, in((block,4)), (store_room,0), 63).
holds(2, in((block,5)), (puzzle_room,0), 63).
holds(2, in((block,6)), (puzzle_room,0), 63).
holds(2, in(manipulator_arm_1), (puzzle_room,0), 63).
holds(2, in(manipulator_arm_2), (puzzle_room,0), 63).
holds(2, in(manipulator_end_1), (puzzle_room,0), 63).
holds(2, in(manipulator_end_2), (puzzle_room,0), 63).
holds(2, in(manipulator_limb_1), (puzzle_room,0), 63).
holds(2, in(manipulator_limb_2), (puzzle_room,0), 63).
holds(2, in(puzzle_room_table), (puzzle_room,1), 63).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 63).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 63).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 63).
holds(2, in(talos), (puzzle_room,0), 63).
holds(2, in_tower((block,1),(block,1)), true, 63).
holds(2, in_tower((block,1),(block,2)), false, 63).
holds(2, in_tower((block,1),(block,3)), true, 63).
holds(2, in_tower((block,1),(block,4)), false, 63).
holds(2, in_tower((block,1),(block,5)), false, 63).
holds(2, in_tower((block,1),(block,6)), false, 63).
holds(2, in_tower((block,2),(block,1)), false, 63).
holds(2, in_tower((block,2),(block,2)), true, 63).
holds(2, in_tower((block,2),(block,3)), false, 63).
holds(2, in_tower((block,2),(block,4)), false, 63).
holds(2, in_tower((block,2),(block,5)), false, 63).
holds(2, in_tower((block,2),(block,6)), false, 63).
holds(2, in_tower((block,3),(block,1)), false, 63).
holds(2, in_tower((block,3),(block,2)), false, 63).
holds(2, in_tower((block,3),(block,3)), false, 63).
holds(2, in_tower((block,3),(block,4)), false, 63).
holds(2, in_tower((block,3),(block,5)), false, 63).
holds(2, in_tower((block,3),(block,6)), false, 63).
holds(2, in_tower((block,4),(block,1)), false, 63).
holds(2, in_tower((block,4),(block,2)), false, 63).
holds(2, in_tower((block,4),(block,3)), false, 63).
holds(2, in_tower((block,4),(block,4)), false, 63).
holds(2, in_tower((block,4),(block,5)), false, 63).
holds(2, in_tower((block,4),(block,6)), false, 63).
holds(2, in_tower((block,5),(block,1)), false, 63).
holds(2, in_tower((block,5),(block,2)), false, 63).
holds(2, in_tower((block,5),(block,3)), false, 63).
holds(2, in_tower((block,5),(block,4)), false, 63).
holds(2, in_tower((block,5),(block,5)), false, 63).
holds(2, in_tower((block,5),(block,6)), false, 63).
holds(2, in_tower((block,6),(block,1)), false, 63).
holds(2, in_tower((block,6),(block,2)), false, 63).
holds(2, in_tower((block,6),(block,3)), false, 63).
holds(2, in_tower((block,6),(block,4)), false, 63).
holds(2, in_tower((block,6),(block,5)), false, 63).
holds(2, in_tower((block,6),(block,6)), false, 63).
holds(2, on((block,1)), puzzle_room_table_left, 63).
holds(2, on((block,2)), puzzle_room_table_right, 63).
holds(2, on((block,3)), (block,1), 63).
holds(2, on((block,4)), nothing, 63).
holds(2, on((block,5)), nothing, 63).
holds(2, on((block,6)), nothing, 63).
holds(2, tower_base((block,1),puzzle_room_table), true, 63).
holds(2, tower_base((block,2),puzzle_room_table), true, 63).
holds(2, tower_base((block,3),puzzle_room_table), false, 63).
holds(2, tower_base((block,4),puzzle_room_table), false, 63).
holds(2, tower_base((block,5),puzzle_room_table), false, 63).
holds(2, tower_base((block,6),puzzle_room_table), false, 63).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 63).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 63).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 63).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 63).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 63).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 63).

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=69']

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'I': 33})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'I': 34})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,6),puzzle_room_table_right)', 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'I': 35})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,6))', 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'I': 36})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,6))', 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'I': 36})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'I': 37})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 38})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'I': 39})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'I': 39})

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 9 rules into program part base:

sub_goal(2, talos, move((puzzle_room,1)), in(talos), (puzzle_room,1), 33).
sub_goal(2, talos, configure(manipulator_limb_1,extended), configuration(manipulator_limb_1), extended, 34).
sub_goal(2, talos, put(manipulator_end_1,(block,6),puzzle_room_table_right), on((block,6)), puzzle_room_table_right, 35).
sub_goal(2, talos, release(manipulator_end_1,(block,6)), configuration(manipulator_end_1), aligned_with(nothing), 36).
sub_goal(2, talos, release(manipulator_end_1,(block,6)), grasping(manipulator_end_1), nothing, 36).
sub_goal(2, talos, configure(manipulator_limb_2,extended), configuration(manipulator_limb_2), extended, 37).
sub_goal(2, talos, put(manipulator_end_2,(block,5),(block,6)), on((block,5)), (block,6), 38).
sub_goal(2, talos, configure(manipulator_limb_1,retracted), configuration(manipulator_end_1), aligned_with(nothing), 39).
sub_goal(2, talos, configure(manipulator_limb_1,retracted), configuration(manipulator_limb_1), retracted, 39).

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=69']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001C09C6B3040>]
	incrementor = SolveIncrementor(step_start=63, step_increase=1, step_increase_initial=7, step_end_min=70, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1754.6334675999988, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 63), range_=None), IncPart(name='plan_module', args=('#inc', 63, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 63, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 63, 33, 39, 'sequential', 'false'), range_=None)]

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 850 rules

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0046561999997720704s

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.172778s.

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025270s with result Satisfiable.

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001C09C0FA6D0>

[17-04-2022_10-27-10] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 63)
	('last_sgoals', 39)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('first_sgoals', 33)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001C09C0FA6D0>)

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 63). %* None *%
#program plan_module(#inc, 63, false, false). %* None *%
#program optimisation_module(#inc, 63, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 63, 33, 39, sequential, false). %* None *%

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     62 : Current =     69
Incrementor step ends | Minimum  =     70 : Maximum =    300

[17-04-2022_10-27-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(69)]), ('state_module', [Number(63), Number(63)]), ('plan_module', [Number(63), Number(63), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(63), Number(63), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('conformance_module', [Number(63), Number(63), Number(33), Number(39), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(64), Number(63)]), ('plan_module', [Number(64), Number(63), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(64), Number(63), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(64)]), ('action_preconditions', [Number(64)]), ('variable_relations', [Number(64)]), ('abstraction_mappings', [Number(64)]), ('conformance_module', [Number(64), Number(63), Number(33), Number(39), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(65), Number(63)]), ('plan_module', [Number(65), Number(63), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(65), Number(63), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('conformance_module', [Number(65), Number(63), Number(33), Number(39), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(66), Number(63)]), ('plan_module', [Number(66), Number(63), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(66), Number(63), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('conformance_module', [Number(66), Number(63), Number(33), Number(39), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(67), Number(63)]), ('plan_module', [Number(67), Number(63), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(67), Number(63), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(67)]), ('action_preconditions', [Number(67)]), ('variable_relations', [Number(67)]), ('abstraction_mappings', [Number(67)]), ('conformance_module', [Number(67), Number(63), Number(33), Number(39), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(68), Number(63)]), ('plan_module', [Number(68), Number(63), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(63), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(63), Number(33), Number(39), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(69), Number(63)]), ('plan_module', [Number(69), Number(63), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(69), Number(63), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(69)]), ('action_preconditions', [Number(69)]), ('variable_relations', [Number(69)]), ('abstraction_mappings', [Number(69)]), ('conformance_module', [Number(69), Number(63), Number(33), Number(39), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.438845s.

[17-04-2022_10-27-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.430615s with result Unsatisfiable.

[17-04-2022_10-27-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.86945999999989, Incremental time limit = None
Running cumulative time = 1.86945999999989, Cumulative time limit = 1754.6334675999988
Used memory = (RSS = 2357.527344Mb, VMS = 2372.351562Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     69 : Current =     70
Incrementor step ends | Minimum  =     70 : Maximum =    300

[17-04-2022_10-27-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(70)]), ('state_module', [Number(70), Number(63)]), ('plan_module', [Number(70), Number(63), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(70), Number(63), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(70)]), ('action_preconditions', [Number(70)]), ('variable_relations', [Number(70)]), ('abstraction_mappings', [Number(70)]), ('conformance_module', [Number(70), Number(63), Number(33), Number(39), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.301388s.

[17-04-2022_10-27-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045141s with result Unsatisfiable.

[17-04-2022_10-27-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3465292999999292, Incremental time limit = None
Running cumulative time = 2.215989299999819, Cumulative time limit = 1754.6334675999988
Used memory = (RSS = 2359.800781Mb, VMS = 2377.921875Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     70 : Current =     71
Incrementor step ends | Minimum  =     70 : Maximum =    300

[17-04-2022_10-27-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(71)]), ('state_module', [Number(71), Number(63)]), ('plan_module', [Number(71), Number(63), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(71), Number(63), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('conformance_module', [Number(71), Number(63), Number(33), Number(39), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.313080s.

[17-04-2022_10-27-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.059416s with result Unsatisfiable.

[17-04-2022_10-27-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.37249620000056893, Incremental time limit = None
Running cumulative time = 2.588485500000388, Cumulative time limit = 1754.6334675999988
Used memory = (RSS = 2361.886719Mb, VMS = 2378.445312Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     71 : Current =     72
Incrementor step ends | Minimum  =     70 : Maximum =    300

[17-04-2022_10-27-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(72)]), ('state_module', [Number(72), Number(63)]), ('plan_module', [Number(72), Number(63), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(72), Number(63), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(72)]), ('action_preconditions', [Number(72)]), ('variable_relations', [Number(72)]), ('abstraction_mappings', [Number(72)]), ('conformance_module', [Number(72), Number(63), Number(33), Number(39), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.322743s.

[17-04-2022_10-27-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.055641s with result Unsatisfiable.

[17-04-2022_10-27-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.378384399999959, Incremental time limit = None
Running cumulative time = 2.966869900000347, Cumulative time limit = 1754.6334675999988
Used memory = (RSS = 2364.101562Mb, VMS = 2378.968750Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     72 : Current =     73
Incrementor step ends | Minimum  =     70 : Maximum =    300

[17-04-2022_10-27-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(73)]), ('state_module', [Number(73), Number(63)]), ('plan_module', [Number(73), Number(63), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(73), Number(63), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(73)]), ('action_preconditions', [Number(73)]), ('variable_relations', [Number(73)]), ('abstraction_mappings', [Number(73)]), ('conformance_module', [Number(73), Number(63), Number(33), Number(39), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.329618s.

[17-04-2022_10-27-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.073404s with result Unsatisfiable.

[17-04-2022_10-27-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.40302210000027117, Incremental time limit = None
Running cumulative time = 3.3698920000006183, Cumulative time limit = 1754.6334675999988
Used memory = (RSS = 2371.304688Mb, VMS = 2393.218750Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     73 : Current =     74
Incrementor step ends | Minimum  =     70 : Maximum =    300

[17-04-2022_10-27-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(74)]), ('state_module', [Number(74), Number(63)]), ('plan_module', [Number(74), Number(63), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(74), Number(63), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(74)]), ('action_preconditions', [Number(74)]), ('variable_relations', [Number(74)]), ('abstraction_mappings', [Number(74)]), ('conformance_module', [Number(74), Number(63), Number(33), Number(39), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.338474s.

[17-04-2022_10-27-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.064226s with result Unsatisfiable.

[17-04-2022_10-27-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.40269959999932325, Incremental time limit = None
Running cumulative time = 3.7725915999999415, Cumulative time limit = 1754.6334675999988
Used memory = (RSS = 2374.042969Mb, VMS = 2394.800781Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     74 : Current =     75
Incrementor step ends | Minimum  =     70 : Maximum =    300

[17-04-2022_10-27-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(75)]), ('state_module', [Number(75), Number(63)]), ('plan_module', [Number(75), Number(63), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(75), Number(63), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(75)]), ('action_preconditions', [Number(75)]), ('variable_relations', [Number(75)]), ('abstraction_mappings', [Number(75)]), ('conformance_module', [Number(75), Number(63), Number(33), Number(39), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.342813s.

[17-04-2022_10-27-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.109440s with result Satisfiable.

[17-04-2022_10-27-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.45225269999991724, Incremental time limit = None
Running cumulative time = 4.224844299999859, Cumulative time limit = 1754.6334675999988
Used memory = (RSS = 2379.453125Mb, VMS = 2399.117188Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.386961s, Solving = 0.837883s, Total = 4.224844s, Memory = (RSS = 2379.453125Mb, VMS = 2399.117188Mb), Step range = [63-75]), Calls = 7
Final Model :: Total atoms = 25817, Cost = (-2,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[17-04-2022_10-27-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.438845s, Solving = 0.430615s, Total = 1.869460s, Memory = (RSS = 2357.527344Mb, VMS = 2372.351562Mb), Step range = [63-69]
2 : Statistics :: Grounding = 0.301388s, Solving = 0.045141s, Total = 0.346529s, Memory = (RSS = 2359.800781Mb, VMS = 2377.921875Mb), Step range = [70-70]
3 : Statistics :: Grounding = 0.313080s, Solving = 0.059416s, Total = 0.372496s, Memory = (RSS = 2361.886719Mb, VMS = 2378.445312Mb), Step range = [71-71]
4 : Statistics :: Grounding = 0.322743s, Solving = 0.055641s, Total = 0.378384s, Memory = (RSS = 2364.101562Mb, VMS = 2378.968750Mb), Step range = [72-72]
5 : Statistics :: Grounding = 0.329618s, Solving = 0.073404s, Total = 0.403022s, Memory = (RSS = 2371.304688Mb, VMS = 2393.218750Mb), Step range = [73-73]
6 : Statistics :: Grounding = 0.338474s, Solving = 0.064226s, Total = 0.402700s, Memory = (RSS = 2374.042969Mb, VMS = 2394.800781Mb), Step range = [74-74]
7 : Statistics :: Grounding = 0.342813s, Solving = 0.109440s, Total = 0.452253s, Memory = (RSS = 2379.453125Mb, VMS = 2399.117188Mb), Step range = [75-75]

[17-04-2022_10-27-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 4.224844s due to: Stop condition reached.

[17-04-2022_10-27-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[17-04-2022_10-27-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[17-04-2022_10-27-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-27-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 19, 35: 19, 36: 19, 37: 20, 38: 20, 39: 20, 40: 20, 41: 21, 42: 22, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 28, 50: 28, 51: 29, 52: 29, 53: 29, 54: 29, 55: 30, 56: 30, 57: 30, 58: 31, 59: 31, 60: 31, 61: 32, 62: 32, 63: 32}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 36, 20: 40, 21: 41, 22: 42, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 50, 29: 54, 30: 57, 31: 60, 32: 63}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 19, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 28, 47: 29}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 37, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 45, 28: 46, 29: 47}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 19, 35: 19, 36: 19, 37: 20, 38: 20, 39: 20, 40: 20, 41: 21, 42: 22, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 28, 50: 28, 51: 29, 52: 29, 53: 29, 54: 29, 55: 30, 56: 30, 57: 30, 58: 31, 59: 31, 60: 31, 61: 32, 62: 32, 63: 32, 64: 33, 65: 33, 66: 33, 67: 34, 68: 34, 69: 34, 70: 34, 71: 35, 72: 36, 73: 37, 74: 38, 75: 39}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 36, 20: 40, 21: 41, 22: 42, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 50, 29: 54, 30: 57, 31: 60, 32: 63, 33: 66, 34: 70, 35: 71, 36: 72, 37: 73, 38: 74, 39: 75}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 19, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 28, 47: 29}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 37, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 45, 28: 46, 29: 47}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 39, Last requested goal index = 39, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.386961s, Solving = 0.837883s, Total = 4.224844s, Memory = (RSS = 2379.453125Mb, VMS = 2399.117188Mb), Step range = [63-75]), Calls = 7
Model :: Total atoms = 25817, Cost = (-2,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 12 :: Actions = 12                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,0))
Step 10:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,0))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 21:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(store_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(store_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 31:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 18] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 37:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,1))
Step 38:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,1))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 21] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Achieved Sub-goals:
        [Index = 21] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 42:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 44:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 45:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 46:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 47:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 48:
    Current Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 49:
    Current Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 50:
    Current Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 51:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 52:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 53:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 54:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 55:
    Current Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 56:
    Current Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 57:
    Current Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 58:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 59:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 60:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 61:
    Current Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 62:
    Current Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 63:
    Current Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 64:
    Current Sub-goals:
        [Index = 33] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,1))
Step 65:
    Current Sub-goals:
        [Index = 33] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,1))
Step 66:
    Current Sub-goals:
        [Index = 33] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 33] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,1))
Step 67:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,1))
Step 68:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,1))
Step 69:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 70:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 71:
    Current Sub-goals:
        [Index = 35] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Achieved Sub-goals:
        [Index = 35] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 72:
    Current Sub-goals:
        [Index = 36] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 36] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 36] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 36] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 73:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 74:
    Current Sub-goals:
        [Index = 38] talos : put(manipulator_end_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 38] talos : put(manipulator_end_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 75:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 39] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 39] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=75

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Monolevel problem 5 at level 1 solved.

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Online planning increment 5 finished.

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 44 : Goals achieved = 29 : Goals unachieved = 15 : Complete = False
Level = 1 : Solved problems = 5 : Total constraining sub-goal stages = 47 : Goals achieved = 39 : Goals unachieved = 8 : Complete = False

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 6 by method ground-first is [1-1].

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 6 at level 1:
Total Templated Partial Problems = 3, Problem Range = [4-6], Size = 22, Sub-goal Stage Range = [26-47]
Division points [total=2] : [(Index = 32, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 39, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [40-47]

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 75, chosen step range to extract = range(0, 76)

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 47, Total actions = 47, Produced sub-goal stages = 47, Produced sub-goal literals = 55
Level [1]: Length = 75, Total actions = 75, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 47, chosen step range to extract = range(0, 48)

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 47, Total actions = 47, Produced sub-goal stages = 47, Produced sub-goal literals = 55
Level [1]: Length = 75, Total actions = 75, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 44, chosen step range to extract = range(0, 45)

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 47, Total actions = 47, Produced sub-goal stages = 47, Produced sub-goal literals = 55
Level [1]: Length = 75, Total actions = 75, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 47, Total actions = 47, Produced sub-goal stages = 47, Produced sub-goal literals = 55
Level [1]: Length = 75, Total actions = 75, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [40-47], problem number = 6, increment number = 6

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 40)
	('last_sgoals', 47)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1750.408623299999)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [40-47] : Concurrency disabled : Minimum search length bound enabled with value 82

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 40
last_sgoals = 47
start_step = 75
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 82

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[17-04-2022_10-27-15] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[17-04-2022_10-27-15] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 75 as problem start state.

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 75})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 75})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 75})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 75})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 75})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 75})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 75})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 75})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 75})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 75})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 75})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 75})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((store_room,0),0,0)', 'S': 75})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((puzzle_room,1),5,0)', 'S': 75})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((puzzle_room,1),5,0)', 'S': 75})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((puzzle_room,1),5,0)', 'S': 75})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((puzzle_room,1),5,0)', 'S': 75})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((puzzle_room,1),5,0)', 'S': 75})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((puzzle_room,1),5,0)', 'S': 75})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((puzzle_room,1),5,0)', 'S': 75})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((puzzle_room,1),5,0)', 'S': 75})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 75})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 75})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 75})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 75})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((puzzle_room,1),5,0)', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 75})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 75})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 75})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 75})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 75})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 75})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 75})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 75})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 75})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 75})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 75})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 75})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 75})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 75})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 75})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 75})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 75})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 75})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 75})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 75})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 75})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 75})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 75})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 75})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 75})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 75})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 75})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 75})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 75})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 75})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 75})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 75})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 75})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 75})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 75})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 75})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 75})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 75})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 75})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 75})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 75})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 75})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 75})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 75})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 75})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 75})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 75})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 75})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 75})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 75})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 75})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 75})

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 164 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 75).
holds(1, complete_tower(red,puzzle_room_table), false, 75).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 75).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 75).
holds(1, configuration(manipulator_limb_1), retracted, 75).
holds(1, configuration(manipulator_limb_2), extended, 75).
holds(1, configuration(puzzle_room_door), open, 75).
holds(1, configuration(starting_room_door), closed, 75).
holds(1, configuration(store_room_door), open, 75).
holds(1, grasping(manipulator_end_1), nothing, 75).
holds(1, grasping(manipulator_end_2), (block,5), 75).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 75).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 75).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 75).
holds(1, in((block,4)), ((store_room,0),0,0), 75).
holds(1, in((block,5)), ((puzzle_room,1),5,0), 75).
holds(1, in((block,6)), ((puzzle_room,1),5,0), 75).
holds(1, in(manipulator_arm_1), ((puzzle_room,1),5,0), 75).
holds(1, in(manipulator_arm_2), ((puzzle_room,1),5,0), 75).
holds(1, in(manipulator_end_1), ((puzzle_room,1),5,0), 75).
holds(1, in(manipulator_end_2), ((puzzle_room,1),5,0), 75).
holds(1, in(manipulator_limb_1), ((puzzle_room,1),5,0), 75).
holds(1, in(manipulator_limb_2), ((puzzle_room,1),5,0), 75).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 75).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 75).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 75).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 75).
holds(1, in(talos), ((puzzle_room,1),5,0), 75).
holds(1, in_tower((block,1),(block,1)), true, 75).
holds(1, in_tower((block,1),(block,2)), false, 75).
holds(1, in_tower((block,1),(block,3)), true, 75).
holds(1, in_tower((block,1),(block,4)), false, 75).
holds(1, in_tower((block,1),(block,5)), false, 75).
holds(1, in_tower((block,1),(block,6)), false, 75).
holds(1, in_tower((block,2),(block,1)), false, 75).
holds(1, in_tower((block,2),(block,2)), true, 75).
holds(1, in_tower((block,2),(block,3)), false, 75).
holds(1, in_tower((block,2),(block,4)), false, 75).
holds(1, in_tower((block,2),(block,5)), false, 75).
holds(1, in_tower((block,2),(block,6)), false, 75).
holds(1, in_tower((block,3),(block,1)), false, 75).
holds(1, in_tower((block,3),(block,2)), false, 75).
holds(1, in_tower((block,3),(block,3)), false, 75).
holds(1, in_tower((block,3),(block,4)), false, 75).
holds(1, in_tower((block,3),(block,5)), false, 75).
holds(1, in_tower((block,3),(block,6)), false, 75).
holds(1, in_tower((block,4),(block,1)), false, 75).
holds(1, in_tower((block,4),(block,2)), false, 75).
holds(1, in_tower((block,4),(block,3)), false, 75).
holds(1, in_tower((block,4),(block,4)), false, 75).
holds(1, in_tower((block,4),(block,5)), false, 75).
holds(1, in_tower((block,4),(block,6)), false, 75).
holds(1, in_tower((block,5),(block,1)), false, 75).
holds(1, in_tower((block,5),(block,2)), false, 75).
holds(1, in_tower((block,5),(block,3)), false, 75).
holds(1, in_tower((block,5),(block,4)), false, 75).
holds(1, in_tower((block,5),(block,5)), false, 75).
holds(1, in_tower((block,5),(block,6)), false, 75).
holds(1, in_tower((block,6),(block,1)), false, 75).
holds(1, in_tower((block,6),(block,2)), false, 75).
holds(1, in_tower((block,6),(block,3)), false, 75).
holds(1, in_tower((block,6),(block,4)), false, 75).
holds(1, in_tower((block,6),(block,5)), true, 75).
holds(1, in_tower((block,6),(block,6)), true, 75).
holds(1, on((block,1)), puzzle_room_table_left, 75).
holds(1, on((block,2)), puzzle_room_table_right, 75).
holds(1, on((block,3)), (block,1), 75).
holds(1, on((block,4)), nothing, 75).
holds(1, on((block,5)), (block,6), 75).
holds(1, on((block,6)), puzzle_room_table_right, 75).
holds(1, tower_base((block,1),puzzle_room_table), true, 75).
holds(1, tower_base((block,2),puzzle_room_table), true, 75).
holds(1, tower_base((block,3),puzzle_room_table), false, 75).
holds(1, tower_base((block,4),puzzle_room_table), false, 75).
holds(1, tower_base((block,5),puzzle_room_table), false, 75).
holds(1, tower_base((block,6),puzzle_room_table), true, 75).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 75).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 75).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 75).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 75).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 75).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 75).
holds(2, complete_tower(blue,puzzle_room_table), false, 75).
holds(2, complete_tower(red,puzzle_room_table), false, 75).
holds(2, configuration(manipulator_end_1), aligned_with(nothing), 75).
holds(2, configuration(manipulator_end_2), aligned_with((block,5)), 75).
holds(2, configuration(manipulator_limb_1), retracted, 75).
holds(2, configuration(manipulator_limb_2), extended, 75).
holds(2, configuration(puzzle_room_door), open, 75).
holds(2, configuration(starting_room_door), closed, 75).
holds(2, configuration(store_room_door), open, 75).
holds(2, grasping(manipulator_end_1), nothing, 75).
holds(2, grasping(manipulator_end_2), (block,5), 75).
holds(2, in((block,1)), (puzzle_room,1), 75).
holds(2, in((block,2)), (puzzle_room,1), 75).
holds(2, in((block,3)), (puzzle_room,1), 75).
holds(2, in((block,4)), (store_room,0), 75).
holds(2, in((block,5)), (puzzle_room,1), 75).
holds(2, in((block,6)), (puzzle_room,1), 75).
holds(2, in(manipulator_arm_1), (puzzle_room,1), 75).
holds(2, in(manipulator_arm_2), (puzzle_room,1), 75).
holds(2, in(manipulator_end_1), (puzzle_room,1), 75).
holds(2, in(manipulator_end_2), (puzzle_room,1), 75).
holds(2, in(manipulator_limb_1), (puzzle_room,1), 75).
holds(2, in(manipulator_limb_2), (puzzle_room,1), 75).
holds(2, in(puzzle_room_table), (puzzle_room,1), 75).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 75).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 75).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 75).
holds(2, in(talos), (puzzle_room,1), 75).
holds(2, in_tower((block,1),(block,1)), true, 75).
holds(2, in_tower((block,1),(block,2)), false, 75).
holds(2, in_tower((block,1),(block,3)), true, 75).
holds(2, in_tower((block,1),(block,4)), false, 75).
holds(2, in_tower((block,1),(block,5)), false, 75).
holds(2, in_tower((block,1),(block,6)), false, 75).
holds(2, in_tower((block,2),(block,1)), false, 75).
holds(2, in_tower((block,2),(block,2)), true, 75).
holds(2, in_tower((block,2),(block,3)), false, 75).
holds(2, in_tower((block,2),(block,4)), false, 75).
holds(2, in_tower((block,2),(block,5)), false, 75).
holds(2, in_tower((block,2),(block,6)), false, 75).
holds(2, in_tower((block,3),(block,1)), false, 75).
holds(2, in_tower((block,3),(block,2)), false, 75).
holds(2, in_tower((block,3),(block,3)), false, 75).
holds(2, in_tower((block,3),(block,4)), false, 75).
holds(2, in_tower((block,3),(block,5)), false, 75).
holds(2, in_tower((block,3),(block,6)), false, 75).
holds(2, in_tower((block,4),(block,1)), false, 75).
holds(2, in_tower((block,4),(block,2)), false, 75).
holds(2, in_tower((block,4),(block,3)), false, 75).
holds(2, in_tower((block,4),(block,4)), false, 75).
holds(2, in_tower((block,4),(block,5)), false, 75).
holds(2, in_tower((block,4),(block,6)), false, 75).
holds(2, in_tower((block,5),(block,1)), false, 75).
holds(2, in_tower((block,5),(block,2)), false, 75).
holds(2, in_tower((block,5),(block,3)), false, 75).
holds(2, in_tower((block,5),(block,4)), false, 75).
holds(2, in_tower((block,5),(block,5)), false, 75).
holds(2, in_tower((block,5),(block,6)), false, 75).
holds(2, in_tower((block,6),(block,1)), false, 75).
holds(2, in_tower((block,6),(block,2)), false, 75).
holds(2, in_tower((block,6),(block,3)), false, 75).
holds(2, in_tower((block,6),(block,4)), false, 75).
holds(2, in_tower((block,6),(block,5)), true, 75).
holds(2, in_tower((block,6),(block,6)), true, 75).
holds(2, on((block,1)), puzzle_room_table_left, 75).
holds(2, on((block,2)), puzzle_room_table_right, 75).
holds(2, on((block,3)), (block,1), 75).
holds(2, on((block,4)), nothing, 75).
holds(2, on((block,5)), (block,6), 75).
holds(2, on((block,6)), puzzle_room_table_right, 75).
holds(2, tower_base((block,1),puzzle_room_table), true, 75).
holds(2, tower_base((block,2),puzzle_room_table), true, 75).
holds(2, tower_base((block,3),puzzle_room_table), false, 75).
holds(2, tower_base((block,4),puzzle_room_table), false, 75).
holds(2, tower_base((block,5),puzzle_room_table), false, 75).
holds(2, tower_base((block,6),puzzle_room_table), true, 75).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 75).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 75).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 75).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 75).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 75).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 75).

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=82']

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,5))', 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'I': 40})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,5))', 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'I': 40})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'I': 41})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'I': 41})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'F': 'in(talos)', 'V': '(puzzle_room,0)', 'I': 42})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((hallway,2))', 'F': 'in(talos)', 'V': '(hallway,2)', 'I': 43})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((hallway,1))', 'F': 'in(talos)', 'V': '(hallway,1)', 'I': 44})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((hallway,0))', 'F': 'in(talos)', 'V': '(hallway,0)', 'I': 45})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((store_room,1))', 'F': 'in(talos)', 'V': '(store_room,1)', 'I': 46})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'I': 47})

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 10 rules into program part base:

sub_goal(2, talos, release(manipulator_end_2,(block,5)), configuration(manipulator_end_2), aligned_with(nothing), 40).
sub_goal(2, talos, release(manipulator_end_2,(block,5)), grasping(manipulator_end_2), nothing, 40).
sub_goal(2, talos, configure(manipulator_limb_2,retracted), configuration(manipulator_end_2), aligned_with(nothing), 41).
sub_goal(2, talos, configure(manipulator_limb_2,retracted), configuration(manipulator_limb_2), retracted, 41).
sub_goal(2, talos, move((puzzle_room,0)), in(talos), (puzzle_room,0), 42).
sub_goal(2, talos, move((hallway,2)), in(talos), (hallway,2), 43).
sub_goal(2, talos, move((hallway,1)), in(talos), (hallway,1), 44).
sub_goal(2, talos, move((hallway,0)), in(talos), (hallway,0), 45).
sub_goal(2, talos, move((store_room,1)), in(talos), (store_room,1), 46).
sub_goal(2, talos, configure(manipulator_limb_2,extended), configuration(manipulator_limb_2), extended, 47).

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=82']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001C09C6B35E0>]
	incrementor = SolveIncrementor(step_start=75, step_increase=1, step_increase_initial=8, step_end_min=83, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1750.408623299999, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 75), range_=None), IncPart(name='plan_module', args=('#inc', 75, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 75, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 75, 40, 47, 'sequential', 'false'), range_=None)]

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 851 rules

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005533100000320701s

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.171586s.

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025802s with result Satisfiable.

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001C09CB2D310>

[17-04-2022_10-27-15] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 75)
	('last_sgoals', 47)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('first_sgoals', 40)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001C09CB2D310>)

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 75). %* None *%
#program plan_module(#inc, 75, false, false). %* None *%
#program optimisation_module(#inc, 75, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 75, 40, 47, sequential, false). %* None *%

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     74 : Current =     82
Incrementor step ends | Minimum  =     83 : Maximum =    300

[17-04-2022_10-27-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(82)]), ('state_module', [Number(75), Number(75)]), ('plan_module', [Number(75), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(75), Number(75), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(75)]), ('action_preconditions', [Number(75)]), ('variable_relations', [Number(75)]), ('abstraction_mappings', [Number(75)]), ('conformance_module', [Number(75), Number(75), Number(40), Number(47), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(76), Number(75)]), ('plan_module', [Number(76), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(76), Number(75), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(76)]), ('action_preconditions', [Number(76)]), ('variable_relations', [Number(76)]), ('abstraction_mappings', [Number(76)]), ('conformance_module', [Number(76), Number(75), Number(40), Number(47), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(77), Number(75)]), ('plan_module', [Number(77), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(77), Number(75), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(77)]), ('action_preconditions', [Number(77)]), ('variable_relations', [Number(77)]), ('abstraction_mappings', [Number(77)]), ('conformance_module', [Number(77), Number(75), Number(40), Number(47), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(78), Number(75)]), ('plan_module', [Number(78), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(78), Number(75), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(78)]), ('action_preconditions', [Number(78)]), ('variable_relations', [Number(78)]), ('abstraction_mappings', [Number(78)]), ('conformance_module', [Number(78), Number(75), Number(40), Number(47), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(79), Number(75)]), ('plan_module', [Number(79), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(79), Number(75), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(79)]), ('action_preconditions', [Number(79)]), ('variable_relations', [Number(79)]), ('abstraction_mappings', [Number(79)]), ('conformance_module', [Number(79), Number(75), Number(40), Number(47), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(80), Number(75)]), ('plan_module', [Number(80), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(80), Number(75), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(80)]), ('action_preconditions', [Number(80)]), ('variable_relations', [Number(80)]), ('abstraction_mappings', [Number(80)]), ('conformance_module', [Number(80), Number(75), Number(40), Number(47), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(81), Number(75)]), ('plan_module', [Number(81), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(81), Number(75), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(81)]), ('action_preconditions', [Number(81)]), ('variable_relations', [Number(81)]), ('abstraction_mappings', [Number(81)]), ('conformance_module', [Number(81), Number(75), Number(40), Number(47), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(82), Number(75)]), ('plan_module', [Number(82), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(82), Number(75), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(82)]), ('action_preconditions', [Number(82)]), ('variable_relations', [Number(82)]), ('abstraction_mappings', [Number(82)]), ('conformance_module', [Number(82), Number(75), Number(40), Number(47), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.636411s.

[17-04-2022_10-27-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.517966s with result Unsatisfiable.

[17-04-2022_10-27-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.1543769999998403, Incremental time limit = None
Running cumulative time = 2.1543769999998403, Cumulative time limit = 1750.408623299999
Used memory = (RSS = 2361.578125Mb, VMS = 2377.589844Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     82 : Current =     83
Incrementor step ends | Minimum  =     83 : Maximum =    300

[17-04-2022_10-27-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(83)]), ('state_module', [Number(83), Number(75)]), ('plan_module', [Number(83), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(83), Number(75), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(83)]), ('action_preconditions', [Number(83)]), ('variable_relations', [Number(83)]), ('abstraction_mappings', [Number(83)]), ('conformance_module', [Number(83), Number(75), Number(40), Number(47), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.310084s.

[17-04-2022_10-27-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053104s with result Unsatisfiable.

[17-04-2022_10-27-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.363188799999989, Incremental time limit = None
Running cumulative time = 2.5175657999998293, Cumulative time limit = 1750.408623299999
Used memory = (RSS = 2363.847656Mb, VMS = 2382.503906Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     83 : Current =     84
Incrementor step ends | Minimum  =     83 : Maximum =    300

[17-04-2022_10-27-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(84)]), ('state_module', [Number(84), Number(75)]), ('plan_module', [Number(84), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(84), Number(75), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(84)]), ('action_preconditions', [Number(84)]), ('variable_relations', [Number(84)]), ('abstraction_mappings', [Number(84)]), ('conformance_module', [Number(84), Number(75), Number(40), Number(47), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.320273s.

[17-04-2022_10-27-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054271s with result Unsatisfiable.

[17-04-2022_10-27-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.37454430000070715, Incremental time limit = None
Running cumulative time = 2.8921101000005365, Cumulative time limit = 1750.408623299999
Used memory = (RSS = 2365.996094Mb, VMS = 2383.027344Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     84 : Current =     85
Incrementor step ends | Minimum  =     83 : Maximum =    300

[17-04-2022_10-27-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(85)]), ('state_module', [Number(85), Number(75)]), ('plan_module', [Number(85), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(85), Number(75), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(85)]), ('action_preconditions', [Number(85)]), ('variable_relations', [Number(85)]), ('abstraction_mappings', [Number(85)]), ('conformance_module', [Number(85), Number(75), Number(40), Number(47), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.330270s.

[17-04-2022_10-27-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.056335s with result Unsatisfiable.

[17-04-2022_10-27-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.38660479999907693, Incremental time limit = None
Running cumulative time = 3.2787148999996134, Cumulative time limit = 1750.408623299999
Used memory = (RSS = 2368.101562Mb, VMS = 2383.554688Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     85 : Current =     86
Incrementor step ends | Minimum  =     83 : Maximum =    300

[17-04-2022_10-27-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(86)]), ('state_module', [Number(86), Number(75)]), ('plan_module', [Number(86), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(86), Number(75), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(86)]), ('action_preconditions', [Number(86)]), ('variable_relations', [Number(86)]), ('abstraction_mappings', [Number(86)]), ('conformance_module', [Number(86), Number(75), Number(40), Number(47), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.336739s.

[17-04-2022_10-27-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.068643s with result Unsatisfiable.

[17-04-2022_10-27-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.40538240000023507, Incremental time limit = None
Running cumulative time = 3.6840972999998485, Cumulative time limit = 1750.408623299999
Used memory = (RSS = 2375.828125Mb, VMS = 2400.949219Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     86 : Current =     87
Incrementor step ends | Minimum  =     83 : Maximum =    300

[17-04-2022_10-27-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(87)]), ('state_module', [Number(87), Number(75)]), ('plan_module', [Number(87), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(87), Number(75), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(87)]), ('action_preconditions', [Number(87)]), ('variable_relations', [Number(87)]), ('abstraction_mappings', [Number(87)]), ('conformance_module', [Number(87), Number(75), Number(40), Number(47), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.344416s.

[17-04-2022_10-27-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.082000s with result Unsatisfiable.

[17-04-2022_10-27-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4264155999999275, Incremental time limit = None
Running cumulative time = 4.110512899999776, Cumulative time limit = 1750.408623299999
Used memory = (RSS = 2378.507812Mb, VMS = 2402.265625Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     87 : Current =     88
Incrementor step ends | Minimum  =     83 : Maximum =    300

[17-04-2022_10-27-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(88)]), ('state_module', [Number(88), Number(75)]), ('plan_module', [Number(88), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(88), Number(75), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(88)]), ('action_preconditions', [Number(88)]), ('variable_relations', [Number(88)]), ('abstraction_mappings', [Number(88)]), ('conformance_module', [Number(88), Number(75), Number(40), Number(47), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.350947s.

[17-04-2022_10-27-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.086411s with result Unsatisfiable.

[17-04-2022_10-27-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.43735779999951774, Incremental time limit = None
Running cumulative time = 4.547870699999294, Cumulative time limit = 1750.408623299999
Used memory = (RSS = 2381.136719Mb, VMS = 2403.492188Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     88 : Current =     89
Incrementor step ends | Minimum  =     83 : Maximum =    300

[17-04-2022_10-27-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(89)]), ('state_module', [Number(89), Number(75)]), ('plan_module', [Number(89), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(89), Number(75), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(89)]), ('action_preconditions', [Number(89)]), ('variable_relations', [Number(89)]), ('abstraction_mappings', [Number(89)]), ('conformance_module', [Number(89), Number(75), Number(40), Number(47), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.356029s.

[17-04-2022_10-27-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.091886s with result Unsatisfiable.

[17-04-2022_10-27-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.44791449999956967, Incremental time limit = None
Running cumulative time = 4.995785199998863, Cumulative time limit = 1750.408623299999
Used memory = (RSS = 2386.148438Mb, VMS = 2406.800781Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     89 : Current =     90
Incrementor step ends | Minimum  =     83 : Maximum =    300

[17-04-2022_10-27-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(90)]), ('state_module', [Number(90), Number(75)]), ('plan_module', [Number(90), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(90), Number(75), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(90)]), ('action_preconditions', [Number(90)]), ('variable_relations', [Number(90)]), ('abstraction_mappings', [Number(90)]), ('conformance_module', [Number(90), Number(75), Number(40), Number(47), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.364610s.

[17-04-2022_10-27-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.078374s with result Unsatisfiable.

[17-04-2022_10-27-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4429831999996168, Incremental time limit = None
Running cumulative time = 5.43876839999848, Cumulative time limit = 1750.408623299999
Used memory = (RSS = 2389.015625Mb, VMS = 2407.324219Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     90 : Current =     91
Incrementor step ends | Minimum  =     83 : Maximum =    300

[17-04-2022_10-27-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(91)]), ('state_module', [Number(91), Number(75)]), ('plan_module', [Number(91), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(91), Number(75), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(91)]), ('action_preconditions', [Number(91)]), ('variable_relations', [Number(91)]), ('abstraction_mappings', [Number(91)]), ('conformance_module', [Number(91), Number(75), Number(40), Number(47), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.368768s.

[17-04-2022_10-27-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.105655s with result Unsatisfiable.

[17-04-2022_10-27-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4744233000001259, Incremental time limit = None
Running cumulative time = 5.913191699998606, Cumulative time limit = 1750.408623299999
Used memory = (RSS = 2393.574219Mb, VMS = 2409.984375Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     91 : Current =     92
Incrementor step ends | Minimum  =     83 : Maximum =    300

[17-04-2022_10-27-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(92)]), ('state_module', [Number(92), Number(75)]), ('plan_module', [Number(92), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(92), Number(75), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(92)]), ('action_preconditions', [Number(92)]), ('variable_relations', [Number(92)]), ('abstraction_mappings', [Number(92)]), ('conformance_module', [Number(92), Number(75), Number(40), Number(47), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.376492s.

[17-04-2022_10-27-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.135859s with result Unsatisfiable.

[17-04-2022_10-27-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5123512000000119, Incremental time limit = None
Running cumulative time = 6.425542899998618, Cumulative time limit = 1750.408623299999
Used memory = (RSS = 2401.527344Mb, VMS = 2434.878906Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     92 : Current =     93
Incrementor step ends | Minimum  =     83 : Maximum =    300

[17-04-2022_10-27-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(93)]), ('state_module', [Number(93), Number(75)]), ('plan_module', [Number(93), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(93), Number(75), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(93)]), ('action_preconditions', [Number(93)]), ('variable_relations', [Number(93)]), ('abstraction_mappings', [Number(93)]), ('conformance_module', [Number(93), Number(75), Number(40), Number(47), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.384752s.

[17-04-2022_10-27-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.297681s with result Unsatisfiable.

[17-04-2022_10-27-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6824327999993329, Incremental time limit = None
Running cumulative time = 7.107975699997951, Cumulative time limit = 1750.408623299999
Used memory = (RSS = 2404.929688Mb, VMS = 2437.167969Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     93 : Current =     94
Incrementor step ends | Minimum  =     83 : Maximum =    300

[17-04-2022_10-27-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(94)]), ('state_module', [Number(94), Number(75)]), ('plan_module', [Number(94), Number(75), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(94), Number(75), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(94)]), ('action_preconditions', [Number(94)]), ('variable_relations', [Number(94)]), ('abstraction_mappings', [Number(94)]), ('conformance_module', [Number(94), Number(75), Number(40), Number(47), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.398360s.

[17-04-2022_10-27-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.312126s with result Satisfiable.

[17-04-2022_10-27-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7104851999993116, Incremental time limit = None
Running cumulative time = 7.8184608999972625, Cumulative time limit = 1750.408623299999
Used memory = (RSS = 2414.593750Mb, VMS = 2444.160156Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.878151s, Solving = 1.940310s, Total = 7.818461s, Memory = (RSS = 2414.593750Mb, VMS = 2444.160156Mb), Step range = [75-94]), Calls = 13
Final Model :: Total atoms = 28719, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[17-04-2022_10-27-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.636411s, Solving = 0.517966s, Total = 2.154377s, Memory = (RSS = 2361.578125Mb, VMS = 2377.589844Mb), Step range = [75-82]
2 : Statistics :: Grounding = 0.310084s, Solving = 0.053104s, Total = 0.363189s, Memory = (RSS = 2363.847656Mb, VMS = 2382.503906Mb), Step range = [83-83]
3 : Statistics :: Grounding = 0.320273s, Solving = 0.054271s, Total = 0.374544s, Memory = (RSS = 2365.996094Mb, VMS = 2383.027344Mb), Step range = [84-84]
4 : Statistics :: Grounding = 0.330270s, Solving = 0.056335s, Total = 0.386605s, Memory = (RSS = 2368.101562Mb, VMS = 2383.554688Mb), Step range = [85-85]
5 : Statistics :: Grounding = 0.336739s, Solving = 0.068643s, Total = 0.405382s, Memory = (RSS = 2375.828125Mb, VMS = 2400.949219Mb), Step range = [86-86]
6 : Statistics :: Grounding = 0.344416s, Solving = 0.082000s, Total = 0.426416s, Memory = (RSS = 2378.507812Mb, VMS = 2402.265625Mb), Step range = [87-87]
7 : Statistics :: Grounding = 0.350947s, Solving = 0.086411s, Total = 0.437358s, Memory = (RSS = 2381.136719Mb, VMS = 2403.492188Mb), Step range = [88-88]
8 : Statistics :: Grounding = 0.356029s, Solving = 0.091886s, Total = 0.447914s, Memory = (RSS = 2386.148438Mb, VMS = 2406.800781Mb), Step range = [89-89]
9 : Statistics :: Grounding = 0.364610s, Solving = 0.078374s, Total = 0.442983s, Memory = (RSS = 2389.015625Mb, VMS = 2407.324219Mb), Step range = [90-90]
10 : Statistics :: Grounding = 0.368768s, Solving = 0.105655s, Total = 0.474423s, Memory = (RSS = 2393.574219Mb, VMS = 2409.984375Mb), Step range = [91-91]
11 : Statistics :: Grounding = 0.376492s, Solving = 0.135859s, Total = 0.512351s, Memory = (RSS = 2401.527344Mb, VMS = 2434.878906Mb), Step range = [92-92]
12 : Statistics :: Grounding = 0.384752s, Solving = 0.297681s, Total = 0.682433s, Memory = (RSS = 2404.929688Mb, VMS = 2437.167969Mb), Step range = [93-93]
13 : Statistics :: Grounding = 0.398360s, Solving = 0.312126s, Total = 0.710485s, Memory = (RSS = 2414.593750Mb, VMS = 2444.160156Mb), Step range = [94-94]

[17-04-2022_10-27-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 7.818461s due to: Stop condition reached.

[17-04-2022_10-27-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[17-04-2022_10-27-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[17-04-2022_10-27-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-27-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 19, 35: 19, 36: 19, 37: 20, 38: 20, 39: 20, 40: 20, 41: 21, 42: 22, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 28, 50: 28, 51: 29, 52: 29, 53: 29, 54: 29, 55: 30, 56: 30, 57: 30, 58: 31, 59: 31, 60: 31, 61: 32, 62: 32, 63: 32, 64: 33, 65: 33, 66: 33, 67: 34, 68: 34, 69: 34, 70: 34, 71: 35, 72: 36, 73: 37, 74: 38, 75: 39}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 36, 20: 40, 21: 41, 22: 42, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 50, 29: 54, 30: 57, 31: 60, 32: 63, 33: 66, 34: 70, 35: 71, 36: 72, 37: 73, 38: 74, 39: 75}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 19, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 28, 47: 29}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 37, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 45, 28: 46, 29: 47}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 19, 35: 19, 36: 19, 37: 20, 38: 20, 39: 20, 40: 20, 41: 21, 42: 22, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 28, 50: 28, 51: 29, 52: 29, 53: 29, 54: 29, 55: 30, 56: 30, 57: 30, 58: 31, 59: 31, 60: 31, 61: 32, 62: 32, 63: 32, 64: 33, 65: 33, 66: 33, 67: 34, 68: 34, 69: 34, 70: 34, 71: 35, 72: 36, 73: 37, 74: 38, 75: 39, 76: 40, 77: 41, 78: 42, 79: 42, 80: 42, 81: 43, 82: 43, 83: 43, 84: 43, 85: 44, 86: 44, 87: 44, 88: 45, 89: 45, 90: 45, 91: 46, 92: 46, 93: 46, 94: 47}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 36, 20: 40, 21: 41, 22: 42, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 50, 29: 54, 30: 57, 31: 60, 32: 63, 33: 66, 34: 70, 35: 71, 36: 72, 37: 73, 38: 74, 39: 75, 40: 76, 41: 77, 42: 80, 43: 84, 44: 87, 45: 90, 46: 93, 47: 94}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 19, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 28, 47: 29}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 37, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 45, 28: 46, 29: 47}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 47, Last requested goal index = 47, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.878151s, Solving = 1.940310s, Total = 7.818461s, Memory = (RSS = 2414.593750Mb, VMS = 2444.160156Mb), Step range = [75-94]), Calls = 13
Model :: Total atoms = 28719, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 19 :: Actions = 19                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,0))
Step 10:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,0))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 21:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(store_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(store_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 31:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 18] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 37:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,1))
Step 38:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,1))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 21] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Achieved Sub-goals:
        [Index = 21] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 42:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 44:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 45:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 46:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 47:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 48:
    Current Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 49:
    Current Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 50:
    Current Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 51:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 52:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 53:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 54:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 55:
    Current Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 56:
    Current Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 57:
    Current Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 58:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 59:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 60:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 61:
    Current Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 62:
    Current Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 63:
    Current Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 64:
    Current Sub-goals:
        [Index = 33] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,1))
Step 65:
    Current Sub-goals:
        [Index = 33] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,1))
Step 66:
    Current Sub-goals:
        [Index = 33] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 33] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,1))
Step 67:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,1))
Step 68:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,1))
Step 69:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 70:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 71:
    Current Sub-goals:
        [Index = 35] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Achieved Sub-goals:
        [Index = 35] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 72:
    Current Sub-goals:
        [Index = 36] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 36] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 36] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 36] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 73:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 74:
    Current Sub-goals:
        [Index = 38] talos : put(manipulator_end_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 38] talos : put(manipulator_end_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 75:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 39] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 39] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 76:
    Current Sub-goals:
        [Index = 40] talos : release(manipulator_end_2,(block,5)) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 40] talos : release(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 40] talos : release(manipulator_end_2,(block,5)) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 40] talos : release(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 77:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 41] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 41] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 41] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 78:
    Current Sub-goals:
        [Index = 42] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 79:
    Current Sub-goals:
        [Index = 42] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 80:
    Current Sub-goals:
        [Index = 42] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 42] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 81:
    Current Sub-goals:
        [Index = 43] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 82:
    Current Sub-goals:
        [Index = 43] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,0))
Step 83:
    Current Sub-goals:
        [Index = 43] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 84:
    Current Sub-goals:
        [Index = 43] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 43] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 85:
    Current Sub-goals:
        [Index = 44] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 86:
    Current Sub-goals:
        [Index = 44] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 87:
    Current Sub-goals:
        [Index = 44] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 44] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 88:
    Current Sub-goals:
        [Index = 45] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 89:
    Current Sub-goals:
        [Index = 45] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 90:
    Current Sub-goals:
        [Index = 45] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 45] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 91:
    Current Sub-goals:
        [Index = 46] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 92:
    Current Sub-goals:
        [Index = 46] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 93:
    Current Sub-goals:
        [Index = 46] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 46] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 94:
    Current Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Monolevel problem 6 at level 1 solved.

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Online planning increment 6 finished.

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 44 : Goals achieved = 29 : Goals unachieved = 15 : Complete = False
Level = 1 : Solved problems = 6 : Total constraining sub-goal stages = 47 : Goals achieved = 47 : Goals unachieved = 0 : Complete = False

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 2.

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 7 by method ground-first is [1-2].

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 3 at level 2:
Total Templated Partial Problems = 3, Problem Range = [1-3], Size = 44, Sub-goal Stage Range = [1-44]
Division points [total=2] : [(Index = 14, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 29, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [30-44]

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 47, chosen step range to extract = range(0, 48)

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 47, Total actions = 47, Produced sub-goal stages = 47, Produced sub-goal literals = 55
Level [1]: Length = 94, Total actions = 94, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 44, chosen step range to extract = range(0, 45)

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 47, Total actions = 47, Produced sub-goal stages = 47, Produced sub-goal literals = 55
Level [1]: Length = 94, Total actions = 94, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 47, Total actions = 47, Produced sub-goal stages = 47, Produced sub-goal literals = 55
Level [1]: Length = 94, Total actions = 94, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [30-44], problem number = 3, increment number = 7

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 30)
	('last_sgoals', 44)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1779.252819100002)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [30-44] : Concurrency disabled : Minimum search length bound enabled with value 61

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 30
last_sgoals = 44
start_step = 47
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 61

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[17-04-2022_10-27-24] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[17-04-2022_10-27-24] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 47 as problem start state.

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 47})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 47})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 47})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 47})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 47})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 47})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 47})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 47})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 47})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 47})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 47})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 47})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 47})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 47})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 47})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 47})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 47})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,1)', 'S': 47})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,1)', 'S': 47})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(store_room,1)', 'S': 47})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(store_room,1)', 'S': 47})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,1)', 'S': 47})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,1)', 'S': 47})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 47})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 47})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 47})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 47})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(store_room,1)', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 47})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 47})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 47})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 47})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 47})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 47})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 47})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 47})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 47})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 47})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 47})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 47})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 47})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 47})
Fluent({'L': 3, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 47})
Fluent({'L': 3, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 47})
Fluent({'L': 3, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 47})
Fluent({'L': 3, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 47})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 47})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 47})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 47})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 47})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 47})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 47})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 47})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 47})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 47})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 47})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 47})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'store_room', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 47})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 47})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 47})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 47})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 47})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 47})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 47})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 47})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 47})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 47})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 47})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 47})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 47})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 47})

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 47).
holds(2, complete_tower(red,puzzle_room_table), false, 47).
holds(2, configuration(manipulator_end_1), aligned_with(nothing), 47).
holds(2, configuration(manipulator_end_2), aligned_with(nothing), 47).
holds(2, configuration(manipulator_limb_1), retracted, 47).
holds(2, configuration(manipulator_limb_2), extended, 47).
holds(2, configuration(puzzle_room_door), open, 47).
holds(2, configuration(starting_room_door), closed, 47).
holds(2, configuration(store_room_door), open, 47).
holds(2, grasping(manipulator_arm_1), nothing, 47).
holds(2, grasping(manipulator_arm_2), nothing, 47).
holds(2, grasping(manipulator_end_1), nothing, 47).
holds(2, grasping(manipulator_end_2), nothing, 47).
holds(2, in((block,1)), (puzzle_room,1), 47).
holds(2, in((block,2)), (puzzle_room,1), 47).
holds(2, in((block,3)), (puzzle_room,1), 47).
holds(2, in((block,4)), (store_room,0), 47).
holds(2, in((block,5)), (puzzle_room,1), 47).
holds(2, in((block,6)), (puzzle_room,1), 47).
holds(2, in(manipulator_arm_1), (store_room,1), 47).
holds(2, in(manipulator_arm_2), (store_room,1), 47).
holds(2, in(manipulator_end_1), (store_room,1), 47).
holds(2, in(manipulator_end_2), (store_room,1), 47).
holds(2, in(manipulator_limb_1), (store_room,1), 47).
holds(2, in(manipulator_limb_2), (store_room,1), 47).
holds(2, in(puzzle_room_table), (puzzle_room,1), 47).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 47).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 47).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 47).
holds(2, in(talos), (store_room,1), 47).
holds(2, in_tower((block,1),(block,1)), true, 47).
holds(2, in_tower((block,1),(block,2)), false, 47).
holds(2, in_tower((block,1),(block,3)), true, 47).
holds(2, in_tower((block,1),(block,4)), false, 47).
holds(2, in_tower((block,1),(block,5)), false, 47).
holds(2, in_tower((block,1),(block,6)), false, 47).
holds(2, in_tower((block,2),(block,1)), false, 47).
holds(2, in_tower((block,2),(block,2)), true, 47).
holds(2, in_tower((block,2),(block,3)), false, 47).
holds(2, in_tower((block,2),(block,4)), false, 47).
holds(2, in_tower((block,2),(block,5)), false, 47).
holds(2, in_tower((block,2),(block,6)), false, 47).
holds(2, in_tower((block,3),(block,1)), false, 47).
holds(2, in_tower((block,3),(block,2)), false, 47).
holds(2, in_tower((block,3),(block,3)), false, 47).
holds(2, in_tower((block,3),(block,4)), false, 47).
holds(2, in_tower((block,3),(block,5)), false, 47).
holds(2, in_tower((block,3),(block,6)), false, 47).
holds(2, in_tower((block,4),(block,1)), false, 47).
holds(2, in_tower((block,4),(block,2)), false, 47).
holds(2, in_tower((block,4),(block,3)), false, 47).
holds(2, in_tower((block,4),(block,4)), false, 47).
holds(2, in_tower((block,4),(block,5)), false, 47).
holds(2, in_tower((block,4),(block,6)), false, 47).
holds(2, in_tower((block,5),(block,1)), false, 47).
holds(2, in_tower((block,5),(block,2)), false, 47).
holds(2, in_tower((block,5),(block,3)), false, 47).
holds(2, in_tower((block,5),(block,4)), false, 47).
holds(2, in_tower((block,5),(block,5)), false, 47).
holds(2, in_tower((block,5),(block,6)), false, 47).
holds(2, in_tower((block,6),(block,1)), false, 47).
holds(2, in_tower((block,6),(block,2)), false, 47).
holds(2, in_tower((block,6),(block,3)), false, 47).
holds(2, in_tower((block,6),(block,4)), false, 47).
holds(2, in_tower((block,6),(block,5)), true, 47).
holds(2, in_tower((block,6),(block,6)), true, 47).
holds(2, on((block,1)), puzzle_room_table_left, 47).
holds(2, on((block,2)), puzzle_room_table_right, 47).
holds(2, on((block,3)), (block,1), 47).
holds(2, on((block,4)), nothing, 47).
holds(2, on((block,5)), (block,6), 47).
holds(2, on((block,6)), puzzle_room_table_right, 47).
holds(2, tower_base((block,1),puzzle_room_table), true, 47).
holds(2, tower_base((block,2),puzzle_room_table), true, 47).
holds(2, tower_base((block,3),puzzle_room_table), false, 47).
holds(2, tower_base((block,4),puzzle_room_table), false, 47).
holds(2, tower_base((block,5),puzzle_room_table), false, 47).
holds(2, tower_base((block,6),puzzle_room_table), true, 47).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 47).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 47).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 47).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 47).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 47).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 47).
holds(3, complete_tower(blue,puzzle_room_table), false, 47).
holds(3, complete_tower(red,puzzle_room_table), false, 47).
holds(3, configuration(manipulator_arm_1), retracted, 47).
holds(3, configuration(manipulator_arm_2), extended, 47).
holds(3, configuration(puzzle_room_door), open, 47).
holds(3, configuration(starting_room_door), closed, 47).
holds(3, configuration(store_room_door), open, 47).
holds(3, grasping(manipulator_arm_1), nothing, 47).
holds(3, grasping(manipulator_arm_2), nothing, 47).
holds(3, in((block,1)), puzzle_room, 47).
holds(3, in((block,2)), puzzle_room, 47).
holds(3, in((block,3)), puzzle_room, 47).
holds(3, in((block,4)), store_room, 47).
holds(3, in((block,5)), puzzle_room, 47).
holds(3, in((block,6)), puzzle_room, 47).
holds(3, in(manipulator_arm_1), store_room, 47).
holds(3, in(manipulator_arm_2), store_room, 47).
holds(3, in(puzzle_room_table), puzzle_room, 47).
holds(3, in(talos), store_room, 47).
holds(3, in_tower((block,1),(block,1)), true, 47).
holds(3, in_tower((block,1),(block,2)), false, 47).
holds(3, in_tower((block,1),(block,3)), true, 47).
holds(3, in_tower((block,1),(block,4)), false, 47).
holds(3, in_tower((block,1),(block,5)), false, 47).
holds(3, in_tower((block,1),(block,6)), false, 47).
holds(3, in_tower((block,2),(block,1)), false, 47).
holds(3, in_tower((block,2),(block,2)), true, 47).
holds(3, in_tower((block,2),(block,3)), false, 47).
holds(3, in_tower((block,2),(block,4)), false, 47).
holds(3, in_tower((block,2),(block,5)), false, 47).
holds(3, in_tower((block,2),(block,6)), false, 47).
holds(3, in_tower((block,3),(block,1)), false, 47).
holds(3, in_tower((block,3),(block,2)), false, 47).
holds(3, in_tower((block,3),(block,3)), false, 47).
holds(3, in_tower((block,3),(block,4)), false, 47).
holds(3, in_tower((block,3),(block,5)), false, 47).
holds(3, in_tower((block,3),(block,6)), false, 47).
holds(3, in_tower((block,4),(block,1)), false, 47).
holds(3, in_tower((block,4),(block,2)), false, 47).
holds(3, in_tower((block,4),(block,3)), false, 47).
holds(3, in_tower((block,4),(block,4)), false, 47).
holds(3, in_tower((block,4),(block,5)), false, 47).
holds(3, in_tower((block,4),(block,6)), false, 47).
holds(3, in_tower((block,5),(block,1)), false, 47).
holds(3, in_tower((block,5),(block,2)), false, 47).
holds(3, in_tower((block,5),(block,3)), false, 47).
holds(3, in_tower((block,5),(block,4)), false, 47).
holds(3, in_tower((block,5),(block,5)), false, 47).
holds(3, in_tower((block,5),(block,6)), false, 47).
holds(3, in_tower((block,6),(block,1)), false, 47).
holds(3, in_tower((block,6),(block,2)), false, 47).
holds(3, in_tower((block,6),(block,3)), false, 47).
holds(3, in_tower((block,6),(block,4)), false, 47).
holds(3, in_tower((block,6),(block,5)), true, 47).
holds(3, in_tower((block,6),(block,6)), true, 47).
holds(3, on((block,1)), puzzle_room_table, 47).
holds(3, on((block,2)), puzzle_room_table, 47).
holds(3, on((block,3)), (block,1), 47).
holds(3, on((block,4)), nothing, 47).
holds(3, on((block,5)), (block,6), 47).
holds(3, on((block,6)), puzzle_room_table, 47).
holds(3, tower_base((block,1),puzzle_room_table), true, 47).
holds(3, tower_base((block,2),puzzle_room_table), true, 47).
holds(3, tower_base((block,3),puzzle_room_table), false, 47).
holds(3, tower_base((block,4),puzzle_room_table), false, 47).
holds(3, tower_base((block,5),puzzle_room_table), false, 47).
holds(3, tower_base((block,6),puzzle_room_table), true, 47).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 47).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 47).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 47).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 47).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 47).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 47).

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=61']

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 30})
SubGoal({'L': 3, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 31})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 32})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 33})
SubGoal({'L': 3, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 34})
SubGoal({'L': 3, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 35})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 36})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 37})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 38})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'I': 39})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 40})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 41})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'I': 42})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 43})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 44})

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 15 rules into program part base:

sub_goal(3, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 30).
sub_goal(3, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 31).
sub_goal(3, talos, move(hallway), in(talos), hallway, 32).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 33).
sub_goal(3, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 34).
sub_goal(3, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 35).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 36).
sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 37).
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 38).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 39).
sub_goal(3, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 40).
sub_goal(3, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 41).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 42).
sub_goal(3, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 43).
sub_goal(3, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 44).

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=61']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001C09C6B3AF0>]
	incrementor = SolveIncrementor(step_start=47, step_increase=1, step_increase_initial=15, step_end_min=62, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1779.252819100002, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 47), range_=None), IncPart(name='plan_module', args=('#inc', 47, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 47, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 47, 30, 44, 'sequential', 'false'), range_=None)]

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 837 rules

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005473500000334752s

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.157942s.

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022922s with result Satisfiable.

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001C09B87BAE0>

[17-04-2022_10-27-24] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 47)
	('last_sgoals', 44)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('first_sgoals', 30)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001C09B87BAE0>)

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 47). %* None *%
#program plan_module(#inc, 47, false, true). %* None *%
#program optimisation_module(#inc, 47, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 47, 30, 44, sequential, false). %* None *%

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     46 : Current =     61
Incrementor step ends | Minimum  =     62 : Maximum =    300

[17-04-2022_10-27-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(61)]), ('state_module', [Number(47), Number(47)]), ('plan_module', [Number(47), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(47), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(48), Number(47)]), ('plan_module', [Number(48), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(48), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(49), Number(47)]), ('plan_module', [Number(49), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(49), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(50), Number(47)]), ('plan_module', [Number(50), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(50), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(51), Number(47)]), ('plan_module', [Number(51), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(51), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(52), Number(47)]), ('plan_module', [Number(52), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(52), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(53), Number(47)]), ('plan_module', [Number(53), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(53), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(54), Number(47)]), ('plan_module', [Number(54), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(54), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(55), Number(47)]), ('plan_module', [Number(55), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(55), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(56), Number(47)]), ('plan_module', [Number(56), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(56), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(57), Number(47)]), ('plan_module', [Number(57), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(57), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(58), Number(47)]), ('plan_module', [Number(58), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(58), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(59), Number(47)]), ('plan_module', [Number(59), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(59), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(60), Number(47)]), ('plan_module', [Number(60), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(60), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('conformance_module', [Number(60), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(61), Number(47)]), ('plan_module', [Number(61), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(61), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('conformance_module', [Number(61), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.963895s.

[17-04-2022_10-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.327322s with result Unsatisfiable.

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.291216999999051, Incremental time limit = None
Running cumulative time = 1.291216999999051, Cumulative time limit = 1779.252819100002
Used memory = (RSS = 2354.355469Mb, VMS = 2368.472656Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     61 : Current =     62
Incrementor step ends | Minimum  =     62 : Maximum =    300

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(62)]), ('state_module', [Number(62), Number(47)]), ('plan_module', [Number(62), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(62), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(62)]), ('action_preconditions', [Number(62)]), ('variable_relations', [Number(62)]), ('abstraction_mappings', [Number(62)]), ('conformance_module', [Number(62), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.127425s.

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023048s with result Unsatisfiable.

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1504726999992272, Incremental time limit = None
Running cumulative time = 1.4416896999982782, Cumulative time limit = 1779.252819100002
Used memory = (RSS = 2355.300781Mb, VMS = 2372.277344Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     62 : Current =     63
Incrementor step ends | Minimum  =     62 : Maximum =    300

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(63)]), ('state_module', [Number(63), Number(47)]), ('plan_module', [Number(63), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(63), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('conformance_module', [Number(63), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.131767s.

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022005s with result Unsatisfiable.

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1537717999999586, Incremental time limit = None
Running cumulative time = 1.5954614999982368, Cumulative time limit = 1779.252819100002
Used memory = (RSS = 2356.890625Mb, VMS = 2373.566406Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     63 : Current =     64
Incrementor step ends | Minimum  =     62 : Maximum =    300

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(64)]), ('state_module', [Number(64), Number(47)]), ('plan_module', [Number(64), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(64), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(64)]), ('action_preconditions', [Number(64)]), ('variable_relations', [Number(64)]), ('abstraction_mappings', [Number(64)]), ('conformance_module', [Number(64), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.134098s.

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025380s with result Unsatisfiable.

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.15947830000004615, Incremental time limit = None
Running cumulative time = 1.754939799998283, Cumulative time limit = 1779.252819100002
Used memory = (RSS = 2357.746094Mb, VMS = 2373.800781Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     64 : Current =     65
Incrementor step ends | Minimum  =     62 : Maximum =    300

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(65)]), ('state_module', [Number(65), Number(47)]), ('plan_module', [Number(65), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(65), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('conformance_module', [Number(65), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.137170s.

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029623s with result Unsatisfiable.

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1667936000003465, Incremental time limit = None
Running cumulative time = 1.9217333999986295, Cumulative time limit = 1779.252819100002
Used memory = (RSS = 2358.542969Mb, VMS = 2374.031250Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     65 : Current =     66
Incrementor step ends | Minimum  =     62 : Maximum =    300

[17-04-2022_10-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(66)]), ('state_module', [Number(66), Number(47)]), ('plan_module', [Number(66), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(66), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('conformance_module', [Number(66), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.140112s.

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031531s with result Unsatisfiable.

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1716429000007338, Incremental time limit = None
Running cumulative time = 2.0933762999993633, Cumulative time limit = 1779.252819100002
Used memory = (RSS = 2359.585938Mb, VMS = 2374.261719Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     66 : Current =     67
Incrementor step ends | Minimum  =     62 : Maximum =    300

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(67)]), ('state_module', [Number(67), Number(47)]), ('plan_module', [Number(67), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(67), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(67)]), ('action_preconditions', [Number(67)]), ('variable_relations', [Number(67)]), ('abstraction_mappings', [Number(67)]), ('conformance_module', [Number(67), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.141108s.

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033286s with result Unsatisfiable.

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.17439490000015212, Incremental time limit = None
Running cumulative time = 2.2677711999995154, Cumulative time limit = 1779.252819100002
Used memory = (RSS = 2361.214844Mb, VMS = 2375.910156Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     67 : Current =     68
Incrementor step ends | Minimum  =     62 : Maximum =    300

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(68)]), ('state_module', [Number(68), Number(47)]), ('plan_module', [Number(68), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(68), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.144552s.

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.038473s with result Unsatisfiable.

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18302510000012262, Incremental time limit = None
Running cumulative time = 2.450796299999638, Cumulative time limit = 1779.252819100002
Used memory = (RSS = 2362.082031Mb, VMS = 2376.140625Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     68 : Current =     69
Incrementor step ends | Minimum  =     62 : Maximum =    300

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(69)]), ('state_module', [Number(69), Number(47)]), ('plan_module', [Number(69), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(69), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(69)]), ('action_preconditions', [Number(69)]), ('variable_relations', [Number(69)]), ('abstraction_mappings', [Number(69)]), ('conformance_module', [Number(69), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.147676s.

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050530s with result Unsatisfiable.

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19820619999973133, Incremental time limit = None
Running cumulative time = 2.6490024999993693, Cumulative time limit = 1779.252819100002
Used memory = (RSS = 2367.585938Mb, VMS = 2389.171875Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     69 : Current =     70
Incrementor step ends | Minimum  =     62 : Maximum =    300

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(70)]), ('state_module', [Number(70), Number(47)]), ('plan_module', [Number(70), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(70), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(70)]), ('action_preconditions', [Number(70)]), ('variable_relations', [Number(70)]), ('abstraction_mappings', [Number(70)]), ('conformance_module', [Number(70), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.147697s.

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.059503s with result Unsatisfiable.

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.20720039999923756, Incremental time limit = None
Running cumulative time = 2.856202899998607, Cumulative time limit = 1779.252819100002
Used memory = (RSS = 2369.023438Mb, VMS = 2389.406250Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     70 : Current =     71
Incrementor step ends | Minimum  =     62 : Maximum =    300

[17-04-2022_10-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(71)]), ('state_module', [Number(71), Number(47)]), ('plan_module', [Number(71), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(71), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('conformance_module', [Number(71), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.150324s.

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.090210s with result Unsatisfiable.

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.24053400000047986, Incremental time limit = None
Running cumulative time = 3.0967368999990867, Cumulative time limit = 1779.252819100002
Used memory = (RSS = 2369.882812Mb, VMS = 2389.640625Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     71 : Current =     72
Incrementor step ends | Minimum  =     62 : Maximum =    300

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(72)]), ('state_module', [Number(72), Number(47)]), ('plan_module', [Number(72), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(72), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(72)]), ('action_preconditions', [Number(72)]), ('variable_relations', [Number(72)]), ('abstraction_mappings', [Number(72)]), ('conformance_module', [Number(72), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.152489s.

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.100224s with result Unsatisfiable.

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25271320000047126, Incremental time limit = None
Running cumulative time = 3.349450099999558, Cumulative time limit = 1779.252819100002
Used memory = (RSS = 2371.113281Mb, VMS = 2389.871094Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     72 : Current =     73
Incrementor step ends | Minimum  =     62 : Maximum =    300

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(73)]), ('state_module', [Number(73), Number(47)]), ('plan_module', [Number(73), Number(47), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(73), Number(47), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(73)]), ('action_preconditions', [Number(73)]), ('variable_relations', [Number(73)]), ('abstraction_mappings', [Number(73)]), ('conformance_module', [Number(73), Number(47), Number(30), Number(44), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.157085s.

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.109720s with result Satisfiable.

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.26680490000035206, Incremental time limit = None
Running cumulative time = 3.61625499999991, Cumulative time limit = 1779.252819100002
Used memory = (RSS = 2375.851562Mb, VMS = 2393.613281Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.675401s, Solving = 0.940854s, Total = 3.616255s, Memory = (RSS = 2375.851562Mb, VMS = 2393.613281Mb), Step range = [47-73]), Calls = 13
Final Model :: Total atoms = 31253, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.963895s, Solving = 0.327322s, Total = 1.291217s, Memory = (RSS = 2354.355469Mb, VMS = 2368.472656Mb), Step range = [47-61]
2 : Statistics :: Grounding = 0.127425s, Solving = 0.023048s, Total = 0.150473s, Memory = (RSS = 2355.300781Mb, VMS = 2372.277344Mb), Step range = [62-62]
3 : Statistics :: Grounding = 0.131767s, Solving = 0.022005s, Total = 0.153772s, Memory = (RSS = 2356.890625Mb, VMS = 2373.566406Mb), Step range = [63-63]
4 : Statistics :: Grounding = 0.134098s, Solving = 0.025380s, Total = 0.159478s, Memory = (RSS = 2357.746094Mb, VMS = 2373.800781Mb), Step range = [64-64]
5 : Statistics :: Grounding = 0.137170s, Solving = 0.029623s, Total = 0.166794s, Memory = (RSS = 2358.542969Mb, VMS = 2374.031250Mb), Step range = [65-65]
6 : Statistics :: Grounding = 0.140112s, Solving = 0.031531s, Total = 0.171643s, Memory = (RSS = 2359.585938Mb, VMS = 2374.261719Mb), Step range = [66-66]
7 : Statistics :: Grounding = 0.141108s, Solving = 0.033286s, Total = 0.174395s, Memory = (RSS = 2361.214844Mb, VMS = 2375.910156Mb), Step range = [67-67]
8 : Statistics :: Grounding = 0.144552s, Solving = 0.038473s, Total = 0.183025s, Memory = (RSS = 2362.082031Mb, VMS = 2376.140625Mb), Step range = [68-68]
9 : Statistics :: Grounding = 0.147676s, Solving = 0.050530s, Total = 0.198206s, Memory = (RSS = 2367.585938Mb, VMS = 2389.171875Mb), Step range = [69-69]
10 : Statistics :: Grounding = 0.147697s, Solving = 0.059503s, Total = 0.207200s, Memory = (RSS = 2369.023438Mb, VMS = 2389.406250Mb), Step range = [70-70]
11 : Statistics :: Grounding = 0.150324s, Solving = 0.090210s, Total = 0.240534s, Memory = (RSS = 2369.882812Mb, VMS = 2389.640625Mb), Step range = [71-71]
12 : Statistics :: Grounding = 0.152489s, Solving = 0.100224s, Total = 0.252713s, Memory = (RSS = 2371.113281Mb, VMS = 2389.871094Mb), Step range = [72-72]
13 : Statistics :: Grounding = 0.157085s, Solving = 0.109720s, Total = 0.266805s, Memory = (RSS = 2375.851562Mb, VMS = 2393.613281Mb), Step range = [73-73]

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.616255s due to: Stop condition reached.

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 19, 35: 19, 36: 19, 37: 20, 38: 20, 39: 20, 40: 20, 41: 21, 42: 22, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 28, 50: 28, 51: 29, 52: 29, 53: 29, 54: 29, 55: 30, 56: 30, 57: 30, 58: 31, 59: 31, 60: 31, 61: 32, 62: 32, 63: 32, 64: 33, 65: 33, 66: 33, 67: 34, 68: 34, 69: 34, 70: 34, 71: 35, 72: 36, 73: 37, 74: 38, 75: 39, 76: 40, 77: 41, 78: 42, 79: 42, 80: 42, 81: 43, 82: 43, 83: 43, 84: 43, 85: 44, 86: 44, 87: 44, 88: 45, 89: 45, 90: 45, 91: 46, 92: 46, 93: 46, 94: 47}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 36, 20: 40, 21: 41, 22: 42, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 50, 29: 54, 30: 57, 31: 60, 32: 63, 33: 66, 34: 70, 35: 71, 36: 72, 37: 73, 38: 74, 39: 75, 40: 76, 41: 77, 42: 80, 43: 84, 44: 87, 45: 90, 46: 93, 47: 94}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 19, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 28, 47: 29}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 37, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 45, 28: 46, 29: 47}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 19, 35: 19, 36: 19, 37: 20, 38: 20, 39: 20, 40: 20, 41: 21, 42: 22, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 28, 50: 28, 51: 29, 52: 29, 53: 29, 54: 29, 55: 30, 56: 30, 57: 30, 58: 31, 59: 31, 60: 31, 61: 32, 62: 32, 63: 32, 64: 33, 65: 33, 66: 33, 67: 34, 68: 34, 69: 34, 70: 34, 71: 35, 72: 36, 73: 37, 74: 38, 75: 39, 76: 40, 77: 41, 78: 42, 79: 42, 80: 42, 81: 43, 82: 43, 83: 43, 84: 43, 85: 44, 86: 44, 87: 44, 88: 45, 89: 45, 90: 45, 91: 46, 92: 46, 93: 46, 94: 47}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 36, 20: 40, 21: 41, 22: 42, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 50, 29: 54, 30: 57, 31: 60, 32: 63, 33: 66, 34: 70, 35: 71, 36: 72, 37: 73, 38: 74, 39: 75, 40: 76, 41: 77, 42: 80, 43: 84, 44: 87, 45: 90, 46: 93, 47: 94}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 19, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 28, 47: 29, 48: 30, 49: 30, 50: 30, 51: 30, 52: 30, 53: 31, 54: 32, 55: 32, 56: 33, 57: 33, 58: 33, 59: 34, 60: 34, 61: 34, 62: 34, 63: 35, 64: 36, 65: 37, 66: 38, 67: 39, 68: 40, 69: 41, 70: 42, 71: 42, 72: 43, 73: 44}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 37, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 45, 28: 46, 29: 47, 30: 52, 31: 53, 32: 55, 33: 58, 34: 62, 35: 63, 36: 64, 37: 65, 38: 66, 39: 67, 40: 68, 41: 69, 42: 71, 43: 72, 44: 73}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 44, Last requested goal index = 44, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.675401s, Solving = 0.940854s, Total = 3.616255s, Memory = (RSS = 2375.851562Mb, VMS = 2393.613281Mb), Step range = [47-73]), Calls = 13
Model :: Total atoms = 31253, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 26 :: Actions = 26                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 24:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 25:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 26:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 27:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 38:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 39:
    Current Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 40:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 41:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 42:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((puzzle_room,0))
Step 43:
    Current Sub-goals:
        [Index = 25] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 25] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : move((hallway,2))
Step 44:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((hallway,1))
Step 45:
    Current Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 46:
    Current Sub-goals:
        [Index = 28] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 28] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 47:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 48:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 49:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 50:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 51:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 52:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 53:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 54:
    Current Sub-goals:
        [Index = 32] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 55:
    Current Sub-goals:
        [Index = 32] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 32] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 56:
    Current Sub-goals:
        [Index = 33] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 57:
    Current Sub-goals:
        [Index = 33] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 58:
    Current Sub-goals:
        [Index = 33] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 33] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 59:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 60:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 61:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 62:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 63:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 64:
    Current Sub-goals:
        [Index = 36] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 36] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 65:
    Current Sub-goals:
        [Index = 37] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 37] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 66:
    Current Sub-goals:
        [Index = 38] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 38] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 67:
    Current Sub-goals:
        [Index = 39] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 39] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 68:
    Current Sub-goals:
        [Index = 40] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 40] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 69:
    Current Sub-goals:
        [Index = 41] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 41] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 70:
    Current Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
Step 71:
    Current Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
Step 72:
    Current Sub-goals:
        [Index = 43] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 43] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_1,(block,1),(block,2))
Step 73:
    Current Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=47, end_step=None

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for parts of the existing plan at the current level that have already been divided: start_step=47

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=47

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Preparing to invoke division strategy...

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Online method OnlineMethod.GroundFirst chose to invoke the division strategy before a downwards level change:Current increment = 7, Current planning level is complete = True

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 73, chosen step range to extract = range(47, 74)

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 94, Total actions = 94, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  26, AC =  26, CF = 1.0, GT =   7.51s, ST =   3.05s, OT = 0.00s, TT =  10.57s, EF = (LE = 1.7, AC = 1.7), ED = (LE = 1.3, AC = 1.3), EB = (LE = 0.7, AC = 0.7)

[17-04-2022_10-27-29] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=3, plan_length=26, start_step=47, blend=Blend(left=0, right=0)

[17-04-2022_10-27-29] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=2, small_group_size=8, large_group_size=9

[17-04-2022_10-27-29] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=55, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=64, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 3, Problem Range = [7-9], Size = 26, Sub-goal Stage Range = [48-73]
Division points [total=2] : [(Index = 55, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 64, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Monolevel problem 3 at level 2 solved.

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 7 at level 1:
Total Templated Partial Problems = 3, Problem Range = [7-9], Size = 26, Sub-goal Stage Range = [48-73]
Division points [total=2] : [(Index = 55, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 64, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [48-55]

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 94, chosen step range to extract = range(0, 95)

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 94, Total actions = 94, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 73, chosen step range to extract = range(0, 74)

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 94, Total actions = 94, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 44, chosen step range to extract = range(0, 45)

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 94, Total actions = 94, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 94, Total actions = 94, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [48-55], problem number = 7, increment number = 7

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 48)
	('last_sgoals', 55)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1738.9739074000017)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [48-55] : Concurrency disabled : Minimum search length bound enabled with value 101

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 48
last_sgoals = 55
start_step = 94
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 101

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[17-04-2022_10-27-29] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[17-04-2022_10-27-29] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 94 as problem start state.

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 94})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 94})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 94})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 94})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 94})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 94})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 94})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 94})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 94})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 94})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 94})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 94})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((store_room,0),0,0)', 'S': 94})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((puzzle_room,1),5,0)', 'S': 94})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((puzzle_room,1),5,0)', 'S': 94})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((store_room,1),5,1)', 'S': 94})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((store_room,1),5,1)', 'S': 94})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((store_room,1),5,1)', 'S': 94})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((store_room,1),5,1)', 'S': 94})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((store_room,1),5,1)', 'S': 94})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((store_room,1),5,1)', 'S': 94})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 94})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 94})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 94})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 94})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((store_room,1),5,1)', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 94})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 94})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 94})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 94})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 94})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 94})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 94})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 94})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 94})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 94})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 94})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 94})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 94})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 94})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 94})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 94})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 94})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 94})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 94})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 94})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 94})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 94})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 94})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 94})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 94})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 94})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 94})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 94})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,1)', 'S': 94})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,1)', 'S': 94})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(store_room,1)', 'S': 94})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(store_room,1)', 'S': 94})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,1)', 'S': 94})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,1)', 'S': 94})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 94})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 94})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 94})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 94})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(store_room,1)', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 94})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 94})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 94})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 94})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 94})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 94})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 94})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 94})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 94})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 94})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 94})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 94})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 94})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 94})

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 164 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 94).
holds(1, complete_tower(red,puzzle_room_table), false, 94).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 94).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 94).
holds(1, configuration(manipulator_limb_1), retracted, 94).
holds(1, configuration(manipulator_limb_2), extended, 94).
holds(1, configuration(puzzle_room_door), open, 94).
holds(1, configuration(starting_room_door), closed, 94).
holds(1, configuration(store_room_door), open, 94).
holds(1, grasping(manipulator_end_1), nothing, 94).
holds(1, grasping(manipulator_end_2), nothing, 94).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 94).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 94).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 94).
holds(1, in((block,4)), ((store_room,0),0,0), 94).
holds(1, in((block,5)), ((puzzle_room,1),5,0), 94).
holds(1, in((block,6)), ((puzzle_room,1),5,0), 94).
holds(1, in(manipulator_arm_1), ((store_room,1),5,1), 94).
holds(1, in(manipulator_arm_2), ((store_room,1),5,1), 94).
holds(1, in(manipulator_end_1), ((store_room,1),5,1), 94).
holds(1, in(manipulator_end_2), ((store_room,1),5,1), 94).
holds(1, in(manipulator_limb_1), ((store_room,1),5,1), 94).
holds(1, in(manipulator_limb_2), ((store_room,1),5,1), 94).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 94).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 94).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 94).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 94).
holds(1, in(talos), ((store_room,1),5,1), 94).
holds(1, in_tower((block,1),(block,1)), true, 94).
holds(1, in_tower((block,1),(block,2)), false, 94).
holds(1, in_tower((block,1),(block,3)), true, 94).
holds(1, in_tower((block,1),(block,4)), false, 94).
holds(1, in_tower((block,1),(block,5)), false, 94).
holds(1, in_tower((block,1),(block,6)), false, 94).
holds(1, in_tower((block,2),(block,1)), false, 94).
holds(1, in_tower((block,2),(block,2)), true, 94).
holds(1, in_tower((block,2),(block,3)), false, 94).
holds(1, in_tower((block,2),(block,4)), false, 94).
holds(1, in_tower((block,2),(block,5)), false, 94).
holds(1, in_tower((block,2),(block,6)), false, 94).
holds(1, in_tower((block,3),(block,1)), false, 94).
holds(1, in_tower((block,3),(block,2)), false, 94).
holds(1, in_tower((block,3),(block,3)), false, 94).
holds(1, in_tower((block,3),(block,4)), false, 94).
holds(1, in_tower((block,3),(block,5)), false, 94).
holds(1, in_tower((block,3),(block,6)), false, 94).
holds(1, in_tower((block,4),(block,1)), false, 94).
holds(1, in_tower((block,4),(block,2)), false, 94).
holds(1, in_tower((block,4),(block,3)), false, 94).
holds(1, in_tower((block,4),(block,4)), false, 94).
holds(1, in_tower((block,4),(block,5)), false, 94).
holds(1, in_tower((block,4),(block,6)), false, 94).
holds(1, in_tower((block,5),(block,1)), false, 94).
holds(1, in_tower((block,5),(block,2)), false, 94).
holds(1, in_tower((block,5),(block,3)), false, 94).
holds(1, in_tower((block,5),(block,4)), false, 94).
holds(1, in_tower((block,5),(block,5)), false, 94).
holds(1, in_tower((block,5),(block,6)), false, 94).
holds(1, in_tower((block,6),(block,1)), false, 94).
holds(1, in_tower((block,6),(block,2)), false, 94).
holds(1, in_tower((block,6),(block,3)), false, 94).
holds(1, in_tower((block,6),(block,4)), false, 94).
holds(1, in_tower((block,6),(block,5)), true, 94).
holds(1, in_tower((block,6),(block,6)), true, 94).
holds(1, on((block,1)), puzzle_room_table_left, 94).
holds(1, on((block,2)), puzzle_room_table_right, 94).
holds(1, on((block,3)), (block,1), 94).
holds(1, on((block,4)), nothing, 94).
holds(1, on((block,5)), (block,6), 94).
holds(1, on((block,6)), puzzle_room_table_right, 94).
holds(1, tower_base((block,1),puzzle_room_table), true, 94).
holds(1, tower_base((block,2),puzzle_room_table), true, 94).
holds(1, tower_base((block,3),puzzle_room_table), false, 94).
holds(1, tower_base((block,4),puzzle_room_table), false, 94).
holds(1, tower_base((block,5),puzzle_room_table), false, 94).
holds(1, tower_base((block,6),puzzle_room_table), true, 94).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 94).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 94).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 94).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 94).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 94).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 94).
holds(2, complete_tower(blue,puzzle_room_table), false, 94).
holds(2, complete_tower(red,puzzle_room_table), false, 94).
holds(2, configuration(manipulator_end_1), aligned_with(nothing), 94).
holds(2, configuration(manipulator_end_2), aligned_with(nothing), 94).
holds(2, configuration(manipulator_limb_1), retracted, 94).
holds(2, configuration(manipulator_limb_2), extended, 94).
holds(2, configuration(puzzle_room_door), open, 94).
holds(2, configuration(starting_room_door), closed, 94).
holds(2, configuration(store_room_door), open, 94).
holds(2, grasping(manipulator_end_1), nothing, 94).
holds(2, grasping(manipulator_end_2), nothing, 94).
holds(2, in((block,1)), (puzzle_room,1), 94).
holds(2, in((block,2)), (puzzle_room,1), 94).
holds(2, in((block,3)), (puzzle_room,1), 94).
holds(2, in((block,4)), (store_room,0), 94).
holds(2, in((block,5)), (puzzle_room,1), 94).
holds(2, in((block,6)), (puzzle_room,1), 94).
holds(2, in(manipulator_arm_1), (store_room,1), 94).
holds(2, in(manipulator_arm_2), (store_room,1), 94).
holds(2, in(manipulator_end_1), (store_room,1), 94).
holds(2, in(manipulator_end_2), (store_room,1), 94).
holds(2, in(manipulator_limb_1), (store_room,1), 94).
holds(2, in(manipulator_limb_2), (store_room,1), 94).
holds(2, in(puzzle_room_table), (puzzle_room,1), 94).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 94).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 94).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 94).
holds(2, in(talos), (store_room,1), 94).
holds(2, in_tower((block,1),(block,1)), true, 94).
holds(2, in_tower((block,1),(block,2)), false, 94).
holds(2, in_tower((block,1),(block,3)), true, 94).
holds(2, in_tower((block,1),(block,4)), false, 94).
holds(2, in_tower((block,1),(block,5)), false, 94).
holds(2, in_tower((block,1),(block,6)), false, 94).
holds(2, in_tower((block,2),(block,1)), false, 94).
holds(2, in_tower((block,2),(block,2)), true, 94).
holds(2, in_tower((block,2),(block,3)), false, 94).
holds(2, in_tower((block,2),(block,4)), false, 94).
holds(2, in_tower((block,2),(block,5)), false, 94).
holds(2, in_tower((block,2),(block,6)), false, 94).
holds(2, in_tower((block,3),(block,1)), false, 94).
holds(2, in_tower((block,3),(block,2)), false, 94).
holds(2, in_tower((block,3),(block,3)), false, 94).
holds(2, in_tower((block,3),(block,4)), false, 94).
holds(2, in_tower((block,3),(block,5)), false, 94).
holds(2, in_tower((block,3),(block,6)), false, 94).
holds(2, in_tower((block,4),(block,1)), false, 94).
holds(2, in_tower((block,4),(block,2)), false, 94).
holds(2, in_tower((block,4),(block,3)), false, 94).
holds(2, in_tower((block,4),(block,4)), false, 94).
holds(2, in_tower((block,4),(block,5)), false, 94).
holds(2, in_tower((block,4),(block,6)), false, 94).
holds(2, in_tower((block,5),(block,1)), false, 94).
holds(2, in_tower((block,5),(block,2)), false, 94).
holds(2, in_tower((block,5),(block,3)), false, 94).
holds(2, in_tower((block,5),(block,4)), false, 94).
holds(2, in_tower((block,5),(block,5)), false, 94).
holds(2, in_tower((block,5),(block,6)), false, 94).
holds(2, in_tower((block,6),(block,1)), false, 94).
holds(2, in_tower((block,6),(block,2)), false, 94).
holds(2, in_tower((block,6),(block,3)), false, 94).
holds(2, in_tower((block,6),(block,4)), false, 94).
holds(2, in_tower((block,6),(block,5)), true, 94).
holds(2, in_tower((block,6),(block,6)), true, 94).
holds(2, on((block,1)), puzzle_room_table_left, 94).
holds(2, on((block,2)), puzzle_room_table_right, 94).
holds(2, on((block,3)), (block,1), 94).
holds(2, on((block,4)), nothing, 94).
holds(2, on((block,5)), (block,6), 94).
holds(2, on((block,6)), puzzle_room_table_right, 94).
holds(2, tower_base((block,1),puzzle_room_table), true, 94).
holds(2, tower_base((block,2),puzzle_room_table), true, 94).
holds(2, tower_base((block,3),puzzle_room_table), false, 94).
holds(2, tower_base((block,4),puzzle_room_table), false, 94).
holds(2, tower_base((block,5),puzzle_room_table), false, 94).
holds(2, tower_base((block,6),puzzle_room_table), true, 94).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 94).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 94).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 94).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 94).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 94).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 94).

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=101']

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'I': 48})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'I': 48})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((store_room,0))', 'F': 'in(talos)', 'V': '(store_room,0)', 'I': 49})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'I': 50})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'I': 51})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'I': 52})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'I': 53})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((store_room,1))', 'F': 'in(talos)', 'V': '(store_room,1)', 'I': 54})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((hallway,0))', 'F': 'in(talos)', 'V': '(hallway,0)', 'I': 55})

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 9 rules into program part base:

sub_goal(2, talos, configure(manipulator_limb_2,retracted), configuration(manipulator_end_2), aligned_with(nothing), 48).
sub_goal(2, talos, configure(manipulator_limb_2,retracted), configuration(manipulator_limb_2), retracted, 48).
sub_goal(2, talos, move((store_room,0)), in(talos), (store_room,0), 49).
sub_goal(2, talos, configure(manipulator_limb_2,extended), configuration(manipulator_limb_2), extended, 50).
sub_goal(2, talos, configure(manipulator_end_2,aligned_with((block,4))), configuration(manipulator_end_2), aligned_with((block,4)), 51).
sub_goal(2, talos, grasp(manipulator_end_2,(block,4)), grasping(manipulator_end_2), (block,4), 52).
sub_goal(2, talos, configure(manipulator_limb_2,retracted), configuration(manipulator_limb_2), retracted, 53).
sub_goal(2, talos, move((store_room,1)), in(talos), (store_room,1), 54).
sub_goal(2, talos, move((hallway,0)), in(talos), (hallway,0), 55).

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=101']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001C09C6B3EE0>]
	incrementor = SolveIncrementor(step_start=94, step_increase=1, step_increase_initial=8, step_end_min=102, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1738.9739074000017, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 94), range_=None), IncPart(name='plan_module', args=('#inc', 94, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 94, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 94, 48, 55, 'sequential', 'false'), range_=None)]

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 850 rules

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004644200000257115s

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.171286s.

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025615s with result Satisfiable.

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001C09B21B860>

[17-04-2022_10-27-29] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 94)
	('last_sgoals', 55)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('first_sgoals', 48)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001C09B21B860>)

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 94). %* None *%
#program plan_module(#inc, 94, false, false). %* None *%
#program optimisation_module(#inc, 94, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 94, 48, 55, sequential, false). %* None *%

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     93 : Current =    101
Incrementor step ends | Minimum  =    102 : Maximum =    300

[17-04-2022_10-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(101)]), ('state_module', [Number(94), Number(94)]), ('plan_module', [Number(94), Number(94), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(94), Number(94), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(94)]), ('action_preconditions', [Number(94)]), ('variable_relations', [Number(94)]), ('abstraction_mappings', [Number(94)]), ('conformance_module', [Number(94), Number(94), Number(48), Number(55), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(95), Number(94)]), ('plan_module', [Number(95), Number(94), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(95), Number(94), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(95)]), ('action_preconditions', [Number(95)]), ('variable_relations', [Number(95)]), ('abstraction_mappings', [Number(95)]), ('conformance_module', [Number(95), Number(94), Number(48), Number(55), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(96), Number(94)]), ('plan_module', [Number(96), Number(94), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(96), Number(94), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(96)]), ('action_preconditions', [Number(96)]), ('variable_relations', [Number(96)]), ('abstraction_mappings', [Number(96)]), ('conformance_module', [Number(96), Number(94), Number(48), Number(55), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(97), Number(94)]), ('plan_module', [Number(97), Number(94), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(97), Number(94), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(97)]), ('action_preconditions', [Number(97)]), ('variable_relations', [Number(97)]), ('abstraction_mappings', [Number(97)]), ('conformance_module', [Number(97), Number(94), Number(48), Number(55), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(98), Number(94)]), ('plan_module', [Number(98), Number(94), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(98), Number(94), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(98)]), ('action_preconditions', [Number(98)]), ('variable_relations', [Number(98)]), ('abstraction_mappings', [Number(98)]), ('conformance_module', [Number(98), Number(94), Number(48), Number(55), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(99), Number(94)]), ('plan_module', [Number(99), Number(94), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(99), Number(94), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(99)]), ('action_preconditions', [Number(99)]), ('variable_relations', [Number(99)]), ('abstraction_mappings', [Number(99)]), ('conformance_module', [Number(99), Number(94), Number(48), Number(55), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(100), Number(94)]), ('plan_module', [Number(100), Number(94), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(100), Number(94), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(100)]), ('action_preconditions', [Number(100)]), ('variable_relations', [Number(100)]), ('abstraction_mappings', [Number(100)]), ('conformance_module', [Number(100), Number(94), Number(48), Number(55), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(101), Number(94)]), ('plan_module', [Number(101), Number(94), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(101), Number(94), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(101)]), ('action_preconditions', [Number(101)]), ('variable_relations', [Number(101)]), ('abstraction_mappings', [Number(101)]), ('conformance_module', [Number(101), Number(94), Number(48), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.653473s.

[17-04-2022_10-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.481697s with result Unsatisfiable.

[17-04-2022_10-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.1351692999996885, Incremental time limit = None
Running cumulative time = 2.1351692999996885, Cumulative time limit = 1738.9739074000017
Used memory = (RSS = 2365.843750Mb, VMS = 2381.964844Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =    101 : Current =    102
Incrementor step ends | Minimum  =    102 : Maximum =    300

[17-04-2022_10-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(102)]), ('state_module', [Number(102), Number(94)]), ('plan_module', [Number(102), Number(94), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(102), Number(94), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(102)]), ('action_preconditions', [Number(102)]), ('variable_relations', [Number(102)]), ('abstraction_mappings', [Number(102)]), ('conformance_module', [Number(102), Number(94), Number(48), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.308325s.

[17-04-2022_10-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.047587s with result Unsatisfiable.

[17-04-2022_10-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.35591199999998935, Incremental time limit = None
Running cumulative time = 2.491081299999678, Cumulative time limit = 1738.9739074000017
Used memory = (RSS = 2368.128906Mb, VMS = 2386.953125Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =    102 : Current =    103
Incrementor step ends | Minimum  =    102 : Maximum =    300

[17-04-2022_10-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(103)]), ('state_module', [Number(103), Number(94)]), ('plan_module', [Number(103), Number(94), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(103), Number(94), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(103)]), ('action_preconditions', [Number(103)]), ('variable_relations', [Number(103)]), ('abstraction_mappings', [Number(103)]), ('conformance_module', [Number(103), Number(94), Number(48), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.312231s.

[17-04-2022_10-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.060100s with result Unsatisfiable.

[17-04-2022_10-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3723304000004646, Incremental time limit = None
Running cumulative time = 2.8634117000001424, Cumulative time limit = 1738.9739074000017
Used memory = (RSS = 2370.273438Mb, VMS = 2387.476562Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =    103 : Current =    104
Incrementor step ends | Minimum  =    102 : Maximum =    300

[17-04-2022_10-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(104)]), ('state_module', [Number(104), Number(94)]), ('plan_module', [Number(104), Number(94), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(104), Number(94), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(104)]), ('action_preconditions', [Number(104)]), ('variable_relations', [Number(104)]), ('abstraction_mappings', [Number(104)]), ('conformance_module', [Number(104), Number(94), Number(48), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.322516s.

[17-04-2022_10-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.103759s with result Unsatisfiable.

[17-04-2022_10-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4262749999988955, Incremental time limit = None
Running cumulative time = 3.289686699999038, Cumulative time limit = 1738.9739074000017
Used memory = (RSS = 2372.421875Mb, VMS = 2388.003906Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =    104 : Current =    105
Incrementor step ends | Minimum  =    102 : Maximum =    300

[17-04-2022_10-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(105)]), ('state_module', [Number(105), Number(94)]), ('plan_module', [Number(105), Number(94), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(105), Number(94), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(105)]), ('action_preconditions', [Number(105)]), ('variable_relations', [Number(105)]), ('abstraction_mappings', [Number(105)]), ('conformance_module', [Number(105), Number(94), Number(48), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.329025s.

[17-04-2022_10-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.136462s with result Unsatisfiable.

[17-04-2022_10-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4654870000003939, Incremental time limit = None
Running cumulative time = 3.755173699999432, Cumulative time limit = 1738.9739074000017
Used memory = (RSS = 2380.113281Mb, VMS = 2405.675781Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =    105 : Current =    106
Incrementor step ends | Minimum  =    102 : Maximum =    300

[17-04-2022_10-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(106)]), ('state_module', [Number(106), Number(94)]), ('plan_module', [Number(106), Number(94), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(106), Number(94), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(106)]), ('action_preconditions', [Number(106)]), ('variable_relations', [Number(106)]), ('abstraction_mappings', [Number(106)]), ('conformance_module', [Number(106), Number(94), Number(48), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.338716s.

[17-04-2022_10-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.178101s with result Unsatisfiable.

[17-04-2022_10-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5168173000010938, Incremental time limit = None
Running cumulative time = 4.271991000000526, Cumulative time limit = 1738.9739074000017
Used memory = (RSS = 2382.730469Mb, VMS = 2406.992188Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =    106 : Current =    107
Incrementor step ends | Minimum  =    102 : Maximum =    300

[17-04-2022_10-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(107)]), ('state_module', [Number(107), Number(94)]), ('plan_module', [Number(107), Number(94), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(107), Number(94), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(107)]), ('action_preconditions', [Number(107)]), ('variable_relations', [Number(107)]), ('abstraction_mappings', [Number(107)]), ('conformance_module', [Number(107), Number(94), Number(48), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.345433s.

[17-04-2022_10-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.174758s with result Unsatisfiable.

[17-04-2022_10-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5201916999994864, Incremental time limit = None
Running cumulative time = 4.792182700000012, Cumulative time limit = 1738.9739074000017
Used memory = (RSS = 2385.292969Mb, VMS = 2407.515625Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =    107 : Current =    108
Incrementor step ends | Minimum  =    102 : Maximum =    300

[17-04-2022_10-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(108)]), ('state_module', [Number(108), Number(94)]), ('plan_module', [Number(108), Number(94), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(108), Number(94), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(108)]), ('action_preconditions', [Number(108)]), ('variable_relations', [Number(108)]), ('abstraction_mappings', [Number(108)]), ('conformance_module', [Number(108), Number(94), Number(48), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.350691s.

[17-04-2022_10-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.228046s with result Unsatisfiable.

[17-04-2022_10-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.578736100000242, Incremental time limit = None
Running cumulative time = 5.370918800000254, Cumulative time limit = 1738.9739074000017
Used memory = (RSS = 2389.863281Mb, VMS = 2410.750000Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =    108 : Current =    109
Incrementor step ends | Minimum  =    102 : Maximum =    300

[17-04-2022_10-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(109)]), ('state_module', [Number(109), Number(94)]), ('plan_module', [Number(109), Number(94), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(109), Number(94), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(109)]), ('action_preconditions', [Number(109)]), ('variable_relations', [Number(109)]), ('abstraction_mappings', [Number(109)]), ('conformance_module', [Number(109), Number(94), Number(48), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.356736s.

[17-04-2022_10-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.397645s with result Unsatisfiable.

[17-04-2022_10-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7543814000000566, Incremental time limit = None
Running cumulative time = 6.125300200000311, Cumulative time limit = 1738.9739074000017
Used memory = (RSS = 2392.648438Mb, VMS = 2411.273438Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =    109 : Current =    110
Incrementor step ends | Minimum  =    102 : Maximum =    300

[17-04-2022_10-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(110)]), ('state_module', [Number(110), Number(94)]), ('plan_module', [Number(110), Number(94), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(110), Number(94), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(110)]), ('action_preconditions', [Number(110)]), ('variable_relations', [Number(110)]), ('abstraction_mappings', [Number(110)]), ('conformance_module', [Number(110), Number(94), Number(48), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.365419s.

[17-04-2022_10-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.286104s with result Unsatisfiable.

[17-04-2022_10-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6515231000003041, Incremental time limit = None
Running cumulative time = 6.776823300000615, Cumulative time limit = 1738.9739074000017
Used memory = (RSS = 2395.441406Mb, VMS = 2412.171875Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =    110 : Current =    111
Incrementor step ends | Minimum  =    102 : Maximum =    300

[17-04-2022_10-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(111)]), ('state_module', [Number(111), Number(94)]), ('plan_module', [Number(111), Number(94), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(111), Number(94), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(111)]), ('action_preconditions', [Number(111)]), ('variable_relations', [Number(111)]), ('abstraction_mappings', [Number(111)]), ('conformance_module', [Number(111), Number(94), Number(48), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.373134s.

[17-04-2022_10-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.287534s with result Unsatisfiable.

[17-04-2022_10-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6606680000004417, Incremental time limit = None
Running cumulative time = 7.4374913000010565, Cumulative time limit = 1738.9739074000017
Used memory = (RSS = 2403.015625Mb, VMS = 2437.140625Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =    111 : Current =    112
Incrementor step ends | Minimum  =    102 : Maximum =    300

[17-04-2022_10-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(112)]), ('state_module', [Number(112), Number(94)]), ('plan_module', [Number(112), Number(94), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(112), Number(94), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(112)]), ('action_preconditions', [Number(112)]), ('variable_relations', [Number(112)]), ('abstraction_mappings', [Number(112)]), ('conformance_module', [Number(112), Number(94), Number(48), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.376207s.

[17-04-2022_10-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.360035s with result Satisfiable.

[17-04-2022_10-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7362424000002648, Incremental time limit = None
Running cumulative time = 8.173733700001321, Cumulative time limit = 1738.9739074000017
Used memory = (RSS = 2413.679688Mb, VMS = 2445.628906Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.431906s, Solving = 2.741828s, Total = 8.173734s, Memory = (RSS = 2413.679688Mb, VMS = 2445.628906Mb), Step range = [94-112]), Calls = 12
Final Model :: Total atoms = 28299, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[17-04-2022_10-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.653473s, Solving = 0.481697s, Total = 2.135169s, Memory = (RSS = 2365.843750Mb, VMS = 2381.964844Mb), Step range = [94-101]
2 : Statistics :: Grounding = 0.308325s, Solving = 0.047587s, Total = 0.355912s, Memory = (RSS = 2368.128906Mb, VMS = 2386.953125Mb), Step range = [102-102]
3 : Statistics :: Grounding = 0.312231s, Solving = 0.060100s, Total = 0.372330s, Memory = (RSS = 2370.273438Mb, VMS = 2387.476562Mb), Step range = [103-103]
4 : Statistics :: Grounding = 0.322516s, Solving = 0.103759s, Total = 0.426275s, Memory = (RSS = 2372.421875Mb, VMS = 2388.003906Mb), Step range = [104-104]
5 : Statistics :: Grounding = 0.329025s, Solving = 0.136462s, Total = 0.465487s, Memory = (RSS = 2380.113281Mb, VMS = 2405.675781Mb), Step range = [105-105]
6 : Statistics :: Grounding = 0.338716s, Solving = 0.178101s, Total = 0.516817s, Memory = (RSS = 2382.730469Mb, VMS = 2406.992188Mb), Step range = [106-106]
7 : Statistics :: Grounding = 0.345433s, Solving = 0.174758s, Total = 0.520192s, Memory = (RSS = 2385.292969Mb, VMS = 2407.515625Mb), Step range = [107-107]
8 : Statistics :: Grounding = 0.350691s, Solving = 0.228046s, Total = 0.578736s, Memory = (RSS = 2389.863281Mb, VMS = 2410.750000Mb), Step range = [108-108]
9 : Statistics :: Grounding = 0.356736s, Solving = 0.397645s, Total = 0.754381s, Memory = (RSS = 2392.648438Mb, VMS = 2411.273438Mb), Step range = [109-109]
10 : Statistics :: Grounding = 0.365419s, Solving = 0.286104s, Total = 0.651523s, Memory = (RSS = 2395.441406Mb, VMS = 2412.171875Mb), Step range = [110-110]
11 : Statistics :: Grounding = 0.373134s, Solving = 0.287534s, Total = 0.660668s, Memory = (RSS = 2403.015625Mb, VMS = 2437.140625Mb), Step range = [111-111]
12 : Statistics :: Grounding = 0.376207s, Solving = 0.360035s, Total = 0.736242s, Memory = (RSS = 2413.679688Mb, VMS = 2445.628906Mb), Step range = [112-112]

[17-04-2022_10-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 8.173734s due to: Stop condition reached.

[17-04-2022_10-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[17-04-2022_10-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[17-04-2022_10-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 19, 35: 19, 36: 19, 37: 20, 38: 20, 39: 20, 40: 20, 41: 21, 42: 22, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 28, 50: 28, 51: 29, 52: 29, 53: 29, 54: 29, 55: 30, 56: 30, 57: 30, 58: 31, 59: 31, 60: 31, 61: 32, 62: 32, 63: 32, 64: 33, 65: 33, 66: 33, 67: 34, 68: 34, 69: 34, 70: 34, 71: 35, 72: 36, 73: 37, 74: 38, 75: 39, 76: 40, 77: 41, 78: 42, 79: 42, 80: 42, 81: 43, 82: 43, 83: 43, 84: 43, 85: 44, 86: 44, 87: 44, 88: 45, 89: 45, 90: 45, 91: 46, 92: 46, 93: 46, 94: 47}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 36, 20: 40, 21: 41, 22: 42, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 50, 29: 54, 30: 57, 31: 60, 32: 63, 33: 66, 34: 70, 35: 71, 36: 72, 37: 73, 38: 74, 39: 75, 40: 76, 41: 77, 42: 80, 43: 84, 44: 87, 45: 90, 46: 93, 47: 94}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 19, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 28, 47: 29, 48: 30, 49: 30, 50: 30, 51: 30, 52: 30, 53: 31, 54: 32, 55: 32, 56: 33, 57: 33, 58: 33, 59: 34, 60: 34, 61: 34, 62: 34, 63: 35, 64: 36, 65: 37, 66: 38, 67: 39, 68: 40, 69: 41, 70: 42, 71: 42, 72: 43, 73: 44}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 37, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 45, 28: 46, 29: 47, 30: 52, 31: 53, 32: 55, 33: 58, 34: 62, 35: 63, 36: 64, 37: 65, 38: 66, 39: 67, 40: 68, 41: 69, 42: 71, 43: 72, 44: 73}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 19, 35: 19, 36: 19, 37: 20, 38: 20, 39: 20, 40: 20, 41: 21, 42: 22, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 28, 50: 28, 51: 29, 52: 29, 53: 29, 54: 29, 55: 30, 56: 30, 57: 30, 58: 31, 59: 31, 60: 31, 61: 32, 62: 32, 63: 32, 64: 33, 65: 33, 66: 33, 67: 34, 68: 34, 69: 34, 70: 34, 71: 35, 72: 36, 73: 37, 74: 38, 75: 39, 76: 40, 77: 41, 78: 42, 79: 42, 80: 42, 81: 43, 82: 43, 83: 43, 84: 43, 85: 44, 86: 44, 87: 44, 88: 45, 89: 45, 90: 45, 91: 46, 92: 46, 93: 46, 94: 47, 95: 48, 96: 49, 97: 49, 98: 49, 99: 50, 100: 50, 101: 50, 102: 50, 103: 51, 104: 52, 105: 53, 106: 54, 107: 54, 108: 54, 109: 54, 110: 55, 111: 55, 112: 55}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 36, 20: 40, 21: 41, 22: 42, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 50, 29: 54, 30: 57, 31: 60, 32: 63, 33: 66, 34: 70, 35: 71, 36: 72, 37: 73, 38: 74, 39: 75, 40: 76, 41: 77, 42: 80, 43: 84, 44: 87, 45: 90, 46: 93, 47: 94, 48: 95, 49: 98, 50: 102, 51: 103, 52: 104, 53: 105, 54: 109, 55: 112}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 19, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 28, 47: 29, 48: 30, 49: 30, 50: 30, 51: 30, 52: 30, 53: 31, 54: 32, 55: 32, 56: 33, 57: 33, 58: 33, 59: 34, 60: 34, 61: 34, 62: 34, 63: 35, 64: 36, 65: 37, 66: 38, 67: 39, 68: 40, 69: 41, 70: 42, 71: 42, 72: 43, 73: 44}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 37, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 45, 28: 46, 29: 47, 30: 52, 31: 53, 32: 55, 33: 58, 34: 62, 35: 63, 36: 64, 37: 65, 38: 66, 39: 67, 40: 68, 41: 69, 42: 71, 43: 72, 44: 73}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 55, Last requested goal index = 55, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.431906s, Solving = 2.741828s, Total = 8.173734s, Memory = (RSS = 2413.679688Mb, VMS = 2445.628906Mb), Step range = [94-112]), Calls = 12
Model :: Total atoms = 28299, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 18 :: Actions = 18                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,0))
Step 10:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,0))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 21:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(store_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(store_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 31:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 18] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 37:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,1))
Step 38:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,1))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 21] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Achieved Sub-goals:
        [Index = 21] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 42:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 44:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 45:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 46:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 47:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 48:
    Current Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 49:
    Current Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 50:
    Current Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 51:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 52:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 53:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 54:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 55:
    Current Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 56:
    Current Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 57:
    Current Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 58:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 59:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 60:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 61:
    Current Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 62:
    Current Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 63:
    Current Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 64:
    Current Sub-goals:
        [Index = 33] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,1))
Step 65:
    Current Sub-goals:
        [Index = 33] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,1))
Step 66:
    Current Sub-goals:
        [Index = 33] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 33] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,1))
Step 67:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,1))
Step 68:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,1))
Step 69:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 70:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 71:
    Current Sub-goals:
        [Index = 35] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Achieved Sub-goals:
        [Index = 35] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 72:
    Current Sub-goals:
        [Index = 36] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 36] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 36] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 36] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 73:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 74:
    Current Sub-goals:
        [Index = 38] talos : put(manipulator_end_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 38] talos : put(manipulator_end_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 75:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 39] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 39] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 76:
    Current Sub-goals:
        [Index = 40] talos : release(manipulator_end_2,(block,5)) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 40] talos : release(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 40] talos : release(manipulator_end_2,(block,5)) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 40] talos : release(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 77:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 41] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 41] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 41] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 78:
    Current Sub-goals:
        [Index = 42] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 79:
    Current Sub-goals:
        [Index = 42] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 80:
    Current Sub-goals:
        [Index = 42] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 42] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 81:
    Current Sub-goals:
        [Index = 43] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 82:
    Current Sub-goals:
        [Index = 43] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,0))
Step 83:
    Current Sub-goals:
        [Index = 43] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 84:
    Current Sub-goals:
        [Index = 43] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 43] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 85:
    Current Sub-goals:
        [Index = 44] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 86:
    Current Sub-goals:
        [Index = 44] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 87:
    Current Sub-goals:
        [Index = 44] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 44] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 88:
    Current Sub-goals:
        [Index = 45] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 89:
    Current Sub-goals:
        [Index = 45] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 90:
    Current Sub-goals:
        [Index = 45] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 45] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 91:
    Current Sub-goals:
        [Index = 46] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 92:
    Current Sub-goals:
        [Index = 46] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 93:
    Current Sub-goals:
        [Index = 46] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 46] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 94:
    Current Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 95:
    Current Sub-goals:
        [Index = 48] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 48] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 48] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 48] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 96:
    Current Sub-goals:
        [Index = 49] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 97:
    Current Sub-goals:
        [Index = 49] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 98:
    Current Sub-goals:
        [Index = 49] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 49] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 99:
    Current Sub-goals:
        [Index = 50] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 100:
    Current Sub-goals:
        [Index = 50] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 101:
    Current Sub-goals:
        [Index = 50] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 102:
    Current Sub-goals:
        [Index = 50] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 50] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 103:
    Current Sub-goals:
        [Index = 51] talos : configure(manipulator_end_2,aligned_with((block,4))) -> configuration(manipulator_end_2) = aligned_with((block,4))
    Achieved Sub-goals:
        [Index = 51] talos : configure(manipulator_end_2,aligned_with((block,4))) -> configuration(manipulator_end_2) = aligned_with((block,4))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 104:
    Current Sub-goals:
        [Index = 52] talos : grasp(manipulator_end_2,(block,4)) -> grasping(manipulator_end_2) = (block,4)
    Achieved Sub-goals:
        [Index = 52] talos : grasp(manipulator_end_2,(block,4)) -> grasping(manipulator_end_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 105:
    Current Sub-goals:
        [Index = 53] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 53] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 106:
    Current Sub-goals:
        [Index = 54] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 107:
    Current Sub-goals:
        [Index = 54] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 108:
    Current Sub-goals:
        [Index = 54] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 109:
    Current Sub-goals:
        [Index = 54] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 54] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 110:
    Current Sub-goals:
        [Index = 55] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 111:
    Current Sub-goals:
        [Index = 55] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 112:
    Current Sub-goals:
        [Index = 55] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 55] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=112

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Monolevel problem 7 at level 1 solved.

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Online planning increment 7 finished.

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 3 : Total constraining sub-goal stages = 44 : Goals achieved = 44 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 7 : Total constraining sub-goal stages = 73 : Goals achieved = 55 : Goals unachieved = 18 : Complete = False

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 8 by method ground-first is [1-1].

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 8 at level 1:
Total Templated Partial Problems = 3, Problem Range = [7-9], Size = 26, Sub-goal Stage Range = [48-73]
Division points [total=2] : [(Index = 55, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 64, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [56-64]

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 112, chosen step range to extract = range(0, 113)

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 112, Total actions = 112, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 73, chosen step range to extract = range(0, 74)

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 112, Total actions = 112, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 44, chosen step range to extract = range(0, 45)

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 112, Total actions = 112, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 112, Total actions = 112, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [56-64], problem number = 8, increment number = 8

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 56)
	('last_sgoals', 64)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1730.8001737000004)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [56-64] : Concurrency disabled : Minimum search length bound enabled with value 120

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 56
last_sgoals = 64
start_step = 112
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 120

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[17-04-2022_10-27-39] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[17-04-2022_10-27-39] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 112 as problem start state.

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 112})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 112})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 112})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 112})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 112})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 112})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 112})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 112})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 112})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 112})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 112})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 112})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((hallway,0),0,1)', 'S': 112})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((puzzle_room,1),5,0)', 'S': 112})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((puzzle_room,1),5,0)', 'S': 112})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((hallway,0),0,1)', 'S': 112})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((hallway,0),0,1)', 'S': 112})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((hallway,0),0,1)', 'S': 112})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((hallway,0),0,1)', 'S': 112})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((hallway,0),0,1)', 'S': 112})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((hallway,0),0,1)', 'S': 112})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 112})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 112})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 112})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 112})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((hallway,0),0,1)', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 112})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 112})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 112})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 112})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 112})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 112})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 112})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 112})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 112})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 112})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 112})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 112})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 112})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 112})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 112})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 112})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 112})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 112})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 112})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 112})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 112})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 112})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 112})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 112})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 112})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(hallway,0)', 'S': 112})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 112})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 112})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(hallway,0)', 'S': 112})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(hallway,0)', 'S': 112})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(hallway,0)', 'S': 112})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(hallway,0)', 'S': 112})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(hallway,0)', 'S': 112})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(hallway,0)', 'S': 112})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 112})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 112})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 112})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 112})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(hallway,0)', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 112})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 112})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 112})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 112})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 112})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 112})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 112})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 112})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 112})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 112})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 112})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 112})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 112})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 112})

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 164 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 112).
holds(1, complete_tower(red,puzzle_room_table), false, 112).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 112).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 112).
holds(1, configuration(manipulator_limb_1), retracted, 112).
holds(1, configuration(manipulator_limb_2), retracted, 112).
holds(1, configuration(puzzle_room_door), open, 112).
holds(1, configuration(starting_room_door), closed, 112).
holds(1, configuration(store_room_door), open, 112).
holds(1, grasping(manipulator_end_1), nothing, 112).
holds(1, grasping(manipulator_end_2), (block,4), 112).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 112).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 112).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 112).
holds(1, in((block,4)), ((hallway,0),0,1), 112).
holds(1, in((block,5)), ((puzzle_room,1),5,0), 112).
holds(1, in((block,6)), ((puzzle_room,1),5,0), 112).
holds(1, in(manipulator_arm_1), ((hallway,0),0,1), 112).
holds(1, in(manipulator_arm_2), ((hallway,0),0,1), 112).
holds(1, in(manipulator_end_1), ((hallway,0),0,1), 112).
holds(1, in(manipulator_end_2), ((hallway,0),0,1), 112).
holds(1, in(manipulator_limb_1), ((hallway,0),0,1), 112).
holds(1, in(manipulator_limb_2), ((hallway,0),0,1), 112).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 112).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 112).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 112).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 112).
holds(1, in(talos), ((hallway,0),0,1), 112).
holds(1, in_tower((block,1),(block,1)), true, 112).
holds(1, in_tower((block,1),(block,2)), false, 112).
holds(1, in_tower((block,1),(block,3)), true, 112).
holds(1, in_tower((block,1),(block,4)), false, 112).
holds(1, in_tower((block,1),(block,5)), false, 112).
holds(1, in_tower((block,1),(block,6)), false, 112).
holds(1, in_tower((block,2),(block,1)), false, 112).
holds(1, in_tower((block,2),(block,2)), true, 112).
holds(1, in_tower((block,2),(block,3)), false, 112).
holds(1, in_tower((block,2),(block,4)), false, 112).
holds(1, in_tower((block,2),(block,5)), false, 112).
holds(1, in_tower((block,2),(block,6)), false, 112).
holds(1, in_tower((block,3),(block,1)), false, 112).
holds(1, in_tower((block,3),(block,2)), false, 112).
holds(1, in_tower((block,3),(block,3)), false, 112).
holds(1, in_tower((block,3),(block,4)), false, 112).
holds(1, in_tower((block,3),(block,5)), false, 112).
holds(1, in_tower((block,3),(block,6)), false, 112).
holds(1, in_tower((block,4),(block,1)), false, 112).
holds(1, in_tower((block,4),(block,2)), false, 112).
holds(1, in_tower((block,4),(block,3)), false, 112).
holds(1, in_tower((block,4),(block,4)), false, 112).
holds(1, in_tower((block,4),(block,5)), false, 112).
holds(1, in_tower((block,4),(block,6)), false, 112).
holds(1, in_tower((block,5),(block,1)), false, 112).
holds(1, in_tower((block,5),(block,2)), false, 112).
holds(1, in_tower((block,5),(block,3)), false, 112).
holds(1, in_tower((block,5),(block,4)), false, 112).
holds(1, in_tower((block,5),(block,5)), false, 112).
holds(1, in_tower((block,5),(block,6)), false, 112).
holds(1, in_tower((block,6),(block,1)), false, 112).
holds(1, in_tower((block,6),(block,2)), false, 112).
holds(1, in_tower((block,6),(block,3)), false, 112).
holds(1, in_tower((block,6),(block,4)), false, 112).
holds(1, in_tower((block,6),(block,5)), true, 112).
holds(1, in_tower((block,6),(block,6)), true, 112).
holds(1, on((block,1)), puzzle_room_table_left, 112).
holds(1, on((block,2)), puzzle_room_table_right, 112).
holds(1, on((block,3)), (block,1), 112).
holds(1, on((block,4)), nothing, 112).
holds(1, on((block,5)), (block,6), 112).
holds(1, on((block,6)), puzzle_room_table_right, 112).
holds(1, tower_base((block,1),puzzle_room_table), true, 112).
holds(1, tower_base((block,2),puzzle_room_table), true, 112).
holds(1, tower_base((block,3),puzzle_room_table), false, 112).
holds(1, tower_base((block,4),puzzle_room_table), false, 112).
holds(1, tower_base((block,5),puzzle_room_table), false, 112).
holds(1, tower_base((block,6),puzzle_room_table), true, 112).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 112).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 112).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 112).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 112).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 112).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 112).
holds(2, complete_tower(blue,puzzle_room_table), false, 112).
holds(2, complete_tower(red,puzzle_room_table), false, 112).
holds(2, configuration(manipulator_end_1), aligned_with(nothing), 112).
holds(2, configuration(manipulator_end_2), aligned_with((block,4)), 112).
holds(2, configuration(manipulator_limb_1), retracted, 112).
holds(2, configuration(manipulator_limb_2), retracted, 112).
holds(2, configuration(puzzle_room_door), open, 112).
holds(2, configuration(starting_room_door), closed, 112).
holds(2, configuration(store_room_door), open, 112).
holds(2, grasping(manipulator_end_1), nothing, 112).
holds(2, grasping(manipulator_end_2), (block,4), 112).
holds(2, in((block,1)), (puzzle_room,1), 112).
holds(2, in((block,2)), (puzzle_room,1), 112).
holds(2, in((block,3)), (puzzle_room,1), 112).
holds(2, in((block,4)), (hallway,0), 112).
holds(2, in((block,5)), (puzzle_room,1), 112).
holds(2, in((block,6)), (puzzle_room,1), 112).
holds(2, in(manipulator_arm_1), (hallway,0), 112).
holds(2, in(manipulator_arm_2), (hallway,0), 112).
holds(2, in(manipulator_end_1), (hallway,0), 112).
holds(2, in(manipulator_end_2), (hallway,0), 112).
holds(2, in(manipulator_limb_1), (hallway,0), 112).
holds(2, in(manipulator_limb_2), (hallway,0), 112).
holds(2, in(puzzle_room_table), (puzzle_room,1), 112).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 112).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 112).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 112).
holds(2, in(talos), (hallway,0), 112).
holds(2, in_tower((block,1),(block,1)), true, 112).
holds(2, in_tower((block,1),(block,2)), false, 112).
holds(2, in_tower((block,1),(block,3)), true, 112).
holds(2, in_tower((block,1),(block,4)), false, 112).
holds(2, in_tower((block,1),(block,5)), false, 112).
holds(2, in_tower((block,1),(block,6)), false, 112).
holds(2, in_tower((block,2),(block,1)), false, 112).
holds(2, in_tower((block,2),(block,2)), true, 112).
holds(2, in_tower((block,2),(block,3)), false, 112).
holds(2, in_tower((block,2),(block,4)), false, 112).
holds(2, in_tower((block,2),(block,5)), false, 112).
holds(2, in_tower((block,2),(block,6)), false, 112).
holds(2, in_tower((block,3),(block,1)), false, 112).
holds(2, in_tower((block,3),(block,2)), false, 112).
holds(2, in_tower((block,3),(block,3)), false, 112).
holds(2, in_tower((block,3),(block,4)), false, 112).
holds(2, in_tower((block,3),(block,5)), false, 112).
holds(2, in_tower((block,3),(block,6)), false, 112).
holds(2, in_tower((block,4),(block,1)), false, 112).
holds(2, in_tower((block,4),(block,2)), false, 112).
holds(2, in_tower((block,4),(block,3)), false, 112).
holds(2, in_tower((block,4),(block,4)), false, 112).
holds(2, in_tower((block,4),(block,5)), false, 112).
holds(2, in_tower((block,4),(block,6)), false, 112).
holds(2, in_tower((block,5),(block,1)), false, 112).
holds(2, in_tower((block,5),(block,2)), false, 112).
holds(2, in_tower((block,5),(block,3)), false, 112).
holds(2, in_tower((block,5),(block,4)), false, 112).
holds(2, in_tower((block,5),(block,5)), false, 112).
holds(2, in_tower((block,5),(block,6)), false, 112).
holds(2, in_tower((block,6),(block,1)), false, 112).
holds(2, in_tower((block,6),(block,2)), false, 112).
holds(2, in_tower((block,6),(block,3)), false, 112).
holds(2, in_tower((block,6),(block,4)), false, 112).
holds(2, in_tower((block,6),(block,5)), true, 112).
holds(2, in_tower((block,6),(block,6)), true, 112).
holds(2, on((block,1)), puzzle_room_table_left, 112).
holds(2, on((block,2)), puzzle_room_table_right, 112).
holds(2, on((block,3)), (block,1), 112).
holds(2, on((block,4)), nothing, 112).
holds(2, on((block,5)), (block,6), 112).
holds(2, on((block,6)), puzzle_room_table_right, 112).
holds(2, tower_base((block,1),puzzle_room_table), true, 112).
holds(2, tower_base((block,2),puzzle_room_table), true, 112).
holds(2, tower_base((block,3),puzzle_room_table), false, 112).
holds(2, tower_base((block,4),puzzle_room_table), false, 112).
holds(2, tower_base((block,5),puzzle_room_table), false, 112).
holds(2, tower_base((block,6),puzzle_room_table), true, 112).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 112).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 112).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 112).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 112).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 112).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 112).

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=120']

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((hallway,1))', 'F': 'in(talos)', 'V': '(hallway,1)', 'I': 56})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((hallway,2))', 'F': 'in(talos)', 'V': '(hallway,2)', 'I': 57})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'F': 'in(talos)', 'V': '(puzzle_room,0)', 'I': 58})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'I': 59})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'I': 60})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,3))', 'I': 61})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'I': 62})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'F': 'grasping(manipulator_end_1)', 'V': '(block,3)', 'I': 63})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'I': 64})

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 9 rules into program part base:

sub_goal(2, talos, move((hallway,1)), in(talos), (hallway,1), 56).
sub_goal(2, talos, move((hallway,2)), in(talos), (hallway,2), 57).
sub_goal(2, talos, move((puzzle_room,0)), in(talos), (puzzle_room,0), 58).
sub_goal(2, talos, move((puzzle_room,1)), in(talos), (puzzle_room,1), 59).
sub_goal(2, talos, configure(manipulator_limb_1,extended), configuration(manipulator_limb_1), extended, 60).
sub_goal(2, talos, configure(manipulator_end_1,aligned_with((block,3))), configuration(manipulator_end_1), aligned_with((block,3)), 61).
sub_goal(2, talos, configure(manipulator_limb_2,extended), configuration(manipulator_limb_2), extended, 62).
sub_goal(2, talos, grasp(manipulator_end_1,(block,3)), grasping(manipulator_end_1), (block,3), 63).
sub_goal(2, talos, put(manipulator_end_1,(block,3),puzzle_room_table_left), on((block,3)), puzzle_room_table_left, 64).

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=120']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001C09CF61310>]
	incrementor = SolveIncrementor(step_start=112, step_increase=1, step_increase_initial=9, step_end_min=121, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1730.8001737000004, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 112), range_=None), IncPart(name='plan_module', args=('#inc', 112, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 112, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 112, 56, 64, 'sequential', 'false'), range_=None)]

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 850 rules

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004673899999943387s

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.172283s.

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025261s with result Satisfiable.

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001C09C961400>

[17-04-2022_10-27-39] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 112)
	('last_sgoals', 64)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('first_sgoals', 56)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001C09C961400>)

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 112). %* None *%
#program plan_module(#inc, 112, false, false). %* None *%
#program optimisation_module(#inc, 112, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 112, 56, 64, sequential, false). %* None *%

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =    111 : Current =    120
Incrementor step ends | Minimum  =    121 : Maximum =    300

[17-04-2022_10-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(120)]), ('state_module', [Number(112), Number(112)]), ('plan_module', [Number(112), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(112), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(112)]), ('action_preconditions', [Number(112)]), ('variable_relations', [Number(112)]), ('abstraction_mappings', [Number(112)]), ('conformance_module', [Number(112), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(113), Number(112)]), ('plan_module', [Number(113), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(113), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(113)]), ('action_preconditions', [Number(113)]), ('variable_relations', [Number(113)]), ('abstraction_mappings', [Number(113)]), ('conformance_module', [Number(113), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(114), Number(112)]), ('plan_module', [Number(114), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(114), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(114)]), ('action_preconditions', [Number(114)]), ('variable_relations', [Number(114)]), ('abstraction_mappings', [Number(114)]), ('conformance_module', [Number(114), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(115), Number(112)]), ('plan_module', [Number(115), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(115), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(115)]), ('action_preconditions', [Number(115)]), ('variable_relations', [Number(115)]), ('abstraction_mappings', [Number(115)]), ('conformance_module', [Number(115), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(116), Number(112)]), ('plan_module', [Number(116), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(116), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(116)]), ('action_preconditions', [Number(116)]), ('variable_relations', [Number(116)]), ('abstraction_mappings', [Number(116)]), ('conformance_module', [Number(116), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(117), Number(112)]), ('plan_module', [Number(117), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(117), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(117)]), ('action_preconditions', [Number(117)]), ('variable_relations', [Number(117)]), ('abstraction_mappings', [Number(117)]), ('conformance_module', [Number(117), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(118), Number(112)]), ('plan_module', [Number(118), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(118), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(118)]), ('action_preconditions', [Number(118)]), ('variable_relations', [Number(118)]), ('abstraction_mappings', [Number(118)]), ('conformance_module', [Number(118), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(119), Number(112)]), ('plan_module', [Number(119), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(119), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(119)]), ('action_preconditions', [Number(119)]), ('variable_relations', [Number(119)]), ('abstraction_mappings', [Number(119)]), ('conformance_module', [Number(119), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(120), Number(112)]), ('plan_module', [Number(120), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(120), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(120)]), ('action_preconditions', [Number(120)]), ('variable_relations', [Number(120)]), ('abstraction_mappings', [Number(120)]), ('conformance_module', [Number(120), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.868949s.

[17-04-2022_10-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.561255s with result Unsatisfiable.

[17-04-2022_10-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.430204799999956, Incremental time limit = None
Running cumulative time = 2.430204799999956, Cumulative time limit = 1730.8001737000004
Used memory = (RSS = 2373.281250Mb, VMS = 2390.003906Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =    120 : Current =    121
Incrementor step ends | Minimum  =    121 : Maximum =    300

[17-04-2022_10-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(121)]), ('state_module', [Number(121), Number(112)]), ('plan_module', [Number(121), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(121), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(121)]), ('action_preconditions', [Number(121)]), ('variable_relations', [Number(121)]), ('abstraction_mappings', [Number(121)]), ('conformance_module', [Number(121), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.320515s.

[17-04-2022_10-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049624s with result Unsatisfiable.

[17-04-2022_10-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3701390000005631, Incremental time limit = None
Running cumulative time = 2.800343800000519, Cumulative time limit = 1730.8001737000004
Used memory = (RSS = 2379.480469Mb, VMS = 2400.640625Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =    121 : Current =    122
Incrementor step ends | Minimum  =    121 : Maximum =    300

[17-04-2022_10-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(122)]), ('state_module', [Number(122), Number(112)]), ('plan_module', [Number(122), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(122), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(122)]), ('action_preconditions', [Number(122)]), ('variable_relations', [Number(122)]), ('abstraction_mappings', [Number(122)]), ('conformance_module', [Number(122), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.327293s.

[17-04-2022_10-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.059300s with result Unsatisfiable.

[17-04-2022_10-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3865929000003234, Incremental time limit = None
Running cumulative time = 3.1869367000008424, Cumulative time limit = 1730.8001737000004
Used memory = (RSS = 2382.160156Mb, VMS = 2401.160156Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =    122 : Current =    123
Incrementor step ends | Minimum  =    121 : Maximum =    300

[17-04-2022_10-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(123)]), ('state_module', [Number(123), Number(112)]), ('plan_module', [Number(123), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(123), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(123)]), ('action_preconditions', [Number(123)]), ('variable_relations', [Number(123)]), ('abstraction_mappings', [Number(123)]), ('conformance_module', [Number(123), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.334802s.

[17-04-2022_10-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.062068s with result Unsatisfiable.

[17-04-2022_10-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.39686970000002475, Incremental time limit = None
Running cumulative time = 3.583806400000867, Cumulative time limit = 1730.8001737000004
Used memory = (RSS = 2384.828125Mb, VMS = 2402.742188Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =    123 : Current =    124
Incrementor step ends | Minimum  =    121 : Maximum =    300

[17-04-2022_10-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(124)]), ('state_module', [Number(124), Number(112)]), ('plan_module', [Number(124), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(124), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(124)]), ('action_preconditions', [Number(124)]), ('variable_relations', [Number(124)]), ('abstraction_mappings', [Number(124)]), ('conformance_module', [Number(124), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.343653s.

[17-04-2022_10-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.081800s with result Unsatisfiable.

[17-04-2022_10-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.42545350000000326, Incremental time limit = None
Running cumulative time = 4.00925990000087, Cumulative time limit = 1730.8001737000004
Used memory = (RSS = 2387.378906Mb, VMS = 2404.058594Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =    124 : Current =    125
Incrementor step ends | Minimum  =    121 : Maximum =    300

[17-04-2022_10-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(125)]), ('state_module', [Number(125), Number(112)]), ('plan_module', [Number(125), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(125), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(125)]), ('action_preconditions', [Number(125)]), ('variable_relations', [Number(125)]), ('abstraction_mappings', [Number(125)]), ('conformance_module', [Number(125), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.352448s.

[17-04-2022_10-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.110209s with result Unsatisfiable.

[17-04-2022_10-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4626570000000356, Incremental time limit = None
Running cumulative time = 4.471916900000906, Cumulative time limit = 1730.8001737000004
Used memory = (RSS = 2390.242188Mb, VMS = 2416.703125Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =    125 : Current =    126
Incrementor step ends | Minimum  =    121 : Maximum =    300

[17-04-2022_10-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(126)]), ('state_module', [Number(126), Number(112)]), ('plan_module', [Number(126), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(126), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(126)]), ('action_preconditions', [Number(126)]), ('variable_relations', [Number(126)]), ('abstraction_mappings', [Number(126)]), ('conformance_module', [Number(126), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.359547s.

[17-04-2022_10-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.155690s with result Unsatisfiable.

[17-04-2022_10-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5152370999994673, Incremental time limit = None
Running cumulative time = 4.987154000000373, Cumulative time limit = 1730.8001737000004
Used memory = (RSS = 2395.085938Mb, VMS = 2419.496094Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =    126 : Current =    127
Incrementor step ends | Minimum  =    121 : Maximum =    300

[17-04-2022_10-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(127)]), ('state_module', [Number(127), Number(112)]), ('plan_module', [Number(127), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(127), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(127)]), ('action_preconditions', [Number(127)]), ('variable_relations', [Number(127)]), ('abstraction_mappings', [Number(127)]), ('conformance_module', [Number(127), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.366528s.

[17-04-2022_10-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.188438s with result Unsatisfiable.

[17-04-2022_10-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5549661000004562, Incremental time limit = None
Running cumulative time = 5.5421201000008296, Cumulative time limit = 1730.8001737000004
Used memory = (RSS = 2397.207031Mb, VMS = 2419.460938Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =    127 : Current =    128
Incrementor step ends | Minimum  =    121 : Maximum =    300

[17-04-2022_10-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(128)]), ('state_module', [Number(128), Number(112)]), ('plan_module', [Number(128), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(128), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(128)]), ('action_preconditions', [Number(128)]), ('variable_relations', [Number(128)]), ('abstraction_mappings', [Number(128)]), ('conformance_module', [Number(128), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.373021s.

[17-04-2022_10-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.249484s with result Unsatisfiable.

[17-04-2022_10-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6225045000001046, Incremental time limit = None
Running cumulative time = 6.164624600000934, Cumulative time limit = 1730.8001737000004
Used memory = (RSS = 2404.687500Mb, VMS = 2426.148438Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =    128 : Current =    129
Incrementor step ends | Minimum  =    121 : Maximum =    300

[17-04-2022_10-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(129)]), ('state_module', [Number(129), Number(112)]), ('plan_module', [Number(129), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(129), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(129)]), ('action_preconditions', [Number(129)]), ('variable_relations', [Number(129)]), ('abstraction_mappings', [Number(129)]), ('conformance_module', [Number(129), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.378395s.

[17-04-2022_10-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.202704s with result Unsatisfiable.

[17-04-2022_10-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5810988999992333, Incremental time limit = None
Running cumulative time = 6.745723500000167, Cumulative time limit = 1730.8001737000004
Used memory = (RSS = 2407.199219Mb, VMS = 2427.660156Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =    129 : Current =    130
Incrementor step ends | Minimum  =    121 : Maximum =    300

[17-04-2022_10-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(130)]), ('state_module', [Number(130), Number(112)]), ('plan_module', [Number(130), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(130), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(130)]), ('action_preconditions', [Number(130)]), ('variable_relations', [Number(130)]), ('abstraction_mappings', [Number(130)]), ('conformance_module', [Number(130), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.389745s.

[17-04-2022_10-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.322017s with result Unsatisfiable.

[17-04-2022_10-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7117624000002252, Incremental time limit = None
Running cumulative time = 7.457485900000393, Cumulative time limit = 1730.8001737000004
Used memory = (RSS = 2413.074219Mb, VMS = 2432.226562Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =    130 : Current =    131
Incrementor step ends | Minimum  =    121 : Maximum =    300

[17-04-2022_10-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(131)]), ('state_module', [Number(131), Number(112)]), ('plan_module', [Number(131), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(131), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(131)]), ('action_preconditions', [Number(131)]), ('variable_relations', [Number(131)]), ('abstraction_mappings', [Number(131)]), ('conformance_module', [Number(131), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.395410s.

[17-04-2022_10-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.317352s with result Unsatisfiable.

[17-04-2022_10-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7127620000001116, Incremental time limit = None
Running cumulative time = 8.170247900000504, Cumulative time limit = 1730.8001737000004
Used memory = (RSS = 2416.750000Mb, VMS = 2433.742188Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =    131 : Current =    132
Incrementor step ends | Minimum  =    121 : Maximum =    300

[17-04-2022_10-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(132)]), ('state_module', [Number(132), Number(112)]), ('plan_module', [Number(132), Number(112), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(132), Number(112), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(132)]), ('action_preconditions', [Number(132)]), ('variable_relations', [Number(132)]), ('abstraction_mappings', [Number(132)]), ('conformance_module', [Number(132), Number(112), Number(56), Number(64), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.404017s.

[17-04-2022_10-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.434796s with result Satisfiable.

[17-04-2022_10-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8388127999996868, Incremental time limit = None
Running cumulative time = 9.009060700000191, Cumulative time limit = 1730.8001737000004
Used memory = (RSS = 2427.515625Mb, VMS = 2463.472656Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 6.214324s, Solving = 2.794737s, Total = 9.009061s, Memory = (RSS = 2427.515625Mb, VMS = 2463.472656Mb), Step range = [112-132]), Calls = 13
Final Model :: Total atoms = 29125, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[17-04-2022_10-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.868949s, Solving = 0.561255s, Total = 2.430205s, Memory = (RSS = 2373.281250Mb, VMS = 2390.003906Mb), Step range = [112-120]
2 : Statistics :: Grounding = 0.320515s, Solving = 0.049624s, Total = 0.370139s, Memory = (RSS = 2379.480469Mb, VMS = 2400.640625Mb), Step range = [121-121]
3 : Statistics :: Grounding = 0.327293s, Solving = 0.059300s, Total = 0.386593s, Memory = (RSS = 2382.160156Mb, VMS = 2401.160156Mb), Step range = [122-122]
4 : Statistics :: Grounding = 0.334802s, Solving = 0.062068s, Total = 0.396870s, Memory = (RSS = 2384.828125Mb, VMS = 2402.742188Mb), Step range = [123-123]
5 : Statistics :: Grounding = 0.343653s, Solving = 0.081800s, Total = 0.425454s, Memory = (RSS = 2387.378906Mb, VMS = 2404.058594Mb), Step range = [124-124]
6 : Statistics :: Grounding = 0.352448s, Solving = 0.110209s, Total = 0.462657s, Memory = (RSS = 2390.242188Mb, VMS = 2416.703125Mb), Step range = [125-125]
7 : Statistics :: Grounding = 0.359547s, Solving = 0.155690s, Total = 0.515237s, Memory = (RSS = 2395.085938Mb, VMS = 2419.496094Mb), Step range = [126-126]
8 : Statistics :: Grounding = 0.366528s, Solving = 0.188438s, Total = 0.554966s, Memory = (RSS = 2397.207031Mb, VMS = 2419.460938Mb), Step range = [127-127]
9 : Statistics :: Grounding = 0.373021s, Solving = 0.249484s, Total = 0.622505s, Memory = (RSS = 2404.687500Mb, VMS = 2426.148438Mb), Step range = [128-128]
10 : Statistics :: Grounding = 0.378395s, Solving = 0.202704s, Total = 0.581099s, Memory = (RSS = 2407.199219Mb, VMS = 2427.660156Mb), Step range = [129-129]
11 : Statistics :: Grounding = 0.389745s, Solving = 0.322017s, Total = 0.711762s, Memory = (RSS = 2413.074219Mb, VMS = 2432.226562Mb), Step range = [130-130]
12 : Statistics :: Grounding = 0.395410s, Solving = 0.317352s, Total = 0.712762s, Memory = (RSS = 2416.750000Mb, VMS = 2433.742188Mb), Step range = [131-131]
13 : Statistics :: Grounding = 0.404017s, Solving = 0.434796s, Total = 0.838813s, Memory = (RSS = 2427.515625Mb, VMS = 2463.472656Mb), Step range = [132-132]

[17-04-2022_10-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 9.009061s due to: Stop condition reached.

[17-04-2022_10-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[17-04-2022_10-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[17-04-2022_10-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 19, 35: 19, 36: 19, 37: 20, 38: 20, 39: 20, 40: 20, 41: 21, 42: 22, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 28, 50: 28, 51: 29, 52: 29, 53: 29, 54: 29, 55: 30, 56: 30, 57: 30, 58: 31, 59: 31, 60: 31, 61: 32, 62: 32, 63: 32, 64: 33, 65: 33, 66: 33, 67: 34, 68: 34, 69: 34, 70: 34, 71: 35, 72: 36, 73: 37, 74: 38, 75: 39, 76: 40, 77: 41, 78: 42, 79: 42, 80: 42, 81: 43, 82: 43, 83: 43, 84: 43, 85: 44, 86: 44, 87: 44, 88: 45, 89: 45, 90: 45, 91: 46, 92: 46, 93: 46, 94: 47, 95: 48, 96: 49, 97: 49, 98: 49, 99: 50, 100: 50, 101: 50, 102: 50, 103: 51, 104: 52, 105: 53, 106: 54, 107: 54, 108: 54, 109: 54, 110: 55, 111: 55, 112: 55}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 36, 20: 40, 21: 41, 22: 42, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 50, 29: 54, 30: 57, 31: 60, 32: 63, 33: 66, 34: 70, 35: 71, 36: 72, 37: 73, 38: 74, 39: 75, 40: 76, 41: 77, 42: 80, 43: 84, 44: 87, 45: 90, 46: 93, 47: 94, 48: 95, 49: 98, 50: 102, 51: 103, 52: 104, 53: 105, 54: 109, 55: 112}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 19, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 28, 47: 29, 48: 30, 49: 30, 50: 30, 51: 30, 52: 30, 53: 31, 54: 32, 55: 32, 56: 33, 57: 33, 58: 33, 59: 34, 60: 34, 61: 34, 62: 34, 63: 35, 64: 36, 65: 37, 66: 38, 67: 39, 68: 40, 69: 41, 70: 42, 71: 42, 72: 43, 73: 44}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 37, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 45, 28: 46, 29: 47, 30: 52, 31: 53, 32: 55, 33: 58, 34: 62, 35: 63, 36: 64, 37: 65, 38: 66, 39: 67, 40: 68, 41: 69, 42: 71, 43: 72, 44: 73}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 19, 35: 19, 36: 19, 37: 20, 38: 20, 39: 20, 40: 20, 41: 21, 42: 22, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 28, 50: 28, 51: 29, 52: 29, 53: 29, 54: 29, 55: 30, 56: 30, 57: 30, 58: 31, 59: 31, 60: 31, 61: 32, 62: 32, 63: 32, 64: 33, 65: 33, 66: 33, 67: 34, 68: 34, 69: 34, 70: 34, 71: 35, 72: 36, 73: 37, 74: 38, 75: 39, 76: 40, 77: 41, 78: 42, 79: 42, 80: 42, 81: 43, 82: 43, 83: 43, 84: 43, 85: 44, 86: 44, 87: 44, 88: 45, 89: 45, 90: 45, 91: 46, 92: 46, 93: 46, 94: 47, 95: 48, 96: 49, 97: 49, 98: 49, 99: 50, 100: 50, 101: 50, 102: 50, 103: 51, 104: 52, 105: 53, 106: 54, 107: 54, 108: 54, 109: 54, 110: 55, 111: 55, 112: 55, 113: 56, 114: 56, 115: 56, 116: 57, 117: 57, 118: 57, 119: 58, 120: 58, 121: 58, 122: 59, 123: 59, 124: 59, 125: 60, 126: 60, 127: 60, 128: 60, 129: 61, 130: 62, 131: 63, 132: 64}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 36, 20: 40, 21: 41, 22: 42, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 50, 29: 54, 30: 57, 31: 60, 32: 63, 33: 66, 34: 70, 35: 71, 36: 72, 37: 73, 38: 74, 39: 75, 40: 76, 41: 77, 42: 80, 43: 84, 44: 87, 45: 90, 46: 93, 47: 94, 48: 95, 49: 98, 50: 102, 51: 103, 52: 104, 53: 105, 54: 109, 55: 112, 56: 115, 57: 118, 58: 121, 59: 124, 60: 128, 61: 129, 62: 130, 63: 131, 64: 132}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 19, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 28, 47: 29, 48: 30, 49: 30, 50: 30, 51: 30, 52: 30, 53: 31, 54: 32, 55: 32, 56: 33, 57: 33, 58: 33, 59: 34, 60: 34, 61: 34, 62: 34, 63: 35, 64: 36, 65: 37, 66: 38, 67: 39, 68: 40, 69: 41, 70: 42, 71: 42, 72: 43, 73: 44}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 37, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 45, 28: 46, 29: 47, 30: 52, 31: 53, 32: 55, 33: 58, 34: 62, 35: 63, 36: 64, 37: 65, 38: 66, 39: 67, 40: 68, 41: 69, 42: 71, 43: 72, 44: 73}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 64, Last requested goal index = 64, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 6.214324s, Solving = 2.794737s, Total = 9.009061s, Memory = (RSS = 2427.515625Mb, VMS = 2463.472656Mb), Step range = [112-132]), Calls = 13
Model :: Total atoms = 29125, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 20 :: Actions = 20                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,0))
Step 10:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,0))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 21:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(store_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(store_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 31:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 18] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 37:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,1))
Step 38:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,1))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 21] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Achieved Sub-goals:
        [Index = 21] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 42:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 44:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 45:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 46:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 47:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 48:
    Current Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 49:
    Current Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 50:
    Current Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 51:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 52:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 53:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 54:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 55:
    Current Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 56:
    Current Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 57:
    Current Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 58:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 59:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 60:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 61:
    Current Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 62:
    Current Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 63:
    Current Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 64:
    Current Sub-goals:
        [Index = 33] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,1))
Step 65:
    Current Sub-goals:
        [Index = 33] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,1))
Step 66:
    Current Sub-goals:
        [Index = 33] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 33] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,1))
Step 67:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,1))
Step 68:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,1))
Step 69:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 70:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 71:
    Current Sub-goals:
        [Index = 35] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Achieved Sub-goals:
        [Index = 35] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 72:
    Current Sub-goals:
        [Index = 36] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 36] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 36] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 36] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 73:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 74:
    Current Sub-goals:
        [Index = 38] talos : put(manipulator_end_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 38] talos : put(manipulator_end_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 75:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 39] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 39] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 76:
    Current Sub-goals:
        [Index = 40] talos : release(manipulator_end_2,(block,5)) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 40] talos : release(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 40] talos : release(manipulator_end_2,(block,5)) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 40] talos : release(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 77:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 41] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 41] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 41] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 78:
    Current Sub-goals:
        [Index = 42] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 79:
    Current Sub-goals:
        [Index = 42] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 80:
    Current Sub-goals:
        [Index = 42] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 42] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 81:
    Current Sub-goals:
        [Index = 43] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 82:
    Current Sub-goals:
        [Index = 43] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,0))
Step 83:
    Current Sub-goals:
        [Index = 43] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 84:
    Current Sub-goals:
        [Index = 43] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 43] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 85:
    Current Sub-goals:
        [Index = 44] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 86:
    Current Sub-goals:
        [Index = 44] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 87:
    Current Sub-goals:
        [Index = 44] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 44] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 88:
    Current Sub-goals:
        [Index = 45] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 89:
    Current Sub-goals:
        [Index = 45] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 90:
    Current Sub-goals:
        [Index = 45] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 45] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 91:
    Current Sub-goals:
        [Index = 46] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 92:
    Current Sub-goals:
        [Index = 46] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 93:
    Current Sub-goals:
        [Index = 46] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 46] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 94:
    Current Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 95:
    Current Sub-goals:
        [Index = 48] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 48] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 48] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 48] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 96:
    Current Sub-goals:
        [Index = 49] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 97:
    Current Sub-goals:
        [Index = 49] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 98:
    Current Sub-goals:
        [Index = 49] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 49] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 99:
    Current Sub-goals:
        [Index = 50] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 100:
    Current Sub-goals:
        [Index = 50] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 101:
    Current Sub-goals:
        [Index = 50] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 102:
    Current Sub-goals:
        [Index = 50] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 50] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 103:
    Current Sub-goals:
        [Index = 51] talos : configure(manipulator_end_2,aligned_with((block,4))) -> configuration(manipulator_end_2) = aligned_with((block,4))
    Achieved Sub-goals:
        [Index = 51] talos : configure(manipulator_end_2,aligned_with((block,4))) -> configuration(manipulator_end_2) = aligned_with((block,4))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 104:
    Current Sub-goals:
        [Index = 52] talos : grasp(manipulator_end_2,(block,4)) -> grasping(manipulator_end_2) = (block,4)
    Achieved Sub-goals:
        [Index = 52] talos : grasp(manipulator_end_2,(block,4)) -> grasping(manipulator_end_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 105:
    Current Sub-goals:
        [Index = 53] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 53] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 106:
    Current Sub-goals:
        [Index = 54] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 107:
    Current Sub-goals:
        [Index = 54] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 108:
    Current Sub-goals:
        [Index = 54] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 109:
    Current Sub-goals:
        [Index = 54] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 54] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 110:
    Current Sub-goals:
        [Index = 55] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 111:
    Current Sub-goals:
        [Index = 55] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 112:
    Current Sub-goals:
        [Index = 55] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 55] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 113:
    Current Sub-goals:
        [Index = 56] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 114:
    Current Sub-goals:
        [Index = 56] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 115:
    Current Sub-goals:
        [Index = 56] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 56] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 116:
    Current Sub-goals:
        [Index = 57] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 117:
    Current Sub-goals:
        [Index = 57] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 118:
    Current Sub-goals:
        [Index = 57] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 57] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 119:
    Current Sub-goals:
        [Index = 58] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 120:
    Current Sub-goals:
        [Index = 58] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 121:
    Current Sub-goals:
        [Index = 58] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 58] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 122:
    Current Sub-goals:
        [Index = 59] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,1))
Step 123:
    Current Sub-goals:
        [Index = 59] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,1))
Step 124:
    Current Sub-goals:
        [Index = 59] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 59] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,1))
Step 125:
    Current Sub-goals:
        [Index = 60] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,1))
Step 126:
    Current Sub-goals:
        [Index = 60] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 127:
    Current Sub-goals:
        [Index = 60] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 128:
    Current Sub-goals:
        [Index = 60] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 60] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 129:
    Current Sub-goals:
        [Index = 61] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Achieved Sub-goals:
        [Index = 61] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 130:
    Current Sub-goals:
        [Index = 62] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 62] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 131:
    Current Sub-goals:
        [Index = 63] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Achieved Sub-goals:
        [Index = 63] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 132:
    Current Sub-goals:
        [Index = 64] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Achieved Sub-goals:
        [Index = 64] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Value of end step of abstract plan to divide adjusted for right blend of current problem: end_step=132

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Monolevel problem 8 at level 1 solved.

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Online planning increment 8 finished.

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 3 : Total constraining sub-goal stages = 44 : Goals achieved = 44 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 8 : Total constraining sub-goal stages = 73 : Goals achieved = 64 : Goals unachieved = 9 : Complete = False

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 9 by method ground-first is [1-1].

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 9 at level 1:
Total Templated Partial Problems = 3, Problem Range = [7-9], Size = 26, Sub-goal Stage Range = [48-73]
Division points [total=2] : [(Index = 55, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 64, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [65-73]

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 132, chosen step range to extract = range(0, 133)

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 132, Total actions = 132, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 73, chosen step range to extract = range(0, 74)

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 132, Total actions = 132, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 44, chosen step range to extract = range(0, 45)

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 132, Total actions = 132, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 132, Total actions = 132, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [65-73], problem number = 9, increment number = 9

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 65)
	('last_sgoals', 73)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1721.7911130000002)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [65-73] : Concurrency disabled : Minimum search length bound enabled with value 140

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 65
last_sgoals = 73
start_step = 132
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 140

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[17-04-2022_10-27-49] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[17-04-2022_10-27-49] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 132 as problem start state.

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,3))', 'S': 132})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 132})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 132})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 132})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 132})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 132})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 132})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,3)', 'S': 132})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 132})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '((puzzle_room,1),5,0)', 'S': 132})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '((puzzle_room,1),5,0)', 'S': 132})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '((puzzle_room,1),5,0)', 'S': 132})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '((puzzle_room,1),5,0)', 'S': 132})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '((puzzle_room,1),5,0)', 'S': 132})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '((puzzle_room,1),5,0)', 'S': 132})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '((puzzle_room,1),5,0)', 'S': 132})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '((puzzle_room,1),5,0)', 'S': 132})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '((puzzle_room,1),5,0)', 'S': 132})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '((puzzle_room,1),5,0)', 'S': 132})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '((puzzle_room,1),5,0)', 'S': 132})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '((puzzle_room,1),5,0)', 'S': 132})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '((puzzle_room,1),5,0)', 'S': 132})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '((puzzle_room,1),5,0)', 'S': 132})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '((puzzle_room,1),5,0)', 'S': 132})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '((puzzle_room,1),5,0)', 'S': 132})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '((puzzle_room,1),5,0)', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 132})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 132})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 132})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 132})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 132})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 132})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 132})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 132})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 132})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 132})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 132})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 132})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 132})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,3))', 'S': 132})
Fluent({'L': 2, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 132})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 132})
Fluent({'L': 2, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 132})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 132})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 132})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 132})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_1)', 'V': '(block,3)', 'S': 132})
Fluent({'L': 2, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 132})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 132})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 132})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 132})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 132})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 132})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 132})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 132})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 132})
Fluent({'L': 2, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 132})
Fluent({'L': 2, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 132})
Fluent({'L': 2, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 132})
Fluent({'L': 2, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 132})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 132})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 132})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 132})
Fluent({'L': 2, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 132})
Fluent({'L': 2, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 132})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 132})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 132})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 132})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 132})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 132})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 132})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 132})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 132})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 132})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 132})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 132})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 132})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 132})

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 164 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 132).
holds(1, complete_tower(red,puzzle_room_table), false, 132).
holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 132).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 132).
holds(1, configuration(manipulator_limb_1), extended, 132).
holds(1, configuration(manipulator_limb_2), extended, 132).
holds(1, configuration(puzzle_room_door), open, 132).
holds(1, configuration(starting_room_door), closed, 132).
holds(1, configuration(store_room_door), open, 132).
holds(1, grasping(manipulator_end_1), (block,3), 132).
holds(1, grasping(manipulator_end_2), (block,4), 132).
holds(1, in((block,1)), ((puzzle_room,1),5,0), 132).
holds(1, in((block,2)), ((puzzle_room,1),5,0), 132).
holds(1, in((block,3)), ((puzzle_room,1),5,0), 132).
holds(1, in((block,4)), ((puzzle_room,1),5,0), 132).
holds(1, in((block,5)), ((puzzle_room,1),5,0), 132).
holds(1, in((block,6)), ((puzzle_room,1),5,0), 132).
holds(1, in(manipulator_arm_1), ((puzzle_room,1),5,0), 132).
holds(1, in(manipulator_arm_2), ((puzzle_room,1),5,0), 132).
holds(1, in(manipulator_end_1), ((puzzle_room,1),5,0), 132).
holds(1, in(manipulator_end_2), ((puzzle_room,1),5,0), 132).
holds(1, in(manipulator_limb_1), ((puzzle_room,1),5,0), 132).
holds(1, in(manipulator_limb_2), ((puzzle_room,1),5,0), 132).
holds(1, in(puzzle_room_table), ((puzzle_room,1),5,0), 132).
holds(1, in(puzzle_room_table_left), ((puzzle_room,1),5,0), 132).
holds(1, in(puzzle_room_table_middle), ((puzzle_room,1),5,0), 132).
holds(1, in(puzzle_room_table_right), ((puzzle_room,1),5,0), 132).
holds(1, in(talos), ((puzzle_room,1),5,0), 132).
holds(1, in_tower((block,1),(block,1)), true, 132).
holds(1, in_tower((block,1),(block,2)), false, 132).
holds(1, in_tower((block,1),(block,3)), false, 132).
holds(1, in_tower((block,1),(block,4)), false, 132).
holds(1, in_tower((block,1),(block,5)), false, 132).
holds(1, in_tower((block,1),(block,6)), false, 132).
holds(1, in_tower((block,2),(block,1)), false, 132).
holds(1, in_tower((block,2),(block,2)), true, 132).
holds(1, in_tower((block,2),(block,3)), false, 132).
holds(1, in_tower((block,2),(block,4)), false, 132).
holds(1, in_tower((block,2),(block,5)), false, 132).
holds(1, in_tower((block,2),(block,6)), false, 132).
holds(1, in_tower((block,3),(block,1)), false, 132).
holds(1, in_tower((block,3),(block,2)), false, 132).
holds(1, in_tower((block,3),(block,3)), true, 132).
holds(1, in_tower((block,3),(block,4)), false, 132).
holds(1, in_tower((block,3),(block,5)), false, 132).
holds(1, in_tower((block,3),(block,6)), false, 132).
holds(1, in_tower((block,4),(block,1)), false, 132).
holds(1, in_tower((block,4),(block,2)), false, 132).
holds(1, in_tower((block,4),(block,3)), false, 132).
holds(1, in_tower((block,4),(block,4)), false, 132).
holds(1, in_tower((block,4),(block,5)), false, 132).
holds(1, in_tower((block,4),(block,6)), false, 132).
holds(1, in_tower((block,5),(block,1)), false, 132).
holds(1, in_tower((block,5),(block,2)), false, 132).
holds(1, in_tower((block,5),(block,3)), false, 132).
holds(1, in_tower((block,5),(block,4)), false, 132).
holds(1, in_tower((block,5),(block,5)), false, 132).
holds(1, in_tower((block,5),(block,6)), false, 132).
holds(1, in_tower((block,6),(block,1)), false, 132).
holds(1, in_tower((block,6),(block,2)), false, 132).
holds(1, in_tower((block,6),(block,3)), false, 132).
holds(1, in_tower((block,6),(block,4)), false, 132).
holds(1, in_tower((block,6),(block,5)), true, 132).
holds(1, in_tower((block,6),(block,6)), true, 132).
holds(1, on((block,1)), puzzle_room_table_left, 132).
holds(1, on((block,2)), puzzle_room_table_right, 132).
holds(1, on((block,3)), puzzle_room_table_left, 132).
holds(1, on((block,4)), nothing, 132).
holds(1, on((block,5)), (block,6), 132).
holds(1, on((block,6)), puzzle_room_table_right, 132).
holds(1, tower_base((block,1),puzzle_room_table), true, 132).
holds(1, tower_base((block,2),puzzle_room_table), true, 132).
holds(1, tower_base((block,3),puzzle_room_table), true, 132).
holds(1, tower_base((block,4),puzzle_room_table), false, 132).
holds(1, tower_base((block,5),puzzle_room_table), false, 132).
holds(1, tower_base((block,6),puzzle_room_table), true, 132).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 132).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 132).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 132).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 132).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 132).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 132).
holds(2, complete_tower(blue,puzzle_room_table), false, 132).
holds(2, complete_tower(red,puzzle_room_table), false, 132).
holds(2, configuration(manipulator_end_1), aligned_with((block,3)), 132).
holds(2, configuration(manipulator_end_2), aligned_with((block,4)), 132).
holds(2, configuration(manipulator_limb_1), extended, 132).
holds(2, configuration(manipulator_limb_2), extended, 132).
holds(2, configuration(puzzle_room_door), open, 132).
holds(2, configuration(starting_room_door), closed, 132).
holds(2, configuration(store_room_door), open, 132).
holds(2, grasping(manipulator_end_1), (block,3), 132).
holds(2, grasping(manipulator_end_2), (block,4), 132).
holds(2, in((block,1)), (puzzle_room,1), 132).
holds(2, in((block,2)), (puzzle_room,1), 132).
holds(2, in((block,3)), (puzzle_room,1), 132).
holds(2, in((block,4)), (puzzle_room,1), 132).
holds(2, in((block,5)), (puzzle_room,1), 132).
holds(2, in((block,6)), (puzzle_room,1), 132).
holds(2, in(manipulator_arm_1), (puzzle_room,1), 132).
holds(2, in(manipulator_arm_2), (puzzle_room,1), 132).
holds(2, in(manipulator_end_1), (puzzle_room,1), 132).
holds(2, in(manipulator_end_2), (puzzle_room,1), 132).
holds(2, in(manipulator_limb_1), (puzzle_room,1), 132).
holds(2, in(manipulator_limb_2), (puzzle_room,1), 132).
holds(2, in(puzzle_room_table), (puzzle_room,1), 132).
holds(2, in(puzzle_room_table_left), (puzzle_room,1), 132).
holds(2, in(puzzle_room_table_middle), (puzzle_room,1), 132).
holds(2, in(puzzle_room_table_right), (puzzle_room,1), 132).
holds(2, in(talos), (puzzle_room,1), 132).
holds(2, in_tower((block,1),(block,1)), true, 132).
holds(2, in_tower((block,1),(block,2)), false, 132).
holds(2, in_tower((block,1),(block,3)), false, 132).
holds(2, in_tower((block,1),(block,4)), false, 132).
holds(2, in_tower((block,1),(block,5)), false, 132).
holds(2, in_tower((block,1),(block,6)), false, 132).
holds(2, in_tower((block,2),(block,1)), false, 132).
holds(2, in_tower((block,2),(block,2)), true, 132).
holds(2, in_tower((block,2),(block,3)), false, 132).
holds(2, in_tower((block,2),(block,4)), false, 132).
holds(2, in_tower((block,2),(block,5)), false, 132).
holds(2, in_tower((block,2),(block,6)), false, 132).
holds(2, in_tower((block,3),(block,1)), false, 132).
holds(2, in_tower((block,3),(block,2)), false, 132).
holds(2, in_tower((block,3),(block,3)), true, 132).
holds(2, in_tower((block,3),(block,4)), false, 132).
holds(2, in_tower((block,3),(block,5)), false, 132).
holds(2, in_tower((block,3),(block,6)), false, 132).
holds(2, in_tower((block,4),(block,1)), false, 132).
holds(2, in_tower((block,4),(block,2)), false, 132).
holds(2, in_tower((block,4),(block,3)), false, 132).
holds(2, in_tower((block,4),(block,4)), false, 132).
holds(2, in_tower((block,4),(block,5)), false, 132).
holds(2, in_tower((block,4),(block,6)), false, 132).
holds(2, in_tower((block,5),(block,1)), false, 132).
holds(2, in_tower((block,5),(block,2)), false, 132).
holds(2, in_tower((block,5),(block,3)), false, 132).
holds(2, in_tower((block,5),(block,4)), false, 132).
holds(2, in_tower((block,5),(block,5)), false, 132).
holds(2, in_tower((block,5),(block,6)), false, 132).
holds(2, in_tower((block,6),(block,1)), false, 132).
holds(2, in_tower((block,6),(block,2)), false, 132).
holds(2, in_tower((block,6),(block,3)), false, 132).
holds(2, in_tower((block,6),(block,4)), false, 132).
holds(2, in_tower((block,6),(block,5)), true, 132).
holds(2, in_tower((block,6),(block,6)), true, 132).
holds(2, on((block,1)), puzzle_room_table_left, 132).
holds(2, on((block,2)), puzzle_room_table_right, 132).
holds(2, on((block,3)), puzzle_room_table_left, 132).
holds(2, on((block,4)), nothing, 132).
holds(2, on((block,5)), (block,6), 132).
holds(2, on((block,6)), puzzle_room_table_right, 132).
holds(2, tower_base((block,1),puzzle_room_table), true, 132).
holds(2, tower_base((block,2),puzzle_room_table), true, 132).
holds(2, tower_base((block,3),puzzle_room_table), true, 132).
holds(2, tower_base((block,4),puzzle_room_table), false, 132).
holds(2, tower_base((block,5),puzzle_room_table), false, 132).
holds(2, tower_base((block,6),puzzle_room_table), true, 132).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 132).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 132).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 132).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 132).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 132).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 132).

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 308 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table_left, false).
final_goal(2, on((block,1)), puzzle_room_table_middle, false).
final_goal(2, on((block,1)), puzzle_room_table_right, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table_left, false).
final_goal(2, on((block,2)), puzzle_room_table_middle, false).
final_goal(2, on((block,2)), puzzle_room_table_right, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table_left, true).
final_goal(2, on((block,3)), puzzle_room_table_middle, false).
final_goal(2, on((block,3)), puzzle_room_table_right, false).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table_left, false).
final_goal(2, on((block,4)), puzzle_room_table_middle, false).
final_goal(2, on((block,4)), puzzle_room_table_right, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table_left, false).
final_goal(2, on((block,5)), puzzle_room_table_middle, false).
final_goal(2, on((block,5)), puzzle_room_table_right, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table_left, false).
final_goal(2, on((block,6)), puzzle_room_table_middle, false).
final_goal(2, on((block,6)), puzzle_room_table_right, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=140']

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'I': 65})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'I': 65})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,2)))', 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,2))', 'I': 66})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,2))', 'F': 'grasping(manipulator_end_1)', 'V': '(block,2)', 'I': 67})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 68})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,2))', 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'I': 69})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,2))', 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'I': 69})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,1)))', 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,1))', 'I': 70})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,1))', 'F': 'grasping(manipulator_end_1)', 'V': '(block,1)', 'I': 71})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 72})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 73})

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 11 rules into program part base:

sub_goal(2, talos, release(manipulator_end_1,(block,3)), configuration(manipulator_end_1), aligned_with(nothing), 65).
sub_goal(2, talos, release(manipulator_end_1,(block,3)), grasping(manipulator_end_1), nothing, 65).
sub_goal(2, talos, configure(manipulator_end_1,aligned_with((block,2))), configuration(manipulator_end_1), aligned_with((block,2)), 66).
sub_goal(2, talos, grasp(manipulator_end_1,(block,2)), grasping(manipulator_end_1), (block,2), 67).
sub_goal(2, talos, put(manipulator_end_1,(block,2),(block,3)), on((block,2)), (block,3), 68).
sub_goal(2, talos, release(manipulator_end_1,(block,2)), configuration(manipulator_end_1), aligned_with(nothing), 69).
sub_goal(2, talos, release(manipulator_end_1,(block,2)), grasping(manipulator_end_1), nothing, 69).
sub_goal(2, talos, configure(manipulator_end_1,aligned_with((block,1))), configuration(manipulator_end_1), aligned_with((block,1)), 70).
sub_goal(2, talos, grasp(manipulator_end_1,(block,1)), grasping(manipulator_end_1), (block,1), 71).
sub_goal(2, talos, put(manipulator_end_1,(block,1),(block,2)), on((block,1)), (block,2), 72).
sub_goal(2, talos, put(manipulator_end_2,(block,4),(block,5)), on((block,4)), (block,5), 73).

[17-04-2022_10-27-49] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=140']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001C09CF61820>]
	incrementor = SolveIncrementor(step_start=132, step_increase=1, step_increase_initial=9, step_end_min=141, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1721.7911130000002, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 132), range_=None), IncPart(name='plan_module', args=('#inc', 132, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 132, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 132, 65, 73, 'sequential', 'false'), range_=None)]

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 852 rules

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0053672999993068515s

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.172529s.

[17-04-2022_10-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025385s with result Satisfiable.

[17-04-2022_10-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[17-04-2022_10-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001C09BE80E50>

[17-04-2022_10-27-50] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2_DC.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 132)
	('last_sgoals', 73)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001C010961EE0>)
	('first_sgoals', 65)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001C09BE80E50>)

[17-04-2022_10-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 132). %* None *%
#program plan_module(#inc, 132, false, true). %* None *%
#program optimisation_module(#inc, 132, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 132, 65, 73, sequential, false). %* None *%

[17-04-2022_10-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =    131 : Current =    140
Incrementor step ends | Minimum  =    141 : Maximum =    300

[17-04-2022_10-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(140)]), ('state_module', [Number(132), Number(132)]), ('plan_module', [Number(132), Number(132), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(132), Number(132), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(132)]), ('action_preconditions', [Number(132)]), ('variable_relations', [Number(132)]), ('abstraction_mappings', [Number(132)]), ('conformance_module', [Number(132), Number(132), Number(65), Number(73), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(133), Number(132)]), ('plan_module', [Number(133), Number(132), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(133), Number(132), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(133)]), ('action_preconditions', [Number(133)]), ('variable_relations', [Number(133)]), ('abstraction_mappings', [Number(133)]), ('conformance_module', [Number(133), Number(132), Number(65), Number(73), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(134), Number(132)]), ('plan_module', [Number(134), Number(132), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(134), Number(132), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(134)]), ('action_preconditions', [Number(134)]), ('variable_relations', [Number(134)]), ('abstraction_mappings', [Number(134)]), ('conformance_module', [Number(134), Number(132), Number(65), Number(73), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(135), Number(132)]), ('plan_module', [Number(135), Number(132), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(135), Number(132), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(135)]), ('action_preconditions', [Number(135)]), ('variable_relations', [Number(135)]), ('abstraction_mappings', [Number(135)]), ('conformance_module', [Number(135), Number(132), Number(65), Number(73), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(136), Number(132)]), ('plan_module', [Number(136), Number(132), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(136), Number(132), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(136)]), ('action_preconditions', [Number(136)]), ('variable_relations', [Number(136)]), ('abstraction_mappings', [Number(136)]), ('conformance_module', [Number(136), Number(132), Number(65), Number(73), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(137), Number(132)]), ('plan_module', [Number(137), Number(132), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(137), Number(132), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(137)]), ('action_preconditions', [Number(137)]), ('variable_relations', [Number(137)]), ('abstraction_mappings', [Number(137)]), ('conformance_module', [Number(137), Number(132), Number(65), Number(73), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(138), Number(132)]), ('plan_module', [Number(138), Number(132), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(138), Number(132), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(138)]), ('action_preconditions', [Number(138)]), ('variable_relations', [Number(138)]), ('abstraction_mappings', [Number(138)]), ('conformance_module', [Number(138), Number(132), Number(65), Number(73), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(139), Number(132)]), ('plan_module', [Number(139), Number(132), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(139), Number(132), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(139)]), ('action_preconditions', [Number(139)]), ('variable_relations', [Number(139)]), ('abstraction_mappings', [Number(139)]), ('conformance_module', [Number(139), Number(132), Number(65), Number(73), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(140), Number(132)]), ('plan_module', [Number(140), Number(132), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(140), Number(132), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(140)]), ('action_preconditions', [Number(140)]), ('variable_relations', [Number(140)]), ('abstraction_mappings', [Number(140)]), ('conformance_module', [Number(140), Number(132), Number(65), Number(73), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.867456s.

[17-04-2022_10-27-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.501044s with result Unsatisfiable.

[17-04-2022_10-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.3684993000006216, Incremental time limit = None
Running cumulative time = 2.3684993000006216, Cumulative time limit = 1721.7911130000002
Used memory = (RSS = 2378.238281Mb, VMS = 2394.503906Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =    140 : Current =    141
Incrementor step ends | Minimum  =    141 : Maximum =    300

[17-04-2022_10-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(141)]), ('state_module', [Number(141), Number(132)]), ('plan_module', [Number(141), Number(132), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(141), Number(132), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(141)]), ('action_preconditions', [Number(141)]), ('variable_relations', [Number(141)]), ('abstraction_mappings', [Number(141)]), ('conformance_module', [Number(141), Number(132), Number(65), Number(73), Function('sequential', [], True), Function('false', [], True)])]

[17-04-2022_10-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.319034s.

[17-04-2022_10-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[17-04-2022_10-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.077279s with result Satisfiable.

[17-04-2022_10-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3963134000005084, Incremental time limit = None
Running cumulative time = 2.76481270000113, Cumulative time limit = 1721.7911130000002
Used memory = (RSS = 2385.710938Mb, VMS = 2407.195312Mb), Total system virtual memory = 16324.0078125Mb

[17-04-2022_10-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.186490s, Solving = 0.578323s, Total = 2.764813s, Memory = (RSS = 2385.710938Mb, VMS = 2407.195312Mb), Step range = [132-141]), Calls = 2
Final Model :: Total atoms = 26010, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[17-04-2022_10-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.867456s, Solving = 0.501044s, Total = 2.368499s, Memory = (RSS = 2378.238281Mb, VMS = 2394.503906Mb), Step range = [132-140]
2 : Statistics :: Grounding = 0.319034s, Solving = 0.077279s, Total = 0.396313s, Memory = (RSS = 2385.710938Mb, VMS = 2407.195312Mb), Step range = [141-141]

[17-04-2022_10-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.764813s due to: Stop condition reached.

[17-04-2022_10-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[17-04-2022_10-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[17-04-2022_10-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[17-04-2022_10-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[17-04-2022_10-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 19, 35: 19, 36: 19, 37: 20, 38: 20, 39: 20, 40: 20, 41: 21, 42: 22, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 28, 50: 28, 51: 29, 52: 29, 53: 29, 54: 29, 55: 30, 56: 30, 57: 30, 58: 31, 59: 31, 60: 31, 61: 32, 62: 32, 63: 32, 64: 33, 65: 33, 66: 33, 67: 34, 68: 34, 69: 34, 70: 34, 71: 35, 72: 36, 73: 37, 74: 38, 75: 39, 76: 40, 77: 41, 78: 42, 79: 42, 80: 42, 81: 43, 82: 43, 83: 43, 84: 43, 85: 44, 86: 44, 87: 44, 88: 45, 89: 45, 90: 45, 91: 46, 92: 46, 93: 46, 94: 47, 95: 48, 96: 49, 97: 49, 98: 49, 99: 50, 100: 50, 101: 50, 102: 50, 103: 51, 104: 52, 105: 53, 106: 54, 107: 54, 108: 54, 109: 54, 110: 55, 111: 55, 112: 55, 113: 56, 114: 56, 115: 56, 116: 57, 117: 57, 118: 57, 119: 58, 120: 58, 121: 58, 122: 59, 123: 59, 124: 59, 125: 60, 126: 60, 127: 60, 128: 60, 129: 61, 130: 62, 131: 63, 132: 64}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 36, 20: 40, 21: 41, 22: 42, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 50, 29: 54, 30: 57, 31: 60, 32: 63, 33: 66, 34: 70, 35: 71, 36: 72, 37: 73, 38: 74, 39: 75, 40: 76, 41: 77, 42: 80, 43: 84, 44: 87, 45: 90, 46: 93, 47: 94, 48: 95, 49: 98, 50: 102, 51: 103, 52: 104, 53: 105, 54: 109, 55: 112, 56: 115, 57: 118, 58: 121, 59: 124, 60: 128, 61: 129, 62: 130, 63: 131, 64: 132}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 19, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 28, 47: 29, 48: 30, 49: 30, 50: 30, 51: 30, 52: 30, 53: 31, 54: 32, 55: 32, 56: 33, 57: 33, 58: 33, 59: 34, 60: 34, 61: 34, 62: 34, 63: 35, 64: 36, 65: 37, 66: 38, 67: 39, 68: 40, 69: 41, 70: 42, 71: 42, 72: 43, 73: 44}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 37, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 45, 28: 46, 29: 47, 30: 52, 31: 53, 32: 55, 33: 58, 34: 62, 35: 63, 36: 64, 37: 65, 38: 66, 39: 67, 40: 68, 41: 69, 42: 71, 43: 72, 44: 73}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 10, 21: 10, 22: 11, 23: 11, 24: 11, 25: 12, 26: 12, 27: 12, 28: 13, 29: 14, 30: 15, 31: 16, 32: 17, 33: 18, 34: 19, 35: 19, 36: 19, 37: 20, 38: 20, 39: 20, 40: 20, 41: 21, 42: 22, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 28, 50: 28, 51: 29, 52: 29, 53: 29, 54: 29, 55: 30, 56: 30, 57: 30, 58: 31, 59: 31, 60: 31, 61: 32, 62: 32, 63: 32, 64: 33, 65: 33, 66: 33, 67: 34, 68: 34, 69: 34, 70: 34, 71: 35, 72: 36, 73: 37, 74: 38, 75: 39, 76: 40, 77: 41, 78: 42, 79: 42, 80: 42, 81: 43, 82: 43, 83: 43, 84: 43, 85: 44, 86: 44, 87: 44, 88: 45, 89: 45, 90: 45, 91: 46, 92: 46, 93: 46, 94: 47, 95: 48, 96: 49, 97: 49, 98: 49, 99: 50, 100: 50, 101: 50, 102: 50, 103: 51, 104: 52, 105: 53, 106: 54, 107: 54, 108: 54, 109: 54, 110: 55, 111: 55, 112: 55, 113: 56, 114: 56, 115: 56, 116: 57, 117: 57, 118: 57, 119: 58, 120: 58, 121: 58, 122: 59, 123: 59, 124: 59, 125: 60, 126: 60, 127: 60, 128: 60, 129: 61, 130: 62, 131: 63, 132: 64, 133: 65, 134: 66, 135: 67, 136: 68, 137: 69, 138: 70, 139: 71, 140: 72, 141: 73}
Sub-goal achievement steps: {1: 3, 2: 7, 3: 9, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18, 10: 21, 11: 24, 12: 27, 13: 28, 14: 29, 15: 30, 16: 31, 17: 32, 18: 33, 19: 36, 20: 40, 21: 41, 22: 42, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 50, 29: 54, 30: 57, 31: 60, 32: 63, 33: 66, 34: 70, 35: 71, 36: 72, 37: 73, 38: 74, 39: 75, 40: 76, 41: 77, 42: 80, 43: 84, 44: 87, 45: 90, 46: 93, 47: 94, 48: 95, 49: 98, 50: 102, 51: 103, 52: 104, 53: 105, 54: 109, 55: 112, 56: 115, 57: 118, 58: 121, 59: 124, 60: 128, 61: 129, 62: 130, 63: 131, 64: 132, 65: 133, 66: 134, 67: 135, 68: 136, 69: 137, 70: 138, 71: 139, 72: 140, 73: 141}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 14, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 19, 36: 19, 37: 19, 38: 20, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 26, 45: 27, 46: 28, 47: 29, 48: 30, 49: 30, 50: 30, 51: 30, 52: 30, 53: 31, 54: 32, 55: 32, 56: 33, 57: 33, 58: 33, 59: 34, 60: 34, 61: 34, 62: 34, 63: 35, 64: 36, 65: 37, 66: 38, 67: 39, 68: 40, 69: 41, 70: 42, 71: 42, 72: 43, 73: 44}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 22, 13: 23, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 37, 20: 38, 21: 39, 22: 40, 23: 41, 24: 42, 25: 43, 26: 44, 27: 45, 28: 46, 29: 47, 30: 52, 31: 53, 32: 55, 33: 58, 34: 62, 35: 63, 36: 64, 37: 65, 38: 66, 39: 67, 40: 68, 41: 69, 42: 71, 43: 72, 44: 73}

Level = 3 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 25, 9: 28, 10: 30, 11: 33, 12: 36, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 4 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 73, Last requested goal index = 73, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.186490s, Solving = 0.578323s, Total = 2.764813s, Memory = (RSS = 2385.710938Mb, VMS = 2407.195312Mb), Step range = [132-141]), Calls = 2
Model :: Total atoms = 26010, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 9 :: Actions = 9                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,0),2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Achieved Sub-goals:
        [Index = 1] talos : move((starting_room,1)) -> in(talos) = (starting_room,1)
    Planned actions:
        talos : move(((starting_room,1),3,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),4,0))
Step 5:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,0))
Step 6:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((starting_room,1),5,1))
Step 7:
    Current Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 2] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),4,0))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,0))
Step 9:
    Current Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 3] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,0))
Step 10:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,0))
Step 11:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 12:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 13:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 14:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(puzzle_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(puzzle_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_end_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 8] talos : release(manipulator_end_1,puzzle_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 9] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 21:
    Current Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 10] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 11] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(store_room_door_handle_outer)
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)) -> configuration(manipulator_end_1) = aligned_with(store_room_door_handle_outer)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_end_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 31:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 16] talos : release(manipulator_end_1,store_room_door_handle_outer) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 17] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 18] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 19] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 37:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,1))
Step 38:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,1))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 21] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Achieved Sub-goals:
        [Index = 21] talos : configure(manipulator_end_2,aligned_with((block,5))) -> configuration(manipulator_end_2) = aligned_with((block,5))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 42:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 44:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_end_1,aligned_with((block,6))) -> configuration(manipulator_end_1) = aligned_with((block,6))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 45:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 46:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 47:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 48:
    Current Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 49:
    Current Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 50:
    Current Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 28] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,0))
Step 51:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 52:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 53:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 54:
    Current Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 29] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 55:
    Current Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 56:
    Current Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 57:
    Current Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 30] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 58:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 59:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 60:
    Current Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 31] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 61:
    Current Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 62:
    Current Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 63:
    Current Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 32] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 64:
    Current Sub-goals:
        [Index = 33] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,1))
Step 65:
    Current Sub-goals:
        [Index = 33] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,1))
Step 66:
    Current Sub-goals:
        [Index = 33] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 33] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,1))
Step 67:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,1))
Step 68:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,1))
Step 69:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 70:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 71:
    Current Sub-goals:
        [Index = 35] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Achieved Sub-goals:
        [Index = 35] talos : put(manipulator_end_1,(block,6),puzzle_room_table_right) -> on((block,6)) = puzzle_room_table_right
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 72:
    Current Sub-goals:
        [Index = 36] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 36] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 36] talos : release(manipulator_end_1,(block,6)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 36] talos : release(manipulator_end_1,(block,6)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 73:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 74:
    Current Sub-goals:
        [Index = 38] talos : put(manipulator_end_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 38] talos : put(manipulator_end_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 75:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 39] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 39] talos : configure(manipulator_limb_1,retracted) -> configuration(manipulator_limb_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 76:
    Current Sub-goals:
        [Index = 40] talos : release(manipulator_end_2,(block,5)) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 40] talos : release(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = nothing
    Achieved Sub-goals:
        [Index = 40] talos : release(manipulator_end_2,(block,5)) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 40] talos : release(manipulator_end_2,(block,5)) -> grasping(manipulator_end_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 77:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 41] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 41] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 41] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 78:
    Current Sub-goals:
        [Index = 42] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 79:
    Current Sub-goals:
        [Index = 42] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),3,0))
Step 80:
    Current Sub-goals:
        [Index = 42] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 42] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),2,0))
Step 81:
    Current Sub-goals:
        [Index = 43] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,0))
Step 82:
    Current Sub-goals:
        [Index = 43] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,0))
Step 83:
    Current Sub-goals:
        [Index = 43] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 84:
    Current Sub-goals:
        [Index = 43] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 43] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 85:
    Current Sub-goals:
        [Index = 44] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 86:
    Current Sub-goals:
        [Index = 44] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 87:
    Current Sub-goals:
        [Index = 44] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 44] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 88:
    Current Sub-goals:
        [Index = 45] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 89:
    Current Sub-goals:
        [Index = 45] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 90:
    Current Sub-goals:
        [Index = 45] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 45] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 91:
    Current Sub-goals:
        [Index = 46] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 92:
    Current Sub-goals:
        [Index = 46] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 93:
    Current Sub-goals:
        [Index = 46] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 46] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 94:
    Current Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 47] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 95:
    Current Sub-goals:
        [Index = 48] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 48] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 48] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_end_2) = aligned_with(nothing)
        [Index = 48] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 96:
    Current Sub-goals:
        [Index = 49] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 97:
    Current Sub-goals:
        [Index = 49] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 98:
    Current Sub-goals:
        [Index = 49] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Achieved Sub-goals:
        [Index = 49] talos : move((store_room,0)) -> in(talos) = (store_room,0)
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 99:
    Current Sub-goals:
        [Index = 50] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 100:
    Current Sub-goals:
        [Index = 50] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 101:
    Current Sub-goals:
        [Index = 50] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),0,0))
Step 102:
    Current Sub-goals:
        [Index = 50] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 50] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 103:
    Current Sub-goals:
        [Index = 51] talos : configure(manipulator_end_2,aligned_with((block,4))) -> configuration(manipulator_end_2) = aligned_with((block,4))
    Achieved Sub-goals:
        [Index = 51] talos : configure(manipulator_end_2,aligned_with((block,4))) -> configuration(manipulator_end_2) = aligned_with((block,4))
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 104:
    Current Sub-goals:
        [Index = 52] talos : grasp(manipulator_end_2,(block,4)) -> grasping(manipulator_end_2) = (block,4)
    Achieved Sub-goals:
        [Index = 52] talos : grasp(manipulator_end_2,(block,4)) -> grasping(manipulator_end_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 105:
    Current Sub-goals:
        [Index = 53] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Achieved Sub-goals:
        [Index = 53] talos : configure(manipulator_limb_2,retracted) -> configuration(manipulator_limb_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 106:
    Current Sub-goals:
        [Index = 54] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),1,0))
Step 107:
    Current Sub-goals:
        [Index = 54] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,0))
Step 108:
    Current Sub-goals:
        [Index = 54] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,0),2,1))
Step 109:
    Current Sub-goals:
        [Index = 54] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Achieved Sub-goals:
        [Index = 54] talos : move((store_room,1)) -> in(talos) = (store_room,1)
    Planned actions:
        talos : move(((store_room,1),3,1))
Step 110:
    Current Sub-goals:
        [Index = 55] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),4,1))
Step 111:
    Current Sub-goals:
        [Index = 55] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((store_room,1),5,1))
Step 112:
    Current Sub-goals:
        [Index = 55] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Achieved Sub-goals:
        [Index = 55] talos : move((hallway,0)) -> in(talos) = (hallway,0)
    Planned actions:
        talos : move(((hallway,0),0,1))
Step 113:
    Current Sub-goals:
        [Index = 56] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),1,1))
Step 114:
    Current Sub-goals:
        [Index = 56] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,0),2,1))
Step 115:
    Current Sub-goals:
        [Index = 56] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Achieved Sub-goals:
        [Index = 56] talos : move((hallway,1)) -> in(talos) = (hallway,1)
    Planned actions:
        talos : move(((hallway,1),3,1))
Step 116:
    Current Sub-goals:
        [Index = 57] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),4,1))
Step 117:
    Current Sub-goals:
        [Index = 57] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,1),5,1))
Step 118:
    Current Sub-goals:
        [Index = 57] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Achieved Sub-goals:
        [Index = 57] talos : move((hallway,2)) -> in(talos) = (hallway,2)
    Planned actions:
        talos : move(((hallway,2),6,1))
Step 119:
    Current Sub-goals:
        [Index = 58] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),7,1))
Step 120:
    Current Sub-goals:
        [Index = 58] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((hallway,2),8,1))
Step 121:
    Current Sub-goals:
        [Index = 58] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Achieved Sub-goals:
        [Index = 58] talos : move((puzzle_room,0)) -> in(talos) = (puzzle_room,0)
    Planned actions:
        talos : move(((puzzle_room,0),0,1))
Step 122:
    Current Sub-goals:
        [Index = 59] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),1,1))
Step 123:
    Current Sub-goals:
        [Index = 59] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,0),2,1))
Step 124:
    Current Sub-goals:
        [Index = 59] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Achieved Sub-goals:
        [Index = 59] talos : move((puzzle_room,1)) -> in(talos) = (puzzle_room,1)
    Planned actions:
        talos : move(((puzzle_room,1),3,1))
Step 125:
    Current Sub-goals:
        [Index = 60] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,1))
Step 126:
    Current Sub-goals:
        [Index = 60] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),4,0))
Step 127:
    Current Sub-goals:
        [Index = 60] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move(((puzzle_room,1),5,0))
Step 128:
    Current Sub-goals:
        [Index = 60] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Achieved Sub-goals:
        [Index = 60] talos : configure(manipulator_limb_1,extended) -> configuration(manipulator_limb_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 129:
    Current Sub-goals:
        [Index = 61] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Achieved Sub-goals:
        [Index = 61] talos : configure(manipulator_end_1,aligned_with((block,3))) -> configuration(manipulator_end_1) = aligned_with((block,3))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 130:
    Current Sub-goals:
        [Index = 62] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Achieved Sub-goals:
        [Index = 62] talos : configure(manipulator_limb_2,extended) -> configuration(manipulator_limb_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 131:
    Current Sub-goals:
        [Index = 63] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Achieved Sub-goals:
        [Index = 63] talos : grasp(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 132:
    Current Sub-goals:
        [Index = 64] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Achieved Sub-goals:
        [Index = 64] talos : put(manipulator_end_1,(block,3),puzzle_room_table_left) -> on((block,3)) = puzzle_room_table_left
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 133:
    Current Sub-goals:
        [Index = 65] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 65] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 65] talos : release(manipulator_end_1,(block,3)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 65] talos : release(manipulator_end_1,(block,3)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 134:
    Current Sub-goals:
        [Index = 66] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Achieved Sub-goals:
        [Index = 66] talos : configure(manipulator_end_1,aligned_with((block,2))) -> configuration(manipulator_end_1) = aligned_with((block,2))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 135:
    Current Sub-goals:
        [Index = 67] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Achieved Sub-goals:
        [Index = 67] talos : grasp(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 136:
    Current Sub-goals:
        [Index = 68] talos : put(manipulator_end_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 68] talos : put(manipulator_end_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 137:
    Current Sub-goals:
        [Index = 69] talos : release(manipulator_end_1,(block,2)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 69] talos : release(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = nothing
    Achieved Sub-goals:
        [Index = 69] talos : release(manipulator_end_1,(block,2)) -> configuration(manipulator_end_1) = aligned_with(nothing)
        [Index = 69] talos : release(manipulator_end_1,(block,2)) -> grasping(manipulator_end_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 138:
    Current Sub-goals:
        [Index = 70] talos : configure(manipulator_end_1,aligned_with((block,1))) -> configuration(manipulator_end_1) = aligned_with((block,1))
    Achieved Sub-goals:
        [Index = 70] talos : configure(manipulator_end_1,aligned_with((block,1))) -> configuration(manipulator_end_1) = aligned_with((block,1))
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
Step 139:
    Current Sub-goals:
        [Index = 71] talos : grasp(manipulator_end_1,(block,1)) -> grasping(manipulator_end_1) = (block,1)
    Achieved Sub-goals:
        [Index = 71] talos : grasp(manipulator_end_1,(block,1)) -> grasping(manipulator_end_1) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
Step 140:
    Current Sub-goals:
        [Index = 72] talos : put(manipulator_end_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 72] talos : put(manipulator_end_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_1,(block,1),(block,2))
Step 141:
    Current Sub-goals:
        [Index = 73] talos : put(manipulator_end_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 73] talos : put(manipulator_end_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Default value of start step and end steps of abstract plan to divide: start_step=0, end_step=None

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Value of start step of abstract plan to divide adjusted for left blend of current problem: start_step=0

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Monolevel problem 9 at level 1 solved.

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Online planning increment 9 finished.

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 141, chosen step range to extract = range(0, 142)

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 141, Total actions = 141, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 73, chosen step range to extract = range(0, 74)

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 141, Total actions = 141, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 44, chosen step range to extract = range(0, 45)

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 141, Total actions = 141, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 141, Total actions = 141, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 141, Actions = 141

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Hierarchical planning summary: (Execution latency = 25.03810430000067, Average ground wait time = 9.213004800000212, Absolution time = 80.9736997000009)

     ========================================================================================================================================================================================================     
     |        Lvl = 4 (classic), LE =  20, AC =  20, CF = 1.0, GT =   1.30s, ST =   0.84s, OT = 0.00s, TT =   2.14s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)        |     
     |        Lvl = 3 (com-ref), LE =  44, AC =  44, CF = 1.0, GT =   4.21s, ST =   7.45s, OT = 0.00s, TT =  11.65s, EF = (LE = 2.2, AC = 2.2), ED = (LE = 2.1, AC = 2.1), EB = (LE = 1.0, AC = 1.0)        |     
     |        Lvl = 2 (com-ref), LE =  73, AC =  73, CF = 1.0, GT =   7.51s, ST =   3.05s, OT = 0.00s, TT =  10.57s, EF = (LE = 1.7, AC = 1.7), ED = (LE = 1.2, AC = 1.2), EB = (LE = 0.7, AC = 0.7)        |     
     |        Lvl = 1 (com-ref), LE = 141, AC = 141, CF = 1.0, GT =  41.72s, ST =  14.89s, OT = 0.00s, TT =  56.61s, EF = (LE = 1.9, AC = 1.9), ED = (LE = 1.2, AC = 1.2), EB = (LE = 0.6, AC = 0.7)        |     
     ========================================================================================================================================================================================================     

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 1:
Current total plan length = 141, chosen step range to extract = range(0, 142)

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 141, Total actions = 141, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 2:
Current total plan length = 73, chosen step range to extract = range(0, 74)

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 141, Total actions = 141, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 3:
Current total plan length = 44, chosen step range to extract = range(0, 45)

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 141, Total actions = 141, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan at level 4:
Current total plan length = 20, chosen step range to extract = range(0, 21)

[17-04-2022_10-27-53] DEBUG :: ASH Planner Main #1 >> Current concatenated monolevel plan progression:
Level [4]: Length = 20, Total actions = 20, Produced sub-goal stages = 20, Produced sub-goal literals = 20
Level [3]: Length = 44, Total actions = 44, Produced sub-goal stages = 44, Produced sub-goal literals = 44
Level [2]: Length = 73, Total actions = 73, Produced sub-goal stages = 73, Produced sub-goal literals = 84
Level [1]: Length = 141, Total actions = 141, Produced sub-goal stages = 0, Produced sub-goal literals = 0

[17-04-2022_10-27-53] DEBUG :: Experiment >> 

   ======================================================   
     Experimental run 50 : SUCCESSFUL : Time 98.086759s     
   ======================================================   

[17-04-2022_10-27-53] INFO :: Experiment >> 

  ################################################################################################  
        Completed 50 experimental runs : Real time 5242.424381s, Proccess time 9899.656250s         
  ################################################################################################  

[17-04-2022_10-27-53] DEBUG :: Experiment >> Refinement spread at run=0, level=3:
Root Mean Squared Errors: rmse_mchild=6.638523932321099, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=5.549999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-27-53] DEBUG :: Experiment >> Refinement spread at run=0, level=2:
Root Mean Squared Errors: rmse_mchild=2.069242984505595, rmse_div_indices=0.37267799624996445, rmse_div_steps=0.6871842709362778
Mean Absolute Errors: mae_mchild=1.7076446280991746, mae_div_indices=0.24999999999999956, mae_div_steps=0.41666666666666696

[17-04-2022_10-27-53] DEBUG :: Experiment >> Refinement spread at run=0, level=1:
Root Mean Squared Errors: rmse_mchild=4.0906461876933715, rmse_div_indices=0.8410751496789154, rmse_div_steps=4.385160160088756
Mean Absolute Errors: mae_mchild=3.229319579448524, mae_div_indices=0.6333333333333343, mae_div_steps=2.933333333333335

[17-04-2022_10-27-53] DEBUG :: Experiment >> Refinement spread at run=1, level=3:
Root Mean Squared Errors: rmse_mchild=7.292119033586876, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=6.499999999999998, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-27-53] DEBUG :: Experiment >> Refinement spread at run=1, level=2:
Root Mean Squared Errors: rmse_mchild=3.1068615697039186, rmse_div_indices=0.0, rmse_div_steps=2.477678124553083
Mean Absolute Errors: mae_mchild=2.7953514739229024, mae_div_indices=0.0, mae_div_steps=1.7499999999999991

[17-04-2022_10-27-54] DEBUG :: Experiment >> Refinement spread at run=1, level=1:
Root Mean Squared Errors: rmse_mchild=6.3219357520027, rmse_div_indices=2.432800550501112, rmse_div_steps=10.102621588625551
Mean Absolute Errors: mae_mchild=4.707200952192027, mae_div_indices=1.9999999999999987, mae_div_steps=7.700000000000003

[17-04-2022_10-27-54] DEBUG :: Experiment >> Refinement spread at run=2, level=3:
Root Mean Squared Errors: rmse_mchild=5.227810249043091, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=4.549999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-27-54] DEBUG :: Experiment >> Refinement spread at run=2, level=2:
Root Mean Squared Errors: rmse_mchild=4.005774499250172, rmse_div_indices=0.37267799624996445, rmse_div_steps=1.490711984999861
Mean Absolute Errors: mae_mchild=3.2747933884297513, mae_div_indices=0.24999999999999956, mae_div_steps=1.0000000000000009

[17-04-2022_10-27-54] DEBUG :: Experiment >> Refinement spread at run=2, level=1:
Root Mean Squared Errors: rmse_mchild=3.631377405029587, rmse_div_indices=1.3193713430042138, rmse_div_steps=5.121848624601606
Mean Absolute Errors: mae_mchild=2.873146931882152, mae_div_indices=1.0000000000000013, mae_div_steps=3.700000000000003

[17-04-2022_10-27-54] DEBUG :: Experiment >> Refinement spread at run=3, level=3:
Root Mean Squared Errors: rmse_mchild=6.545991139621255, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=6.049999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-27-54] DEBUG :: Experiment >> Refinement spread at run=3, level=2:
Root Mean Squared Errors: rmse_mchild=3.532427992282523, rmse_div_indices=0.37267799624996445, rmse_div_steps=1.7716909687891094
Mean Absolute Errors: mae_mchild=3.161157024793388, mae_div_indices=0.24999999999999956, mae_div_steps=1.2500000000000009

[17-04-2022_10-27-54] DEBUG :: Experiment >> Refinement spread at run=3, level=1:
Root Mean Squared Errors: rmse_mchild=5.2958450557554375, rmse_div_indices=1.7469550228474273, rmse_div_steps=7.4855416192372735
Mean Absolute Errors: mae_mchild=4.459936198161001, mae_div_indices=1.4000000000000015, mae_div_steps=6.100000000000003

[17-04-2022_10-27-55] DEBUG :: Experiment >> Refinement spread at run=4, level=3:
Root Mean Squared Errors: rmse_mchild=7.743707122560871, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=7.049999999999999, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-27-55] DEBUG :: Experiment >> Refinement spread at run=4, level=2:
Root Mean Squared Errors: rmse_mchild=3.785427262754156, rmse_div_indices=0.0, rmse_div_steps=2.477678124553083
Mean Absolute Errors: mae_mchild=3.3191609977324257, mae_div_indices=0.0, mae_div_steps=1.7499999999999991

[17-04-2022_10-27-55] DEBUG :: Experiment >> Refinement spread at run=4, level=1:
Root Mean Squared Errors: rmse_mchild=7.851768450738161, rmse_div_indices=2.432800550501112, rmse_div_steps=11.814617437106682
Mean Absolute Errors: mae_mchild=6.296568141241818, mae_div_indices=1.9999999999999987, mae_div_steps=9.200000000000003

[17-04-2022_10-27-55] DEBUG :: Experiment >> Refinement spread at run=5, level=3:
Root Mean Squared Errors: rmse_mchild=7.298287470359055, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=6.649999999999999, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-27-55] DEBUG :: Experiment >> Refinement spread at run=5, level=2:
Root Mean Squared Errors: rmse_mchild=3.265856139901239, rmse_div_indices=0.0, rmse_div_steps=1.8027756377319946
Mean Absolute Errors: mae_mchild=2.879251700680274, mae_div_indices=0.0, mae_div_steps=1.25

[17-04-2022_10-27-55] DEBUG :: Experiment >> Refinement spread at run=5, level=1:
Root Mean Squared Errors: rmse_mchild=5.797355066915998, rmse_div_indices=1.6832508230603453, rmse_div_steps=7.587270040447137
Mean Absolute Errors: mae_mchild=4.727158160050404, mae_div_indices=1.299999999999999, mae_div_steps=5.566666666666668

[17-04-2022_10-27-55] DEBUG :: Experiment >> Refinement spread at run=6, level=3:
Root Mean Squared Errors: rmse_mchild=7.244308110509932, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=6.699999999999998, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-27-55] DEBUG :: Experiment >> Refinement spread at run=6, level=2:
Root Mean Squared Errors: rmse_mchild=2.4439480827965543, rmse_div_indices=0.37267799624996445, rmse_div_steps=0.7071067811865476
Mean Absolute Errors: mae_mchild=2.070247933884296, mae_div_indices=0.24999999999999956, mae_div_steps=0.5

[17-04-2022_10-27-56] DEBUG :: Experiment >> Refinement spread at run=6, level=1:
Root Mean Squared Errors: rmse_mchild=4.930714019362791, rmse_div_indices=0.7071067811865489, rmse_div_steps=3.019688480376491
Mean Absolute Errors: mae_mchild=3.846044444444448, mae_div_indices=0.566666666666668, mae_div_steps=2.0222222222222173

[17-04-2022_10-27-56] DEBUG :: Experiment >> Refinement spread at run=7, level=3:
Root Mean Squared Errors: rmse_mchild=7.045565981523413, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=6.499999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-27-56] DEBUG :: Experiment >> Refinement spread at run=7, level=2:
Root Mean Squared Errors: rmse_mchild=2.7927277906012766, rmse_div_indices=0.37267799624996445, rmse_div_steps=1.118033988749895
Mean Absolute Errors: mae_mchild=2.3884297520661146, mae_div_indices=0.24999999999999956, mae_div_steps=0.75

[17-04-2022_10-27-56] DEBUG :: Experiment >> Refinement spread at run=7, level=1:
Root Mean Squared Errors: rmse_mchild=4.893890370958773, rmse_div_indices=1.0165300454651276, rmse_div_steps=3.474776838024858
Mean Absolute Errors: mae_mchild=3.8327111111111147, mae_div_indices=0.8333333333333341, mae_div_steps=2.5999999999999943

[17-04-2022_10-27-56] DEBUG :: Experiment >> Refinement spread at run=8, level=3:
Root Mean Squared Errors: rmse_mchild=5.612931497889493, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=4.799999999999999, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-27-56] DEBUG :: Experiment >> Refinement spread at run=8, level=2:
Root Mean Squared Errors: rmse_mchild=2.4226312351005794, rmse_div_indices=0.0, rmse_div_steps=1.6749792701868147
Mean Absolute Errors: mae_mchild=2.074263038548753, mae_div_indices=0.0, mae_div_steps=0.916666666666667

[17-04-2022_10-27-56] DEBUG :: Experiment >> Refinement spread at run=8, level=1:
Root Mean Squared Errors: rmse_mchild=2.964044267710627, rmse_div_indices=1.4089659985908758, rmse_div_steps=3.6433602723411895
Mean Absolute Errors: mae_mchild=2.3844475302519346, mae_div_indices=0.9333333333333342, mae_div_steps=2.733333333333334

[17-04-2022_10-27-57] DEBUG :: Experiment >> Refinement spread at run=9, level=3:
Root Mean Squared Errors: rmse_mchild=5.39444158370447, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=4.299999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-27-57] DEBUG :: Experiment >> Refinement spread at run=9, level=2:
Root Mean Squared Errors: rmse_mchild=2.0764694090237814, rmse_div_indices=0.37267799624996445, rmse_div_steps=0.9428090415820638
Mean Absolute Errors: mae_mchild=1.7303719008264473, mae_div_indices=0.24999999999999956, mae_div_steps=0.666666666666667

[17-04-2022_10-27-57] DEBUG :: Experiment >> Refinement spread at run=9, level=1:
Root Mean Squared Errors: rmse_mchild=4.047893204735652, rmse_div_indices=0.8210201423071644, rmse_div_steps=4.2604990144174275
Mean Absolute Errors: mae_mchild=3.1729815512795096, mae_div_indices=0.6222222222222229, mae_div_steps=2.6777777777777794

[17-04-2022_10-27-57] DEBUG :: Experiment >> Refinement spread at run=10, level=3:
Root Mean Squared Errors: rmse_mchild=5.560575509783137, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=4.799999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-27-57] DEBUG :: Experiment >> Refinement spread at run=10, level=2:
Root Mean Squared Errors: rmse_mchild=3.7767981870169516, rmse_div_indices=0.37267799624996445, rmse_div_steps=1.490711984999861
Mean Absolute Errors: mae_mchild=3.2066115702479334, mae_div_indices=0.24999999999999956, mae_div_steps=1.0000000000000009

[17-04-2022_10-27-57] DEBUG :: Experiment >> Refinement spread at run=10, level=1:
Root Mean Squared Errors: rmse_mchild=3.6654780083689937, rmse_div_indices=1.3193713430042138, rmse_div_steps=5.121848624601606
Mean Absolute Errors: mae_mchild=2.905423156314503, mae_div_indices=1.0000000000000013, mae_div_steps=3.700000000000003

[17-04-2022_10-27-58] DEBUG :: Experiment >> Refinement spread at run=11, level=3:
Root Mean Squared Errors: rmse_mchild=6.473793323855804, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=5.549999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-27-58] DEBUG :: Experiment >> Refinement spread at run=11, level=2:
Root Mean Squared Errors: rmse_mchild=2.932742983106206, rmse_div_indices=0.37267799624996445, rmse_div_steps=0.7453559924999289
Mean Absolute Errors: mae_mchild=2.4576446280991746, mae_div_indices=0.24999999999999956, mae_div_steps=0.4999999999999991

[17-04-2022_10-27-58] DEBUG :: Experiment >> Refinement spread at run=11, level=1:
Root Mean Squared Errors: rmse_mchild=3.088877217981371, rmse_div_indices=0.5340273262532405, rmse_div_steps=2.872603671210466
Mean Absolute Errors: mae_mchild=2.5417575877802028, mae_div_indices=0.36666666666666714, mae_div_steps=2.0666666666666664

[17-04-2022_10-27-58] DEBUG :: Experiment >> Refinement spread at run=12, level=3:
Root Mean Squared Errors: rmse_mchild=5.768015256567894, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=5.049999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-27-58] DEBUG :: Experiment >> Refinement spread at run=12, level=2:
Root Mean Squared Errors: rmse_mchild=3.1511099316991276, rmse_div_indices=0.37267799624996445, rmse_div_steps=1.490711984999861
Mean Absolute Errors: mae_mchild=2.592975206611569, mae_div_indices=0.24999999999999956, mae_div_steps=1.0000000000000009

[17-04-2022_10-27-58] DEBUG :: Experiment >> Refinement spread at run=12, level=1:
Root Mean Squared Errors: rmse_mchild=3.6570211532774652, rmse_div_indices=1.3193713430042138, rmse_div_steps=5.121848624601606
Mean Absolute Errors: mae_mchild=2.883655470069429, mae_div_indices=1.0000000000000013, mae_div_steps=3.700000000000003

[17-04-2022_10-27-58] DEBUG :: Experiment >> Refinement spread at run=13, level=3:
Root Mean Squared Errors: rmse_mchild=6.820190613172039, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=6.199999999999998, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-27-58] DEBUG :: Experiment >> Refinement spread at run=13, level=2:
Root Mean Squared Errors: rmse_mchild=2.6894400308458724, rmse_div_indices=0.0, rmse_div_steps=0.8498365855987983
Mean Absolute Errors: mae_mchild=2.1706349206349196, mae_div_indices=0.0, mae_div_steps=0.5000000000000009

[17-04-2022_10-27-59] DEBUG :: Experiment >> Refinement spread at run=13, level=1:
Root Mean Squared Errors: rmse_mchild=4.060090025966528, rmse_div_indices=0.6382847385042263, rmse_div_steps=3.6923344016128006
Mean Absolute Errors: mae_mchild=3.1587539876149355, mae_div_indices=0.42222222222222355, mae_div_steps=2.633333333333336

[17-04-2022_10-27-59] DEBUG :: Experiment >> Refinement spread at run=14, level=3:
Root Mean Squared Errors: rmse_mchild=6.024118192731612, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=4.9499999999999975, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-27-59] DEBUG :: Experiment >> Refinement spread at run=14, level=2:
Root Mean Squared Errors: rmse_mchild=2.5137534906132384, rmse_div_indices=0.37267799624996445, rmse_div_steps=0.8975274678557508
Mean Absolute Errors: mae_mchild=2.0051652892561975, mae_div_indices=0.24999999999999956, mae_div_steps=0.583333333333333

[17-04-2022_10-27-59] DEBUG :: Experiment >> Refinement spread at run=14, level=1:
Root Mean Squared Errors: rmse_mchild=3.5383060470891077, rmse_div_indices=0.7649739768025996, rmse_div_steps=3.351616525399845
Mean Absolute Errors: mae_mchild=2.793206980671797, mae_div_indices=0.5999999999999993, mae_div_steps=2.2333333333333334

[17-04-2022_10-27-59] DEBUG :: Experiment >> Refinement spread at run=15, level=3:
Root Mean Squared Errors: rmse_mchild=7.411140263144396, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=6.699999999999998, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-27-59] DEBUG :: Experiment >> Refinement spread at run=15, level=2:
Root Mean Squared Errors: rmse_mchild=3.3845135503923047, rmse_div_indices=0.0, rmse_div_steps=1.8027756377319946
Mean Absolute Errors: mae_mchild=2.9506802721088454, mae_div_indices=0.0, mae_div_steps=1.25

[17-04-2022_10-27-59] DEBUG :: Experiment >> Refinement spread at run=15, level=1:
Root Mean Squared Errors: rmse_mchild=5.78930635334925, rmse_div_indices=1.6832508230603453, rmse_div_steps=7.587270040447137
Mean Absolute Errors: mae_mchild=4.727158160050404, mae_div_indices=1.299999999999999, mae_div_steps=5.566666666666668

[17-04-2022_10-28-00] DEBUG :: Experiment >> Refinement spread at run=16, level=3:
Root Mean Squared Errors: rmse_mchild=6.1717096496837875, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=5.049999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-00] DEBUG :: Experiment >> Refinement spread at run=16, level=2:
Root Mean Squared Errors: rmse_mchild=2.7665262253179335, rmse_div_indices=0.37267799624996445, rmse_div_steps=0.8975274678557508
Mean Absolute Errors: mae_mchild=2.186983471074379, mae_div_indices=0.24999999999999956, mae_div_steps=0.583333333333333

[17-04-2022_10-28-00] DEBUG :: Experiment >> Refinement spread at run=16, level=1:
Root Mean Squared Errors: rmse_mchild=3.471271799200107, rmse_div_indices=0.7649739768025996, rmse_div_steps=3.351616525399845
Mean Absolute Errors: mae_mchild=2.7384124601238518, mae_div_indices=0.5999999999999993, mae_div_steps=2.2333333333333334

[17-04-2022_10-28-00] DEBUG :: Experiment >> Refinement spread at run=17, level=3:
Root Mean Squared Errors: rmse_mchild=7.953301201388011, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=7.249999999999998, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-00] DEBUG :: Experiment >> Refinement spread at run=17, level=2:
Root Mean Squared Errors: rmse_mchild=3.022324969908752, rmse_div_indices=0.0, rmse_div_steps=2.1730674684008817
Mean Absolute Errors: mae_mchild=2.6763038548752833, mae_div_indices=0.0, mae_div_steps=1.4999999999999991

[17-04-2022_10-28-00] DEBUG :: Experiment >> Refinement spread at run=17, level=1:
Root Mean Squared Errors: rmse_mchild=6.342908918853126, rmse_div_indices=1.919683615907887, rmse_div_steps=9.390696735875633
Mean Absolute Errors: mae_mchild=4.749454473318788, mae_div_indices=1.4999999999999987, mae_div_steps=6.6444444444444475

[17-04-2022_10-28-01] DEBUG :: Experiment >> Refinement spread at run=18, level=3:
Root Mean Squared Errors: rmse_mchild=7.953301201388011, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=7.249999999999998, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-01] DEBUG :: Experiment >> Refinement spread at run=18, level=2:
Root Mean Squared Errors: rmse_mchild=3.0675655539557054, rmse_div_indices=0.0, rmse_div_steps=2.1730674684008817
Mean Absolute Errors: mae_mchild=2.700113378684807, mae_div_indices=0.0, mae_div_steps=1.4999999999999991

[17-04-2022_10-28-01] DEBUG :: Experiment >> Refinement spread at run=18, level=1:
Root Mean Squared Errors: rmse_mchild=5.179403918924072, rmse_div_indices=1.919683615907887, rmse_div_steps=7.2958638713746256
Mean Absolute Errors: mae_mchild=3.983535012894271, mae_div_indices=1.4999999999999987, mae_div_steps=5.222222222222217

[17-04-2022_10-28-01] DEBUG :: Experiment >> Refinement spread at run=19, level=3:
Root Mean Squared Errors: rmse_mchild=6.523802572120036, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=5.499999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-01] DEBUG :: Experiment >> Refinement spread at run=19, level=2:
Root Mean Squared Errors: rmse_mchild=2.426129710444357, rmse_div_indices=0.37267799624996445, rmse_div_steps=1.3743685418725538
Mean Absolute Errors: mae_mchild=1.9349173553719, mae_div_indices=0.24999999999999956, mae_div_steps=0.833333333333333

[17-04-2022_10-28-01] DEBUG :: Experiment >> Refinement spread at run=19, level=1:
Root Mean Squared Errors: rmse_mchild=3.540002745874028, rmse_div_indices=1.245733459393241, rmse_div_steps=3.9157800414902435
Mean Absolute Errors: mae_mchild=2.793206980671797, mae_div_indices=0.9666666666666657, mae_div_steps=3.0000000000000004

[17-04-2022_10-28-01] DEBUG :: Experiment >> Refinement spread at run=20, level=3:
Root Mean Squared Errors: rmse_mchild=5.355371135598353, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=4.1999999999999975, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-01] DEBUG :: Experiment >> Refinement spread at run=20, level=2:
Root Mean Squared Errors: rmse_mchild=2.40710681589756, rmse_div_indices=0.37267799624996445, rmse_div_steps=1.3743685418725538
Mean Absolute Errors: mae_mchild=1.9245867768595029, mae_div_indices=0.24999999999999956, mae_div_steps=0.833333333333333

[17-04-2022_10-28-02] DEBUG :: Experiment >> Refinement spread at run=20, level=1:
Root Mean Squared Errors: rmse_mchild=3.400076163972018, rmse_div_indices=1.245733459393241, rmse_div_steps=3.9157800414902435
Mean Absolute Errors: mae_mchild=2.6973165697128927, mae_div_indices=0.9666666666666657, mae_div_steps=3.0000000000000004

[17-04-2022_10-28-02] DEBUG :: Experiment >> Refinement spread at run=21, level=3:
Root Mean Squared Errors: rmse_mchild=6.437390775772431, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=5.299999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-02] DEBUG :: Experiment >> Refinement spread at run=21, level=2:
Root Mean Squared Errors: rmse_mchild=2.3165658360442225, rmse_div_indices=0.37267799624996445, rmse_div_steps=0.8975274678557508
Mean Absolute Errors: mae_mchild=1.8667355371900811, mae_div_indices=0.24999999999999956, mae_div_steps=0.583333333333333

[17-04-2022_10-28-02] DEBUG :: Experiment >> Refinement spread at run=21, level=1:
Root Mean Squared Errors: rmse_mchild=3.5330782820005906, rmse_div_indices=0.7649739768025996, rmse_div_steps=3.351616525399845
Mean Absolute Errors: mae_mchild=2.779508350534811, mae_div_indices=0.5999999999999993, mae_div_steps=2.2333333333333334

[17-04-2022_10-28-02] DEBUG :: Experiment >> Refinement spread at run=22, level=3:
Root Mean Squared Errors: rmse_mchild=6.297618597533514, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=5.1999999999999975, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-02] DEBUG :: Experiment >> Refinement spread at run=22, level=2:
Root Mean Squared Errors: rmse_mchild=2.051191449776536, rmse_div_indices=0.37267799624996445, rmse_div_steps=0.6871842709362778
Mean Absolute Errors: mae_mchild=1.7076446280991746, mae_div_indices=0.24999999999999956, mae_div_steps=0.41666666666666696

[17-04-2022_10-28-02] DEBUG :: Experiment >> Refinement spread at run=22, level=1:
Root Mean Squared Errors: rmse_mchild=4.081081613674582, rmse_div_indices=0.8410751496789154, rmse_div_steps=4.385160160088756
Mean Absolute Errors: mae_mchild=3.201150565364017, mae_div_indices=0.6333333333333343, mae_div_steps=2.933333333333335

[17-04-2022_10-28-03] DEBUG :: Experiment >> Refinement spread at run=23, level=3:
Root Mean Squared Errors: rmse_mchild=6.000833275470997, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=5.249999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-03] DEBUG :: Experiment >> Refinement spread at run=23, level=2:
Root Mean Squared Errors: rmse_mchild=3.4839878713341257, rmse_div_indices=0.37267799624996445, rmse_div_steps=1.490711984999861
Mean Absolute Errors: mae_mchild=2.7975206611570234, mae_div_indices=0.24999999999999956, mae_div_steps=1.0000000000000009

[17-04-2022_10-28-03] DEBUG :: Experiment >> Refinement spread at run=23, level=1:
Root Mean Squared Errors: rmse_mchild=3.6666808827351387, rmse_div_indices=1.3193713430042138, rmse_div_steps=5.121848624601606
Mean Absolute Errors: mae_mchild=2.9142428222931107, mae_div_indices=1.0000000000000013, mae_div_steps=3.700000000000003

[17-04-2022_10-28-03] DEBUG :: Experiment >> Refinement spread at run=24, level=3:
Root Mean Squared Errors: rmse_mchild=7.0099928673287515, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=6.499999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-03] DEBUG :: Experiment >> Refinement spread at run=24, level=2:
Root Mean Squared Errors: rmse_mchild=1.893810601681519, rmse_div_indices=0.37267799624996445, rmse_div_steps=0.8975274678557498
Mean Absolute Errors: mae_mchild=1.569214876033056, mae_div_indices=0.24999999999999956, mae_div_steps=0.583333333333333

[17-04-2022_10-28-03] DEBUG :: Experiment >> Refinement spread at run=24, level=1:
Root Mean Squared Errors: rmse_mchild=4.468294931897819, rmse_div_indices=0.9925649526278781, rmse_div_steps=2.588435821108958
Mean Absolute Errors: mae_mchild=3.443235128541941, mae_div_indices=0.7333333333333322, mae_div_steps=1.6333333333333342

[17-04-2022_10-28-04] DEBUG :: Experiment >> Refinement spread at run=25, level=3:
Root Mean Squared Errors: rmse_mchild=5.670978751503129, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=4.599999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-04] DEBUG :: Experiment >> Refinement spread at run=25, level=2:
Root Mean Squared Errors: rmse_mchild=2.6325893830037614, rmse_div_indices=0.37267799624996445, rmse_div_steps=1.3743685418725538
Mean Absolute Errors: mae_mchild=2.0960743801652884, mae_div_indices=0.24999999999999956, mae_div_steps=0.833333333333333

[17-04-2022_10-28-04] DEBUG :: Experiment >> Refinement spread at run=25, level=1:
Root Mean Squared Errors: rmse_mchild=3.52946474853434, rmse_div_indices=1.245733459393241, rmse_div_steps=3.9157800414902435
Mean Absolute Errors: mae_mchild=2.779508350534811, mae_div_indices=0.9666666666666657, mae_div_steps=3.0000000000000004

[17-04-2022_10-28-04] DEBUG :: Experiment >> Refinement spread at run=26, level=3:
Root Mean Squared Errors: rmse_mchild=6.504229393248672, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=5.949999999999998, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-04] DEBUG :: Experiment >> Refinement spread at run=26, level=2:
Root Mean Squared Errors: rmse_mchild=2.4572497515815863, rmse_div_indices=0.0, rmse_div_steps=0.8498365855987983
Mean Absolute Errors: mae_mchild=2.003968253968253, mae_div_indices=0.0, mae_div_steps=0.5000000000000009

[17-04-2022_10-28-04] DEBUG :: Experiment >> Refinement spread at run=26, level=1:
Root Mean Squared Errors: rmse_mchild=4.020168706297909, rmse_div_indices=0.6382847385042263, rmse_div_steps=3.6923344016128006
Mean Absolute Errors: mae_mchild=3.1341715143554123, mae_div_indices=0.42222222222222355, mae_div_steps=2.633333333333336

[17-04-2022_10-28-04] DEBUG :: Experiment >> Refinement spread at run=27, level=3:
Root Mean Squared Errors: rmse_mchild=5.316954015223377, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=4.249999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-04] DEBUG :: Experiment >> Refinement spread at run=27, level=2:
Root Mean Squared Errors: rmse_mchild=1.9457386156240464, rmse_div_indices=0.37267799624996445, rmse_div_steps=0.9428090415820638
Mean Absolute Errors: mae_mchild=1.5940082644628104, mae_div_indices=0.24999999999999956, mae_div_steps=0.666666666666667

[17-04-2022_10-28-05] DEBUG :: Experiment >> Refinement spread at run=27, level=1:
Root Mean Squared Errors: rmse_mchild=4.075098440059014, rmse_div_indices=0.8210201423071644, rmse_div_steps=4.2604990144174275
Mean Absolute Errors: mae_mchild=3.201150565364017, mae_div_indices=0.6222222222222229, mae_div_steps=2.6777777777777794

[17-04-2022_10-28-05] DEBUG :: Experiment >> Refinement spread at run=28, level=3:
Root Mean Squared Errors: rmse_mchild=5.579426493825327, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=4.4499999999999975, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-05] DEBUG :: Experiment >> Refinement spread at run=28, level=2:
Root Mean Squared Errors: rmse_mchild=1.9742008530705444, rmse_div_indices=0.37267799624996445, rmse_div_steps=0.9428090415820638
Mean Absolute Errors: mae_mchild=1.6621900826446292, mae_div_indices=0.24999999999999956, mae_div_steps=0.666666666666667

[17-04-2022_10-28-05] DEBUG :: Experiment >> Refinement spread at run=28, level=1:
Root Mean Squared Errors: rmse_mchild=4.057560457430211, rmse_div_indices=0.8210201423071644, rmse_div_steps=4.2604990144174275
Mean Absolute Errors: mae_mchild=3.1870660583217636, mae_div_indices=0.6222222222222229, mae_div_steps=2.6777777777777794

[17-04-2022_10-28-05] DEBUG :: Experiment >> Refinement spread at run=29, level=3:
Root Mean Squared Errors: rmse_mchild=7.716540675717324, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=7.049999999999999, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-05] DEBUG :: Experiment >> Refinement spread at run=29, level=2:
Root Mean Squared Errors: rmse_mchild=2.7919649043659, rmse_div_indices=0.0, rmse_div_steps=1.5811388300841898
Mean Absolute Errors: mae_mchild=2.284013605442178, mae_div_indices=0.0, mae_div_steps=1.0

[17-04-2022_10-28-05] DEBUG :: Experiment >> Refinement spread at run=29, level=1:
Root Mean Squared Errors: rmse_mchild=6.050384728223349, rmse_div_indices=1.3165611772087655, rmse_div_steps=7.81854395841257
Mean Absolute Errors: mae_mchild=4.6620457886998565, mae_div_indices=0.9999999999999989, mae_div_steps=5.233333333333336

[17-04-2022_10-28-06] DEBUG :: Experiment >> Refinement spread at run=30, level=3:
Root Mean Squared Errors: rmse_mchild=5.802585630561603, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=4.849999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-06] DEBUG :: Experiment >> Refinement spread at run=30, level=2:
Root Mean Squared Errors: rmse_mchild=2.5293218475046735, rmse_div_indices=0.37267799624996445, rmse_div_steps=0.8975274678557508
Mean Absolute Errors: mae_mchild=2.015495867768594, mae_div_indices=0.24999999999999956, mae_div_steps=0.583333333333333

[17-04-2022_10-28-06] DEBUG :: Experiment >> Refinement spread at run=30, level=1:
Root Mean Squared Errors: rmse_mchild=3.4787508731519488, rmse_div_indices=0.7649739768025996, rmse_div_steps=3.351616525399845
Mean Absolute Errors: mae_mchild=2.752111090260838, mae_div_indices=0.5999999999999993, mae_div_steps=2.2333333333333334

[17-04-2022_10-28-06] DEBUG :: Experiment >> Refinement spread at run=31, level=3:
Root Mean Squared Errors: rmse_mchild=6.303967004989793, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=5.1999999999999975, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-06] DEBUG :: Experiment >> Refinement spread at run=31, level=2:
Root Mean Squared Errors: rmse_mchild=2.1363031906342442, rmse_div_indices=0.37267799624996445, rmse_div_steps=0.6871842709362778
Mean Absolute Errors: mae_mchild=1.75309917355372, mae_div_indices=0.24999999999999956, mae_div_steps=0.41666666666666696

[17-04-2022_10-28-06] DEBUG :: Experiment >> Refinement spread at run=31, level=1:
Root Mean Squared Errors: rmse_mchild=4.070763668145875, rmse_div_indices=0.8410751496789154, rmse_div_steps=4.385160160088756
Mean Absolute Errors: mae_mchild=3.229319579448524, mae_div_indices=0.6333333333333343, mae_div_steps=2.933333333333335

[17-04-2022_10-28-06] DEBUG :: Experiment >> Refinement spread at run=32, level=3:
Root Mean Squared Errors: rmse_mchild=8.632207133752061, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=7.799999999999999, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-06] DEBUG :: Experiment >> Refinement spread at run=32, level=2:
Root Mean Squared Errors: rmse_mchild=2.7919649043659, rmse_div_indices=0.0, rmse_div_steps=1.5811388300841898
Mean Absolute Errors: mae_mchild=2.284013605442178, mae_div_indices=0.0, mae_div_steps=1.0

[17-04-2022_10-28-07] DEBUG :: Experiment >> Refinement spread at run=32, level=1:
Root Mean Squared Errors: rmse_mchild=5.997508175886114, rmse_div_indices=1.3165611772087655, rmse_div_steps=7.81854395841257
Mean Absolute Errors: mae_mchild=4.61856752783029, mae_div_indices=0.9999999999999989, mae_div_steps=5.233333333333336

[17-04-2022_10-28-07] DEBUG :: Experiment >> Refinement spread at run=33, level=3:
Root Mean Squared Errors: rmse_mchild=6.302380502635491, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=5.1999999999999975, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-07] DEBUG :: Experiment >> Refinement spread at run=33, level=2:
Root Mean Squared Errors: rmse_mchild=2.226750866506535, rmse_div_indices=0.37267799624996445, rmse_div_steps=0.6871842709362778
Mean Absolute Errors: mae_mchild=1.7985537190082654, mae_div_indices=0.24999999999999956, mae_div_steps=0.41666666666666696

[17-04-2022_10-28-07] DEBUG :: Experiment >> Refinement spread at run=33, level=1:
Root Mean Squared Errors: rmse_mchild=4.074368183658996, rmse_div_indices=0.8410751496789154, rmse_div_steps=4.385160160088756
Mean Absolute Errors: mae_mchild=3.201150565364017, mae_div_indices=0.6333333333333343, mae_div_steps=2.933333333333335

[17-04-2022_10-28-07] DEBUG :: Experiment >> Refinement spread at run=34, level=3:
Root Mean Squared Errors: rmse_mchild=5.483611948342077, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=4.849999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-07] DEBUG :: Experiment >> Refinement spread at run=34, level=2:
Root Mean Squared Errors: rmse_mchild=2.7215375303173035, rmse_div_indices=0.37267799624996445, rmse_div_steps=1.490711984999861
Mean Absolute Errors: mae_mchild=2.3202479338842963, mae_div_indices=0.24999999999999956, mae_div_steps=1.0000000000000009

[17-04-2022_10-28-07] DEBUG :: Experiment >> Refinement spread at run=34, level=1:
Root Mean Squared Errors: rmse_mchild=3.6737366232327004, rmse_div_indices=1.3193713430042138, rmse_div_steps=5.121848624601606
Mean Absolute Errors: mae_mchild=2.9191217864514893, mae_div_indices=1.0000000000000013, mae_div_steps=3.700000000000003

[17-04-2022_10-28-08] DEBUG :: Experiment >> Refinement spread at run=35, level=3:
Root Mean Squared Errors: rmse_mchild=5.484523680320834, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=4.179999999999998, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-08] DEBUG :: Experiment >> Refinement spread at run=35, level=2:
Root Mean Squared Errors: rmse_mchild=1.8067109745209795, rmse_div_indices=0.37267799624996445, rmse_div_steps=0.6871842709362778
Mean Absolute Errors: mae_mchild=1.5030991735537194, mae_div_indices=0.24999999999999956, mae_div_steps=0.41666666666666696

[17-04-2022_10-28-08] DEBUG :: Experiment >> Refinement spread at run=35, level=1:
Root Mean Squared Errors: rmse_mchild=3.9922807881821343, rmse_div_indices=0.8410751496789154, rmse_div_steps=4.385160160088756
Mean Absolute Errors: mae_mchild=3.1729815512795096, mae_div_indices=0.6333333333333343, mae_div_steps=2.933333333333335

[17-04-2022_10-28-08] DEBUG :: Experiment >> Refinement spread at run=36, level=3:
Root Mean Squared Errors: rmse_mchild=7.743707122560871, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=7.049999999999999, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-08] DEBUG :: Experiment >> Refinement spread at run=36, level=2:
Root Mean Squared Errors: rmse_mchild=3.191586516106985, rmse_div_indices=0.0, rmse_div_steps=1.8027756377319946
Mean Absolute Errors: mae_mchild=2.736394557823131, mae_div_indices=0.0, mae_div_steps=1.25

[17-04-2022_10-28-08] DEBUG :: Experiment >> Refinement spread at run=36, level=1:
Root Mean Squared Errors: rmse_mchild=7.105539589055981, rmse_div_indices=1.6832508230603453, rmse_div_steps=9.625006012504139
Mean Absolute Errors: mae_mchild=5.700903171602609, mae_div_indices=1.299999999999999, mae_div_steps=7.100000000000003

[17-04-2022_10-28-08] DEBUG :: Experiment >> Refinement spread at run=37, level=3:
Root Mean Squared Errors: rmse_mchild=5.877499468311333, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=5.399999999999999, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-09] DEBUG :: Experiment >> Refinement spread at run=37, level=2:
Root Mean Squared Errors: rmse_mchild=2.7135023932355846, rmse_div_indices=0.0, rmse_div_steps=1.8027756377319946
Mean Absolute Errors: mae_mchild=2.4030612244897975, mae_div_indices=0.0, mae_div_steps=1.25

[17-04-2022_10-28-09] DEBUG :: Experiment >> Refinement spread at run=37, level=1:
Root Mean Squared Errors: rmse_mchild=4.544689681245222, rmse_div_indices=1.6832508230603453, rmse_div_steps=6.603590493618411
Mean Absolute Errors: mae_mchild=3.6853602184415077, mae_div_indices=1.299999999999999, mae_div_steps=5.200000000000003

[17-04-2022_10-28-09] DEBUG :: Experiment >> Refinement spread at run=38, level=3:
Root Mean Squared Errors: rmse_mchild=8.512637664085085, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=7.699999999999998, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-09] DEBUG :: Experiment >> Refinement spread at run=38, level=2:
Root Mean Squared Errors: rmse_mchild=2.553342480578988, rmse_div_indices=0.0, rmse_div_steps=1.5811388300841898
Mean Absolute Errors: mae_mchild=2.164965986394559, mae_div_indices=0.0, mae_div_steps=1.0

[17-04-2022_10-28-09] DEBUG :: Experiment >> Refinement spread at run=38, level=1:
Root Mean Squared Errors: rmse_mchild=5.063179909923408, rmse_div_indices=1.3165611772087655, rmse_div_steps=5.850925852660702
Mean Absolute Errors: mae_mchild=4.045368620037805, mae_div_indices=0.9999999999999989, mae_div_steps=3.9666666666666686

[17-04-2022_10-28-09] DEBUG :: Experiment >> Refinement spread at run=39, level=3:
Root Mean Squared Errors: rmse_mchild=5.5398555937858145, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=4.349999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-09] DEBUG :: Experiment >> Refinement spread at run=39, level=2:
Root Mean Squared Errors: rmse_mchild=2.6180299040523565, rmse_div_indices=0.37267799624996445, rmse_div_steps=1.3743685418725538
Mean Absolute Errors: mae_mchild=2.0836776859504123, mae_div_indices=0.24999999999999956, mae_div_steps=0.833333333333333

[17-04-2022_10-28-09] DEBUG :: Experiment >> Refinement spread at run=39, level=1:
Root Mean Squared Errors: rmse_mchild=3.4204357539437624, rmse_div_indices=1.245733459393241, rmse_div_steps=3.9157800414902435
Mean Absolute Errors: mae_mchild=2.7247138299868654, mae_div_indices=0.9666666666666657, mae_div_steps=3.0000000000000004

[17-04-2022_10-28-10] DEBUG :: Experiment >> Refinement spread at run=40, level=3:
Root Mean Squared Errors: rmse_mchild=5.6378187271319735, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=4.849999999999999, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-10] DEBUG :: Experiment >> Refinement spread at run=40, level=2:
Root Mean Squared Errors: rmse_mchild=2.4703647892543943, rmse_div_indices=0.0, rmse_div_steps=1.6749792701868147
Mean Absolute Errors: mae_mchild=2.0980725623582765, mae_div_indices=0.0, mae_div_steps=0.916666666666667

[17-04-2022_10-28-10] DEBUG :: Experiment >> Refinement spread at run=40, level=1:
Root Mean Squared Errors: rmse_mchild=2.9776326787849277, rmse_div_indices=1.4089659985908758, rmse_div_steps=3.6433602723411895
Mean Absolute Errors: mae_mchild=2.3917873437809964, mae_div_indices=0.9333333333333342, mae_div_steps=2.733333333333334

[17-04-2022_10-28-10] DEBUG :: Experiment >> Refinement spread at run=41, level=3:
Root Mean Squared Errors: rmse_mchild=7.494664769020692, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=6.849999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-10] DEBUG :: Experiment >> Refinement spread at run=41, level=2:
Root Mean Squared Errors: rmse_mchild=2.7203985336377077, rmse_div_indices=0.37267799624996445, rmse_div_steps=1.0671873729054735
Mean Absolute Errors: mae_mchild=2.378099173553721, mae_div_indices=0.24999999999999956, mae_div_steps=0.7499999999999991

[17-04-2022_10-28-10] DEBUG :: Experiment >> Refinement spread at run=41, level=1:
Root Mean Squared Errors: rmse_mchild=4.553414609524253, rmse_div_indices=0.9869519107201079, rmse_div_steps=5.130157747917553
Mean Absolute Errors: mae_mchild=3.7270382860543534, mae_div_indices=0.7222222222222214, mae_div_steps=3.999999999999998

[17-04-2022_10-28-11] DEBUG :: Experiment >> Refinement spread at run=42, level=3:
Root Mean Squared Errors: rmse_mchild=5.665686189686116, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=4.599999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-11] DEBUG :: Experiment >> Refinement spread at run=42, level=2:
Root Mean Squared Errors: rmse_mchild=2.425703868199567, rmse_div_indices=0.37267799624996445, rmse_div_steps=0.8975274678557508
Mean Absolute Errors: mae_mchild=1.9824380165289242, mae_div_indices=0.24999999999999956, mae_div_steps=0.583333333333333

[17-04-2022_10-28-11] DEBUG :: Experiment >> Refinement spread at run=42, level=1:
Root Mean Squared Errors: rmse_mchild=3.4921567213306965, rmse_div_indices=0.7649739768025996, rmse_div_steps=3.351616525399845
Mean Absolute Errors: mae_mchild=2.752111090260838, mae_div_indices=0.5999999999999993, mae_div_steps=2.2333333333333334

[17-04-2022_10-28-11] DEBUG :: Experiment >> Refinement spread at run=43, level=3:
Root Mean Squared Errors: rmse_mchild=6.820190613172039, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=6.199999999999998, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-11] DEBUG :: Experiment >> Refinement spread at run=43, level=2:
Root Mean Squared Errors: rmse_mchild=2.0466729080244894, rmse_div_indices=0.0, rmse_div_steps=0.23570226039551626
Mean Absolute Errors: mae_mchild=1.5651927437641724, mae_div_indices=0.0, mae_div_steps=0.16666666666666696

[17-04-2022_10-28-11] DEBUG :: Experiment >> Refinement spread at run=43, level=1:
Root Mean Squared Errors: rmse_mchild=3.8656006620545376, rmse_div_indices=0.29186501192363845, rmse_div_steps=2.971469271190538
Mean Absolute Errors: mae_mchild=3.0194405871850822, mae_div_indices=0.23333333333333428, mae_div_steps=2.0666666666666664

[17-04-2022_10-28-11] DEBUG :: Experiment >> Refinement spread at run=44, level=3:
Root Mean Squared Errors: rmse_mchild=7.829750953893742, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=7.149999999999999, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-11] DEBUG :: Experiment >> Refinement spread at run=44, level=2:
Root Mean Squared Errors: rmse_mchild=3.3676100472119908, rmse_div_indices=0.0, rmse_div_steps=2.477678124553083
Mean Absolute Errors: mae_mchild=2.9143990929705215, mae_div_indices=0.0, mae_div_steps=1.7499999999999991

[17-04-2022_10-28-11] DEBUG :: Experiment >> Refinement spread at run=44, level=1:
Root Mean Squared Errors: rmse_mchild=6.359322600069885, rmse_div_indices=2.432800550501112, rmse_div_steps=10.102621588625551
Mean Absolute Errors: mae_mchild=4.735369966276534, mae_div_indices=1.9999999999999987, mae_div_steps=7.700000000000003

[17-04-2022_10-28-12] DEBUG :: Experiment >> Refinement spread at run=45, level=3:
Root Mean Squared Errors: rmse_mchild=7.234638899074368, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=6.699999999999998, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-12] DEBUG :: Experiment >> Refinement spread at run=45, level=2:
Root Mean Squared Errors: rmse_mchild=2.750610375537859, rmse_div_indices=0.37267799624996445, rmse_div_steps=0.7071067811865476
Mean Absolute Errors: mae_mchild=2.305785123966941, mae_div_indices=0.24999999999999956, mae_div_steps=0.5

[17-04-2022_10-28-12] DEBUG :: Experiment >> Refinement spread at run=45, level=1:
Root Mean Squared Errors: rmse_mchild=4.890310904302586, rmse_div_indices=0.7071067811865489, rmse_div_steps=3.019688480376491
Mean Absolute Errors: mae_mchild=3.8193777777777815, mae_div_indices=0.566666666666668, mae_div_steps=2.0222222222222173

[17-04-2022_10-28-12] DEBUG :: Experiment >> Refinement spread at run=46, level=3:
Root Mean Squared Errors: rmse_mchild=7.152621896899065, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=6.599999999999999, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-12] DEBUG :: Experiment >> Refinement spread at run=46, level=2:
Root Mean Squared Errors: rmse_mchild=2.836951789252938, rmse_div_indices=0.37267799624996445, rmse_div_steps=1.118033988749895
Mean Absolute Errors: mae_mchild=2.4194214876033047, mae_div_indices=0.24999999999999956, mae_div_steps=0.75

[17-04-2022_10-28-12] DEBUG :: Experiment >> Refinement spread at run=46, level=1:
Root Mean Squared Errors: rmse_mchild=4.914679447743678, rmse_div_indices=1.0165300454651276, rmse_div_steps=3.474776838024858
Mean Absolute Errors: mae_mchild=3.846044444444448, mae_div_indices=0.8333333333333341, mae_div_steps=2.5999999999999943

[17-04-2022_10-28-13] DEBUG :: Experiment >> Refinement spread at run=47, level=3:
Root Mean Squared Errors: rmse_mchild=5.463515351859092, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=4.329999999999998, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-13] DEBUG :: Experiment >> Refinement spread at run=47, level=2:
Root Mean Squared Errors: rmse_mchild=2.06399426211644, rmse_div_indices=0.37267799624996445, rmse_div_steps=0.9428090415820638
Mean Absolute Errors: mae_mchild=1.7076446280991746, mae_div_indices=0.24999999999999956, mae_div_steps=0.666666666666667

[17-04-2022_10-28-13] DEBUG :: Experiment >> Refinement spread at run=47, level=1:
Root Mean Squared Errors: rmse_mchild=3.9631810715023845, rmse_div_indices=0.8210201423071644, rmse_div_steps=4.2604990144174275
Mean Absolute Errors: mae_mchild=3.158897044237256, mae_div_indices=0.6222222222222229, mae_div_steps=2.6777777777777794

[17-04-2022_10-28-13] DEBUG :: Experiment >> Refinement spread at run=48, level=3:
Root Mean Squared Errors: rmse_mchild=5.499999999999998, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=4.849999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-13] DEBUG :: Experiment >> Refinement spread at run=48, level=2:
Root Mean Squared Errors: rmse_mchild=3.636612207413298, rmse_div_indices=0.37267799624996445, rmse_div_steps=1.490711984999861
Mean Absolute Errors: mae_mchild=3.0475206611570234, mae_div_indices=0.24999999999999956, mae_div_steps=1.0000000000000009

[17-04-2022_10-28-13] DEBUG :: Experiment >> Refinement spread at run=48, level=1:
Root Mean Squared Errors: rmse_mchild=3.6114795808116673, rmse_div_indices=1.3193713430042138, rmse_div_steps=5.121848624601606
Mean Absolute Errors: mae_mchild=2.873146931882152, mae_div_indices=1.0000000000000013, mae_div_steps=3.700000000000003

[17-04-2022_10-28-14] DEBUG :: Experiment >> Refinement spread at run=49, level=3:
Root Mean Squared Errors: rmse_mchild=7.4182208109492125, rmse_div_indices=0.0, rmse_div_steps=0.0
Mean Absolute Errors: mae_mchild=6.849999999999997, mae_div_indices=0.0, mae_div_steps=0.0

[17-04-2022_10-28-14] DEBUG :: Experiment >> Refinement spread at run=49, level=2:
Root Mean Squared Errors: rmse_mchild=2.5722514015405387, rmse_div_indices=0.37267799624996445, rmse_div_steps=0.8975274678557498
Mean Absolute Errors: mae_mchild=2.096074380165287, mae_div_indices=0.24999999999999956, mae_div_steps=0.583333333333333

[17-04-2022_10-28-14] DEBUG :: Experiment >> Refinement spread at run=49, level=1:
Root Mean Squared Errors: rmse_mchild=4.4650600352524625, rmse_div_indices=0.9925649526278781, rmse_div_steps=2.588435821108958
Mean Absolute Errors: mae_mchild=3.470632388815914, mae_div_indices=0.7333333333333322, mae_div_steps=1.6333333333333342

[17-04-2022_10-28-14] INFO :: Experiment >> 

   ======================================================   
                    Experimental Results                    
   ======================================================   

     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     
             Concatenated Plan Level-Wise Means             

       LE      AC  QL_SCORE         GT         ST   OT         TT         LT         CT         WT    MET_PA  TI_SCORE          RSS          VMS     GRADE
0   20.00   20.00  1.000000   1.298068   0.927028  0.0   2.225095   2.225095   2.225095   2.225095  0.000000  1.000000  1560.014844  1570.606094  1.000000
1   43.32   43.32  0.970000   4.076330   8.785810  0.0  12.862140  15.087235  15.087235  15.087235  0.000000  0.897122  1602.838984  1614.151094  0.671509
2   71.84   71.84  0.933124   7.393268   3.369257  0.0  10.762525  19.384159  25.849760   8.758358  0.143598  0.880628  1620.138828  1637.186016  0.821829
3  143.64  143.64  0.898806  43.137670  18.355021  0.0  61.492691  26.921292  87.342451   9.939004  0.509001  0.802566  1671.109453  1698.079141  0.721491

     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     
      Concatenated Plan Level-Wise Standard Deviation       

         LE        AC  QL_SCORE        GT        ST   OT        TT        LT        CT        WT    MET_PA  TI_SCORE         RSS         VMS     GRADE
0  0.000000  0.000000  0.000000  0.004418  0.308838  0.0  0.308945  0.308945  0.308945  0.308945  0.000000  0.000000  477.344741  479.679237  0.000000
1  0.957036  0.957036  0.021751  0.156358  4.893255  0.0  4.990130  5.002775  5.002775  5.002775  0.000000  0.019045  477.100576  479.476889  0.067389
2  1.670390  1.670390  0.021752  0.223116  0.603937  0.0  0.684736  5.079715  5.066910  1.691251  0.010733  0.013806  471.665812  473.627710  0.026432
3  4.109521  4.109521  0.025943  1.523861  3.557942  0.0  4.541044  5.031335  6.734011  0.745853  0.043387  0.011123  468.848203  471.446503  0.027250

[17-04-2022_10-28-14] INFO :: __main__ >> Saving results to excel file: ./experiments/results/ASH_Excel_2022-04-17_08-57-16_PL2_DC_hcr_online_1_3_3_min_bound_preach_opt.xlsx

[17-04-2022_10-28-24] INFO :: __main__ >> Saving results to data file: ./experiments/results/ASH_Data_2022-04-17_08-57-16_PL2_DC_hcr_online_1_3_3_min_bound_preach_opt.dat

[17-04-2022_10-28-24] INFO :: __main__ >> Saving results to figure file: ./experiments/results/ASH_Figure_2022-04-17_08-57-16_PL2_DC_hcr_online_1_3_3_min_bound_preach_opt.png

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999.

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-24] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[17-04-2022_10-28-25] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[17-04-2022_10-28-28] INFO :: __main__ >> Overall time: Real = 5471.7738314, Process = 10258.703125

[17-04-2022_10-28-28] INFO :: __main__ >> Exiting with code 0

